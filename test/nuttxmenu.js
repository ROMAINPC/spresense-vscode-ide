var nuttxmenudata = {"prompt": "Nuttx/$ARCH Configuration", "cond": "y", "children": [{"type": 31, "dep": "y", "prompt": "Build Setup", "cond": "y", "children": [{"type": 3, "name": "EXPERIMENTAL", "value": "n", "user_value": 0, "dep": "y", "prompt": "Prompt for development and/or incomplete code/drivers", "cond": "y"}, {"type": 3, "name": "DEFAULT_SMALL", "value": "n", "user_value": 0, "dep": "y", "prompt": "Default to smallest size", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "When options are present, the default value for certain options will\nbe the one the results in the smallest size (at a loss of featurs).\nThe default is a fuller feature set at a larger size.\n\nNOTE: This option does not prevent you from overriding the default\nto select another alternative.  Nor does it affect the settings that\nhave already been selected in your configuration file.  This applies\nonly to new settings that require a default value."}, {"type": 4, "user_value": 2, "dep": "y", "prompt": "Build Host Platform", "cond": "y", "defaults": [{"name": "HOST_LINUX", "default": "y", "cond": "y"}], "children": [{"type": 3, "name": "HOST_LINUX", "value": "y", "user_value": 2, "dep": "y", "prompt": "Linux", "cond": "y"}, {"type": 3, "name": "HOST_OSX", "value": "n", "user_value": 0, "dep": "y", "prompt": "OSX", "cond": "y"}, {"type": 3, "name": "HOST_WINDOWS", "value": "n", "user_value": 0, "dep": "y", "prompt": "Windows", "cond": "y"}, {"type": 3, "name": "HOST_OTHER", "value": "n", "user_value": 0, "dep": "y", "prompt": "Other", "cond": "y"}]}, {"type": 3, "name": "TOOLCHAIN_WINDOWS", "value": "n", "user_value": null, "rev_dep": "(WINDOWS_NATIVE && y) || (WINDOWS_CYGWIN && y) || (WINDOWS_MSYS && y) || (WINDOWS_OTHER && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "HOST_WINDOWS"}], "help": "Selected internally if the selected Windows environment is compatible\nwith the use of Windows native toolchains."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Windows Build Environment", "cond": "HOST_WINDOWS", "defaults": [{"name": "WINDOWS_CYGWIN", "default": "n", "cond": "HOST_WINDOWS"}], "children": [{"type": 3, "name": "WINDOWS_NATIVE", "value": "n", "user_value": null, "dep": "n", "prompt": "Windows Native", "cond": "y", "selects": [{"symbol": "TOOLCHAIN_WINDOWS", "cond": "y"}], "help": "Build natively in a CMD.exe environment with Windows style paths\n(like C:\\cgywin\\home)"}, {"type": 3, "name": "WINDOWS_CYGWIN", "value": "n", "user_value": null, "dep": "n", "prompt": "Cygwin", "cond": "y", "selects": [{"symbol": "TOOLCHAIN_WINDOWS", "cond": "y"}], "help": "Build natively in a Cygwin environment with POSIX style paths (like\n/cygdrive/c/Program Files)"}, {"type": 3, "name": "WINDOWS_UBUNTU", "value": "n", "user_value": null, "dep": "n", "prompt": "Ubuntu under Windows 10", "cond": "y", "help": "Build natively in an Unbuntu shell under Windoes 10 environment with\nPOSIX style paths (like /mnt/c/Program Files)"}, {"type": 3, "name": "WINDOWS_MSYS", "value": "n", "user_value": null, "dep": "n", "prompt": "MSYS", "cond": "y", "selects": [{"symbol": "TOOLCHAIN_WINDOWS", "cond": "y"}], "help": "Build natively in a Cygwin environment with POSIX style paths (like\n/cygdrive/c/cgywin/home)"}, {"type": 3, "name": "WINDOWS_OTHER", "value": "n", "user_value": null, "dep": "n", "prompt": "Windows POSIX-like environment", "cond": "y", "selects": [{"symbol": "TOOLCHAIN_WINDOWS", "cond": "y"}], "help": "Build natively in another POSIX-like environment.  Additional\nsupport may be necessary"}]}, {"type": 3, "name": "WINDOWS_MKLINK", "value": "n", "user_value": null, "dep": "n", "prompt": "Use mklink", "cond": "WINDOWS_NATIVE", "defaults": [{"name": "n", "default": "n", "cond": "WINDOWS_NATIVE"}], "help": "Use the mklink command to set up symbolic links when NuttX is\nconfigured.  Otherwise, configuration directories will be copied to\nestablish the configuration.\n\nIf directories are copied, then some confusion can result (\"Which\nversion of the file did I modify?\").  In that case, it is recommended\nthat you re-build using 'make clean_context all'.  That will cause the\nconfigured directories to be recopied on each build.\n\nNOTE: This option also (1) that you have administrator privileges, (2)\nthat you are using Windows 2000 or better, and (3) that you are using\nthe NTFS file system.  Select 'n' is that is not the case."}, {"type": 31, "dep": "y", "prompt": "Build Configuration", "cond": "y", "children": [{"type": 47, "name": "APPS_DIR", "value": "../sdk/tools/empty_apps", "user_value": "../sdk/tools/empty_apps", "dep": "y", "prompt": "Application directory", "cond": "y", "defaults": [{"name": "../apps", "default": "../apps", "cond": "!WINDOWS_NATIVE"}, {"name": "..apps", "default": "..apps", "cond": "WINDOWS_NATIVE"}], "help": "Identifies the directory that builds the\napplication to link with NuttX.  Default: ../apps This symbol must\nbe assigned to the path to the application build directory\n*relative* to the NuttX top build directory. If you had an\napplication directory and the NuttX directory each in separate\ndirectory trees like this:\n\n        build\n        |-nuttx\n        |  |\n        |  `- Makefile\n        `-application\n        |\n        `- Makefile\n\nThen you would set APPS_DIR=../application.\n\nThe application direction must contain Makefile and this make\nfile must support the following targets:\n\n1)libapps$(LIBEXT) (usually libapps.a). libapps.a is a static\nlibrary ( an archive) that contains all of application object\nfiles.\n\n2)clean. Do whatever is appropriate to clean the application\ndirectories for a fresh build.\n\n3)distclean. Clean everything -- auto-generated files, symbolic\nlinks etc. -- so that the directory contents are the same as\nthe contents in your configuration management system.\nThis is only done when you change the NuttX configuration.\n\n4)depend. Make or update the application build dependencies.\n\nWhen this application is invoked it will receive the setting TOPDIR like:\n\n$(MAKE) -C $(CONFIG_APPS_DIR) TOPDIR=\"$(TOPDIR)\" <target>\n\nTOPDIR is the full path to the NuttX directory. It can be used, for\nexample, to include makefile fragments (e.g., .config or Make.defs)\nor to set up include file paths."}, {"type": 4, "user_value": 2, "dep": "y", "prompt": "Memory organization", "cond": "y", "defaults": [{"name": "BUILD_FLAT", "default": "y", "cond": "y"}], "children": [{"type": 3, "name": "BUILD_FLAT", "value": "y", "user_value": 2, "dep": "y", "prompt": "Flat address space", "cond": "y", "help": "Build NuttX as one large, executable \"blob\".  All of the code\nwithin the blob can interrupt with all of the other code within\nthe blob.  There are no special privileges, protections, or\nrestraints."}, {"type": 3, "name": "BUILD_PROTECTED", "value": "n", "user_value": 0, "dep": "n", "prompt": "NuttX protected build", "cond": "ARCH_USE_MPU && y", "selects": [{"symbol": "LIB_SYSCALL", "cond": "ARCH_USE_MPU && y"}, {"symbol": "BUILD_2PASS", "cond": "ARCH_USE_MPU && y"}], "help": "Builds NuttX and selected applications as two \"blobs\":  A protected,\nprivileged kernel blob and a separate unprivileged, user blob.  This\nrequires use of the two pass build with each blob being build on\neach pass.\n\nNOTE:  This build configuration requires that the platform support\na memory protection unit (MPU).  Support, however, may not be\nimplemented on all platforms."}, {"type": 3, "name": "BUILD_KERNEL", "value": "n", "user_value": 0, "dep": "n", "prompt": "NuttX kernel build", "cond": "ARCH_USE_MMU && ARCH_ADDRENV && y", "selects": [{"symbol": "LIB_SYSCALL", "cond": "ARCH_USE_MMU && ARCH_ADDRENV && y"}], "help": "Builds NuttX as a separately compiled kernel.  No applications are\nbuilt.  All user applications must reside in a file system where\nthey can be loaded into memory for execution.\n\nNOTE:  This build configuration requires that the platform support\na memory management unit (MPU) and address environments.  Support,\nhowever, may not be implemented on all platforms."}]}, {"type": 3, "name": "BUILD_2PASS", "value": "n", "user_value": 0, "rev_dep": "BUILD_PROTECTED && ARCH_USE_MPU && y", "dep": "y", "prompt": "Two pass build", "cond": "!BUILD_KERNEL", "defaults": [{"name": "n", "default": "n", "cond": "!BUILD_KERNEL"}], "help": "Enables the two pass build options.\n\nTwo-pass build options.  If the 2 pass build option is selected, then these\noptions configure the make system build a extra link object. This link object\nis assumed to be an incremental (relative) link object, but could be a static\nlibrary (archive) (some modification to this Makefile would be required if\nPASS1_TARGET generates an archive). Pass 1 1ncremental (relative) link\nobjects should be put into the processor-specific source directory (where other\nlink objects will be created).  If the pass1 object is an archive, it could\ngo anywhere.", "children": [{"type": 47, "name": "PASS1_TARGET", "value": "", "user_value": null, "dep": "n", "prompt": "Pass one target", "cond": "BUILD_2PASS", "defaults": [{"name": "all", "default": "all", "cond": "BUILD_2PASS"}], "help": "The name of the first pass build target.  This\ncan be specific build target, a special build target (all, default, etc.)\nor may just be left undefined."}, {"type": 47, "name": "PASS1_BUILDIR", "value": "", "user_value": null, "dep": "n", "prompt": "Pass one build directory", "cond": "BUILD_2PASS", "defaults": [{"name": "build", "default": "build", "cond": "BUILD_2PASS"}], "help": "The path, relative to the top NuttX build\ndirectory to directory that contains the Makefile to build the\nfirst pass object.  The Makefile must support the following targets:\nThe special target PASS1_TARGET (if defined)\nand the usual depend, clean, and distclean targets."}, {"type": 47, "name": "PASS1_OBJECT", "value": "", "user_value": null, "dep": "n", "prompt": "Pass one object", "cond": "BUILD_2PASS", "defaults": [{"name": "", "default": "", "cond": "BUILD_2PASS"}], "help": "May be used to include an extra, pass1 object\ninto the final link.  This would probably be the object generated\nfrom the PASS1_TARGET.  It may be available at link time\nin the arch/<architecture>/src directory."}, {"type": 24, "name": "NUTTX_USERSPACE", "value": "", "user_value": null, "dep": "n", "prompt": "Beginning of user-space blob", "cond": "BUILD_PROTECTED && BUILD_2PASS", "defaults": [{"name": "0x0", "default": "0x0", "cond": "BUILD_PROTECTED && BUILD_2PASS"}], "help": "In the kernel build, the NuttX kernel and the user-space blob are\nbuilt separately linked objects.  NUTTX_USERSPACE provides the\naddress where the user-space blob is loaded into memory.  NuttX will\nexpect to find and instance of struct userspace_s at this location."}]}]}, {"type": 31, "dep": "y", "prompt": "Binary Output Formats", "cond": "y", "children": [{"type": 3, "name": "RRLOAD_BINARY", "value": "n", "user_value": 0, "dep": "y", "prompt": "rrload binary format", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Create nuttx.rr in the rrload binary format used with\nBSPs from www.ridgerun.com using the tools/mkimage.sh script."}, {"type": 3, "name": "INTELHEX_BINARY", "value": "n", "user_value": 0, "dep": "y", "prompt": "Intel HEX binary format", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Create the nuttx.hex in the Intel HEX binary format that is\nused with many different loaders. This option will use the GNU objcopy\nprogram and should not be selected if you are not using the GNU\ntoolchain."}, {"type": 3, "name": "MOTOROLA_SREC", "value": "n", "user_value": 0, "dep": "y", "prompt": "Motorola S-Record binary format", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Create the nuttx.srec in the Motorola S-Record binary format that is\nused with many different loaders. This option will use the GNU objcopy\nprogram and should not be selected if you are not using the GNU\ntoolchain."}, {"type": 3, "name": "RAW_BINARY", "value": "n", "user_value": 0, "rev_dep": "(UBOOT_UIMAGE && !WINDOWS_NATIVE) || DFU_BINARY", "dep": "y", "prompt": "Raw binary format", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Create the nuttx.bin in the raw binary format that is used with many\ndifferent loaders using the GNU objcopy program.  This option\nshould not be selected if you are not using the GNU toolchain."}, {"type": 3, "name": "UBOOT_UIMAGE", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "U-Boot uImage", "cond": "!WINDOWS_NATIVE", "selects": [{"symbol": "RAW_BINARY", "cond": "!WINDOWS_NATIVE"}], "help": "Create the uImage binary used with U-Boot.", "children": [{"type": 24, "name": "UIMAGE_LOAD_ADDRESS", "value": "", "user_value": null, "dep": "n", "prompt": "uImage load address", "cond": "UBOOT_UIMAGE", "defaults": [{"name": "0x0", "default": "0x0", "cond": "UBOOT_UIMAGE"}]}, {"type": 24, "name": "UIMAGE_ENTRY_POINT", "value": "", "user_value": null, "dep": "n", "prompt": "uImage entry point", "cond": "UBOOT_UIMAGE", "defaults": [{"name": "0x0", "default": "0x0", "cond": "UBOOT_UIMAGE"}]}]}, {"type": 3, "name": "DFU_BINARY", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "DFU binary format", "cond": "y", "selects": [{"symbol": "RAW_BINARY", "cond": "y"}], "help": "Create the dfu binary used with dfu-utils.", "children": [{"type": 24, "name": "DFU_BASE", "value": "", "user_value": null, "dep": "n", "prompt": "Address DFU image is loaded to", "cond": "DFU_BINARY"}, {"type": 24, "name": "DFU_VID", "value": "", "user_value": null, "dep": "n", "prompt": "VID to use for DFU image", "cond": "DFU_BINARY"}, {"type": 24, "name": "DFU_PID", "value": "", "user_value": null, "dep": "n", "prompt": "PID to use for DFU image", "cond": "DFU_BINARY"}]}]}, {"type": 31, "dep": "y", "prompt": "Customize Header Files", "cond": "y", "children": [{"type": 3, "name": "ARCH_STDINT_H", "value": "n", "user_value": 0, "dep": "y", "prompt": "stdint.h", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "The stdint.h header file can be found at nuttx/include/stdint.h.\nHowever, that header includes logic to redirect the inclusion of an\narchitecture specific header file like:\n\n        #ifdef CONFIG_ARCH_STDINT_H\n        #  include <arch/stdint.h>\n        #else\n        ...\n        #endif\n\nRecall that that include path, include/arch, is a symbolic link and\nwill refer to a version of stdint.h at nuttx/arch/<architecture>/include/stdint.h."}, {"type": 3, "name": "ARCH_STDBOOL_H", "value": "n", "user_value": 0, "dep": "y", "prompt": "stdbool.h", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "The stdbool.h header file can be found at nuttx/include/stdbool.h.\nHowever, that header includes logic to redirect the inclusion of an\narchitecture specific header file like:\n\n        #ifdef CONFIG_ARCH_STDBOOL_H\n        #  include <arch/stdbool.h>\n        #else\n        ...\n        #endif\n\nRecall that that include path, include/arch, is a symbolic link and\nwill refer to a version of stdbool.h at nuttx/arch/<architecture>/include/stdbool.h."}, {"type": 3, "name": "ARCH_MATH_H", "value": "n", "user_value": 0, "dep": "y", "prompt": "math.h", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "There is also a re-directing version of math.h in the source tree.\nHowever, it resides out-of-the-way at include/nuttx/lib/math.h because it\nconflicts too often with the system math.h. If ARCH_MATH_H=y is\ndefined, however, the top-level makefile will copy the redirecting\nmath.h header file from include/nuttx/lib/math.h to include/math.h. math.h\nwill then include the architecture-specific version of math.h that you\nmust provide at nuttx/arch/>architecture</include/math.h.\n\n        #ifdef CONFIG_ARCH_MATH_H\n        #  include <arch/math.h>\n        #endif\n\nSo for the architectures that define ARCH_MATH_H=y, include/math.h\nwill be the redirecting math.h header file; for the architectures\nthat don't select ARCH_MATH_H, the redirecting math.h header file\nwill stay out-of-the-way in include/nuttx/."}, {"type": 3, "name": "ARCH_FLOAT_H", "value": "n", "user_value": 0, "dep": "y", "prompt": "float.h", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "The float.h header file defines the properties of your floating\npoint implementation.  It would always be best to use your\ntoolchain's float.h header file but if none is available, a default\nfloat.h header file will provided if this option is selected.  However\nthere is no assurance that the settings in this float.h are actually\ncorrect for your platform!"}, {"type": 3, "name": "ARCH_STDARG_H", "value": "n", "user_value": 0, "dep": "y", "prompt": "stdarg.h", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "There is also a redirecting version of stdarg.h in the source tree\nas well. It also resides out-of-the-way at include/nuttx/lib/stdarg.h.\nThis is because you should normally use your toolchain's stdarg.h\nfile. But sometimes, your toolchain's stdarg.h file may have other\nheader file dependencies and so may not be usable in the NuttX build\nenvironment. In those cases, you may have to create a architecture-\nspecific stdarg.h header file at nuttx/arch/<architecture>/include/stdarg.h\n\nIf ARCH_STDARG_H=y is defined, the top-level makefile will copy the\nre-directing stdarg.h header file from include/nuttx/lib/stdarg.h to\ninclude/stdarg.h. So for the architectures that cannot use their\ntoolchain's stdarg.h file, they can use this alternative by defining\nARCH_STDARG_H=y and providing. If ARCH_STDARG_H, is not defined, then\nthe stdarg.h header file will stay out-of-the-way in include/nuttx/."}, {"type": 3, "name": "ARCH_DEBUG_H", "value": "n", "user_value": 0, "rev_dep": "AVR_HAS_MEMX_PTR && AVR_ATMEL_AVR_TOOLCHAIN && AVR_ATMEL_AVR_TOOLCHAIN && ARCH_FAMILY_AVR && ARCH_FAMILY_AVR && ARCH_AVR", "dep": "y", "prompt": "debug.h", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "The debug.h contains architecture dependent debugging primitives"}]}, {"type": 31, "dep": "y", "prompt": "Debug Options", "cond": "y", "children": [{"type": 3, "name": "DEBUG_ALERT", "value": "y", "user_value": 2, "rev_dep": "DEBUG_FEATURES || ARCH_STACKDUMP", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "DEBUG_FEATURES", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable Debug Features", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "selects": [{"symbol": "DEBUG_ALERT", "cond": "y"}], "help": "Enables built-in debug features.  Selecting this option will (1) Enable\ndebug assertions in the code, (2) enable extended parameter testing in\nmany functions, and (3) enable support for debug output to the SYSLOG.\nNote that enabling this option by itself does not produce debug output.\nDebug output must also be selected on a subsystem-by-subsystem basis.", "children": [{"type": 6, "dep": "n", "prompt": "Debug SYSLOG Output Controls", "cond": "DEBUG_FEATURES"}, {"type": 3, "name": "DEBUG_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Error Output", "cond": "DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES"}], "help": "Enables output from [a-z]err() statements.  Errors are significant system\nexceptions that require immediate attention.", "children": [{"type": 3, "name": "DEBUG_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Warnings Output", "cond": "DEBUG_ERROR && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_FEATURES"}], "help": "Enables output from [a-z]warn() statements.  Warnings are considered to\nbe various unexpected conditions, potential errors or errors that will\nnot have serious consequences.", "children": [{"type": 3, "name": "DEBUG_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Informational Debug Output", "cond": "DEBUG_WARN && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_FEATURES"}], "help": "Enables verbose \"informational\" debug output.  If you enable\nCONFIG_DEBUG_INFO, then very chatty (and often annoying) output\nwill be generated."}]}]}, {"type": 3, "name": "DEBUG_ASSERTIONS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Debug Assertions", "cond": "DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES"}], "help": "Enables the DEBUGASSERT() macro.  When CONFIG_DEBUG_ASSERTIONS is\ndefined, DEBUGASSERT() will cause the system to halt if the\nassertion fails.  If CONFIG_DEBUG_ASSERTIONS is not defined\nDEBUGASSERT() compiled out of the system.  In general, you would\nset CONFIG_DEBUG_ASSERTIONS=y during debug, but disable the\nassertions on a final, buckled up system."}, {"type": 6, "dep": "n", "prompt": "Subsystem Debug Options", "cond": "DEBUG_FEATURES"}, {"type": 3, "name": "DEBUG_AUDIO", "value": "n", "user_value": null, "dep": "n", "prompt": "Audio Device Debug Features", "cond": "AUDIO && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO && DEBUG_FEATURES"}], "help": "Enable audio device debug features.\nEnable low level debug featurs for the audio subsystem and for audio\ndevice drivers. (disabled by default).  Support for this debug option\nis architecture-specific and may not be available for some MCUs.", "children": [{"type": 3, "name": "DEBUG_AUDIO_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "Audio Device Error Output", "cond": "DEBUG_ERROR && DEBUG_AUDIO && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_AUDIO && DEBUG_FEATURES"}], "help": "Enable audio device error output to SYSLOG."}, {"type": 3, "name": "DEBUG_AUDIO_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "Audio Device Warnings Output", "cond": "DEBUG_WARN && DEBUG_AUDIO && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_AUDIO && DEBUG_FEATURES"}], "help": "Enable audio device warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_AUDIO_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "Audio Device Informational Output", "cond": "DEBUG_INFO && DEBUG_AUDIO && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_AUDIO && DEBUG_FEATURES"}], "help": "Enable audio device informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_BINFMT", "value": "n", "user_value": null, "dep": "n", "prompt": "Binary Loader Debug Features", "cond": "!BINFMT_DISABLE && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "!BINFMT_DISABLE && DEBUG_FEATURES"}], "help": "Enable binary loader debug features.", "children": [{"type": 3, "name": "DEBUG_BINFMT_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "Binary Loader Error Output", "cond": "DEBUG_ERROR && DEBUG_BINFMT && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_BINFMT && DEBUG_FEATURES"}], "help": "Enable binary loader error output to SYSLOG."}, {"type": 3, "name": "DEBUG_BINFMT_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "Binary Loader Warnings Output", "cond": "DEBUG_WARN && DEBUG_BINFMT && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_BINFMT && DEBUG_FEATURES"}], "help": "Enable binary loader warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_BINFMT_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "Binary Loader Informational Output", "cond": "DEBUG_INFO && DEBUG_BINFMT && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_BINFMT && DEBUG_FEATURES"}], "help": "Enable binary loader informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_CRYPTO", "value": "n", "user_value": null, "dep": "n", "prompt": "Crypto Debug Features", "cond": "CRYPTO && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "CRYPTO && DEBUG_FEATURES"}], "help": "Enable cryptographic debug features.", "children": [{"type": 3, "name": "DEBUG_CRYPTO_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "Crypto Error Output", "cond": "DEBUG_ERROR && DEBUG_CRYPTO && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_CRYPTO && DEBUG_FEATURES"}], "help": "Enable cryptographic error output to SYSLOG."}, {"type": 3, "name": "DEBUG_CRYPTO_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "Crypto Warnings Output", "cond": "DEBUG_WARN && DEBUG_CRYPTO && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_CRYPTO && DEBUG_FEATURES"}], "help": "Enable cryptographic warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_CRYPTO_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "Crypto Informational Output", "cond": "DEBUG_INFO && DEBUG_CRYPTO && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_CRYPTO && DEBUG_FEATURES"}], "help": "Enable cryptographic informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_FS", "value": "n", "user_value": null, "dep": "n", "prompt": "File System Debug Features", "cond": "DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES"}], "help": "Enable file system debug features.", "children": [{"type": 3, "name": "DEBUG_FS_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "File System Error Output", "cond": "DEBUG_ERROR && DEBUG_FS && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_FS && DEBUG_FEATURES"}], "help": "Enable file system error output to SYSLOG."}, {"type": 3, "name": "DEBUG_FS_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "File System Warnings Output", "cond": "DEBUG_WARN && DEBUG_FS && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_FS && DEBUG_FEATURES"}], "help": "Enable file system warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_FS_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "File System Informational Output", "cond": "DEBUG_INFO && DEBUG_FS && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_FS && DEBUG_FEATURES"}], "help": "Enable file system informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_GRAPHICS", "value": "n", "user_value": null, "dep": "n", "prompt": "Graphics Debug Features", "cond": "DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES"}], "help": "Enable NX graphics subsystem debug features.", "children": [{"type": 3, "name": "DEBUG_GRAPHICS_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "Graphics Error Output", "cond": "DEBUG_ERROR && DEBUG_GRAPHICS && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_GRAPHICS && DEBUG_FEATURES"}], "help": "Enable NX graphics subsystem error output to SYSLOG."}, {"type": 3, "name": "DEBUG_GRAPHICS_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "Graphics Warnings Output", "cond": "DEBUG_WARN && DEBUG_GRAPHICS && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_GRAPHICS && DEBUG_FEATURES"}], "help": "Enable NX graphics subsystem warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_GRAPHICS_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "Graphics Informational Output", "cond": "DEBUG_INFO && DEBUG_GRAPHICS && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_GRAPHICS && DEBUG_FEATURES"}], "help": "Enable NX graphics subsystem informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_LIB", "value": "n", "user_value": null, "dep": "n", "prompt": "C Library Debug Features", "cond": "DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES"}], "help": "Enable C library debug features.", "children": [{"type": 3, "name": "DEBUG_LIB_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "C Library Error Output", "cond": "DEBUG_ERROR && DEBUG_LIB && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_LIB && DEBUG_FEATURES"}], "help": "Enable C library error output to SYSLOG."}, {"type": 3, "name": "DEBUG_LIB_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "C Library Warnings Output", "cond": "DEBUG_WARN && DEBUG_LIB && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_LIB && DEBUG_FEATURES"}], "help": "Enable C library warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_LIB_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "C Library Informational Output", "cond": "DEBUG_INFO && DEBUG_LIB && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_LIB && DEBUG_FEATURES"}], "help": "Enable C library informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_MM", "value": "n", "user_value": null, "dep": "n", "prompt": "Memory Manager Debug Features", "cond": "DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES"}], "help": "Enable memory management debug features.", "children": [{"type": 3, "name": "DEBUG_MM_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "Memory Manager Error Output", "cond": "DEBUG_ERROR && DEBUG_MM && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_MM && DEBUG_FEATURES"}], "help": "Enable memory management error output to SYSLOG."}, {"type": 3, "name": "DEBUG_MM_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "Memory Manager Warnings Output", "cond": "DEBUG_WARN && DEBUG_MM && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_MM && DEBUG_FEATURES"}], "help": "Enable memory management warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_MM_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "Memory Manager Informational Output", "cond": "DEBUG_INFO && DEBUG_MM && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_MM && DEBUG_FEATURES"}], "help": "Enable memory management informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_SHM", "value": "n", "user_value": null, "dep": "n", "prompt": "Shared Memory Debug Output", "cond": "MM_SHM && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "MM_SHM && DEBUG_FEATURES"}], "help": "Enable shared memory management debug SYSLOG output (disabled by default)"}, {"type": 3, "name": "DEBUG_NET", "value": "n", "user_value": null, "dep": "n", "prompt": "Network Debug Features", "cond": "ARCH_HAVE_NET && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_NET && DEBUG_FEATURES"}], "help": "Enable network debug features.", "children": [{"type": 3, "name": "DEBUG_NET_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "Network Error Output", "cond": "DEBUG_ERROR && DEBUG_NET && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_NET && DEBUG_FEATURES"}], "help": "Enable network error output to SYSLOG."}, {"type": 3, "name": "DEBUG_NET_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "Network Warnings Output", "cond": "DEBUG_WARN && DEBUG_NET && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_NET && DEBUG_FEATURES"}], "help": "Enable network warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_NET_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "Network Informational Output", "cond": "DEBUG_INFO && DEBUG_NET && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_NET && DEBUG_FEATURES"}], "help": "Enable network informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_POWER", "value": "n", "user_value": null, "dep": "n", "prompt": "Power-related Debug Features", "cond": "DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES"}], "help": "Enable power-related debug features.", "children": [{"type": 3, "name": "DEBUG_POWER_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "Power-related Error Output", "cond": "DEBUG_ERROR && DEBUG_POWER && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_POWER && DEBUG_FEATURES"}], "help": "Enable power-related error output to SYSLOG."}, {"type": 3, "name": "DEBUG_POWER_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "Power-related Warnings Output", "cond": "DEBUG_WARN && DEBUG_POWER && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_POWER && DEBUG_FEATURES"}], "help": "Enable power-related warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_POWER_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "Power-related Informational Output", "cond": "DEBUG_INFO && DEBUG_POWER && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_POWER && DEBUG_FEATURES"}], "help": "Enable power-related informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_WIRELESS", "value": "n", "user_value": null, "dep": "n", "prompt": "Wireless Debug Features", "cond": "(WIRELESS || DRIVERS_WIRELESS) && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "(WIRELESS || DRIVERS_WIRELESS) && DEBUG_FEATURES"}], "help": "Enable wireless debug features.", "children": [{"type": 3, "name": "DEBUG_WIRELESS_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "Wireless Error Output", "cond": "DEBUG_ERROR && DEBUG_WIRELESS && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_WIRELESS && DEBUG_FEATURES"}], "help": "Enable wireless error output to SYSLOG."}, {"type": 3, "name": "DEBUG_WIRELESS_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "Wireless Warnings Output", "cond": "DEBUG_WARN && DEBUG_WIRELESS && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_WIRELESS && DEBUG_FEATURES"}], "help": "Enable wireless warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_WIRELESS_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "Wireless Informational Output", "cond": "DEBUG_INFO && DEBUG_WIRELESS && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_WIRELESS && DEBUG_FEATURES"}], "help": "Enable wireless informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_SCHED", "value": "n", "user_value": null, "dep": "n", "prompt": "Scheduler Debug Features", "cond": "DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES"}], "help": "Enable OS scheduler debug features.", "children": [{"type": 3, "name": "DEBUG_SCHED_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "Scheduler Error Output", "cond": "DEBUG_ERROR && DEBUG_SCHED && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_SCHED && DEBUG_FEATURES"}], "help": "Enable OS scheduler error output to SYSLOG."}, {"type": 3, "name": "DEBUG_SCHED_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "Scheduler Warnings Output", "cond": "DEBUG_WARN && DEBUG_SCHED && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_SCHED && DEBUG_FEATURES"}], "help": "Enable OS scheduler warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_SCHED_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "Scheduler Informational Output", "cond": "DEBUG_INFO && DEBUG_SCHED && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_SCHED && DEBUG_FEATURES"}], "help": "Enable OS scheduler informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_SYSCALL", "value": "n", "user_value": null, "dep": "n", "prompt": "SYSCALL Debug Features", "cond": "LIB_SYSCALL && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "LIB_SYSCALL && DEBUG_FEATURES"}], "help": "Enable very low level features related to system calls.  If SYSCAL\noutput is enabled, this gives you basically a poor man's version of\nstrace.", "children": [{"type": 3, "name": "DEBUG_SYSCALL_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "SYSCALL Error Output", "cond": "DEBUG_ERROR && DEBUG_SYSCALL && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_SYSCALL && DEBUG_FEATURES"}], "help": "Enable OS SYSCALL error output to SYSLOG."}, {"type": 3, "name": "DEBUG_SYSCALL_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "SYSCALL Warnings Output", "cond": "DEBUG_WARN && DEBUG_SYSCALL && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_SYSCALL && DEBUG_FEATURES"}], "help": "Enable OS SYSCALL warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_SYSCALL_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "SYSCALL Informational Output", "cond": "DEBUG_INFO && DEBUG_SYSCALL && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_SYSCALL && DEBUG_FEATURES"}], "help": "Enable OS SYSCALL informational output to SYSLOG."}]}, {"type": 6, "dep": "n", "prompt": "OS Function Debug Options", "cond": "DEBUG_FEATURES"}, {"type": 3, "name": "DEBUG_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA Debug Features", "cond": "ARCH_DMA && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_DMA && DEBUG_FEATURES"}], "help": "Enable DMA debug features.\n\nSupport for this debug option is architecture-specific and may not\nbe available for some MCUs.", "children": [{"type": 3, "name": "DEBUG_DMA_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA Error Output", "cond": "DEBUG_ERROR && DEBUG_DMA && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_DMA && DEBUG_FEATURES"}], "help": "Enable DMA error output to SYSLOG."}, {"type": 3, "name": "DEBUG_DMA_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA Warnings Output", "cond": "DEBUG_WARN && DEBUG_DMA && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_DMA && DEBUG_FEATURES"}], "help": "Enable DMA warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_DMA_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA Informational Output", "cond": "DEBUG_INFO && DEBUG_DMA && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_DMA && DEBUG_FEATURES"}], "help": "Enable DMA informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "Interrupt Controller Debug Features", "cond": "DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES"}], "help": "Enable interrupt controller debug features.\n\nSome (but not all) architectures support debug output to verify\ninterrupt controller logic.  If supported, then option will enable\nthat output.  This may interfere with normal operations!  You\nshould *not* enable interrupt controller debug unless you suspect\nthat here is a problem with that logic.  On some platforms, this\noption may even cause crashes! Use with care!", "children": [{"type": 3, "name": "DEBUG_IRQ_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "Interrupt Controller Error Output", "cond": "DEBUG_ERROR && DEBUG_IRQ && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_IRQ && DEBUG_FEATURES"}], "help": "Enable interrupt controller error output to SYSLOG."}, {"type": 3, "name": "DEBUG_IRQ_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "Interrupt Controller Warnings Output", "cond": "DEBUG_WARN && DEBUG_IRQ && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_IRQ && DEBUG_FEATURES"}], "help": "Enable interrupt controller warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_IRQ_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "Interrupt Controller Informational Output", "cond": "DEBUG_INFO && DEBUG_IRQ && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_IRQ && DEBUG_FEATURES"}], "help": "Enable interrupt controller informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_PAGING", "value": "n", "user_value": null, "dep": "n", "prompt": "Paging Debug Features", "cond": "PAGING && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "PAGING && DEBUG_FEATURES"}], "help": "Enable OS demand paging debug features.", "children": [{"type": 3, "name": "DEBUG_PAGING_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "Paging Error Output", "cond": "DEBUG_ERROR && DEBUG_PAGING && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_PAGING && DEBUG_FEATURES"}], "help": "Enable OS demand paging error output to SYSLOG."}, {"type": 3, "name": "DEBUG_PAGING_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "Paging Warnings Output", "cond": "DEBUG_WARN && DEBUG_PAGING && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_PAGING && DEBUG_FEATURES"}], "help": "Enable OS demand paging warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_PAGING_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "Paging Informational Output", "cond": "DEBUG_INFO && DEBUG_PAGING && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_PAGING && DEBUG_FEATURES"}], "help": "Enable OS demand paging informational output to SYSLOG."}]}, {"type": 6, "dep": "n", "prompt": "Driver Debug Options", "cond": "DEBUG_FEATURES"}, {"type": 3, "name": "DEBUG_LCD", "value": "n", "user_value": null, "dep": "n", "prompt": "Low-level LCD Debug Features", "cond": "LCD && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "LCD && DEBUG_FEATURES"}], "help": "Enable LCD driver debug features.\n\nSupport for this debug option is board-specific and may not\nbe available for some boards.", "children": [{"type": 3, "name": "DEBUG_LCD_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "LCD Driver Error Output", "cond": "DEBUG_ERROR && DEBUG_LCD && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_LCD && DEBUG_FEATURES"}], "help": "Enable LCD driver error output to SYSLOG."}, {"type": 3, "name": "DEBUG_LCD_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "LCD Driver Warnings Output", "cond": "DEBUG_WARN && DEBUG_LCD && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_LCD && DEBUG_FEATURES"}], "help": "Enable LCD driver warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_LCD_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "LCD Driver Informational Output", "cond": "DEBUG_INFO && DEBUG_LCD && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_LCD && DEBUG_FEATURES"}], "help": "Enable LCD driver informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_LEDS", "value": "n", "user_value": null, "dep": "n", "prompt": "Low-level LED Debug Features", "cond": "ARCH_HAVE_LEDS && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_LEDS && DEBUG_FEATURES"}], "help": "Enable LED driver debug features.\n\nSupport for this debug option is board-specific and may not\nbe available for some boards.", "children": [{"type": 3, "name": "DEBUG_LEDS_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "LED Driver Error Output", "cond": "DEBUG_ERROR && DEBUG_LEDS && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_LEDS && DEBUG_FEATURES"}], "help": "Enable LED driver error output to SYSLOG."}, {"type": 3, "name": "DEBUG_LEDS_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "LED Driver Warnings Output", "cond": "DEBUG_WARN && DEBUG_LEDS && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_LEDS && DEBUG_FEATURES"}], "help": "Enable LED driver warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_LEDS_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "LED Driver Informational Output", "cond": "DEBUG_INFO && DEBUG_LEDS && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_LEDS && DEBUG_FEATURES"}], "help": "Enable LED driver informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_INPUT", "value": "n", "user_value": null, "dep": "n", "prompt": "Input Device Debug Features", "cond": "INPUT && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "INPUT && DEBUG_FEATURES"}], "help": "Enable input d.\nEnable low level evice debug features for the input device drivers\nsuch as mice and touchscreens (disabled by default).  Support for\nthis debug option is board-specific and may not be available for\nsome boards.", "children": [{"type": 3, "name": "DEBUG_INPUT_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "Input Device Error Output", "cond": "DEBUG_ERROR && DEBUG_INPUT && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_INPUT && DEBUG_FEATURES"}], "help": "Enable input device error output to SYSLOG."}, {"type": 3, "name": "DEBUG_INPUT_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "Input Device Warnings Output", "cond": "DEBUG_WARN && DEBUG_INPUT && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_INPUT && DEBUG_FEATURES"}], "help": "Enable input device warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_INPUT_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "Input Device Informational Output", "cond": "DEBUG_INFO && DEBUG_INPUT && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_INPUT && DEBUG_FEATURES"}], "help": "Enable input device informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_ANALOG", "value": "n", "user_value": null, "dep": "n", "prompt": "Analog Device Debug Features", "cond": "ANALOG && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "ANALOG && DEBUG_FEATURES"}], "help": "Enable analog device debug features.\nEnable low level debug features the analog device drivers such as\nA/D and D/A converters (disabled by default).  Support for this\ndebug option is architecture-specific and may not be available for\nsome MCUs.", "children": [{"type": 3, "name": "DEBUG_ANALOG_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "Analog Device Error Output", "cond": "DEBUG_ERROR && DEBUG_ANALOG && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_ANALOG && DEBUG_FEATURES"}], "help": "Enable analog device error output to SYSLOG."}, {"type": 3, "name": "DEBUG_ANALOG_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "Analog Device Warnings Output", "cond": "DEBUG_WARN && DEBUG_ANALOG && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_ANALOG && DEBUG_FEATURES"}], "help": "Enable analog device warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_ANALOG_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "Analog Device Informational Output", "cond": "DEBUG_INFO && DEBUG_ANALOG && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_ANALOG && DEBUG_FEATURES"}], "help": "Enable CAN driver informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_CAN", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN Debug Features", "cond": "CAN && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "CAN && DEBUG_FEATURES"}], "help": "Enable CAN driver debug features.\n\nSupport for this debug option is architecture-specific and may not\nbe available for some MCUs.", "children": [{"type": 3, "name": "DEBUG_CAN_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN Error Output", "cond": "DEBUG_ERROR && DEBUG_CAN && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_CAN && DEBUG_FEATURES"}], "help": "Enable CAN driver error output to SYSLOG."}, {"type": 3, "name": "DEBUG_CAN_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN Warnings Output", "cond": "DEBUG_WARN && DEBUG_CAN && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_CAN && DEBUG_FEATURES"}], "help": "Enable CAN driver warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_CAN_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN Informational Output", "cond": "DEBUG_INFO && DEBUG_CAN && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_CAN && DEBUG_FEATURES"}], "help": "Enable CAN driver informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_GPIO", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIO Debug Features", "cond": "DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES"}], "help": "Enable GPIO debug features.\n\nSupport for this debug option is architecture-specific and may not\nbe available for some MCUs.", "children": [{"type": 3, "name": "DEBUG_GPIO_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIO Error Output", "cond": "DEBUG_ERROR && DEBUG_GPIO && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_GPIO && DEBUG_FEATURES"}], "help": "Enable GPIO error output to SYSLOG."}, {"type": 3, "name": "DEBUG_GPIO_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIO Warnings Output", "cond": "DEBUG_WARN && DEBUG_GPIO && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_GPIO && DEBUG_FEATURES"}], "help": "Enable GPIO warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_GPIO_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIO Informational Output", "cond": "DEBUG_INFO && DEBUG_GPIO && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_GPIO && DEBUG_FEATURES"}], "help": "Enable GPIO informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_I2C", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C Debug Features", "cond": "I2C && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "I2C && DEBUG_FEATURES"}], "help": "Enable I2C debug features.\n\nSupport for this debug option is architecture-specific and may not\nbe available for some MCUs.", "children": [{"type": 3, "name": "DEBUG_I2C_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C Error Output", "cond": "DEBUG_ERROR && DEBUG_I2C && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_I2C && DEBUG_FEATURES"}], "help": "Enable I2C driver error output to SYSLOG."}, {"type": 3, "name": "DEBUG_I2C_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C Warnings Output", "cond": "DEBUG_WARN && DEBUG_I2C && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_I2C && DEBUG_FEATURES"}], "help": "Enable I2C driver warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_I2C_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C Informational Output", "cond": "DEBUG_INFO && DEBUG_I2C && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_I2C && DEBUG_FEATURES"}], "help": "Enable I2C driver informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_I2S", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S Debug Features", "cond": "I2S && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "I2S && DEBUG_FEATURES"}], "help": "Enable I2S debug features.\n\nSupport for this debug option is architecture-specific and may not\nbe available for some MCUs.", "children": [{"type": 3, "name": "DEBUG_I2S_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S Error Output", "cond": "DEBUG_ERROR && DEBUG_I2S && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_I2S && DEBUG_FEATURES"}], "help": "Enable I2S driver error output to SYSLOG.\n\nSupport for this debug option is architecture-specific and may not\nbe available for some MCUs."}, {"type": 3, "name": "DEBUG_I2S_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S Warnings Output", "cond": "DEBUG_WARN && DEBUG_I2S && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_I2S && DEBUG_FEATURES"}], "help": "Enable I2S driver warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_I2S_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S Informational Output", "cond": "DEBUG_INFO && DEBUG_I2S && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_I2S && DEBUG_FEATURES"}], "help": "Enable I2S driver informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "PWM Debug Features", "cond": "PWM && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "PWM && DEBUG_FEATURES"}], "help": "Enable PWM debug features.\n\nSupport for this debug option is architecture-specific and may not\nbe available for some MCUs.", "children": [{"type": 3, "name": "DEBUG_PWM_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "PWM Error Output", "cond": "DEBUG_ERROR && DEBUG_PWM && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_PWM && DEBUG_FEATURES"}], "help": "Enable PWM driver error output to SYSLOG.\n\nSupport for this debug option is architecture-specific and may not\nbe available for some MCUs."}, {"type": 3, "name": "DEBUG_PWM_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "PWM Warnings Output", "cond": "DEBUG_WARN && DEBUG_PWM && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_PWM && DEBUG_FEATURES"}], "help": "Enable PWM driver warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_PWM_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "PWM Informational Output", "cond": "DEBUG_INFO && DEBUG_PWM && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_PWM && DEBUG_FEATURES"}], "help": "Enable PWM driver informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_RTC", "value": "n", "user_value": null, "dep": "n", "prompt": "RTC Debug Features", "cond": "RTC && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "RTC && DEBUG_FEATURES"}], "help": "Enable RTC debug features.\n\nSupport for this debug option is architecture-specific and may not\nbe available for some MCUs.", "children": [{"type": 3, "name": "DEBUG_RTC_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "RTC Error Output", "cond": "DEBUG_ERROR && DEBUG_RTC && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_RTC && DEBUG_FEATURES"}], "help": "Enable RTC driver error output to SYSLOG.\n\nSupport for this debug option is architecture-specific and may not\nbe available for some MCUs."}, {"type": 3, "name": "DEBUG_RTC_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "RTC Warnings Output", "cond": "DEBUG_WARN && DEBUG_RTC && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_RTC && DEBUG_FEATURES"}], "help": "Enable RTC driver warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_RTC_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "RTC Informational Output", "cond": "DEBUG_INFO && DEBUG_RTC && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_RTC && DEBUG_FEATURES"}], "help": "Enable RTC driver informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_MEMCARD", "value": "n", "user_value": null, "dep": "n", "prompt": "Memory Card Driver Debug Features", "cond": "MMCSD && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "MMCSD && DEBUG_FEATURES"}], "help": "Enable MMC/SD memory card Driver debug features.\n\nSupport for this debug option is architecture-specific and may not\nbe available for some MCUs.", "children": [{"type": 3, "name": "DEBUG_MEMCARD_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "Memory Card Driver Error Output", "cond": "DEBUG_ERROR && DEBUG_MEMCARD && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_MEMCARD && DEBUG_FEATURES"}], "help": "Enable MMC/SD memory card driver error output to SYSLOG.\n\nSupport for this debug option is architecture-specific and may not\nbe available for some MCUs."}, {"type": 3, "name": "DEBUG_MEMCARD_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "Memory Card Driver Warnings Output", "cond": "DEBUG_WARN && DEBUG_MEMCARD && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_MEMCARD && DEBUG_FEATURES"}], "help": "Enable MMC/SD memory card driver warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_MEMCARD_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "Memory Card Driver Informational Output", "cond": "DEBUG_INFO && DEBUG_MEMCARD && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_MEMCARD && DEBUG_FEATURES"}], "help": "Enable MMC/SD memory card driver informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_SENSORS", "value": "n", "user_value": null, "dep": "n", "prompt": "Sensor Debug Features", "cond": "SENSORS && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS && DEBUG_FEATURES"}], "help": "Enable sensor driver debug features.\n\nSupport for this debug option is architecture-specific and may not\nbe available for some MCUs.", "children": [{"type": 3, "name": "DEBUG_SENSORS_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "Sensor Error Output", "cond": "DEBUG_ERROR && DEBUG_SENSORS && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_SENSORS && DEBUG_FEATURES"}], "help": "Enable sensor driver error output to SYSLOG."}, {"type": 3, "name": "DEBUG_SENSORS_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "Sensor Warnings Output", "cond": "DEBUG_WARN && DEBUG_SENSORS && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_SENSORS && DEBUG_FEATURES"}], "help": "Enable sensor driver warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_SENSORS_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "Sensor Informational Output", "cond": "DEBUG_INFO && DEBUG_SENSORS && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_SENSORS && DEBUG_FEATURES"}], "help": "Enable sensor driver informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI Debug Features", "cond": "SPI && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "SPI && DEBUG_FEATURES"}], "help": "Enable SPI debug features.\n\nSupport for this debug option is architecture-specific and may not\nbe available for some MCUs.", "children": [{"type": 3, "name": "DEBUG_SPI_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI Error Output", "cond": "DEBUG_ERROR && DEBUG_SPI && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_SPI && DEBUG_FEATURES"}], "help": "Enable SPI error output to SYSLOG."}, {"type": 3, "name": "DEBUG_SPI_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI Warnings Output", "cond": "DEBUG_WARN && DEBUG_SPI && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_SPI && DEBUG_FEATURES"}], "help": "Enable SPI warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_SPI_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI Informational Output", "cond": "DEBUG_INFO && DEBUG_SPI && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_SPI && DEBUG_FEATURES"}], "help": "Enable SPI informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_TIMER", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer Debug Features", "cond": "DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES"}], "help": "Enable timer debug features.\n\nSupport for this debug option is architecture-specific and may not\nbe available for some MCUs.", "children": [{"type": 3, "name": "DEBUG_TIMER_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer Error Output", "cond": "DEBUG_ERROR && DEBUG_TIMER && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_TIMER && DEBUG_FEATURES"}], "help": "Enable timer error output to SYSLOG."}, {"type": 3, "name": "DEBUG_TIMER_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer Warnings Output", "cond": "DEBUG_WARN && DEBUG_TIMER && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_TIMER && DEBUG_FEATURES"}], "help": "Enable timer warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_TIMER_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer Informational Output", "cond": "DEBUG_INFO && DEBUG_TIMER && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_TIMER && DEBUG_FEATURES"}], "help": "Enable timer informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_USB", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Debug Features", "cond": "(USBDEV || USBHOST) && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "(USBDEV || USBHOST) && DEBUG_FEATURES"}], "help": "Enable USB debug features.", "children": [{"type": 3, "name": "DEBUG_USB_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Error Output", "cond": "DEBUG_ERROR && DEBUG_USB && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_USB && DEBUG_FEATURES"}], "help": "Enable USB error output to SYSLOG."}, {"type": 3, "name": "DEBUG_USB_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Warnings Output", "cond": "DEBUG_WARN && DEBUG_USB && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_USB && DEBUG_FEATURES"}], "help": "Enable USB warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_USB_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Informational Output", "cond": "DEBUG_INFO && DEBUG_USB && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_USB && DEBUG_FEATURES"}], "help": "Enable USB informational output to SYSLOG."}]}, {"type": 3, "name": "DEBUG_WATCHDOG", "value": "n", "user_value": null, "dep": "n", "prompt": "Watchdog Timer Debug Features", "cond": "WATCHDOG && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "WATCHDOG && DEBUG_FEATURES"}], "help": "Enable watchdog timer debug features.\n\nSupport for this debug option is architecture-specific and may not\nbe available for some MCUs.", "children": [{"type": 3, "name": "DEBUG_WATCHDOG_ERROR", "value": "n", "user_value": null, "dep": "n", "prompt": "Watchdog Timer Error Output", "cond": "DEBUG_ERROR && DEBUG_WATCHDOG && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ERROR && DEBUG_WATCHDOG && DEBUG_FEATURES"}], "help": "Enable watchdog time error output to SYSLOG."}, {"type": 3, "name": "DEBUG_WATCHDOG_WARN", "value": "n", "user_value": null, "dep": "n", "prompt": "Watchdog Timer Warnings Output", "cond": "DEBUG_WARN && DEBUG_WATCHDOG && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WARN && DEBUG_WATCHDOG && DEBUG_FEATURES"}], "help": "Enable watchdog time warning output to SYSLOG."}, {"type": 3, "name": "DEBUG_WATCHDOG_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "Watchdog Timer Informational Output", "cond": "DEBUG_INFO && DEBUG_WATCHDOG && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && DEBUG_WATCHDOG && DEBUG_FEATURES"}], "help": "Enable watchdog time informational output to SYSLOG."}]}]}, {"type": 3, "name": "ARCH_HAVE_STACKCHECK", "value": "y", "user_value": 2, "rev_dep": "(ARCH_ARM && y) || (ARCH_XTENSA && y) || (ARCH_FAMILY_AVR && ARCH_AVR)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "STACK_COLORATION", "value": "y", "user_value": 2, "dep": "y", "prompt": "Stack coloration", "cond": "ARCH_HAVE_STACKCHECK", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_STACKCHECK"}], "help": "Enable stack coloration to initialize the stack memory to the value\nof STACK_COLOR and enable the stack checking APIs that can be used\nto monitor the level of stack usage.\n\nOnly supported by a few architectures."}, {"type": 3, "name": "ARCH_HAVE_HEAPCHECK", "value": "y", "user_value": 2, "rev_dep": "(ARCH_CHIP_LC823450 && y) || (ARCH_CHIP_STM32 && y) || (ARCH_CHIP_STM32F7 && y) || (ARCH_CHIP_STM32L4 && y) || (ARCH_CHIP_CXD56XX && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "HEAP_COLORATION", "value": "n", "user_value": 0, "dep": "y", "prompt": "Heap coloration", "cond": "ARCH_HAVE_HEAPCHECK", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_HEAPCHECK"}], "help": "Enable heap coloration to check heap usage.  Only supported by a few\narchitectures."}, {"type": 3, "name": "DEBUG_SYMBOLS", "value": "y", "user_value": 2, "dep": "y", "prompt": "Generate Debug Symbols", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Build with debug symbols (needed for use with a debugger)."}]}, {"type": 3, "name": "ARCH_HAVE_CUSTOMOPT", "value": "y", "user_value": 2, "rev_dep": "(ARCH_ARM && y) || (ARCH_AVR && y) || (ARCH_MIPS && y) || (ARCH_MISOC && y) || (ARCH_RISCV && y) || (ARCH_XTENSA && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 4, "user_value": 2, "dep": "y", "prompt": "Optimization Level", "cond": "y", "defaults": [{"name": "DEBUG_NOOPT", "default": "n", "cond": "DEBUG_SYMBOLS"}, {"name": "DEBUG_FULLOPT", "default": "n", "cond": "!DEBUG_SYMBOLS"}], "children": [{"type": 3, "name": "DEBUG_NOOPT", "value": "n", "user_value": 0, "dep": "y", "prompt": "Suppress Optimization", "cond": "y", "help": "Build without optimization.  This is often helpful when debugging code."}, {"type": 3, "name": "DEBUG_CUSTOMOPT", "value": "y", "user_value": 2, "dep": "y", "prompt": "Custom Optimization", "cond": "ARCH_HAVE_CUSTOMOPT && y", "help": "Select a custom debug level.  This is often helpful if you suspect an\noptimization level error and want to lower the level of optimization."}, {"type": 3, "name": "DEBUG_FULLOPT", "value": "n", "user_value": 0, "dep": "y", "prompt": "Normal, Full optimization", "cond": "y", "help": "Build full optimization.  This is the normal case for production\nfirmware."}]}, {"type": 47, "name": "DEBUG_OPTLEVEL", "value": "-O0", "user_value": "-O0", "dep": "y", "prompt": "Custom Optimization Level", "cond": "DEBUG_CUSTOMOPT", "defaults": [{"name": "-O2", "default": "-O2", "cond": "DEBUG_CUSTOMOPT"}], "help": "This string represents the custom optimization level that will be\nused if DEBUG_CUSTOMOPT."}]}, {"type": 31, "dep": "y", "prompt": "System Type", "cond": "y", "children": [{"type": 4, "user_value": 2, "dep": "y", "prompt": "CPU Architecture", "cond": "y", "defaults": [{"name": "ARCH_ARM", "default": "y", "cond": "y"}], "children": [{"type": 3, "name": "ARCH_ARM", "value": "y", "user_value": 2, "dep": "y", "prompt": "ARM", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_INTERRUPTSTACK", "cond": "y"}, {"symbol": "ARCH_HAVE_TLS", "cond": "y"}, {"symbol": "ARCH_HAVE_VFORK", "cond": "y"}, {"symbol": "ARCH_HAVE_STACKCHECK", "cond": "y"}, {"symbol": "ARCH_HAVE_CUSTOMOPT", "cond": "y"}], "help": "The ARM architectures"}, {"type": 3, "name": "ARCH_AVR", "value": "n", "user_value": 0, "dep": "y", "prompt": "AVR", "cond": "y", "selects": [{"symbol": "ARCH_NOINTC", "cond": "y"}, {"symbol": "ARCH_HAVE_INTERRUPTSTACK", "cond": "y"}, {"symbol": "ARCH_HAVE_CUSTOMOPT", "cond": "y"}], "help": "Atmel 8-bit bit AVR and 32-bit AVR32 architectures"}, {"type": 3, "name": "ARCH_HC", "value": "n", "user_value": 0, "dep": "y", "prompt": "Freescale HC", "cond": "y", "selects": [{"symbol": "ARCH_NOINTC", "cond": "y"}, {"symbol": "ARCH_HAVE_INTERRUPTSTACK", "cond": "y"}], "help": "Freescale HC architectures (M9S12)"}, {"type": 3, "name": "ARCH_MIPS", "value": "n", "user_value": 0, "dep": "y", "prompt": "MIPS", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_INTERRUPTSTACK", "cond": "y"}, {"symbol": "ARCH_HAVE_CUSTOMOPT", "cond": "y"}], "help": "MIPS architectures (PIC32)"}, {"type": 3, "name": "ARCH_MISOC", "value": "n", "user_value": 0, "dep": "y", "prompt": "MISOC", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_INTERRUPTSTACK", "cond": "y"}, {"symbol": "ARCH_HAVE_CUSTOMOPT", "cond": "y"}], "help": "MISOC"}, {"type": 3, "name": "ARCH_RENESAS", "value": "n", "user_value": 0, "dep": "y", "prompt": "Renesas", "cond": "y", "selects": [{"symbol": "ARCH_NOINTC", "cond": "y"}, {"symbol": "ARCH_HAVE_INTERRUPTSTACK", "cond": "y"}], "help": "Renesas architectures (SH and M16C)."}, {"type": 3, "name": "ARCH_RISCV", "value": "n", "user_value": 0, "dep": "y", "prompt": "RISC-V", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_INTERRUPTSTACK", "cond": "y"}, {"symbol": "ARCH_HAVE_CUSTOMOPT", "cond": "y"}], "help": "RISC-V 32 and 64-bit RV32 / RV64 architectures."}, {"type": 3, "name": "ARCH_SIM", "value": "n", "user_value": 0, "dep": "y", "prompt": "Simulation", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_MULTICPU", "cond": "y"}, {"symbol": "ARCH_HAVE_TLS", "cond": "y"}, {"symbol": "ARCH_HAVE_TICKLESS", "cond": "y"}, {"symbol": "ARCH_HAVE_POWEROFF", "cond": "y"}, {"symbol": "SERIAL_CONSOLE", "cond": "y"}], "help": "Linux/Cywgin user-mode simulation."}, {"type": 3, "name": "ARCH_X86", "value": "n", "user_value": 0, "dep": "y", "prompt": "x86", "cond": "y", "help": "Intel x86 architectures."}, {"type": 3, "name": "ARCH_XTENSA", "value": "n", "user_value": 0, "dep": "y", "prompt": "Xtensa", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_STACKCHECK", "cond": "y"}, {"symbol": "ARCH_HAVE_CUSTOMOPT", "cond": "y"}], "help": "Cadence\u00ae Tensilica\u00ae Xtensa\u00ae actictures."}, {"type": 3, "name": "ARCH_Z16", "value": "n", "user_value": 0, "dep": "y", "prompt": "ZNEO", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_HEAP2", "cond": "y"}], "help": "ZiLOG ZNEO 16-bit architectures (z16f)."}, {"type": 3, "name": "ARCH_Z80", "value": "n", "user_value": 0, "dep": "y", "prompt": "z80", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_HEAP2", "cond": "y"}], "help": "ZiLOG 8-bit architectures (z80, ez80, z8)."}]}, {"type": 47, "name": "ARCH", "value": "arm", "user_value": "arm", "dep": "y", "defaults": [{"name": "arm", "default": "arm", "cond": "ARCH_ARM"}, {"name": "avr", "default": "avr", "cond": "ARCH_AVR"}, {"name": "hc", "default": "hc", "cond": "ARCH_HC"}, {"name": "mips", "default": "mips", "cond": "ARCH_MIPS"}, {"name": "misoc", "default": "misoc", "cond": "ARCH_MISOC"}, {"name": "renesas", "default": "renesas", "cond": "ARCH_RENESAS"}, {"name": "risc-v", "default": "risc-v", "cond": "ARCH_RISCV"}, {"name": "sim", "default": "sim", "cond": "ARCH_SIM"}, {"name": "x86", "default": "x86", "cond": "ARCH_X86"}, {"name": "xtensa", "default": "xtensa", "cond": "ARCH_XTENSA"}, {"name": "z16", "default": "z16", "cond": "ARCH_Z16"}, {"name": "z80", "default": "z80", "cond": "ARCH_Z80"}]}, {"type": 6, "dep": "y", "prompt": "ARM Options", "cond": "ARCH_ARM"}, {"type": 4, "user_value": 2, "dep": "y", "prompt": "ARM chip selection", "cond": "ARCH_ARM", "defaults": [{"name": "ARCH_CHIP_STM32", "default": "n", "cond": "ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_A1X", "value": "n", "user_value": 0, "dep": "y", "prompt": "Allwinner A1X", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXA8", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "ARCH_HAVE_IRQPRIO", "cond": "y"}, {"symbol": "ARCH_HAVE_LOWVECTORS", "cond": "y"}, {"symbol": "ARCH_HAVE_SDRAM", "cond": "y"}, {"symbol": "BOOT_RUNFROMSDRAM", "cond": "y"}, {"symbol": "ARCH_HAVE_ADDRENV", "cond": "y"}, {"symbol": "ARCH_NEED_ADDRENV_MAPPING", "cond": "y"}], "help": "Allwinner A1X family: A10, A10S (A12), A13 (ARM Cortex-A8)"}, {"type": 3, "name": "ARCH_CHIP_C5471", "value": "n", "user_value": 0, "dep": "y", "prompt": "TMS320 C5471", "cond": "y", "selects": [{"symbol": "ARCH_ARM7TDMI", "cond": "y"}, {"symbol": "ARCH_HAVE_LOWVECTORS", "cond": "y"}, {"symbol": "OTHER_UART_SERIALDRIVER", "cond": "y"}], "help": "TI TMS320 C5471, A180, or DA180 (ARM7TDMI)"}, {"type": 3, "name": "ARCH_CHIP_DM320", "value": "n", "user_value": 0, "dep": "y", "prompt": "TMS320 DM320", "cond": "y", "selects": [{"symbol": "ARCH_ARM926EJS", "cond": "y"}, {"symbol": "ARCH_HAVE_LOWVECTORS", "cond": "y"}], "help": "TI DMS320 DM320 (ARM926EJS)"}, {"type": 3, "name": "ARCH_CHIP_EFM32", "value": "n", "user_value": 0, "dep": "y", "prompt": "Energy Micro", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_CMNVECTOR", "cond": "y"}, {"symbol": "ARCH_HAVE_SPI_BITORDER", "cond": "y"}, {"symbol": "ARMV7M_CMNVECTOR", "cond": "y"}], "help": "Energy Micro EFM32 microcontrollers (ARM Cortex-M)."}, {"type": 3, "name": "ARCH_CHIP_IMX1", "value": "n", "user_value": 0, "dep": "y", "prompt": "NXP/Freescale iMX.1", "cond": "y", "selects": [{"symbol": "ARCH_ARM920T", "cond": "y"}, {"symbol": "ARCH_HAVE_HEAP2", "cond": "y"}, {"symbol": "ARCH_HAVE_LOWVECTORS", "cond": "y"}], "help": "Freescale iMX.1 architectures (ARM920T)"}, {"type": 3, "name": "ARCH_CHIP_IMX6", "value": "n", "user_value": 0, "dep": "y", "prompt": "NXP/Freescale iMX.6", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXA9", "cond": "y"}, {"symbol": "ARMV7A_HAVE_L2CC_PL310", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "ARCH_HAVE_TRUSTZONE", "cond": "y"}, {"symbol": "ARCH_HAVE_LOWVECTORS", "cond": "y"}, {"symbol": "ARCH_HAVE_SDRAM", "cond": "y"}, {"symbol": "BOOT_RUNFROMSDRAM", "cond": "y"}, {"symbol": "ARCH_HAVE_ADDRENV", "cond": "y"}, {"symbol": "ARCH_NEED_ADDRENV_MAPPING", "cond": "y"}], "help": "Freescale iMX.6 architectures (Cortex-A9)"}, {"type": 3, "name": "ARCH_CHIP_KINETIS", "value": "n", "user_value": 0, "dep": "y", "prompt": "NXP/Freescale Kinetis", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_HAVE_MPU", "cond": "y"}, {"symbol": "ARM_HAVE_MPU_UNIFIED", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "ARCH_HAVE_RAMFUNCS", "cond": "y"}, {"symbol": "ARCH_HAVE_CMNVECTOR", "cond": "y"}, {"symbol": "ARCH_HAVE_I2CRESET", "cond": "y"}], "help": "Freescale Kinetis Architectures (ARM Cortex-M4)"}, {"type": 3, "name": "ARCH_CHIP_KL", "value": "n", "user_value": 0, "dep": "y", "prompt": "NXP/Freescale Kinetis L", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM0", "cond": "y"}, {"symbol": "ARCH_HAVE_CMNVECTOR", "cond": "y"}], "help": "Freescale Kinetis L Architectures (ARM Cortex-M0+)"}, {"type": 3, "name": "ARCH_CHIP_LC823450", "value": "n", "user_value": 0, "dep": "y", "prompt": "ON Semiconductor LC823450", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "ARCH_HAVE_CMNVECTOR", "cond": "y"}, {"symbol": "ARCH_HAVE_MPU", "cond": "y"}, {"symbol": "ARCH_HAVE_HEAPCHECK", "cond": "y"}, {"symbol": "ARCH_HAVE_MULTICPU", "cond": "y"}, {"symbol": "ARCH_HAVE_I2CRESET", "cond": "y"}], "help": "ON Semiconductor LC823450 architectures (ARM dual Cortex-M3)"}, {"type": 3, "name": "ARCH_CHIP_LM", "value": "n", "user_value": 0, "dep": "y", "prompt": "TI/Luminary Stellaris", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_CMNVECTOR", "cond": "y"}, {"symbol": "ARCH_HAVE_MPU", "cond": "y"}, {"symbol": "ARM_HAVE_MPU_UNIFIED", "cond": "y"}], "help": "TI/Luminary Stellaris LMS3 and LM4F architectures (ARM Cortex-M3/4)"}, {"type": 3, "name": "ARCH_CHIP_TIVA", "value": "n", "user_value": 0, "dep": "y", "prompt": "TI Tiva", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_CMNVECTOR", "cond": "y"}, {"symbol": "ARCH_HAVE_MPU", "cond": "y"}, {"symbol": "ARM_HAVE_MPU_UNIFIED", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}], "help": "TI Tiva TM4C architectures (ARM Cortex-M4)"}, {"type": 3, "name": "ARCH_CHIP_LPC11XX", "value": "n", "user_value": 0, "dep": "y", "prompt": "NXP LPC11xx", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM0", "cond": "y"}, {"symbol": "ARCH_HAVE_CMNVECTOR", "cond": "y"}], "help": "NXP LPC11xx architectures (ARM Cortex-M0)"}, {"type": 3, "name": "ARCH_CHIP_LPC17XX", "value": "n", "user_value": 0, "dep": "y", "prompt": "NXP LPC17xx", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "ARCH_HAVE_CMNVECTOR", "cond": "y"}, {"symbol": "ARCH_HAVE_MPU", "cond": "y"}, {"symbol": "ARM_HAVE_MPU_UNIFIED", "cond": "y"}], "help": "NXP LPC17xx architectures (ARM Cortex-M3)"}, {"type": 3, "name": "ARCH_CHIP_LPC214X", "value": "n", "user_value": 0, "dep": "y", "prompt": "NXP LPC214x", "cond": "y", "selects": [{"symbol": "ARCH_ARM7TDMI", "cond": "y"}, {"symbol": "ARCH_HAVE_LOWVECTORS", "cond": "y"}], "help": "NXP LPC2145x architectures (ARM7TDMI)"}, {"type": 3, "name": "ARCH_CHIP_LPC2378", "value": "n", "user_value": 0, "dep": "y", "prompt": "NXP LPC2378", "cond": "y", "selects": [{"symbol": "ARCH_ARM7TDMI", "cond": "y"}, {"symbol": "ARCH_HAVE_LOWVECTORS", "cond": "y"}], "help": "NXP LPC2145x architectures (ARM7TDMI)"}, {"type": 3, "name": "ARCH_CHIP_LPC31XX", "value": "n", "user_value": 0, "dep": "y", "prompt": "NXP LPC31XX", "cond": "y", "selects": [{"symbol": "ARCH_ARM926EJS", "cond": "y"}, {"symbol": "ARCH_HAVE_LOWVECTORS", "cond": "y"}], "help": "NPX LPC31XX architectures (ARM926EJS)."}, {"type": 3, "name": "ARCH_CHIP_LPC43XX", "value": "n", "user_value": 0, "dep": "y", "prompt": "NXP LPC43XX", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_HAVE_CMNVECTOR", "cond": "y"}, {"symbol": "ARMV7M_CMNVECTOR", "cond": "y"}, {"symbol": "ARCH_HAVE_MPU", "cond": "y"}, {"symbol": "ARM_HAVE_MPU_UNIFIED", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}], "help": "NPX LPC43XX architectures (ARM Cortex-M4)."}, {"type": 3, "name": "ARCH_CHIP_MOXART", "value": "n", "user_value": 0, "dep": "y", "prompt": "MoxART", "cond": "y", "selects": [{"symbol": "ARCH_ARM7TDMI", "cond": "y"}, {"symbol": "ARCH_HAVE_RESET", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}], "help": "MoxART family"}, {"type": 3, "name": "ARCH_CHIP_NUC1XX", "value": "n", "user_value": 0, "dep": "y", "prompt": "Nuvoton NUC100/120", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM0", "cond": "y"}, {"symbol": "ARCH_HAVE_CMNVECTOR", "cond": "y"}], "help": "Nuvoton NUC100/120 architectures (ARM Cortex-M0)."}, {"type": 3, "name": "ARCH_CHIP_SAMA5", "value": "n", "user_value": 0, "dep": "y", "prompt": "Atmel SAMA5", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXA5", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "ARCH_HAVE_IRQPRIO", "cond": "y"}, {"symbol": "ARCH_HAVE_LOWVECTORS", "cond": "y"}, {"symbol": "ARCH_HAVE_I2CRESET", "cond": "y"}, {"symbol": "ARCH_HAVE_TICKLESS", "cond": "y"}, {"symbol": "ARCH_HAVE_ADDRENV", "cond": "y"}, {"symbol": "ARCH_NEED_ADDRENV_MAPPING", "cond": "y"}], "help": "Atmel SAMA5 (ARM Cortex-A5)"}, {"type": 3, "name": "ARCH_CHIP_SAMD", "value": "n", "user_value": 0, "dep": "y", "prompt": "Atmel SAMD", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM0", "cond": "y"}, {"symbol": "ARCH_HAVE_CMNVECTOR", "cond": "y"}], "help": "Atmel SAMD (ARM Cortex-M0+)"}, {"type": 3, "name": "ARCH_CHIP_SAML", "value": "n", "user_value": 0, "dep": "y", "prompt": "Atmel SAML", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM0", "cond": "y"}, {"symbol": "ARCH_HAVE_CMNVECTOR", "cond": "y"}], "help": "Atmel SAML (ARM Cortex-M0+)"}, {"type": 3, "name": "ARCH_CHIP_SAM34", "value": "n", "user_value": 0, "dep": "y", "prompt": "Atmel SAM3/SAM4", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_CMNVECTOR", "cond": "y"}, {"symbol": "ARCH_HAVE_MPU", "cond": "y"}, {"symbol": "ARM_HAVE_MPU_UNIFIED", "cond": "y"}, {"symbol": "ARCH_HAVE_RAMFUNCS", "cond": "y"}, {"symbol": "ARMV7M_HAVE_STACKCHECK", "cond": "y"}], "help": "Atmel SAM3 (ARM Cortex-M3) and SAM4 (ARM Cortex-M4) architectures"}, {"type": 3, "name": "ARCH_CHIP_SAMV7", "value": "n", "user_value": 0, "dep": "y", "prompt": "Atmel SAMV7", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_CMNVECTOR", "cond": "y"}, {"symbol": "ARCH_CORTEXM7", "cond": "y"}, {"symbol": "ARCH_HAVE_MPU", "cond": "y"}, {"symbol": "ARCH_HAVE_RAMFUNCS", "cond": "y"}, {"symbol": "ARCH_HAVE_TICKLESS", "cond": "y"}, {"symbol": "ARCH_HAVE_I2CRESET", "cond": "y"}, {"symbol": "ARCH_HAVE_SPI_CS_CONTROL", "cond": "y"}, {"symbol": "ARM_HAVE_MPU_UNIFIED", "cond": "y"}, {"symbol": "ARMV7M_CMNVECTOR", "cond": "y"}, {"symbol": "ARMV7M_HAVE_STACKCHECK", "cond": "y"}], "help": "Atmel SAMV7 (ARM Cortex-M7) architectures"}, {"type": 3, "name": "ARCH_CHIP_STM32", "value": "n", "user_value": 0, "dep": "y", "prompt": "STMicro STM32 F1/F2/F3/F4", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_CMNVECTOR", "cond": "y"}, {"symbol": "ARCH_HAVE_MPU", "cond": "y"}, {"symbol": "ARCH_HAVE_I2CRESET", "cond": "y"}, {"symbol": "ARCH_HAVE_HEAPCHECK", "cond": "y"}, {"symbol": "ARCH_HAVE_TICKLESS", "cond": "y"}, {"symbol": "ARCH_HAVE_TIMEKEEPING", "cond": "y"}, {"symbol": "ARCH_HAVE_SPI_BITORDER", "cond": "y"}, {"symbol": "ARM_HAVE_MPU_UNIFIED", "cond": "y"}, {"symbol": "ARMV7M_HAVE_STACKCHECK", "cond": "y"}], "help": "STMicro STM32 architectures (ARM Cortex-M3/4)."}, {"type": 3, "name": "ARCH_CHIP_STM32F0", "value": "n", "user_value": 0, "dep": "y", "prompt": "STMicro STM32 F0", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM0", "cond": "y"}, {"symbol": "ARCH_HAVE_CMNVECTOR", "cond": "y"}], "help": "STMicro STM32 architectures (ARM Cortex-M0)."}, {"type": 3, "name": "ARCH_CHIP_STM32F7", "value": "n", "user_value": 0, "dep": "y", "prompt": "STMicro STM32 F7", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_CMNVECTOR", "cond": "y"}, {"symbol": "ARCH_CORTEXM7", "cond": "y"}, {"symbol": "ARCH_HAVE_MPU", "cond": "y"}, {"symbol": "ARCH_HAVE_I2CRESET", "cond": "y"}, {"symbol": "ARCH_HAVE_HEAPCHECK", "cond": "y"}, {"symbol": "ARCH_HAVE_SPI_BITORDER", "cond": "y"}, {"symbol": "ARM_HAVE_MPU_UNIFIED", "cond": "y"}, {"symbol": "ARMV7M_CMNVECTOR", "cond": "y"}, {"symbol": "ARMV7M_HAVE_STACKCHECK", "cond": "y"}], "help": "STMicro STM32 architectures (ARM Cortex-M7)."}, {"type": 3, "name": "ARCH_CHIP_STM32L4", "value": "n", "user_value": 0, "dep": "y", "prompt": "STMicro STM32 L4", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_CMNVECTOR", "cond": "y"}, {"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_HAVE_MPU", "cond": "y"}, {"symbol": "ARCH_HAVE_I2CRESET", "cond": "y"}, {"symbol": "ARCH_HAVE_HEAPCHECK", "cond": "y"}, {"symbol": "ARCH_HAVE_TICKLESS", "cond": "y"}, {"symbol": "ARCH_HAVE_SPI_BITORDER", "cond": "y"}, {"symbol": "ARM_HAVE_MPU_UNIFIED", "cond": "y"}, {"symbol": "ARMV7M_CMNVECTOR", "cond": "y"}, {"symbol": "ARMV7M_HAVE_STACKCHECK", "cond": "y"}], "help": "STMicro STM32 architectures (ARM Cortex-M4)."}, {"type": 3, "name": "ARCH_CHIP_STR71X", "value": "n", "user_value": 0, "dep": "y", "prompt": "STMicro STR71x", "cond": "y", "selects": [{"symbol": "ARCH_ARM7TDMI", "cond": "y"}, {"symbol": "ARCH_HAVE_LOWVECTORS", "cond": "y"}], "help": "STMicro STR71x architectures (ARM7TDMI)."}, {"type": 3, "name": "ARCH_CHIP_TMS570", "value": "n", "user_value": 0, "dep": "y", "prompt": "TI TMS570", "cond": "y", "selects": [{"symbol": "ENDIAN_BIG", "cond": "y"}, {"symbol": "ARCH_HAVE_LOWVECTORS", "cond": "y"}, {"symbol": "ARCH_HAVE_RAMFUNCS", "cond": "y"}, {"symbol": "ARMV7R_MEMINIT", "cond": "y"}, {"symbol": "ARMV7R_HAVE_DECODEFIQ", "cond": "y"}], "help": "TI TMS570 family"}, {"type": 3, "name": "ARCH_CHIP_XMC4", "value": "n", "user_value": 0, "dep": "y", "prompt": "Infineon XMC4xxx", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_CMNVECTOR", "cond": "y"}, {"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_HAVE_MPU", "cond": "y"}, {"symbol": "ARCH_HAVE_RAMFUNCS", "cond": "y"}, {"symbol": "ARCH_HAVE_I2CRESET", "cond": "y"}, {"symbol": "ARM_HAVE_MPU_UNIFIED", "cond": "y"}, {"symbol": "ARMV7M_CMNVECTOR", "cond": "y"}, {"symbol": "ARMV7M_HAVE_STACKCHECK", "cond": "y"}], "help": "Infineon XMC4xxx(ARM Cortex-M4) architectures"}, {"type": 3, "name": "ARCH_CHIP_CXD56XX", "value": "y", "user_value": 2, "dep": "y", "prompt": "Sony CXD56xx", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_HAVE_CMNVECTOR", "cond": "y"}, {"symbol": "ARMV7M_CMNVECTOR", "cond": "y"}, {"symbol": "ARCH_HAVE_MPU", "cond": "y"}, {"symbol": "ARM_HAVE_MPU_UNIFIED", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "ARCH_HAVE_HEAPCHECK", "cond": "y"}, {"symbol": "ARCH_HAVE_MULTICPU", "cond": "y"}, {"symbol": "ARCH_HAVE_SDIO", "cond": "MMCSD && y"}], "help": "Sony CXD56XX (ARM Cortex-M4) architectures"}]}, {"type": 3, "name": "ARCH_ARM7TDMI", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_C5471 && y) || (ARCH_CHIP_LPC214X && y) || (ARCH_CHIP_LPC2378 && y) || (ARCH_CHIP_MOXART && y) || (ARCH_CHIP_STR71X && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}]}, {"type": 3, "name": "ARCH_ARM926EJS", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_DM320 && y) || (ARCH_CHIP_LPC31XX && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_MMU", "cond": "ARCH_ARM"}, {"symbol": "ARCH_USE_MMU", "cond": "ARCH_ARM"}]}, {"type": 3, "name": "ARCH_ARM920T", "value": "n", "user_value": 0, "rev_dep": "ARCH_CHIP_IMX1 && y", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_MMU", "cond": "ARCH_ARM"}, {"symbol": "ARCH_USE_MMU", "cond": "ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CORTEXM0", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_KL && y) || (ARCH_CHIP_LPC11XX && y) || (ARCH_CHIP_NUC1XX && y) || (ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAML && y) || (ARCH_CHIP_STM32F0 && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_IRQPRIO", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_RESET", "cond": "ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CORTEXM23", "value": "n", "user_value": 0, "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CORTEXM3", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_LC823450 && y) || (ARCH_CHIP_LPC17XX && y) || (ARCH_CHIP_EFM32TG840F32 && y) || (ARCH_CHIP_EFM32G880F128 && y) || (ARCH_CHIP_EFM32G890F128 && y) || (ARCH_CHIP_EFM32GG332F1024 && y) || (ARCH_CHIP_EFM32GG990F1024 && y) || (ARCH_CHIP_LM3S6918 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S9B96 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S6432 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S6965 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S8962 && ARCH_CHIP_LM && y) || (ARCH_CHIP_ATSAM3U4E && y) || (ARCH_CHIP_ATSAM3U4C && y) || (ARCH_CHIP_ATSAM3U2E && y) || (ARCH_CHIP_ATSAM3U2C && y) || (ARCH_CHIP_ATSAM3U1E && y) || (ARCH_CHIP_ATSAM3U1C && y) || (ARCH_CHIP_ATSAM3X8E && y) || (ARCH_CHIP_ATSAM3X8C && y) || (ARCH_CHIP_ATSAM3X4E && y) || (ARCH_CHIP_ATSAM3X4C && y) || (ARCH_CHIP_ATSAM3A8C && y) || (ARCH_CHIP_ATSAM3A4C && y) || (ARCH_CHIP_STM32L151C6 && y) || (ARCH_CHIP_STM32L151C8 && y) || (ARCH_CHIP_STM32L151CB && y) || (ARCH_CHIP_STM32L151R6 && y) || (ARCH_CHIP_STM32L151R8 && y) || (ARCH_CHIP_STM32L151RB && y) || (ARCH_CHIP_STM32L151V6 && y) || (ARCH_CHIP_STM32L151V8 && y) || (ARCH_CHIP_STM32L151VB && y) || (ARCH_CHIP_STM32L152C6 && y) || (ARCH_CHIP_STM32L152C8 && y) || (ARCH_CHIP_STM32L152CB && y) || (ARCH_CHIP_STM32L152R6 && y) || (ARCH_CHIP_STM32L152R8 && y) || (ARCH_CHIP_STM32L152RB && y) || (ARCH_CHIP_STM32L152V6 && y) || (ARCH_CHIP_STM32L152V8 && y) || (ARCH_CHIP_STM32L152VB && y) || (ARCH_CHIP_STM32L152CC && y) || (ARCH_CHIP_STM32L152RC && y) || (ARCH_CHIP_STM32L152VC && y) || (ARCH_CHIP_STM32L162ZD && y) || (ARCH_CHIP_STM32L162VE && y) || (ARCH_CHIP_STM32F100C8 && y) || (ARCH_CHIP_STM32F100CB && y) || (ARCH_CHIP_STM32F100R8 && y) || (ARCH_CHIP_STM32F100RB && y) || (ARCH_CHIP_STM32F100RC && y) || (ARCH_CHIP_STM32F100RD && y) || (ARCH_CHIP_STM32F100RE && y) || (ARCH_CHIP_STM32F100V8 && y) || (ARCH_CHIP_STM32F100VB && y) || (ARCH_CHIP_STM32F100VC && y) || (ARCH_CHIP_STM32F100VD && y) || (ARCH_CHIP_STM32F100VE && y) || (ARCH_CHIP_STM32F102CB && y) || (ARCH_CHIP_STM32F103T8 && y) || (ARCH_CHIP_STM32F103TB && y) || (ARCH_CHIP_STM32F103C4 && y) || (ARCH_CHIP_STM32F103C8 && y) || (ARCH_CHIP_STM32F103CB && y) || (ARCH_CHIP_STM32F103R8 && y) || (ARCH_CHIP_STM32F103RB && y) || (ARCH_CHIP_STM32F103RC && y) || (ARCH_CHIP_STM32F103RD && y) || (ARCH_CHIP_STM32F103RE && y) || (ARCH_CHIP_STM32F103RG && y) || (ARCH_CHIP_STM32F103V8 && y) || (ARCH_CHIP_STM32F103VB && y) || (ARCH_CHIP_STM32F103VC && y) || (ARCH_CHIP_STM32F103VE && y) || (ARCH_CHIP_STM32F103ZE && y) || (ARCH_CHIP_STM32F105VB && y) || (ARCH_CHIP_STM32F105RB && y) || (ARCH_CHIP_STM32F107VC && y) || (ARCH_CHIP_STM32F205RG && y) || (ARCH_CHIP_STM32F207IG && y) || (ARCH_CHIP_STM32F207ZE && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_IRQPRIO", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_RAMVECTORS", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_HIPRI_INTERRUPT", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_RESET", "cond": "ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CORTEXM33", "value": "n", "user_value": 0, "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CORTEXM4", "value": "y", "user_value": 2, "rev_dep": "(ARCH_CHIP_KINETIS && y) || (ARCH_CHIP_LPC43XX && y) || (ARCH_CHIP_STM32L4 && y) || (ARCH_CHIP_XMC4 && y) || (ARCH_CHIP_CXD56XX && y) || (ARCH_CHIP_LM4F120 && ARCH_CHIP_LM && y) || (ARCH_CHIP_CC3200 && ARCH_CHIP_TIVA && y) || (ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_ATSAM4CMP16B && y) || (ARCH_CHIP_ATSAM4LC2C && y) || (ARCH_CHIP_ATSAM4LC2B && y) || (ARCH_CHIP_ATSAM4LC2A && y) || (ARCH_CHIP_ATSAM4LC4C && y) || (ARCH_CHIP_ATSAM4LC4B && y) || (ARCH_CHIP_ATSAM4LC4A && y) || (ARCH_CHIP_ATSAM4LS2C && y) || (ARCH_CHIP_ATSAM4LS2B && y) || (ARCH_CHIP_ATSAM4LS2A && y) || (ARCH_CHIP_ATSAM4LS4C && y) || (ARCH_CHIP_ATSAM4LS4B && y) || (ARCH_CHIP_ATSAM4LS4A && y) || (ARCH_CHIP_ATSAM4SD32C && y) || (ARCH_CHIP_ATSAM4SD32B && y) || (ARCH_CHIP_ATSAM4SD16C && y) || (ARCH_CHIP_ATSAM4SD16B && y) || (ARCH_CHIP_ATSAM4SA16C && y) || (ARCH_CHIP_ATSAM4SA16B && y) || (ARCH_CHIP_ATSAM4S16C && y) || (ARCH_CHIP_ATSAM4S16B && y) || (ARCH_CHIP_ATSAM4S8C && y) || (ARCH_CHIP_ATSAM4S8B && y) || (ARCH_CHIP_ATSAM4S4C && y) || (ARCH_CHIP_ATSAM4E16E && y) || (ARCH_CHIP_ATSAM4E16C && y) || (ARCH_CHIP_ATSAM4E8E && y) || (ARCH_CHIP_ATSAM4E8C && y) || (ARCH_CHIP_STM32F302K6 && y) || (ARCH_CHIP_STM32F302K8 && y) || (ARCH_CHIP_STM32F302CB && y) || (ARCH_CHIP_STM32F302CC && y) || (ARCH_CHIP_STM32F302RB && y) || (ARCH_CHIP_STM32F302RC && y) || (ARCH_CHIP_STM32F302VB && y) || (ARCH_CHIP_STM32F302VC && y) || (ARCH_CHIP_STM32F303K6 && y) || (ARCH_CHIP_STM32F303K8 && y) || (ARCH_CHIP_STM32F303C6 && y) || (ARCH_CHIP_STM32F303C8 && y) || (ARCH_CHIP_STM32F303CB && y) || (ARCH_CHIP_STM32F303CC && y) || (ARCH_CHIP_STM32F303RB && y) || (ARCH_CHIP_STM32F303RC && y) || (ARCH_CHIP_STM32F303RD && y) || (ARCH_CHIP_STM32F303RE && y) || (ARCH_CHIP_STM32F303VB && y) || (ARCH_CHIP_STM32F303VC && y) || (ARCH_CHIP_STM32F334K4 && y) || (ARCH_CHIP_STM32F334K6 && y) || (ARCH_CHIP_STM32F334K8 && y) || (ARCH_CHIP_STM32F334C4 && y) || (ARCH_CHIP_STM32F334C6 && y) || (ARCH_CHIP_STM32F334C8 && y) || (ARCH_CHIP_STM32F334R4 && y) || (ARCH_CHIP_STM32F334R6 && y) || (ARCH_CHIP_STM32F334R8 && y) || (ARCH_CHIP_STM32F372C8 && y) || (ARCH_CHIP_STM32F372R8 && y) || (ARCH_CHIP_STM32F372V8 && y) || (ARCH_CHIP_STM32F372CB && y) || (ARCH_CHIP_STM32F372RB && y) || (ARCH_CHIP_STM32F372VB && y) || (ARCH_CHIP_STM32F372CC && y) || (ARCH_CHIP_STM32F372RC && y) || (ARCH_CHIP_STM32F372VC && y) || (ARCH_CHIP_STM32F373C8 && y) || (ARCH_CHIP_STM32F373R8 && y) || (ARCH_CHIP_STM32F373V8 && y) || (ARCH_CHIP_STM32F373CB && y) || (ARCH_CHIP_STM32F373RB && y) || (ARCH_CHIP_STM32F373VB && y) || (ARCH_CHIP_STM32F373CC && y) || (ARCH_CHIP_STM32F373RC && y) || (ARCH_CHIP_STM32F373VC && y) || (ARCH_CHIP_STM32F401RE && y) || (ARCH_CHIP_STM32F410RB && y) || (ARCH_CHIP_STM32F411RE && y) || (ARCH_CHIP_STM32F411VE && y) || (ARCH_CHIP_STM32F405RG && y) || (ARCH_CHIP_STM32F405VG && y) || (ARCH_CHIP_STM32F405ZG && y) || (ARCH_CHIP_STM32F407VE && y) || (ARCH_CHIP_STM32F407VG && y) || (ARCH_CHIP_STM32F407ZE && y) || (ARCH_CHIP_STM32F407ZG && y) || (ARCH_CHIP_STM32F407IE && y) || (ARCH_CHIP_STM32F407IG && y) || (ARCH_CHIP_STM32F427V && y) || (ARCH_CHIP_STM32F427Z && y) || (ARCH_CHIP_STM32F427I && y) || (ARCH_CHIP_STM32F429V && y) || (ARCH_CHIP_STM32F429Z && y) || (ARCH_CHIP_STM32F429I && y) || (ARCH_CHIP_STM32F429B && y) || (ARCH_CHIP_STM32F429N && y) || (ARCH_CHIP_STM32F446M && y) || (ARCH_CHIP_STM32F446R && y) || (ARCH_CHIP_STM32F446V && y) || (ARCH_CHIP_STM32F446Z && y) || (ARCH_CHIP_STM32F469A && y) || (ARCH_CHIP_STM32F469I && y) || (ARCH_CHIP_STM32F469B && y) || (ARCH_CHIP_STM32F469N && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_IRQPRIO", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_RAMVECTORS", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_HIPRI_INTERRUPT", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_RESET", "cond": "ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CORTEXM7", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_SAMV7 && y) || (ARCH_CHIP_STM32F7 && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_IRQPRIO", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_RAMVECTORS", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_HIPRI_INTERRUPT", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_RESET", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_COHERENT_DCACHE", "cond": "(ELF || MODULE) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CORTEXA5", "value": "n", "user_value": 0, "rev_dep": "ARCH_CHIP_SAMA5 && y", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_MMU", "cond": "ARCH_ARM"}, {"symbol": "ARCH_USE_MMU", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_COHERENT_DCACHE", "cond": "(ELF || MODULE) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CORTEXA8", "value": "n", "user_value": 0, "rev_dep": "ARCH_CHIP_A1X && y", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_MMU", "cond": "ARCH_ARM"}, {"symbol": "ARCH_USE_MMU", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_COHERENT_DCACHE", "cond": "(ELF || MODULE) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CORTEXA9", "value": "n", "user_value": 0, "rev_dep": "ARCH_CHIP_IMX6 && y", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_MMU", "cond": "ARCH_ARM"}, {"symbol": "ARCH_USE_MMU", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_COHERENT_DCACHE", "cond": "(ELF || MODULE) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CORTEXR4", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_TMS570LS0232PZ && y) || (ARCH_CHIP_TMS570LS0332PZ && y) || (ARCH_CHIP_TMS570LS0432PZ && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_MPU", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_COHERENT_DCACHE", "cond": "(ELF || MODULE) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CORTEXR4F", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_TMS570LS0714PZ && y) || (ARCH_CHIP_TMS570LS0714PGE && y) || (ARCH_CHIP_TMS570LS0714ZWT && y) || (ARCH_CHIP_TMS570LS1227ZWT && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_MPU", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_COHERENT_DCACHE", "cond": "(ELF || MODULE) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CORTEXR5", "value": "n", "user_value": 0, "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_MPU", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_COHERENT_DCACHE", "cond": "(ELF || MODULE) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CORTEXR5F", "value": "n", "user_value": 0, "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_MPU", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_COHERENT_DCACHE", "cond": "(ELF || MODULE) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CORTEXR7", "value": "n", "user_value": 0, "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_MPU", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_COHERENT_DCACHE", "cond": "(ELF || MODULE) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CORTEXR7F", "value": "n", "user_value": 0, "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_MPU", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_ARM"}, {"symbol": "ARCH_HAVE_COHERENT_DCACHE", "cond": "(ELF || MODULE) && ARCH_ARM"}]}, {"type": 47, "name": "ARCH_FAMILY", "value": "armv7-m", "user_value": "armv7-m", "dep": "y", "defaults": [{"name": "arm", "default": "arm", "cond": "(ARCH_ARM7TDMI || ARCH_ARM926EJS || ARCH_ARM920T) && ARCH_ARM"}, {"name": "armv6-m", "default": "armv6-m", "cond": "ARCH_CORTEXM0 && ARCH_ARM"}, {"name": "armv7-a", "default": "armv7-a", "cond": "(ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM"}, {"name": "armv7-m", "default": "armv7-m", "cond": "(ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}, {"name": "armv7-r", "default": "armv7-r", "cond": "(ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}]}, {"type": 47, "name": "ARCH_CHIP", "value": "cxd56xx", "user_value": "cxd56xx", "dep": "y", "defaults": [{"name": "a1x", "default": "a1x", "cond": "ARCH_CHIP_A1X && ARCH_ARM"}, {"name": "c5471", "default": "c5471", "cond": "ARCH_CHIP_C5471 && ARCH_ARM"}, {"name": "dm320", "default": "dm320", "cond": "ARCH_CHIP_DM320 && ARCH_ARM"}, {"name": "efm32", "default": "efm32", "cond": "ARCH_CHIP_EFM32 && ARCH_ARM"}, {"name": "imx1", "default": "imx1", "cond": "ARCH_CHIP_IMX1 && ARCH_ARM"}, {"name": "imx6", "default": "imx6", "cond": "ARCH_CHIP_IMX6 && ARCH_ARM"}, {"name": "kinetis", "default": "kinetis", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}, {"name": "kl", "default": "kl", "cond": "ARCH_CHIP_KL && ARCH_ARM"}, {"name": "lc823450", "default": "lc823450", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM"}, {"name": "tiva", "default": "tiva", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"name": "lpc11xx", "default": "lpc11xx", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM"}, {"name": "lpc17xx", "default": "lpc17xx", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}, {"name": "lpc214x", "default": "lpc214x", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM"}, {"name": "lpc2378", "default": "lpc2378", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}, {"name": "lpc31xx", "default": "lpc31xx", "cond": "ARCH_CHIP_LPC31XX && ARCH_ARM"}, {"name": "lpc43xx", "default": "lpc43xx", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}, {"name": "moxart", "default": "moxart", "cond": "ARCH_CHIP_MOXART && ARCH_ARM"}, {"name": "nuc1xx", "default": "nuc1xx", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}, {"name": "sama5", "default": "sama5", "cond": "ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"name": "samdl", "default": "samdl", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}, {"name": "sam34", "default": "sam34", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"name": "samv7", "default": "samv7", "cond": "ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"name": "stm32", "default": "stm32", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"name": "stm32f0", "default": "stm32f0", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"name": "stm32f7", "default": "stm32f7", "cond": "ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"name": "stm32l4", "default": "stm32l4", "cond": "ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"name": "str71x", "default": "str71x", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}, {"name": "tms570", "default": "tms570", "cond": "ARCH_CHIP_TMS570 && ARCH_ARM"}, {"name": "xmc4", "default": "xmc4", "cond": "ARCH_CHIP_XMC4 && ARCH_ARM"}, {"name": "cxd56xx", "default": "cxd56xx", "cond": "ARCH_CHIP_CXD56XX && ARCH_ARM"}]}, {"type": 3, "name": "ARMV7M_USEBASEPRI", "value": "y", "user_value": 2, "rev_dep": "ARCH_HIPRI_INTERRUPT && ARCH_HAVE_HIPRI_INTERRUPT && ARCH_HAVE_IRQPRIO", "dep": "y", "prompt": "Use BASEPRI Register", "cond": "(ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}], "help": "Use the BASEPRI register to enable and disable interrupts. By\ndefault, the PRIMASK register is used for this purpose. This\nusually results in hardfaults when supervisor calls are made.\nThough, these hardfaults are properly handled by the RTOS, the\nhardfaults can confuse some debuggers. With the BASEPRI\nregister, these hardfaults, will be avoided. For more details see\nhttp://www.nuttx.org/doku.php?id=wiki:nxinternal:svcall"}, {"type": 3, "name": "ARCH_HAVE_CMNVECTOR", "value": "y", "user_value": 2, "rev_dep": "(ARCH_CHIP_EFM32 && y) || (ARCH_CHIP_KINETIS && y) || (ARCH_CHIP_KL && y) || (ARCH_CHIP_LC823450 && y) || (ARCH_CHIP_LM && y) || (ARCH_CHIP_TIVA && y) || (ARCH_CHIP_LPC11XX && y) || (ARCH_CHIP_LPC17XX && y) || (ARCH_CHIP_LPC43XX && y) || (ARCH_CHIP_NUC1XX && y) || (ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAML && y) || (ARCH_CHIP_SAM34 && y) || (ARCH_CHIP_SAMV7 && y) || (ARCH_CHIP_STM32 && y) || (ARCH_CHIP_STM32F0 && y) || (ARCH_CHIP_STM32F7 && y) || (ARCH_CHIP_STM32L4 && y) || (ARCH_CHIP_XMC4 && y) || (ARCH_CHIP_CXD56XX && y)", "dep": "y"}, {"type": 3, "name": "ARMV7M_CMNVECTOR", "value": "y", "user_value": 2, "rev_dep": "(ARCH_CHIP_EFM32 && y) || (ARCH_CHIP_LPC43XX && y) || (ARCH_CHIP_SAMV7 && y) || (ARCH_CHIP_STM32F7 && y) || (ARCH_CHIP_STM32L4 && y) || (ARCH_CHIP_XMC4 && y) || (ARCH_CHIP_CXD56XX && y)", "dep": "y", "prompt": "Use common ARMv7-M vectors", "cond": "ARCH_HAVE_CMNVECTOR && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_CMNVECTOR && ARCH_ARM"}], "help": "Some architectures use their own, built-in vector logic.  Some use only\nthe common vector logic.  Some can use either their own built-in vector\nlogic or the common vector logic.  This applies only to ARMv7-M\narchitectures."}, {"type": 3, "name": "ARMV7M_LAZYFPU", "value": "n", "user_value": 0, "dep": "y", "prompt": "Lazy FPU storage", "cond": "ARCH_HAVE_CMNVECTOR && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_CMNVECTOR && ARCH_ARM"}], "help": "There are two forms of the common vector logic.  There are pros and\ncons to each option:\n\n1) The standard common vector logic exploits features of the ARMv7-M\n   architecture to save the all of floating registers on entry into\n   each interrupt and then to restore the floating registers when\n   the interrupt returns.  The primary advantage to this approach is\n   that floating point operations are available in interrupt\n   handling logic.  Since the volatile registers are preserved,\n   operations on the floating point registers by interrupt handling\n   logic has no ill effect.  The downside is, of course, that more\n   stack operations are required on each interrupt to save and store\n   the floating point registers.  Because of the some special\n   features of the ARMv-M, this is not as much overhead as you might\n   expect, but overhead nonetheless.\n\n2) The lazy FPU common vector logic does not save or restore\n   floating point registers on entry and exit from the interrupt\n   handler. Rather, the floating point registers are not restored\n   until it is absolutely necessary to do so when a context switch\n   occurs and the interrupt handler will be returning to a different\n   floating point context.  Since floating point registers are not\n   protected, floating point operations must not be performed in\n   interrupt handling logic.  Better interrupt performance is be\n   expected, however.\n\nBy default, the \"standard\" common vector logic is build.  This\noption selects the alternate lazy FPU common vector logic."}, {"type": 3, "name": "ARCH_HAVE_FPU", "value": "y", "user_value": 2, "rev_dep": "(ARCH_CHIP_A1X && y) || (ARCH_CHIP_IMX6 && y) || (ARCH_CHIP_KINETIS && y) || (ARCH_CHIP_TIVA && y) || (ARCH_CHIP_LPC43XX && y) || (ARCH_CHIP_SAMA5 && y) || (ARCH_CHIP_CXD56XX && y) || (ARCH_CORTEXM7 && ARCH_ARM) || (ARCH_CORTEXR4F && ARCH_ARM) || (ARCH_CORTEXR5F && ARCH_ARM) || (ARCH_CORTEXR7F && ARCH_ARM) || (ARCH_CHIP_LM4F120 && ARCH_CHIP_LM && y) || (ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_SAME70 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_STM32F302K6 && y) || (ARCH_CHIP_STM32F302K8 && y) || (ARCH_CHIP_STM32F302CB && y) || (ARCH_CHIP_STM32F302CC && y) || (ARCH_CHIP_STM32F302RB && y) || (ARCH_CHIP_STM32F302RC && y) || (ARCH_CHIP_STM32F302VB && y) || (ARCH_CHIP_STM32F302VC && y) || (ARCH_CHIP_STM32F303K6 && y) || (ARCH_CHIP_STM32F303K8 && y) || (ARCH_CHIP_STM32F303C6 && y) || (ARCH_CHIP_STM32F303C8 && y) || (ARCH_CHIP_STM32F303CB && y) || (ARCH_CHIP_STM32F303CC && y) || (ARCH_CHIP_STM32F303RB && y) || (ARCH_CHIP_STM32F303RC && y) || (ARCH_CHIP_STM32F303RD && y) || (ARCH_CHIP_STM32F303RE && y) || (ARCH_CHIP_STM32F303VB && y) || (ARCH_CHIP_STM32F303VC && y) || (ARCH_CHIP_STM32F334K4 && y) || (ARCH_CHIP_STM32F334K6 && y) || (ARCH_CHIP_STM32F334K8 && y) || (ARCH_CHIP_STM32F334C4 && y) || (ARCH_CHIP_STM32F334C6 && y) || (ARCH_CHIP_STM32F334C8 && y) || (ARCH_CHIP_STM32F334R4 && y) || (ARCH_CHIP_STM32F334R6 && y) || (ARCH_CHIP_STM32F334R8 && y) || (ARCH_CHIP_STM32F372C8 && y) || (ARCH_CHIP_STM32F372R8 && y) || (ARCH_CHIP_STM32F372V8 && y) || (ARCH_CHIP_STM32F372CB && y) || (ARCH_CHIP_STM32F372RB && y) || (ARCH_CHIP_STM32F372VB && y) || (ARCH_CHIP_STM32F372CC && y) || (ARCH_CHIP_STM32F372RC && y) || (ARCH_CHIP_STM32F372VC && y) || (ARCH_CHIP_STM32F373C8 && y) || (ARCH_CHIP_STM32F373R8 && y) || (ARCH_CHIP_STM32F373V8 && y) || (ARCH_CHIP_STM32F373CB && y) || (ARCH_CHIP_STM32F373RB && y) || (ARCH_CHIP_STM32F373VB && y) || (ARCH_CHIP_STM32F373CC && y) || (ARCH_CHIP_STM32F373RC && y) || (ARCH_CHIP_STM32F373VC && y) || (ARCH_CHIP_STM32F401RE && y) || (ARCH_CHIP_STM32F410RB && y) || (ARCH_CHIP_STM32F411RE && y) || (ARCH_CHIP_STM32F411VE && y) || (ARCH_CHIP_STM32F405RG && y) || (ARCH_CHIP_STM32F405VG && y) || (ARCH_CHIP_STM32F405ZG && y) || (ARCH_CHIP_STM32F407VE && y) || (ARCH_CHIP_STM32F407VG && y) || (ARCH_CHIP_STM32F407ZE && y) || (ARCH_CHIP_STM32F407ZG && y) || (ARCH_CHIP_STM32F407IE && y) || (ARCH_CHIP_STM32F407IG && y) || (ARCH_CHIP_STM32F427V && y) || (ARCH_CHIP_STM32F427Z && y) || (ARCH_CHIP_STM32F427I && y) || (ARCH_CHIP_STM32F429V && y) || (ARCH_CHIP_STM32F429Z && y) || (ARCH_CHIP_STM32F429I && y) || (ARCH_CHIP_STM32F429B && y) || (ARCH_CHIP_STM32F429N && y) || (ARCH_CHIP_STM32F446M && y) || (ARCH_CHIP_STM32F446R && y) || (ARCH_CHIP_STM32F446V && y) || (ARCH_CHIP_STM32F446Z && y) || (ARCH_CHIP_STM32F469A && y) || (ARCH_CHIP_STM32F469I && y) || (ARCH_CHIP_STM32F469B && y) || (ARCH_CHIP_STM32F469N && y) || (STM32F7_STM32F745XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F746XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F756XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F765XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F767XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32L4_STM32L4X3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (ARCH_CHIP_XMC4500 && y) || (ARCH_CHIP_XMC4700 && y) || (ARCH_CHIP_XMC4800 && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}]}, {"type": 3, "name": "ARCH_HAVE_DPFPU", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_SAME70 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STM32F7_STM32F765XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F767XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FPU", "value": "y", "user_value": 2, "dep": "y", "prompt": "FPU support", "cond": "ARCH_HAVE_FPU && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_HAVE_FPU && ARCH_ARM"}], "help": "Build in support for the ARM Cortex-M4 Floating Point Unit (FPU).\nCheck your chip specifications first; not all Cortex-M4 chips\nsupport the FPU.", "children": [{"type": 3, "name": "ARCH_DPFPU", "value": "n", "user_value": null, "dep": "n", "prompt": "Double precision FPU support", "cond": "ARCH_FPU && ARCH_HAVE_DPFPU && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_FPU && ARCH_HAVE_DPFPU && ARCH_ARM"}], "help": "Enable toolchain support for double precision (64-bit) floating\npoint if both the toolchain and the hardware support it."}]}, {"type": 3, "name": "ARCH_HAVE_TRUSTZONE", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_IMX6 && y) || (ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}], "help": "Automatically selected to indicate that the ARM CPU supports\nTrustZone."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "TrustZone Configuration", "cond": "ARCH_HAVE_TRUSTZONE && ARCH_ARM", "defaults": [{"name": "ARCH_TRUSTZONE_SECURE", "default": "n", "cond": "ARCH_HAVE_TRUSTZONE && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_TRUSTZONE_SECURE", "value": "n", "user_value": null, "dep": "n", "prompt": "All CPUs operate secure state", "cond": "y"}, {"type": 3, "name": "ARCH_TRUSTZONE_NONSECURE", "value": "n", "user_value": null, "dep": "n", "prompt": "All CPUs operate non-secure state", "cond": "EXPERIMENTAL && y"}, {"type": 3, "name": "ARCH_TRUSTZONE_BOTH", "value": "n", "user_value": null, "dep": "n", "prompt": "CPUs operate in both secure and non-secure states", "cond": "EXPERIMENTAL && y"}]}, {"type": 3, "name": "ARM_HAVE_MPU_UNIFIED", "value": "y", "user_value": 2, "rev_dep": "(ARCH_CHIP_KINETIS && y) || (ARCH_CHIP_LM && y) || (ARCH_CHIP_TIVA && y) || (ARCH_CHIP_LPC17XX && y) || (ARCH_CHIP_LPC43XX && y) || (ARCH_CHIP_SAM34 && y) || (ARCH_CHIP_SAMV7 && y) || (ARCH_CHIP_STM32 && y) || (ARCH_CHIP_STM32F7 && y) || (ARCH_CHIP_STM32L4 && y) || (ARCH_CHIP_XMC4 && y) || (ARCH_CHIP_CXD56XX && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ARM"}], "help": "Automatically selected to indicate that the CPU supports a\nunified MPU for both instruction and data addresses."}, {"type": 3, "name": "ARM_MPU", "value": "n", "user_value": 0, "rev_dep": "SAMV7_QSPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "dep": "y", "prompt": "MPU support", "cond": "ARCH_HAVE_MPU && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_MPU && ARCH_ARM"}], "selects": [{"symbol": "ARCH_USE_MPU", "cond": "ARCH_HAVE_MPU && ARCH_ARM"}], "help": "Build in support for the ARM Cortex-M3/4 Memory Protection Unit (MPU).\nCheck your chip specifications first; not all Cortex-M3/4 chips\nsupport the MPU.", "children": [{"type": 27, "name": "ARM_MPU_NREGIONS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of MPU regions", "cond": "ARM_MPU && ARCH_ARM", "defaults": [{"name": "16", "default": "16", "cond": "ARCH_CORTEXM7 && ARM_MPU && ARCH_ARM"}, {"name": "8", "default": "8", "cond": "!ARCH_CORTEXM7 && ARM_MPU && ARCH_ARM"}], "help": "This is the number of protection regions supported by the MPU."}]}, {"type": 3, "name": "ARCH_HAVE_LOWVECTORS", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_A1X && y) || (ARCH_CHIP_C5471 && y) || (ARCH_CHIP_DM320 && y) || (ARCH_CHIP_IMX1 && y) || (ARCH_CHIP_IMX6 && y) || (ARCH_CHIP_LPC214X && y) || (ARCH_CHIP_LPC2378 && y) || (ARCH_CHIP_LPC31XX && y) || (ARCH_CHIP_SAMA5 && y) || (ARCH_CHIP_STR71X && y) || (ARCH_CHIP_TMS570 && y)", "dep": "y"}, {"type": 3, "name": "ARCH_LOWVECTORS", "value": "n", "user_value": null, "dep": "n", "prompt": "Vectors in low memory", "cond": "ARCH_HAVE_LOWVECTORS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_LOWVECTORS && ARCH_ARM"}], "help": "Support ARM vectors in low memory."}, {"type": 3, "name": "ARCH_ROMPGTABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "ROM page table", "cond": "ARCH_USE_MMU && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_USE_MMU && ARCH_ARM"}], "help": "Support a fixed memory mapping use a (read-only) page table in ROM/FLASH."}, {"type": 3, "name": "DEBUG_HARDFAULT", "value": "n", "user_value": null, "dep": "n", "prompt": "Verbose Hard-Fault Debug", "cond": "DEBUG_FEATURES && (ARCH_CORTEXM0 || ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && (ARCH_CORTEXM0 || ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}], "help": "Enables verbose debug output when a hard fault is occurs.  This verbose\noutput is sometimes helpful when debugging difficult hard fault problems,\nbut may be more than you typcially want to see."}, {"type": 6, "dep": "n", "prompt": "ARMV6M Configuration Options", "cond": "ARCH_CORTEXM0 && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Toolchain Selection", "cond": "ARCH_CORTEXM0 && ARCH_ARM", "defaults": [{"name": "ARMV6M_TOOLCHAIN_GNU_EABIW", "default": "n", "cond": "TOOLCHAIN_WINDOWS && ARCH_CORTEXM0 && ARCH_ARM"}, {"name": "ARMV6M_TOOLCHAIN_GNU_EABIL", "default": "n", "cond": "!TOOLCHAIN_WINDOWS && ARCH_CORTEXM0 && ARCH_ARM"}], "children": [{"type": 3, "name": "ARMV6M_TOOLCHAIN_ATOLLIC", "value": "n", "user_value": null, "dep": "n", "prompt": "Atollic Lite/Pro for Windows", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}]}, {"type": 3, "name": "ARMV6M_TOOLCHAIN_BUILDROOT", "value": "n", "user_value": null, "dep": "n", "prompt": "Buildroot (Cygwin or Linux)", "cond": "!WINDOWS_NATIVE && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "!WINDOWS_NATIVE && y"}]}, {"type": 3, "name": "ARMV6M_TOOLCHAIN_CODEREDL", "value": "n", "user_value": null, "dep": "n", "prompt": "CodeRed for Linux", "cond": "HOST_LINUX && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "HOST_LINUX && y"}]}, {"type": 3, "name": "ARMV6M_TOOLCHAIN_CODEREDW", "value": "n", "user_value": null, "dep": "n", "prompt": "CodeRed for Windows", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}]}, {"type": 3, "name": "ARMV6M_TOOLCHAIN_CODESOURCERYL", "value": "n", "user_value": null, "dep": "n", "prompt": "CodeSourcery GNU toolchain under Linux", "cond": "HOST_LINUX && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "HOST_LINUX && y"}]}, {"type": 3, "name": "ARMV6M_TOOLCHAIN_CODESOURCERYW", "value": "n", "user_value": null, "dep": "n", "prompt": "CodeSourcery GNU toolchain under Windows", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}]}, {"type": 3, "name": "ARMV6M_TOOLCHAIN_DEVKITARM", "value": "n", "user_value": null, "dep": "n", "prompt": "devkitARM GNU toolchain", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}]}, {"type": 3, "name": "ARMV6M_TOOLCHAIN_GNU_EABIL", "value": "n", "user_value": null, "dep": "n", "prompt": "Generic GNU EABI toolchain under Linux (or other POSIX environment)", "cond": "y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "y"}], "help": "This option should work for any modern GNU toolchain (GCC 4.5 or newer)\nconfigured for arm-none-eabi."}, {"type": 3, "name": "ARMV6M_TOOLCHAIN_GNU_EABIW", "value": "n", "user_value": null, "dep": "n", "prompt": "Generic GNU EABI toolchain under Windows", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}], "help": "This option should work for any modern GNU toolchain (GCC 4.5 or newer)\nconfigured for arm-none-eabi."}]}, {"type": 6, "dep": "n", "prompt": "ARMv7-A Configuration Options", "cond": "(ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM"}, {"type": 3, "name": "ARMV7A_HAVE_GICv2", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_IMX6_6SOLOLITE && y) || (ARCH_CHIP_IMX6_6SOLO && y) || (ARCH_CHIP_IMX6_6DUALLITE && y) || (ARCH_CHIP_IMX6_6DUAL && y) || (ARCH_CHIP_IMX6_6QUAD && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM"}], "help": "Selected by the configuration tool if the architecture supports the\nGeneric Interrupt Controller (GIC)"}, {"type": 3, "name": "ARMV7A_HAVE_GTM", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_IMX6_6SOLOLITE && y) || (ARCH_CHIP_IMX6_6SOLO && y) || (ARCH_CHIP_IMX6_6DUALLITE && y) || (ARCH_CHIP_IMX6_6DUAL && y) || (ARCH_CHIP_IMX6_6QUAD && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM"}], "help": "Selected by the configuration tool if the architecture supports the\nGlobal Timer (GTM)"}, {"type": 3, "name": "ARMV7A_HAVE_PTM", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_IMX6_6SOLOLITE && y) || (ARCH_CHIP_IMX6_6SOLO && y) || (ARCH_CHIP_IMX6_6DUALLITE && y) || (ARCH_CHIP_IMX6_6DUAL && y) || (ARCH_CHIP_IMX6_6QUAD && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM"}], "help": "Selected by the configuration tool if the architecture supports the\nper-processor Private Timers (PTMs)"}, {"type": 3, "name": "ARMV7A_HAVE_L2CC", "value": "n", "user_value": null, "rev_dep": "ARMV7A_HAVE_L2CC_PL310 && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM"}], "help": "Selected by the configuration tool if the architecture supports any\nkind of L2 cache."}, {"type": 3, "name": "ARMV7A_HAVE_L2CC_PL310", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_IMX6 && y) || (ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM"}], "selects": [{"symbol": "ARMV7A_HAVE_L2CC", "cond": "(ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM"}], "help": "Set by architecture-specific code if the hardware supports a PL310\nr3p2 L2 cache (only version r3p2 is supported)."}, {"type": 31, "dep": "n", "prompt": "L2 Cache Configuration", "cond": "ARMV7A_HAVE_L2CC && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM", "children": [{"type": 3, "name": "ARMV7A_L2CC_PL310", "value": "n", "user_value": null, "dep": "n", "prompt": "ARMv7-A L2CC P310 Support", "cond": "ARMV7A_HAVE_L2CC_PL310 && EXPERIMENTAL && ARMV7A_HAVE_L2CC && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7A_HAVE_L2CC_PL310 && EXPERIMENTAL && ARMV7A_HAVE_L2CC && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM"}], "selects": [{"symbol": "ARCH_L2CACHE", "cond": "ARMV7A_HAVE_L2CC_PL310 && EXPERIMENTAL && ARMV7A_HAVE_L2CC && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM"}], "help": "Enable the 2 Cache Controller (L2CC) is based on the L2CC-PL310 ARM\nmulti-way cache macrocell, version r3p2.  The addition of an on-chip\nsecondary cache, also referred to as a Level 2 or L2 cache, is a\nmethod of improving the system performance when significant memory\ntraffic is generated by the processor."}, {"type": 3, "name": "PL310_LOCKDOWN_BY_MASTER", "value": "n", "user_value": null, "dep": "n", "prompt": "PL310 Lockdown by Master", "cond": "ARMV7A_L2CC_PL310 && ARCH_L2CACHE && ARMV7A_HAVE_L2CC && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7A_L2CC_PL310 && ARCH_L2CACHE && ARMV7A_HAVE_L2CC && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM"}]}, {"type": 3, "name": "PL310_LOCKDOWN_BY_LINE", "value": "n", "user_value": null, "dep": "n", "prompt": "PL310 Lockdown by Line", "cond": "ARMV7A_L2CC_PL310 && ARCH_L2CACHE && ARMV7A_HAVE_L2CC && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7A_L2CC_PL310 && ARCH_L2CACHE && ARMV7A_HAVE_L2CC && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM"}]}, {"type": 3, "name": "PL310_ADDRESS_FILTERING", "value": "n", "user_value": null, "dep": "n", "prompt": "PL310 Address Filtering by Line", "cond": "ARMV7A_L2CC_PL310 && ARCH_L2CACHE && ARMV7A_HAVE_L2CC && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7A_L2CC_PL310 && ARCH_L2CACHE && ARMV7A_HAVE_L2CC && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "L2 Cache Associativity", "cond": "ARCH_L2CACHE && ARCH_L2CACHE && ARMV7A_HAVE_L2CC && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM", "defaults": [{"name": "ARMV7A_ASSOCIATIVITY_8WAY", "default": "n", "cond": "ARCH_L2CACHE && ARCH_L2CACHE && ARMV7A_HAVE_L2CC && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM"}], "help": "This choice specifies the associativity of L2 cache in terms of the\nnumber of ways.  This value could be obtained by querying cache\nconfiguration registers.  However, by defining a configuration\nsetting instead, we can avoid using RAM memory to hold information\nabout properties of the memory.", "children": [{"type": 3, "name": "ARMV7A_ASSOCIATIVITY_8WAY", "value": "n", "user_value": null, "dep": "n", "prompt": "8-Way Associativity", "cond": "y"}, {"type": 3, "name": "ARMV7A_ASSOCIATIVITY_16WAY", "value": "n", "user_value": null, "dep": "n", "prompt": "16-Way Associativity", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "L2 Cache Way Size", "cond": "ARCH_L2CACHE && ARCH_L2CACHE && ARMV7A_HAVE_L2CC && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM", "defaults": [{"name": "ARMV7A_WAYSIZE_16KB", "default": "n", "cond": "ARCH_L2CACHE && ARCH_L2CACHE && ARMV7A_HAVE_L2CC && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM"}], "help": "This choice specifies size of each way. This value can be obtained\nby querying cache configuration registers.  However, by defining a\nconfiguration setting instead, we can avoid using RAM memory to hold\ninformation", "children": [{"type": 3, "name": "ARMV7A_WAYSIZE_16KB", "value": "n", "user_value": null, "dep": "n", "prompt": "16 KiB", "cond": "y"}, {"type": 3, "name": "ARMV7A_WAYSIZE_32KB", "value": "n", "user_value": null, "dep": "n", "prompt": "32 KiB", "cond": "y"}, {"type": 3, "name": "ARMV7A_WAYSIZE_64KB", "value": "n", "user_value": null, "dep": "n", "prompt": "64 KiB", "cond": "y"}, {"type": 3, "name": "ARMV7A_WAYSIZE_128KB", "value": "n", "user_value": null, "dep": "n", "prompt": "128 KiB", "cond": "y"}, {"type": 3, "name": "ARMV7A_WAYSIZE_256KB", "value": "n", "user_value": null, "dep": "n", "prompt": "256 KiB", "cond": "y"}, {"type": 3, "name": "ARMV7A_WAYSIZE_512KB", "value": "n", "user_value": null, "dep": "n", "prompt": "512 KiB", "cond": "y"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Toolchain Selection", "cond": "(ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM", "defaults": [{"name": "ARMV7A_TOOLCHAIN_GNU_EABIW", "default": "n", "cond": "TOOLCHAIN_WINDOWS && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM"}, {"name": "ARMV7A_TOOLCHAIN_GNU_EABIL", "default": "n", "cond": "!TOOLCHAIN_WINDOWS && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM"}], "children": [{"type": 3, "name": "ARMV7A_TOOLCHAIN_BUILDROOT", "value": "n", "user_value": null, "dep": "n", "prompt": "Buildroot (Cygwin or Linux)", "cond": "!WINDOWS_NATIVE && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "!WINDOWS_NATIVE && y"}]}, {"type": 3, "name": "ARMV7A_TOOLCHAIN_CODESOURCERYL", "value": "n", "user_value": null, "dep": "n", "prompt": "CodeSourcery GNU toolchain under Linux", "cond": "HOST_LINUX && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "HOST_LINUX && y"}], "help": "For use with the GNU toolchain built with the NuttX buildroot package.\nThis tools may be arm-nuttx-eabi- or, if ARMV7A_OABI_TOOLCHAIN is set,\narm-nuttx-elf-."}, {"type": 3, "name": "ARMV7A_TOOLCHAIN_CODESOURCERYW", "value": "n", "user_value": null, "dep": "n", "prompt": "CodeSourcery GNU toolchain under Windows", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}]}, {"type": 3, "name": "ARMV7A_TOOLCHAIN_DEVKITARM", "value": "n", "user_value": null, "dep": "n", "prompt": "devkitARM GNU toolchain", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}]}, {"type": 3, "name": "ARMV7A_TOOLCHAIN_GNU_EABIL", "value": "n", "user_value": null, "dep": "n", "prompt": "Generic GNU EABI toolchain under Linux (or other POSIX environment)", "cond": "y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "y"}], "help": "This option should work for any modern GNU toolchain (GCC 4.5 or newer)\nconfigured for arm-none-eabi-."}, {"type": 3, "name": "ARMV7A_TOOLCHAIN_GNU_EABIW", "value": "n", "user_value": null, "dep": "n", "prompt": "Generic GNU EABI toolchain under Windows", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}], "help": "This option should work for any modern GNU toolchain (GCC 4.5 or newer)\nconfigured for arm-none-eabi-."}, {"type": 3, "name": "ARMV7A_TOOLCHAIN_GNU_OABI", "value": "n", "user_value": null, "dep": "n", "prompt": "Generic GNU OABI toolchain", "cond": "y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "y"}], "help": "This option should work for any GNU toolchain configured for arm-elf-."}]}, {"type": 3, "name": "ARMV7A_OABI_TOOLCHAIN", "value": "n", "user_value": null, "dep": "n", "prompt": "OABI (vs EABI)", "cond": "ARMV7A_TOOLCHAIN_BUILDROOT && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7A_TOOLCHAIN_BUILDROOT && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM"}], "help": "Most of the older buildroot toolchains are OABI and are named\narm-nuttx-elf- vs. arm-nuttx-eabi-"}, {"type": 3, "name": "ARMV7A_DECODEFIQ", "value": "n", "user_value": null, "rev_dep": "SAMA5_SAIC && SAMA5_HAVE_SAIC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "dep": "n", "prompt": "FIQ Handler", "cond": "(ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM"}], "help": "Select this option if your platform supports the function\narm_decodefiq().  This is used primarily to support secure TrustZone\ninterrupts received on the FIQ vector."}, {"type": 6, "dep": "y", "prompt": "ARMV7M Configuration Options", "cond": "(ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}, {"type": 3, "name": "ARMV7M_HAVE_ICACHE", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_SAME70 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STM32F7_STM32F745XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F746XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F756XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F765XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F767XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}]}, {"type": 3, "name": "ARMV7M_HAVE_DCACHE", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_SAME70 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STM32F7_STM32F745XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F746XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F756XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F765XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F767XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}]}, {"type": 3, "name": "ARMV7M_ICACHE", "value": "n", "user_value": null, "dep": "n", "prompt": "Use I-Cache", "cond": "ARMV7M_HAVE_ICACHE && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7M_HAVE_ICACHE && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}]}, {"type": 3, "name": "ARMV7M_DCACHE", "value": "n", "user_value": null, "dep": "n", "prompt": "Use D-Cache", "cond": "ARMV7M_HAVE_DCACHE && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7M_HAVE_DCACHE && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}], "children": [{"type": 3, "name": "ARMV7M_DCACHE_WRITETHROUGH", "value": "n", "user_value": null, "rev_dep": "SAMV7_EMAC && ARMV7M_DCACHE && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "dep": "n", "prompt": "D-Cache Write-Through", "cond": "ARMV7M_DCACHE && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7M_DCACHE && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}]}]}, {"type": 3, "name": "ARMV7M_HAVE_ITCM", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_SAME70 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STM32F7_STM32F745XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F746XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F756XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F765XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F767XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}]}, {"type": 3, "name": "ARMV7M_HAVE_DTCM", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_SAME70 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STM32F7_STM32F745XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F746XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F756XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F765XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F767XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}]}, {"type": 3, "name": "ARMV7M_ITCM", "value": "n", "user_value": null, "dep": "n", "prompt": "Use ITCM", "cond": "ARMV7M_HAVE_ITCM && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7M_HAVE_ITCM && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}]}, {"type": 3, "name": "ARMV7M_DTCM", "value": "n", "user_value": null, "dep": "n", "prompt": "Use DTCM", "cond": "ARMV7M_HAVE_DTCM && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7M_HAVE_DTCM && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}]}, {"type": 4, "user_value": 2, "dep": "y", "prompt": "Toolchain Selection", "cond": "(ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM", "defaults": [{"name": "ARMV7M_TOOLCHAIN_GNU_EABIW", "default": "n", "cond": "TOOLCHAIN_WINDOWS && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}, {"name": "ARMV7M_TOOLCHAIN_GNU_EABIL", "default": "y", "cond": "!TOOLCHAIN_WINDOWS && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}], "children": [{"type": 3, "name": "ARMV7M_TOOLCHAIN_IARW", "value": "n", "user_value": 0, "dep": "n", "prompt": "IAR for Windows", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_IAR", "cond": "TOOLCHAIN_WINDOWS && y"}]}, {"type": 3, "name": "ARMV7M_TOOLCHAIN_IARL", "value": "n", "user_value": 0, "dep": "y", "prompt": "IAR for Linux", "cond": "HOST_LINUX && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_IAR", "cond": "HOST_LINUX && y"}]}, {"type": 3, "name": "ARMV7M_TOOLCHAIN_ATOLLIC", "value": "n", "user_value": 0, "dep": "n", "prompt": "Atollic Lite/Pro for Windows", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}]}, {"type": 3, "name": "ARMV7M_TOOLCHAIN_BUILDROOT", "value": "n", "user_value": 0, "dep": "y", "prompt": "Buildroot (Cygwin or Linux)", "cond": "!WINDOWS_NATIVE && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "!WINDOWS_NATIVE && y"}]}, {"type": 3, "name": "ARMV7M_TOOLCHAIN_CODEREDL", "value": "n", "user_value": 0, "dep": "y", "prompt": "CodeRed for Linux", "cond": "HOST_LINUX && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "HOST_LINUX && y"}]}, {"type": 3, "name": "ARMV7M_TOOLCHAIN_CODEREDW", "value": "n", "user_value": 0, "dep": "n", "prompt": "CodeRed for Windows", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}]}, {"type": 3, "name": "ARMV7M_TOOLCHAIN_CODESOURCERYL", "value": "n", "user_value": 0, "dep": "y", "prompt": "CodeSourcery GNU toolchain under Linux", "cond": "HOST_LINUX && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "HOST_LINUX && y"}]}, {"type": 3, "name": "ARMV7M_TOOLCHAIN_CODESOURCERYW", "value": "n", "user_value": 0, "dep": "n", "prompt": "CodeSourcery GNU toolchain under Windows", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}]}, {"type": 3, "name": "ARMV7M_TOOLCHAIN_DEVKITARM", "value": "n", "user_value": 0, "dep": "n", "prompt": "devkitARM GNU toolchain", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}]}, {"type": 3, "name": "ARMV7M_TOOLCHAIN_GNU_EABIL", "value": "y", "user_value": 2, "dep": "y", "prompt": "Generic GNU EABI toolchain under Linux (or other POSIX environment)", "cond": "!WINDOWS_NATIVE && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "!WINDOWS_NATIVE && y"}], "help": "This option should work for any modern GNU toolchain (GCC 4.5 or newer)\nconfigured for arm-none-eabi."}, {"type": 3, "name": "ARMV7M_TOOLCHAIN_GNU_EABIW", "value": "n", "user_value": 0, "dep": "n", "prompt": "Generic GNU EABI toolchain under Windows", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}]}, {"type": 3, "name": "ARMV7M_TOOLCHAIN_CLANGL", "value": "n", "user_value": 0, "dep": "y", "prompt": "Generic Clang toolchain under Linux (or other POSIX environment)", "cond": "!WINDOWS_NATIVE && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "!WINDOWS_NATIVE && y"}]}, {"type": 3, "name": "ARMV7M_TOOLCHAIN_CLANGW", "value": "n", "user_value": 0, "dep": "n", "prompt": "Generic Clang toolchain under Windows", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}], "help": "This option should work for any modern GNU toolchain (GCC 4.5 or newer)\nconfigured for arm-none-eabi."}, {"type": 3, "name": "ARMV7M_TOOLCHAIN_RAISONANCE", "value": "n", "user_value": 0, "dep": "n", "prompt": "STMicro Raisonance for Windows", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}]}]}, {"type": 3, "name": "ARMV7M_OABI_TOOLCHAIN", "value": "n", "user_value": null, "dep": "n", "prompt": "OABI (vs EABI)", "cond": "ARMV7M_TOOLCHAIN_BUILDROOT && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7M_TOOLCHAIN_BUILDROOT && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}], "help": "Most of the older buildroot toolchains are OABI and are named\narm-nuttx-elf- vs. arm-nuttx-eabi-"}, {"type": 3, "name": "ARMV7M_TARGET2_PREL", "value": "n", "user_value": 0, "dep": "y", "prompt": "R_ARM_TARGET2 is PC relative", "cond": "ELF && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!UCLIBCXX_EXCEPTION && ELF && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}, {"name": "y", "default": "y", "cond": "UCLIBCXX_EXCEPTION && ELF && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}], "help": "Perform a PC relative relocation for relocation type R_ARM_TARGET2"}, {"type": 3, "name": "ARMV7M_HAVE_STACKCHECK", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_SAM34 && y) || (ARCH_CHIP_SAMV7 && y) || (ARCH_CHIP_STM32 && y) || (ARCH_CHIP_STM32F7 && y) || (ARCH_CHIP_STM32L4 && y) || (ARCH_CHIP_XMC4 && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}]}, {"type": 3, "name": "ARMV7M_STACKCHECK", "value": "n", "user_value": null, "dep": "n", "prompt": "Check for stack overflow on each function call", "cond": "ARMV7M_HAVE_STACKCHECK && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7M_HAVE_STACKCHECK && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}], "help": "This check uses R10 to check for a stack overflow within each\nfunction call. This has performances and code size impacts, but it\nwill be able to catch hard to find stack overflows.\n\nCurrently only available only for the STM32, SAM3/4 and SAMA5D\narchitectures.  The changes are not complex and patches for\nother architectures will be accepted.\n\nThis option requires that you are using a GCC toolchain and that\nyou also include -finstrument-functions in your CFLAGS when you\ncompile.  This addition to your CFLAGS should probably be added\nto the definition of the CFFLAGS in your board Make.defs file."}, {"type": 3, "name": "ARMV7M_ITMSYSLOG", "value": "n", "user_value": 0, "dep": "y", "prompt": "ITM SYSLOG support", "cond": "(ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}], "selects": [{"symbol": "ARCH_SYSLOG", "cond": "(ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}, {"symbol": "SYSLOG", "cond": "(ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}], "help": "Enable hooks to support ITM syslog output.  This requires additional\nMCU support in order to be used.  See arch/arm/src/armv7-m/itm_syslog.h\nfor additional initialization information.", "children": [{"type": 27, "name": "ARMV7M_ITMSYSLOG_PORT", "value": "", "user_value": null, "dep": "n", "prompt": "ITM SYSLOG Port", "cond": "ARMV7M_ITMSYSLOG && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "ARMV7M_ITMSYSLOG && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}], "ranges": [{"min": "0", "max": "31", "cond": "ARMV7M_ITMSYSLOG && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}]}, {"type": 27, "name": "ARMV7M_ITMSYSLOG_SWODIV", "value": "", "user_value": null, "dep": "n", "prompt": "ITM SYSLOG SWO divider", "cond": "ARMV7M_ITMSYSLOG && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM", "defaults": [{"name": "15", "default": "15", "cond": "ARMV7M_ITMSYSLOG && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}], "ranges": [{"min": "1", "max": "8192", "cond": "ARMV7M_ITMSYSLOG && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}]}]}, {"type": 6, "dep": "n", "prompt": "ARMv7-R Configuration Options", "cond": "(ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}, {"type": 3, "name": "ARMV7R_MEMINIT", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_TMS570 && y", "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "BOOT_SDRAM_DATA && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}, {"name": "n", "default": "n", "cond": "!BOOT_SDRAM_DATA && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}], "help": "If this configuration *not* selected, then it is assumed that all\nmemory resources are initialized via arm_data_initialize() and\navailable at power-up reset time.  Other memories, such as SDRAM or\nsome ECC SRAM memories, require some platform-specific\ninitialization first.  In that case, this option should be selected\nand the platform-specific implementation of arm_boot() must perform\nthe memory initialization first, then explicitly call\narm_data_initialize()."}, {"type": 3, "name": "ARMV7R_HAVE_ICACHE", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}]}, {"type": 3, "name": "ARMV7R_HAVE_DCACHE", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}]}, {"type": 3, "name": "ARMV7R_ICACHE", "value": "n", "user_value": null, "dep": "n", "prompt": "Use I-Cache", "cond": "ARMV7R_HAVE_ICACHE && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7R_HAVE_ICACHE && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}]}, {"type": 3, "name": "ARMV7R_DCACHE", "value": "n", "user_value": null, "dep": "n", "prompt": "Use D-Cache", "cond": "ARMV7R_HAVE_DCACHE && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7R_HAVE_DCACHE && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}], "children": [{"type": 3, "name": "ARMV7R_DCACHE_WRITETHROUGH", "value": "n", "user_value": null, "dep": "n", "prompt": "D-Cache Write-Through", "cond": "ARMV7R_DCACHE && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7R_DCACHE && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}]}]}, {"type": 3, "name": "ARMV7R_HAVE_L2CC", "value": "n", "user_value": null, "rev_dep": "ARMV7R_HAVE_L2CC_PL310 && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}], "help": "Selected by the configuration tool if the architecutre supports any\nkind of L2 cache."}, {"type": 3, "name": "ARMV7R_HAVE_L2CC_PL310", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}], "selects": [{"symbol": "ARMV7R_HAVE_L2CC", "cond": "(ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}], "help": "Set by architecture-specific code if the hardware supports a PL310\nr3p2 L2 cache (only version r3p2 is supported)."}, {"type": 31, "dep": "n", "prompt": "L2 Cache Configuration", "cond": "ARMV7R_HAVE_L2CC && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM", "children": [{"type": 3, "name": "ARMV7R_L2CC_PL310", "value": "n", "user_value": null, "dep": "n", "prompt": "ARMv7-A L2CC P310 Support", "cond": "ARMV7R_HAVE_L2CC_PL310 && EXPERIMENTAL && ARMV7R_HAVE_L2CC && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7R_HAVE_L2CC_PL310 && EXPERIMENTAL && ARMV7R_HAVE_L2CC && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}], "selects": [{"symbol": "ARCH_L2CACHE", "cond": "ARMV7R_HAVE_L2CC_PL310 && EXPERIMENTAL && ARMV7R_HAVE_L2CC && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}], "help": "Enable the 2 Cache Controller (L2CC) is based on the L2CC-PL310 ARM\nmulti-way cache macrocell, version r3p2.  The addition of an on-chip\nsecondary cache, also referred to as a Level 2 or L2 cache, is a\nmethod of improving the system performance when significant memory\ntraffic is generated by the processor."}, {"type": 3, "name": "PL310_LOCKDOWN_BY_MASTER", "value": "n", "user_value": null, "dep": "n", "prompt": "PL310 Lockdown by Master", "cond": "ARMV7R_L2CC_PL310 && ARCH_L2CACHE && ARMV7R_HAVE_L2CC && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7R_L2CC_PL310 && ARCH_L2CACHE && ARMV7R_HAVE_L2CC && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}]}, {"type": 3, "name": "PL310_LOCKDOWN_BY_LINE", "value": "n", "user_value": null, "dep": "n", "prompt": "PL310 Lockdown by Line", "cond": "ARMV7R_L2CC_PL310 && ARCH_L2CACHE && ARMV7R_HAVE_L2CC && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7R_L2CC_PL310 && ARCH_L2CACHE && ARMV7R_HAVE_L2CC && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}]}, {"type": 3, "name": "PL310_ADDRESS_FILTERING", "value": "n", "user_value": null, "dep": "n", "prompt": "PL310 Address Filtering by Line", "cond": "ARMV7R_L2CC_PL310 && ARCH_L2CACHE && ARMV7R_HAVE_L2CC && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7R_L2CC_PL310 && ARCH_L2CACHE && ARMV7R_HAVE_L2CC && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "L2 Cache Associativity", "cond": "ARCH_L2CACHE && ARCH_L2CACHE && ARMV7R_HAVE_L2CC && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM", "defaults": [{"name": "ARMV7R_ASSOCIATIVITY_8WAY", "default": "n", "cond": "ARCH_L2CACHE && ARCH_L2CACHE && ARMV7R_HAVE_L2CC && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}], "help": "This choice specifies the associativity of L2 cache in terms of the\nnumber of ways.  This value could be obtained by querying cache\nconfiguration registers.  However, by defining a configuration\nsetting instead, we can avoid using RAM memory to hold information\nabout properties of the memory.", "children": [{"type": 3, "name": "ARMV7R_ASSOCIATIVITY_8WAY", "value": "n", "user_value": null, "dep": "n", "prompt": "8-Way Associativity", "cond": "y"}, {"type": 3, "name": "ARMV7R_ASSOCIATIVITY_16WAY", "value": "n", "user_value": null, "dep": "n", "prompt": "16-Way Associativity", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "L2 Cache Way Size", "cond": "ARCH_L2CACHE && ARCH_L2CACHE && ARMV7R_HAVE_L2CC && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM", "defaults": [{"name": "ARMV7R_WAYSIZE_16KB", "default": "n", "cond": "ARCH_L2CACHE && ARCH_L2CACHE && ARMV7R_HAVE_L2CC && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}], "help": "This choice specifies size of each way. This value can be obtained\nby querying cache configuration registers.  However, by defining a\nconfiguration setting instead, we can avoid using RAM memory to hold\ninformation", "children": [{"type": 3, "name": "ARMV7R_WAYSIZE_16KB", "value": "n", "user_value": null, "dep": "n", "prompt": "16 KiB", "cond": "y"}, {"type": 3, "name": "ARMV7R_WAYSIZE_32KB", "value": "n", "user_value": null, "dep": "n", "prompt": "32 KiB", "cond": "y"}, {"type": 3, "name": "ARMV7R_WAYSIZE_64KB", "value": "n", "user_value": null, "dep": "n", "prompt": "64 KiB", "cond": "y"}, {"type": 3, "name": "ARMV7R_WAYSIZE_128KB", "value": "n", "user_value": null, "dep": "n", "prompt": "128 KiB", "cond": "y"}, {"type": 3, "name": "ARMV7R_WAYSIZE_256KB", "value": "n", "user_value": null, "dep": "n", "prompt": "256 KiB", "cond": "y"}, {"type": 3, "name": "ARMV7R_WAYSIZE_512KB", "value": "n", "user_value": null, "dep": "n", "prompt": "512 KiB", "cond": "y"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Toolchain Selection", "cond": "(ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM", "defaults": [{"name": "ARMV7R_TOOLCHAIN_GNU_EABIW", "default": "n", "cond": "TOOLCHAIN_WINDOWS && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}, {"name": "ARMV7R_TOOLCHAIN_GNU_EABIL", "default": "n", "cond": "!TOOLCHAIN_WINDOWS && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}], "children": [{"type": 3, "name": "ARMV7R_TOOLCHAIN_BUILDROOT", "value": "n", "user_value": null, "dep": "n", "prompt": "Buildroot (Cygwin or Linux)", "cond": "!WINDOWS_NATIVE && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "!WINDOWS_NATIVE && y"}]}, {"type": 3, "name": "ARMV7R_TOOLCHAIN_CODESOURCERYL", "value": "n", "user_value": null, "dep": "n", "prompt": "CodeSourcery GNU toolchain under Linux", "cond": "HOST_LINUX && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "HOST_LINUX && y"}], "help": "For use with the GNU toolchain built with the NuttX buildroot package.\nThis tools may be arm-nuttx-eabi- or, if ARMV7R_OABI_TOOLCHAIN is set,\narm-nuttx-elf-."}, {"type": 3, "name": "ARMV7R_TOOLCHAIN_CODESOURCERYW", "value": "n", "user_value": null, "dep": "n", "prompt": "CodeSourcery GNU toolchain under Windows", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}]}, {"type": 3, "name": "ARMV7R_TOOLCHAIN_DEVKITARM", "value": "n", "user_value": null, "dep": "n", "prompt": "devkitARM GNU toolchain", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}]}, {"type": 3, "name": "ARMV7R_TOOLCHAIN_GNU_EABIL", "value": "n", "user_value": null, "dep": "n", "prompt": "Generic GNU EABI toolchain under Linux (or other POSIX environment)", "cond": "y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "y"}], "help": "This option should work for any modern GNU toolchain (GCC 4.5 or newer)\nconfigured for arm-none-eabi-."}, {"type": 3, "name": "ARMV7R_TOOLCHAIN_GNU_EABIW", "value": "n", "user_value": null, "dep": "n", "prompt": "Generic GNU EABI toolchain under Windows", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}], "help": "This option should work for any modern GNU toolchain (GCC 4.5 or newer)\nconfigured for arm-none-eabi-."}, {"type": 3, "name": "ARMV7R_TOOLCHAIN_GNU_OABI", "value": "n", "user_value": null, "dep": "n", "prompt": "Generic GNU OABI toolchain", "cond": "y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "y"}], "help": "This option should work for any GNU toolchain configured for arm-elf-."}]}, {"type": 3, "name": "ARMV7R_OABI_TOOLCHAIN", "value": "n", "user_value": null, "dep": "n", "prompt": "OABI (vs EABI)", "cond": "ARMV7R_TOOLCHAIN_BUILDROOT && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7R_TOOLCHAIN_BUILDROOT && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}], "help": "Most of the older buildroot toolchains are OABI and are named\narm-nuttx-elf- vs. arm-nuttx-eabi-"}, {"type": 3, "name": "ARMV7R_HAVE_DECODEFIQ", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_TMS570 && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}]}, {"type": 3, "name": "ARMV7R_DECODEFIQ", "value": "n", "user_value": null, "dep": "n", "prompt": "FIQ Handler", "cond": "ARMV7R_HAVE_DECODEFIQ && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7R_HAVE_DECODEFIQ && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM"}], "help": "Select this option if your platform supports the function\narm_decodefiq()."}, {"type": 6, "dep": "n", "prompt": "ARM Configuration Options", "cond": "(ARCH_ARM7TDMI || ARCH_ARM926EJS || ARCH_ARM920T) && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Toolchain Selection", "cond": "(ARCH_ARM7TDMI || ARCH_ARM926EJS || ARCH_ARM920T) && ARCH_ARM", "defaults": [{"name": "ARM_TOOLCHAIN_GNU_EABIW", "default": "n", "cond": "TOOLCHAIN_WINDOWS && (ARCH_ARM7TDMI || ARCH_ARM926EJS || ARCH_ARM920T) && ARCH_ARM"}, {"name": "ARM_TOOLCHAIN_GNU_EABIL", "default": "n", "cond": "!TOOLCHAIN_WINDOWS && (ARCH_ARM7TDMI || ARCH_ARM926EJS || ARCH_ARM920T) && ARCH_ARM"}], "children": [{"type": 3, "name": "ARM_TOOLCHAIN_BUILDROOT", "value": "n", "user_value": null, "dep": "n", "prompt": "Buildroot (Cygwin or Linux)", "cond": "!WINDOWS_NATIVE && y"}, {"type": 3, "name": "ARM_TOOLCHAIN_CODESOURCERYL", "value": "n", "user_value": null, "dep": "n", "prompt": "CodeSourcery GNU toolchain under Linux", "cond": "HOST_LINUX && y", "help": "For use with the GNU toolchain built with the NuttX buildroot package.\nThis tools may be arm-nuttx-eabi- or, if ARM_OABI_TOOLCHAIN is set,\narm-nuttx-elf-."}, {"type": 3, "name": "ARM_TOOLCHAIN_CODESOURCERYW", "value": "n", "user_value": null, "dep": "n", "prompt": "CodeSourcery GNU toolchain under Windows", "cond": "TOOLCHAIN_WINDOWS && y"}, {"type": 3, "name": "ARM_TOOLCHAIN_DEVKITARM", "value": "n", "user_value": null, "dep": "n", "prompt": "devkitARM GNU toolchain", "cond": "TOOLCHAIN_WINDOWS && y"}, {"type": 3, "name": "ARM_TOOLCHAIN_GNU_EABIL", "value": "n", "user_value": null, "dep": "n", "prompt": "Generic GNU EABI toolchain under Linux (or other POSIX environment)", "cond": "y", "help": "This option should work for any modern GNU toolchain (GCC 4.5 or newer)\nconfigured for arm-none-eabi-."}, {"type": 3, "name": "ARM_TOOLCHAIN_GNU_EABIW", "value": "n", "user_value": null, "dep": "n", "prompt": "Generic GNU EABI toolchain under Windows", "cond": "TOOLCHAIN_WINDOWS && y", "help": "This option should work for any modern GNU toolchain (GCC 4.5 or newer)\nconfigured for arm-none-eabi-."}, {"type": 3, "name": "ARM_TOOLCHAIN_GNU_OABI", "value": "n", "user_value": null, "dep": "n", "prompt": "Generic GNU OABI toolchain", "cond": "y", "help": "This option should work for any GNU toolchain configured for arm-elf-."}]}, {"type": 3, "name": "ARM_OABI_TOOLCHAIN", "value": "n", "user_value": null, "dep": "n", "prompt": "OABI (vs EABI)", "cond": "ARM_TOOLCHAIN_BUILDROOT && (ARCH_ARM7TDMI || ARCH_ARM926EJS || ARCH_ARM920T) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARM_TOOLCHAIN_BUILDROOT && (ARCH_ARM7TDMI || ARCH_ARM926EJS || ARCH_ARM920T) && ARCH_ARM"}], "help": "Most of the older buildroot toolchains are OABI and are named arm-nuttx-elf- vs. arm-nuttx-eabi-"}, {"type": 6, "dep": "n", "prompt": "A1x Configuration Options", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Allwinner A1X Chip Selection", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "ARCH_CHIP_A10", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_A10", "value": "n", "user_value": null, "dep": "n", "prompt": "A10", "cond": "y"}]}, {"type": 31, "dep": "n", "prompt": "Allwinner A1X Peripheral Support", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "children": [{"type": 3, "name": "A1X_UART0", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 0", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}], "selects": [{"symbol": "UART0_SERIALDRIVER", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 1", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_UART2", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 2", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}], "selects": [{"symbol": "UART2_SERIALDRIVER", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_UART3", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 3", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}], "selects": [{"symbol": "UART3_SERIALDRIVER", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_UART4", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 4", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}], "selects": [{"symbol": "UART4_SERIALDRIVER", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_UART5", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 5", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}], "selects": [{"symbol": "UART5_SERIALDRIVER", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_UART6", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 6", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}], "selects": [{"symbol": "UART6_SERIALDRIVER", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_UART7", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 7", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}], "selects": [{"symbol": "UART7_SERIALDRIVER", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_IR0", "value": "n", "user_value": null, "dep": "n", "prompt": "IR 0", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_IR1", "value": "n", "user_value": null, "dep": "n", "prompt": "IR 1", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_TWI0", "value": "n", "user_value": null, "dep": "n", "prompt": "TWI 0", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_TWI1", "value": "n", "user_value": null, "dep": "n", "prompt": "TWI 1", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_TWI2", "value": "n", "user_value": null, "dep": "n", "prompt": "TWI 2", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_SPI0", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI 0", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_SPI1", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI 1", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_SPI2", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI 2", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_SPI3", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI3", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_NC", "value": "n", "user_value": null, "dep": "n", "prompt": "NC", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_AC97", "value": "n", "user_value": null, "dep": "n", "prompt": "AC97", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_TS", "value": "n", "user_value": null, "dep": "n", "prompt": "TS", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_IIS", "value": "n", "user_value": null, "dep": "n", "prompt": "Digital Audio Controller", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_KEYPAD", "value": "n", "user_value": null, "dep": "n", "prompt": "Keypad", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_TIMER1", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 1", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_TIMER2", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 2", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_TIMER3", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 3", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_TIMER4", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 4", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_TIMER5", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 5", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_IRQ_Alarm", "value": "n", "user_value": null, "dep": "n", "prompt": "Alarm", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_IRQ_WD", "value": "n", "user_value": null, "dep": "n", "prompt": "Watchdog", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_CAN", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN Bus controller", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_PIO", "value": "n", "user_value": null, "dep": "n", "prompt": "PIO", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_TOUCH", "value": "n", "user_value": null, "dep": "n", "prompt": "Touch Panel", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_AUDIO", "value": "n", "user_value": null, "dep": "n", "prompt": "Analog Audio Codec", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_LRADC", "value": "n", "user_value": null, "dep": "n", "prompt": "LRADC", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_SDMMC0", "value": "n", "user_value": null, "dep": "n", "prompt": "SD/MMC Host Controller 0", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_SDMMC1", "value": "n", "user_value": null, "dep": "n", "prompt": "SD/MMC Host Controller 1", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_SDMMC2", "value": "n", "user_value": null, "dep": "n", "prompt": "SD/MMC Host Controller 2", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_SDMMC3", "value": "n", "user_value": null, "dep": "n", "prompt": "SD/MMC Host Controller 3", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_NAND", "value": "n", "user_value": null, "dep": "n", "prompt": "NAND Flash Controller (NFC)", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_USB0", "value": "n", "user_value": null, "dep": "n", "prompt": "USB 0", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_USB1", "value": "n", "user_value": null, "dep": "n", "prompt": "USB 1", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_USB2", "value": "n", "user_value": null, "dep": "n", "prompt": "USB 2", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_USB3", "value": "n", "user_value": null, "dep": "n", "prompt": "USB 3", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_USB4", "value": "n", "user_value": null, "dep": "n", "prompt": "USB 4", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_SCR", "value": "n", "user_value": null, "dep": "n", "prompt": "SCR", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_CSI0", "value": "n", "user_value": null, "dep": "n", "prompt": "CSI 0", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_CSI1", "value": "n", "user_value": null, "dep": "n", "prompt": "CSI 1", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_LCDC0", "value": "n", "user_value": null, "dep": "n", "prompt": "LCD Controller 0", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_LCDC1", "value": "n", "user_value": null, "dep": "n", "prompt": "LCD Controller 1", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_MP", "value": "n", "user_value": null, "dep": "n", "prompt": "MP", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_DEFE0", "value": "n", "user_value": null, "dep": "n", "prompt": "DE-FE0", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_IRQ_DEBE0", "value": "n", "user_value": null, "dep": "n", "prompt": "DE-BE0", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_DEFE1", "value": "n", "user_value": null, "dep": "n", "prompt": "DE-FE1", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_IRQ_DEBE1", "value": "n", "user_value": null, "dep": "n", "prompt": "DE-BE1", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_PMU", "value": "n", "user_value": null, "dep": "n", "prompt": "PMU", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_TZASC", "value": "n", "user_value": null, "dep": "n", "prompt": "TZASC", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_PATA", "value": "n", "user_value": null, "dep": "n", "prompt": "PATA", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_VE", "value": "n", "user_value": null, "dep": "n", "prompt": "VE", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_SS", "value": "n", "user_value": null, "dep": "n", "prompt": "Security System", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_EMAC", "value": "n", "user_value": null, "dep": "n", "prompt": "EMAC", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_HDMI", "value": "n", "user_value": null, "dep": "n", "prompt": "HDMI", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_TVE", "value": "n", "user_value": null, "dep": "n", "prompt": "TV encoder 0/1", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_ACE", "value": "n", "user_value": null, "dep": "n", "prompt": "ACE", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_TVD", "value": "n", "user_value": null, "dep": "n", "prompt": "TV decoder", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_PS20", "value": "n", "user_value": null, "dep": "n", "prompt": "PS2-0", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_PS21", "value": "n", "user_value": null, "dep": "n", "prompt": "PS2-1", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_PLE", "value": "n", "user_value": null, "dep": "n", "prompt": "PLE", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_IRQ_PERFMU", "value": "n", "user_value": null, "dep": "n", "prompt": "Performance monitor", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}, {"type": 3, "name": "A1X_GPU", "value": "n", "user_value": null, "dep": "n", "prompt": "GPU", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}]}]}, {"type": 3, "name": "A1X_PIO_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "External PIO interrupts", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}], "help": "Select to enable support for 32 external PIO interrupts.  These will\nbe handled through a second level of interrupt decoding and will\notherwise appear as any other interrupt."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Boot device", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "A1X_BOOT_SDCARD", "default": "n", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}], "children": [{"type": 3, "name": "A1X_BOOT_NAND", "value": "n", "user_value": null, "dep": "n", "prompt": "NAND FLASH", "cond": "y"}, {"type": 3, "name": "A1X_BOOT_SPINOR", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI NOR FLASH", "cond": "y"}, {"type": 3, "name": "A1X_BOOT_SDCARD", "value": "n", "user_value": null, "dep": "n", "prompt": "SD card", "cond": "y"}, {"type": 3, "name": "A1X_BOOT_USB", "value": "n", "user_value": null, "dep": "n", "prompt": "USB", "cond": "y"}]}, {"type": 27, "name": "A1X_DDR_MAPOFFSET", "value": "", "user_value": null, "dep": "n", "prompt": "Installed SDRAM offset", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}], "help": "The size of the installed SRAM memory is required in order to\nproperly configure memory mapping.  The mapping will begin at the\nstart of SDRAM plus A1X_DDR_MAPOFFSET and extend for DDR_MAPSIZE\nbytes.  NOTE typically A1X_MAP_OFFSET is zero and A1X_DDR_MAPSIZE is\nthe full, installed size of the DRAM.  But these values can be\nmodified to set aside memory at the beginning or end of SRAM that is\nunmapped (or mapped differently).  NOTE also that this value relates\nclosely to other settings:\n\n        RAM_START and RAM_VSTART give this physical and virtual addresses\n        of the start of usable memory (begining with .text).  NOTE that\n        this may not necessarily be the actual start of the mapped SDRAM\n        region.  It will be larger if NuttX begins at an offset from\n        beginning of mapped SDRAM (which is the normal case).\n\n        RAM_SIZE gives the size of the .text, .data, and .bss sections\n        plus the size of the available heap.  NOTE that RAM_SIZE may not\n        include all of SDRAM up to the end of mapped region."}, {"type": 27, "name": "A1X_DDR_MAPSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Installed SDRAM size", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM", "defaults": [{"name": "1073741824", "default": "1073741824", "cond": "ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM"}], "help": "The size of the installed SRAM memory is required in order to\nproperly configure memory mapping.  The mapping will begin at the\nstart of SDRAM plus A1X_DDR_MAPOFFSET and extend for DDR_MAPSIZE\nbytes.  NOTE typically A1X_MAP_OFFSET is zero and A1X_DDR_MAPSIZE is\nthe full, installed size of the DRAM.  But these values can be\nmodified to set aside memory at the beginning or end of SRAM that is\nunmapped (or mapped differently).  NOTE also that this value relates\nclosely to other settings:\n\n        RAM_START and RAM_VSTART give this physical and virtual addresses\n        of the start of usable memory (begining with .text).  NOTE that\n        this may not necessarily be the actual start of the mapped SDRAM\n        region.  It will be larger if NuttX begins at an offset from\n        beginning of mapped SDRAM (which is the normal case).\n\n        RAM_SIZE gives the size of the .text, .data, and .bss sections\n        plus the size of the available heap.  NOTE that RAM_SIZE may not\n        include all of SDRAM up to the end of mapped region."}, {"type": 6, "dep": "n", "prompt": "C5471 Configuration Options", "cond": "ARCH_CHIP_C5471 && ARCH_ARM"}, {"type": 31, "dep": "n", "prompt": "IrDA UART Configuration", "cond": "ARCH_CHIP_C5471 && ARCH_ARM", "children": [{"type": 27, "name": "UART_IRDA_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "IrDA UART BAUD", "cond": "ARCH_CHIP_C5471 && ARCH_ARM", "defaults": [{"name": "115200", "default": "115200", "cond": "ARCH_CHIP_C5471 && ARCH_ARM"}]}, {"type": 27, "name": "UART_IRDA_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "IrDA UART parity", "cond": "ARCH_CHIP_C5471 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "ARCH_CHIP_C5471 && ARCH_ARM"}], "help": "IrDA UART parity.  0=None, 1=Odd, 2=Even.  Default: None"}, {"type": 27, "name": "UART_IRDA_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "IrDA UART number of bits", "cond": "ARCH_CHIP_C5471 && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "ARCH_CHIP_C5471 && ARCH_ARM"}], "help": "IrDA UART number of bits.  Default: 8"}, {"type": 27, "name": "UART_IRDA_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "IrDA UART two stop bits", "cond": "ARCH_CHIP_C5471 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "ARCH_CHIP_C5471 && ARCH_ARM"}], "help": "0=1 stop bit, 1=Two stop bits.  Default: 1 stop bit"}, {"type": 27, "name": "UART_IRDA_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "IrDA UART Rx buffer size", "cond": "ARCH_CHIP_C5471 && ARCH_ARM", "defaults": [{"name": "256", "default": "256", "cond": "ARCH_CHIP_C5471 && ARCH_ARM"}], "help": "IrDA UART Rx buffer size.  Default: 256"}, {"type": 27, "name": "UART_IRDA_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "IrDA UART Tx buffer size", "cond": "ARCH_CHIP_C5471 && ARCH_ARM", "defaults": [{"name": "256", "default": "256", "cond": "ARCH_CHIP_C5471 && ARCH_ARM"}], "help": "IrDA UART Tx buffer size.  Default: 256"}]}, {"type": 31, "dep": "n", "prompt": "Modem UART Configuration", "cond": "ARCH_CHIP_C5471 && ARCH_ARM", "children": [{"type": 27, "name": "UART_MODEM_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "IrDA UART BAUD", "cond": "ARCH_CHIP_C5471 && ARCH_ARM", "defaults": [{"name": "115200", "default": "115200", "cond": "ARCH_CHIP_C5471 && ARCH_ARM"}]}, {"type": 27, "name": "UART_MODEM_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "IrDA UART parity", "cond": "ARCH_CHIP_C5471 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "ARCH_CHIP_C5471 && ARCH_ARM"}], "help": "IrDA UART parity.  0=None, 1=Odd, 2=Even.  Default: None"}, {"type": 27, "name": "UART_MODEM_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "IrDA UART number of bits", "cond": "ARCH_CHIP_C5471 && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "ARCH_CHIP_C5471 && ARCH_ARM"}], "help": "IrDA UART number of bits.  Default: 8"}, {"type": 27, "name": "UART_MODEM_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "IrDA UART two stop bits", "cond": "ARCH_CHIP_C5471 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "ARCH_CHIP_C5471 && ARCH_ARM"}], "help": "0=1 stop bit, 1=Two stop bits.  Default: 1 stop bit"}, {"type": 27, "name": "UART_MODEM_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "IrDA UART Rx buffer size", "cond": "ARCH_CHIP_C5471 && ARCH_ARM", "defaults": [{"name": "256", "default": "256", "cond": "ARCH_CHIP_C5471 && ARCH_ARM"}], "help": "IrDA UART Rx buffer size.  Default: 256"}, {"type": 27, "name": "UART_MODEM_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "IrDA UART Tx buffer size", "cond": "ARCH_CHIP_C5471 && ARCH_ARM", "defaults": [{"name": "256", "default": "256", "cond": "ARCH_CHIP_C5471 && ARCH_ARM"}], "help": "IrDA UART Tx buffer size.  Default: 256"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Ethernet PHY", "cond": "ARCH_CHIP_C5471 && ARCH_ARM", "defaults": [{"name": "C5471_PHY_LU3X31T_T64", "default": "n", "cond": "ARCH_CHIP_C5471 && ARCH_ARM"}], "children": [{"type": 3, "name": "C5471_PHY_NONE", "value": "n", "user_value": null, "dep": "n", "prompt": "None", "cond": "y"}, {"type": 3, "name": "C5471_PHY_AC101L", "value": "n", "user_value": null, "dep": "n", "prompt": "AC101L", "cond": "y"}, {"type": 3, "name": "C5471_PHY_LU3X31T_T64", "value": "n", "user_value": null, "dep": "n", "prompt": "LU3X31T T64", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "PHY mode", "cond": "ARCH_CHIP_C5471 && ARCH_ARM", "defaults": [{"name": "C5471_AUTONEGOTIATION", "default": "n", "cond": "ARCH_CHIP_C5471 && ARCH_ARM"}], "children": [{"type": 3, "name": "C5471_AUTONEGOTIATION", "value": "n", "user_value": null, "dep": "n", "prompt": "Autonegotiation", "cond": "y"}, {"type": 3, "name": "C5471_BASET100", "value": "n", "user_value": null, "dep": "n", "prompt": "100BaseT FullDuplex", "cond": "y"}, {"type": 3, "name": "C5471_BASET10", "value": "n", "user_value": null, "dep": "n", "prompt": "10BaseT FullDuplex", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Ethernet work queue", "cond": "SCHED_WORKQUEUE && ARCH_CHIP_C5471 && ARCH_ARM", "defaults": [{"name": "C5471_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && ARCH_CHIP_C5471 && ARCH_ARM"}, {"name": "C5471_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && ARCH_CHIP_C5471 && ARCH_ARM"}], "help": "Work queue support is required to use the Ethernet driver.  If the\nlow priority work queue is available, then it should be used by the\ndriver.", "children": [{"type": 3, "name": "C5471_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "C5471_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}, {"type": 6, "dep": "n", "prompt": "DM320 Configuration Options", "cond": "ARCH_CHIP_DM320 && ARCH_CHIP_DM320 && ARCH_ARM"}, {"type": 31, "dep": "n", "prompt": "DM320 Peripheral Selections", "cond": "ARCH_CHIP_DM320 && ARCH_CHIP_DM320 && ARCH_ARM", "children": [{"type": 3, "name": "DM320_UART0", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_DM320 && ARCH_CHIP_DM320 && ARCH_ARM"}], "selects": [{"symbol": "UART0_SERIALDRIVER", "cond": "ARCH_CHIP_DM320 && ARCH_CHIP_DM320 && ARCH_ARM"}]}, {"type": 3, "name": "DM320_UART1", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_DM320 && ARCH_CHIP_DM320 && ARCH_ARM"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_DM320 && ARCH_CHIP_DM320 && ARCH_ARM"}]}]}, {"type": 6, "dep": "n", "prompt": "EFM32 Configuration Options", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "EFM32 Chip Selection", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "ARCH_CHIP_EFM32TG840F32", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_EFM32TG840F32", "value": "n", "user_value": null, "dep": "n", "prompt": "EFM32TG840F32", "cond": "y", "selects": [{"symbol": "EFM32_EFM32TG", "cond": "y"}, {"symbol": "ARCH_CORTEXM3", "cond": "y"}], "help": "This chip is a Tiny Gecko with 32 KB flash and 4 KB RAM in a QFN64\npackage"}, {"type": 3, "name": "ARCH_CHIP_EFM32G880F128", "value": "n", "user_value": null, "dep": "n", "prompt": "EFM32G880F128", "cond": "y", "selects": [{"symbol": "EFM32_EFM32G", "cond": "y"}, {"symbol": "ARCH_CORTEXM3", "cond": "y"}], "help": "This chip is a Gecko with 128KiB flash and 16KiB RAM in a LQFP100\npackage"}, {"type": 3, "name": "ARCH_CHIP_EFM32G890F128", "value": "n", "user_value": null, "dep": "n", "prompt": "EFM32G890F128", "cond": "y", "selects": [{"symbol": "EFM32_EFM32G", "cond": "y"}, {"symbol": "ARCH_CORTEXM3", "cond": "y"}], "help": "This chip is a Gecko with 128KiB flash and 16KiB RAM in a BGA112\npackage"}, {"type": 3, "name": "ARCH_CHIP_EFM32GG332F1024", "value": "n", "user_value": null, "dep": "n", "prompt": "EFM32GG332F1024", "cond": "y", "selects": [{"symbol": "EFM32_EFM32GG", "cond": "y"}, {"symbol": "ARCH_CORTEXM3", "cond": "y"}], "help": "This chip is a Giant Gecko with 1024KiB flash and 128KiB RAM in a\nQFP64 package."}, {"type": 3, "name": "ARCH_CHIP_EFM32GG990F1024", "value": "n", "user_value": null, "dep": "n", "prompt": "EFM32GG990F1024", "cond": "y", "selects": [{"symbol": "EFM32_EFM32GG", "cond": "y"}, {"symbol": "ARCH_CORTEXM3", "cond": "y"}], "help": "This chip is a Giant Gecko with 1024KiB flash and 128KiB RAM in a\nBGA112 package."}]}, {"type": 3, "name": "EFM32_EFM32TG", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_EFM32TG840F32 && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_EFM32G", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_EFM32G880F128 && y) || (ARCH_CHIP_EFM32G890F128 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "selects": [{"symbol": "EFM32_HAVE_USART2", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}, {"symbol": "EFM32_HAVE_UART0", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}, {"symbol": "EFM32_HAVE_LEUART1", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_EFM32GG", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_EFM32GG332F1024 && y) || (ARCH_CHIP_EFM32GG990F1024 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "selects": [{"symbol": "EFM32_HAVE_USART2", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}, {"symbol": "EFM32_HAVE_UART0", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}, {"symbol": "EFM32_HAVE_UART1", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}, {"symbol": "EFM32_HAVE_LEUART1", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}, {"symbol": "EFM32_HAVE_OTGFS", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 31, "dep": "n", "prompt": "EFM32 Peripheral Support", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "children": [{"type": 3, "name": "EFM32_HAVE_USART2", "value": "n", "user_value": null, "rev_dep": "(EFM32_EFM32G && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM) || (EFM32_EFM32GG && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_HAVE_UART0", "value": "n", "user_value": null, "rev_dep": "(EFM32_EFM32G && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM) || (EFM32_EFM32GG && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_HAVE_UART1", "value": "n", "user_value": null, "rev_dep": "EFM32_EFM32GG && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_HAVE_LEUART1", "value": "n", "user_value": null, "rev_dep": "(EFM32_EFM32G && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM) || (EFM32_EFM32GG && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_HAVE_OTGFS", "value": "n", "user_value": null, "rev_dep": "EFM32_EFM32GG && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_USART_ISUART", "value": "n", "user_value": null, "rev_dep": "(EFM32_USART0_ISUART && y) || (EFM32_USART1_ISUART && y) || (EFM32_USART2_ISUART && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_USART_ISSPI", "value": "n", "user_value": null, "rev_dep": "(EFM32_USART0_ISSPI && y) || (EFM32_USART1_ISSPI && y) || (EFM32_USART2_ISSPI && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_UART", "value": "n", "user_value": null, "rev_dep": "(EFM32_UART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM) || (EFM32_UART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_LEUART", "value": "n", "user_value": null, "rev_dep": "(EFM32_LEUART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM) || (EFM32_LEUART1 && EFM32_HAVE_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_DMA", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_RMU", "value": "n", "user_value": null, "dep": "n", "prompt": "Reset Management Unit (RMU)", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_FLASHPROG", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Erase/Write flash function (MSC)", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_RAMFUNCS", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_RMU_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Reset Management Unit (RMU) DEBUG", "cond": "EFM32_RMU && DEBUG_FEATURES && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EFM32_RMU && DEBUG_FEATURES && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_I2C0", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C0", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_I2C1", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C1", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_BITBAND", "value": "n", "user_value": null, "dep": "n", "prompt": "BITBAND", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_USART0", "value": "n", "user_value": null, "dep": "n", "prompt": "USART0", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_USART1", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_USART2", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2", "cond": "EFM32_HAVE_USART2 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EFM32_HAVE_USART2 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "EFM32_HAVE_USART2 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_UART0", "value": "n", "user_value": null, "dep": "n", "prompt": "UART0", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "selects": [{"symbol": "UART0_SERIALDRIVER", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}, {"symbol": "EFM32_UART", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}, {"symbol": "EFM32_UART", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_LEUART0", "value": "n", "user_value": null, "dep": "n", "prompt": "Low energy UART0", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "selects": [{"symbol": "OTHER_UART_SERIALDRIVER", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}, {"symbol": "EFM32_LEUART", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_LEUART1", "value": "n", "user_value": null, "dep": "n", "prompt": "Low energy UART1", "cond": "EFM32_HAVE_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EFM32_HAVE_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "selects": [{"symbol": "OTHER_UART_SERIALDRIVER", "cond": "EFM32_HAVE_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}, {"symbol": "EFM32_LEUART", "cond": "EFM32_HAVE_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_OTGFS", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Full-Speed OTG", "cond": "EFM32_HAVE_OTGFS && EXPERIMENTAL && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EFM32_HAVE_OTGFS && EXPERIMENTAL && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "selects": [{"symbol": "USBHOST_HAVE_ASYNCH", "cond": "USBHOST && EFM32_HAVE_OTGFS && EXPERIMENTAL && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_TIMER0", "value": "n", "user_value": null, "dep": "n", "prompt": "TIMER0", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_TIMER0", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}, {"symbol": "EFM32_TIMER", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_TIMER1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIMER1", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_TIMER1", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}, {"symbol": "EFM32_TIMER", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_TIMER2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIMER2", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_TIMER2", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}, {"symbol": "EFM32_TIMER", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}, {"type": 3, "name": "EFM32_TIMER3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIMER3", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_TIMER3", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}, {"symbol": "EFM32_TIMER", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}]}]}, {"type": 3, "name": "EFM32_GPIO_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIO pin interrupts", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "help": "Enable support for interrupting GPIO pins"}, {"type": 3, "name": "EFM32_LECLOCK", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable LE clocking (unconditionally)", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "Even you don't use core clock LE as source for LFA or LFB, to read\nare write any register not clocked by HFPERCLK or HFCORECLK,\nHFCORECLKLE should be enabled."}, {"type": 27, "name": "EFM32_DMA_ALTDSEC", "value": "", "user_value": null, "dep": "n", "prompt": "Enable alternate descriptors", "cond": "EXPERIMENTAL && EFM32_DMA && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "EXPERIMENTAL && EFM32_DMA && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "Enable support for alternate descriptors.  Not fully implemented."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USART0 Mode", "cond": "EFM32_USART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "EFM32_USART0_ISUART", "default": "n", "cond": "EFM32_USART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "EFM32_USART0_ISUART", "value": "n", "user_value": null, "dep": "n", "prompt": "USART0 is a UART", "cond": "y", "selects": [{"symbol": "USART0_SERIALDRIVER", "cond": "y"}, {"symbol": "EFM32_USART_ISUART", "cond": "y"}]}, {"type": 3, "name": "EFM32_USART0_ISSPI", "value": "n", "user_value": null, "dep": "n", "prompt": "USART0 is SPI", "cond": "y", "selects": [{"symbol": "EFM32_USART_ISSPI", "cond": "y"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USART1 Mode", "cond": "EFM32_USART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "EFM32_USART1_ISUART", "default": "n", "cond": "EFM32_USART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "EFM32_USART1_ISUART", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1 is a UART", "cond": "y", "selects": [{"symbol": "USART1_SERIALDRIVER", "cond": "y"}, {"symbol": "EFM32_USART_ISUART", "cond": "y"}]}, {"type": 3, "name": "EFM32_USART1_ISSPI", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1 is SPI", "cond": "y", "selects": [{"symbol": "EFM32_USART_ISSPI", "cond": "y"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USART2 Mode", "cond": "EFM32_USART2 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "EFM32_USART2_ISUART", "default": "n", "cond": "EFM32_USART2 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "EFM32_USART2_ISUART", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2 is a UART", "cond": "y", "selects": [{"symbol": "USART2_SERIALDRIVER", "cond": "y"}, {"symbol": "EFM32_USART_ISUART", "cond": "y"}]}, {"type": 3, "name": "EFM32_USART2_ISSPI", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2 is SPI", "cond": "y", "selects": [{"symbol": "EFM32_USART_ISSPI", "cond": "y"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "LEUART Serial Console", "cond": "DEV_CONSOLE && EFM32_LEUART && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "NO_LEUART_SERIAL_CONSOLE", "default": "n", "cond": "DEV_CONSOLE && EFM32_LEUART && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "LEUART0_SERIAL_CONSOLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Use LEUART0 as the serial console", "cond": "EFM32_LEUART0 && y", "selects": [{"symbol": "OTHER_SERIAL_CONSOLE", "cond": "EFM32_LEUART0 && y"}], "help": "Use the LEUART0 device as the serial console"}, {"type": 3, "name": "LEUART1_SERIAL_CONSOLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Use LEUART1 as the serial console", "cond": "EFM32_LEUART1 && y", "selects": [{"symbol": "OTHER_SERIAL_CONSOLE", "cond": "EFM32_LEUART1 && y"}], "help": "Use the LEUART0 device as the serial console"}, {"type": 3, "name": "NO_LEUART_SERIAL_CONSOLE", "value": "n", "user_value": null, "dep": "n", "prompt": "No LEUART serial console", "cond": "y", "help": "No serial console OR some other serial device provides the serial console"}]}, {"type": 31, "dep": "n", "prompt": "LEUART0 Configuration", "cond": "EFM32_LEUART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "children": [{"type": 27, "name": "LEUART0_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "EFM32_LEUART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "64", "default": "64", "cond": "EFM32_LEUART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "LEUART0_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "EFM32_LEUART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "64", "default": "64", "cond": "EFM32_LEUART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "LEUART0_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "EFM32_LEUART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "2400", "default": "2400", "cond": "EFM32_LEUART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "The configured BAUD of the UART."}, {"type": 27, "name": "LEUART0_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character size", "cond": "EFM32_LEUART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "EFM32_LEUART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "ranges": [{"min": "8", "max": "9", "cond": "EFM32_LEUART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "The number of bits.  Must be either 8 or 9."}, {"type": 27, "name": "LEUART0_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "EFM32_LEUART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "EFM32_LEUART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "2", "cond": "EFM32_LEUART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "LEUART0_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "use 2 stop bits", "cond": "EFM32_LEUART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "EFM32_LEUART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "EFM32_LEUART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "1=Two stop bits"}]}, {"type": 31, "dep": "n", "prompt": "LEUART1 Configuration", "cond": "EFM32_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "children": [{"type": 27, "name": "LEUART1_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "EFM32_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "64", "default": "64", "cond": "EFM32_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "LEUART1_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "EFM32_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "64", "default": "64", "cond": "EFM32_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "LEUART1_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "EFM32_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "2400", "default": "2400", "cond": "EFM32_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "The configured BAUD of the UART."}, {"type": 27, "name": "LEUART1_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character size", "cond": "EFM32_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "EFM32_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "ranges": [{"min": "8", "max": "9", "cond": "EFM32_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "The number of bits.  Must be either 8 or 9."}, {"type": 27, "name": "LEUART1_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "EFM32_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "EFM32_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "2", "cond": "EFM32_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "LEUART1_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "use 2 stop bits", "cond": "EFM32_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "EFM32_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "EFM32_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "1=Two stop bits"}]}, {"type": 31, "dep": "n", "prompt": "SPI Configuration", "cond": "EFM32_USART_ISSPI && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "children": [{"type": 3, "name": "EFM32_SPI_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI DMA support", "cond": "EFM32_DMA && EFM32_USART_ISSPI && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EFM32_DMA && EFM32_USART_ISSPI && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "Select to enable DMA SPI transfers", "children": [{"type": 27, "name": "EFM32_SPI_DMA_TIMEO_NSEC", "value": "", "user_value": null, "dep": "n", "prompt": "Per word timeout (nsec)", "cond": "EFM32_SPI_DMA && EFM32_USART_ISSPI && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "500", "default": "500", "cond": "EFM32_SPI_DMA && EFM32_USART_ISSPI && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "A timeout will be be used to detect hung DMA transfers.  The timeout\nwill vary as a function of the number of words transferred.  This\nvalue provides the per-word timeout value in nanoseconds."}, {"type": 27, "name": "EFM32_SPI_DMA_MINSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Minimum DMA size", "cond": "EFM32_SPI_DMA && EFM32_USART_ISSPI && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "16", "default": "16", "cond": "EFM32_SPI_DMA && EFM32_USART_ISSPI && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "DMA is particularly helpful for the case of large SPI transfers.\nSmaller SPI transfer may be more efficiently performed without DMA.\nThis option determines a threshold:  For transfers of this size and\nbelow, DMA will not be used.  A value of zero will force all DMA-\nbased transfers."}]}]}, {"type": 31, "dep": "n", "prompt": "USB FS Host Configuration", "cond": "USBHOST && EFM32_OTGFS && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "children": [{"type": 27, "name": "EFM32_OTGFS_RXFIFO_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Rx Packet Size", "cond": "USBHOST && EFM32_OTGFS && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "128", "default": "128", "cond": "USBHOST && EFM32_OTGFS && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "Size of the RX FIFO in 32-bit words. Default 128 (512 bytes)"}, {"type": 27, "name": "EFM32_OTGFS_NPTXFIFO_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Non-periodic Tx FIFO Size", "cond": "USBHOST && EFM32_OTGFS && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "96", "default": "96", "cond": "USBHOST && EFM32_OTGFS && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "Size of the non-periodic Tx FIFO in 32-bit words.  Default 96 (384 bytes)"}, {"type": 27, "name": "EFM32_OTGFS_PTXFIFO_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Periodic Tx FIFO size", "cond": "USBHOST && EFM32_OTGFS && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "128", "default": "128", "cond": "USBHOST && EFM32_OTGFS && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "Size of the periodic Tx FIFO in 32-bit words.  Default 96 (384 bytes)"}, {"type": 27, "name": "EFM32_OTGFS_DESCSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Descriptor Size", "cond": "USBHOST && EFM32_OTGFS && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "128", "default": "128", "cond": "USBHOST && EFM32_OTGFS && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "Maximum size to allocate for descriptor memory descriptor.  Default: 128"}, {"type": 3, "name": "EFM32_OTGFS_SOFINTR", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable SOF interrupts", "cond": "USBHOST && EFM32_OTGFS && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "USBHOST && EFM32_OTGFS && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "Enable SOF interrupts.  Why would you ever want to do that?"}]}, {"type": 3, "name": "EFM32_TIMER0", "value": "n", "user_value": null, "dep": "n", "prompt": "TIMER0", "cond": "EFM32_HAVE_TIMER0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EFM32_HAVE_TIMER0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "EFM32_TIMER0_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIMER0 PWM", "cond": "EFM32_TIMER0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EFM32_TIMER0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "EFM32_TIMER0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "Reserve timer 0 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.\nIf EFM32_TIMER0 is defined then THIS following may also be defined\nto indicate that the timer is intended to be used for pulsed output\nmodulation.", "children": [{"type": 27, "name": "EFM32_TIMER0_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIMER0 PWM Output Channel", "cond": "EFM32_TIMER0_PWM && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "EFM32_TIMER0_PWM && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "2", "cond": "EFM32_TIMER0_PWM && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "If TIMER0 is enabled for PWM usage, you also need specifies the timer output\nchannel {0,1,2}"}]}]}, {"type": 3, "name": "EFM32_TIMER1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIMER1", "cond": "EFM32_HAVE_TIMER1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EFM32_HAVE_TIMER1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "EFM32_TIMER1_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIMER1 PWM", "cond": "EFM32_TIMER1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EFM32_TIMER1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "EFM32_TIMER1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "Reserve timer 0 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.\nIf EFM32_TIMER1 is defined then THIS following may also be defined\nto indicate that the timer is intended to be used for pulsed output\nmodulation.", "children": [{"type": 27, "name": "EFM32_TIMER1_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIMER1 PWM Output Channel", "cond": "EFM32_TIMER1_PWM && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "EFM32_TIMER1_PWM && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "2", "cond": "EFM32_TIMER1_PWM && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "If TIMER1 is enabled for PWM usage, you also need specifies the timer output\nchannel {0,1,2}"}]}]}, {"type": 3, "name": "EFM32_TIMER2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIMER2", "cond": "EFM32_HAVE_TIMER2 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EFM32_HAVE_TIMER2 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "EFM32_TIMER2_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIMER2 PWM", "cond": "EFM32_TIMER2 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EFM32_TIMER2 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "EFM32_TIMER2 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "Reserve timer 0 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.\nIf EFM32_TIMER2 is defined then THIS following may also be defined\nto indicate that the timer is intended to be used for pulsed output\nmodulation.", "children": [{"type": 27, "name": "EFM32_TIMER2_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIMER2 PWM Output Channel", "cond": "EFM32_TIMER2_PWM && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "EFM32_TIMER2_PWM && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "2", "cond": "EFM32_TIMER2_PWM && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "If TIMER2 is enabled for PWM usage, you also need specifies the timer output\nchannel {0,1,2}"}]}]}, {"type": 3, "name": "EFM32_TIMER3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIMER3", "cond": "EFM32_HAVE_TIMER3 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EFM32_HAVE_TIMER3 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "EFM32_TIMER3_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIMER3 PWM", "cond": "EFM32_TIMER3 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EFM32_TIMER3 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "EFM32_TIMER3 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "Reserve timer 0 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.\nIf EFM32_TIMER3 is defined then THIS following may also be defined\nto indicate that the timer is intended to be used for pulsed output\nmodulation.", "children": [{"type": 27, "name": "EFM32_TIMER3_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIMER3 PWM Output Channel", "cond": "EFM32_TIMER3_PWM && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "EFM32_TIMER3_PWM && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "2", "cond": "EFM32_TIMER3_PWM && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "If TIMER3 is enabled for PWM usage, you also need specifies the timer output\nchannel {0,1,2}"}]}]}, {"type": 3, "name": "EFM32_RTC_BURTC", "value": "n", "user_value": null, "dep": "n", "prompt": "Use BURTC as RTC", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM"}], "help": "Enable RTC with EFM32 BURTC"}, {"type": 31, "dep": "n", "prompt": "iMX.1 Peripheral Selection", "cond": "ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM", "children": [{"type": 3, "name": "IMX1_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM"}]}, {"type": 3, "name": "IMX1_UART2", "value": "n", "user_value": null, "dep": "n", "prompt": "UART2", "cond": "ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM"}], "selects": [{"symbol": "UART2_SERIALDRIVER", "cond": "ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM"}]}, {"type": 3, "name": "IMX1_UART3", "value": "n", "user_value": null, "dep": "n", "prompt": "UART3", "cond": "ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM"}], "selects": [{"symbol": "UART3_SERIALDRIVER", "cond": "ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM"}]}, {"type": 3, "name": "IMX1_SPI1", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI1", "cond": "ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM"}]}, {"type": 3, "name": "IMX1_SPI2", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI2", "cond": "ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM"}]}]}, {"type": 24, "name": "RAM_NUTTXENTRY", "value": "", "user_value": null, "dep": "n", "prompt": "NuttX entry point", "cond": "ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM", "defaults": [{"name": "0x01004000", "default": "0x01004000", "cond": "ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM"}], "help": "The virtual address of the NuttX entry point"}, {"type": 31, "dep": "n", "prompt": "iMX.6 Chip Selection", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "iMX.6 Core Configuration", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM", "defaults": [{"name": "IMX6_6QUAD", "default": "IMX6_6QUAD", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_IMX6_6SOLOLITE", "value": "n", "user_value": null, "dep": "n", "prompt": "i.MX 6SoloLite", "cond": "y", "selects": [{"symbol": "ARMV7A_HAVE_GICv2", "cond": "y"}, {"symbol": "ARMV7A_HAVE_GTM", "cond": "y"}, {"symbol": "ARMV7A_HAVE_PTM", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_IMX6_6SOLO", "value": "n", "user_value": null, "dep": "n", "prompt": "i.MX 6Solo", "cond": "y", "selects": [{"symbol": "ARMV7A_HAVE_GICv2", "cond": "y"}, {"symbol": "ARMV7A_HAVE_GTM", "cond": "y"}, {"symbol": "ARMV7A_HAVE_PTM", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_IMX6_6DUALLITE", "value": "n", "user_value": null, "dep": "n", "prompt": "i.MX 6DualLite", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_MULTICPU", "cond": "y"}, {"symbol": "ARMV7A_HAVE_GICv2", "cond": "y"}, {"symbol": "ARMV7A_HAVE_GTM", "cond": "y"}, {"symbol": "ARMV7A_HAVE_PTM", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_IMX6_6DUAL", "value": "n", "user_value": null, "dep": "n", "prompt": "i.MX 6Dual", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_MULTICPU", "cond": "y"}, {"symbol": "ARMV7A_HAVE_GICv2", "cond": "y"}, {"symbol": "ARMV7A_HAVE_GTM", "cond": "y"}, {"symbol": "ARMV7A_HAVE_PTM", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_IMX6_6QUAD", "value": "n", "user_value": null, "dep": "n", "prompt": "i.MX 6Quad", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_MULTICPU", "cond": "y"}, {"symbol": "ARMV7A_HAVE_GICv2", "cond": "y"}, {"symbol": "ARMV7A_HAVE_GTM", "cond": "y"}, {"symbol": "ARMV7A_HAVE_PTM", "cond": "y"}]}]}, {"type": 3, "name": "IMX6_HAVE_HDCP", "value": "n", "user_value": null, "dep": "n", "prompt": "HDCP enabled", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}], "help": "HDCP - High-bandwidth Digital Content Protection"}]}, {"type": 3, "name": "IMX6_ECSPI", "value": "n", "user_value": null, "rev_dep": "(IMX6_ECSPI1 && ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM) || (IMX6_ECSPI2 && ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM) || (IMX6_ECSPI3 && ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM) || (IMX6_ECSPI4 && ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM) || (IMX6_ECSPI5 && ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}]}, {"type": 31, "dep": "n", "prompt": "iMX.6 Peripheral Selection", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM", "children": [{"type": 3, "name": "IMX6_ECSPI1", "value": "n", "user_value": null, "dep": "n", "prompt": "ECSPI1", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}], "selects": [{"symbol": "IMX6_ECSPI", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}]}, {"type": 3, "name": "IMX6_ECSPI2", "value": "n", "user_value": null, "dep": "n", "prompt": "ECSPI2", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}], "selects": [{"symbol": "IMX6_ECSPI", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}]}, {"type": 3, "name": "IMX6_ECSPI3", "value": "n", "user_value": null, "dep": "n", "prompt": "ECSPI3", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}], "selects": [{"symbol": "IMX6_ECSPI", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}]}, {"type": 3, "name": "IMX6_ECSPI4", "value": "n", "user_value": null, "dep": "n", "prompt": "ECSPI4", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}], "selects": [{"symbol": "IMX6_ECSPI", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}]}, {"type": 3, "name": "IMX6_ECSPI5", "value": "n", "user_value": null, "dep": "n", "prompt": "ECSPI5", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}], "selects": [{"symbol": "IMX6_ECSPI", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}]}, {"type": 3, "name": "IMX6_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}]}, {"type": 3, "name": "IMX6_UART2", "value": "n", "user_value": null, "dep": "n", "prompt": "UART2", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}], "selects": [{"symbol": "UART2_SERIALDRIVER", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}]}, {"type": 3, "name": "IMX6_UART3", "value": "n", "user_value": null, "dep": "n", "prompt": "UART3", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}], "selects": [{"symbol": "UART3_SERIALDRIVER", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}]}, {"type": 3, "name": "IMX6_UART4", "value": "n", "user_value": null, "dep": "n", "prompt": "UART4", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}], "selects": [{"symbol": "UART4_SERIALDRIVER", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}]}, {"type": 3, "name": "IMX6_UART5", "value": "n", "user_value": null, "dep": "n", "prompt": "UART5", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}], "selects": [{"symbol": "UART5_SERIALDRIVER", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}]}, {"type": 3, "name": "IMX6_SPI1", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI1", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}]}, {"type": 3, "name": "IMX6_SPI2", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI2", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}]}]}, {"type": 27, "name": "IMX_DDR_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Installed DRAM size (bytes)", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM", "defaults": [{"name": "268435456", "default": "268435456", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "i.MX6 Boot Configuration", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM", "defaults": [{"name": "IMX6_BOOT_SDRAM", "default": "n", "cond": "ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM"}], "help": "The startup code needs to know if the code is running from internal SRAM,\nexternal SRAM, or CS0-3 in order to initialize properly.  Note that the\nboot device is not specified for cases where the code is copied into\nRAM.", "children": [{"type": 3, "name": "IMX6_BOOT_OCRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "Running from internal OCRAM", "cond": "y", "selects": [{"symbol": "BOOT_RUNFROMISRAM", "cond": "y"}]}, {"type": 3, "name": "IMX6_BOOT_SDRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "Running from external SDRAM", "cond": "y", "selects": [{"symbol": "BOOT_RUNFROMSDRAM", "cond": "y"}]}, {"type": 3, "name": "IMX6_BOOT_NOR", "value": "n", "user_value": null, "dep": "n", "prompt": "Running from external NOR FLASH", "cond": "y", "selects": [{"symbol": "BOOT_RUNFROMFLASH", "cond": "y"}]}, {"type": 3, "name": "IMX6_BOOT_SRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "Running from external SRAM", "cond": "y", "selects": [{"symbol": "BOOT_RUNFROMEXTSRAM", "cond": "y"}]}]}, {"type": 6, "dep": "n", "prompt": "Kinetis Configuration Options", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Kinetis Chip Selection", "cond": "ARCH_CHIP_KINETIS && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "ARCH_CHIP_MK60N512VMD100", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_CHIP_KINETIS && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_MK20DN32VLH5", "value": "n", "user_value": null, "dep": "n", "prompt": "MK20DN32VLH5", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K20", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK20DX32VLH5", "value": "n", "user_value": null, "dep": "n", "prompt": "MK20DX32VLH5", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K20", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK20DN64VLH5", "value": "n", "user_value": null, "dep": "n", "prompt": "MK20DN64VLH5", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K20", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK20DX64VLH5", "value": "n", "user_value": null, "dep": "n", "prompt": "MK20DX64VLH5", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K20", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK20DN128VLH5", "value": "n", "user_value": null, "dep": "n", "prompt": "MK20DN128VLH5", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K20", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK20DX128VLH5", "value": "n", "user_value": null, "dep": "n", "prompt": "MK20DX128VLH5", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K20", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK20DX64VLH7", "value": "n", "user_value": null, "dep": "n", "prompt": "MK20DX64VLH7", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K20", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK20DX128VLH7", "value": "n", "user_value": null, "dep": "n", "prompt": "MK20DX128VLH7", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K20", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK20DX256VLH7", "value": "n", "user_value": null, "dep": "n", "prompt": "MK20DX256VLH7", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K20", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK40N512VLQ100", "value": "n", "user_value": null, "dep": "n", "prompt": "MK40N512VLQ100", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K40", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK40N512VMD100", "value": "n", "user_value": null, "dep": "n", "prompt": "MK40N512VMD100", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K40", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK40X128VLQ100", "value": "n", "user_value": null, "dep": "n", "prompt": "MK40X128VLQ100", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K40", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK40X128VMD100", "value": "n", "user_value": null, "dep": "n", "prompt": "MK40X128VMD100", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K40", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK40X256VLQ100", "value": "n", "user_value": null, "dep": "n", "prompt": "MK40X256VLQ100", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K40", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK40X256VMD100", "value": "n", "user_value": null, "dep": "n", "prompt": "MK40X256VMD100", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K40", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK60N256VLQ100", "value": "n", "user_value": null, "dep": "n", "prompt": "MK60N256VLQ100", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K60", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK60N256VMD100", "value": "n", "user_value": null, "dep": "n", "prompt": "MK60N256VMD100", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K60", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C2", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK60N512VLL100", "value": "n", "user_value": null, "dep": "n", "prompt": "MK60N512VLL100", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K60", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C2", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK60N512VLQ100", "value": "n", "user_value": null, "dep": "n", "prompt": "MK60N512VLQ100", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K60", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C2", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK60N512VMD100", "value": "n", "user_value": null, "dep": "n", "prompt": "MK60N512VMD100", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K60", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C2", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK60X256VLQ100", "value": "n", "user_value": null, "dep": "n", "prompt": "MK60X256VLQ100", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K60", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C2", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK60X256VMD100", "value": "n", "user_value": null, "dep": "n", "prompt": "MK60X256VMD100", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K60", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C2", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK60FN1M0VLQ12", "value": "n", "user_value": null, "dep": "n", "prompt": "MK60FN1M0VLQ12", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K60", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C2", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK64FN1M0VLL12", "value": "n", "user_value": null, "dep": "n", "prompt": "MK64FN1M0VLL12", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K64", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C2", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI1", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI2", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK64FX512VLL12", "value": "n", "user_value": null, "dep": "n", "prompt": "MK64FX512VLL12", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K64", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C2", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI1", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI2", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK64FX512VDC12", "value": "n", "user_value": null, "dep": "n", "prompt": "MK64FX512VDC12", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K64", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C2", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI1", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI2", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK64FN1M0VDC12", "value": "n", "user_value": null, "dep": "n", "prompt": "MK64FN1M0VDC12", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K64", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C2", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI1", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI2", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK64FX512VLQ12", "value": "n", "user_value": null, "dep": "n", "prompt": "MK64FX512VLQ12", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K64", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C2", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI1", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI2", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK64FX512VMD12", "value": "n", "user_value": null, "dep": "n", "prompt": "MK64FX512VMD12", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K64", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C2", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI1", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI2", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK64FN1M0VMD12", "value": "n", "user_value": null, "dep": "n", "prompt": "MK64FN1M0VMD12", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K64", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C2", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI1", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI2", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK66FX1M0VMD18", "value": "n", "user_value": null, "dep": "n", "prompt": "MK66FX1M0VMD18", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K66", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C2", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C3", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI1", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI2", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK66FN2M0VMD18", "value": "n", "user_value": null, "dep": "n", "prompt": "MK66FN2M0VMD18", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K66", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C2", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C3", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI1", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI2", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK66FX1M0VLQ18", "value": "n", "user_value": null, "dep": "n", "prompt": "MK66FX1M0VLQ18", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K66", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C2", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C3", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI1", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI2", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MK66FN2M0VLQ18", "value": "n", "user_value": null, "dep": "n", "prompt": "MK66FN2M0VLQ18", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_K66", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C1", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C2", "cond": "y"}, {"symbol": "KINETIS_HAVE_I2C3", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI1", "cond": "y"}, {"symbol": "KINETIS_HAVE_SPI2", "cond": "y"}]}]}, {"type": 3, "name": "KINETIS_HAVE_UART5", "value": "n", "user_value": null, "rev_dep": "(ARCH_FAMILY_K20 && ARCH_CHIP_KINETIS && ARCH_ARM) || (ARCH_FAMILY_K40 && ARCH_CHIP_KINETIS && ARCH_ARM) || (ARCH_FAMILY_K60 && ARCH_CHIP_KINETIS && ARCH_ARM) || (ARCH_FAMILY_K64 && ARCH_CHIP_KINETIS && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}]}, {"type": 3, "name": "KINETIS_HAVE_LPUART0", "value": "n", "user_value": null, "rev_dep": "ARCH_FAMILY_K66 && ARCH_CHIP_KINETIS && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}]}, {"type": 3, "name": "KINETIS_HAVE_LPUART1", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}]}, {"type": 3, "name": "KINETIS_SERIALDRIVER", "value": "n", "user_value": null, "rev_dep": "(KINETIS_UART0 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_UART1 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_UART2 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_UART3 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_UART4 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_UART5 && KINETIS_HAVE_UART5 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_LPUART0 && KINETIS_HAVE_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_LPUART1 && KINETIS_HAVE_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}]}, {"type": 3, "name": "KINETIS_LPUART", "value": "n", "user_value": null, "rev_dep": "(KINETIS_LPUART0 && KINETIS_HAVE_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_LPUART1 && KINETIS_HAVE_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}]}, {"type": 3, "name": "KINETIS_UART", "value": "n", "user_value": null, "rev_dep": "(KINETIS_UART0 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_UART1 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_UART2 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_UART3 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_UART4 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_UART5 && KINETIS_HAVE_UART5 && ARCH_CHIP_KINETIS && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_K20", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_MK20DN32VLH5 && y) || (ARCH_CHIP_MK20DX32VLH5 && y) || (ARCH_CHIP_MK20DN64VLH5 && y) || (ARCH_CHIP_MK20DX64VLH5 && y) || (ARCH_CHIP_MK20DN128VLH5 && y) || (ARCH_CHIP_MK20DX128VLH5 && y) || (ARCH_CHIP_MK20DX64VLH7 && y) || (ARCH_CHIP_MK20DX128VLH7 && y) || (ARCH_CHIP_MK20DX256VLH7 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "KINETIS_HAVE_UART5", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_K40", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_MK40N512VLQ100 && y) || (ARCH_CHIP_MK40N512VMD100 && y) || (ARCH_CHIP_MK40X128VLQ100 && y) || (ARCH_CHIP_MK40X128VMD100 && y) || (ARCH_CHIP_MK40X256VLQ100 && y) || (ARCH_CHIP_MK40X256VMD100 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "KINETIS_HAVE_UART5", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_K60", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_MK60N256VLQ100 && y) || (ARCH_CHIP_MK60N256VMD100 && y) || (ARCH_CHIP_MK60N512VLL100 && y) || (ARCH_CHIP_MK60N512VLQ100 && y) || (ARCH_CHIP_MK60N512VMD100 && y) || (ARCH_CHIP_MK60X256VLQ100 && y) || (ARCH_CHIP_MK60X256VMD100 && y) || (ARCH_CHIP_MK60FN1M0VLQ12 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "KINETIS_HAVE_UART5", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_K64", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_MK64FN1M0VLL12 && y) || (ARCH_CHIP_MK64FX512VLL12 && y) || (ARCH_CHIP_MK64FX512VDC12 && y) || (ARCH_CHIP_MK64FN1M0VDC12 && y) || (ARCH_CHIP_MK64FX512VLQ12 && y) || (ARCH_CHIP_MK64FX512VMD12 && y) || (ARCH_CHIP_MK64FN1M0VMD12 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "KINETIS_HAVE_FTM3", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "KINETIS_HAVE_UART5", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_K66", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_MK66FX1M0VMD18 && y) || (ARCH_CHIP_MK66FN2M0VMD18 && y) || (ARCH_CHIP_MK66FX1M0VLQ18 && y) || (ARCH_CHIP_MK66FN2M0VLQ18 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "KINETIS_HAVE_FTM3", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "KINETIS_HAVE_LPUART0", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "KINETIS_HAVE_TPM1", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "KINETIS_HAVE_TPM2", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}]}, {"type": 31, "dep": "n", "prompt": "Kinetis Peripheral Support", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "children": [{"type": 3, "name": "KINETIS_HAVE_FTM3", "value": "n", "user_value": null, "rev_dep": "(ARCH_FAMILY_K64 && ARCH_CHIP_KINETIS && ARCH_ARM) || (ARCH_FAMILY_K66 && ARCH_CHIP_KINETIS && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}]}, {"type": 3, "name": "KINETIS_HAVE_I2C1", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_MK20DX64VLH7 && y) || (ARCH_CHIP_MK20DX128VLH7 && y) || (ARCH_CHIP_MK20DX256VLH7 && y) || (ARCH_CHIP_MK40N512VLQ100 && y) || (ARCH_CHIP_MK40N512VMD100 && y) || (ARCH_CHIP_MK40X128VLQ100 && y) || (ARCH_CHIP_MK40X128VMD100 && y) || (ARCH_CHIP_MK40X256VLQ100 && y) || (ARCH_CHIP_MK40X256VMD100 && y) || (ARCH_CHIP_MK60N256VLQ100 && y) || (ARCH_CHIP_MK60N256VMD100 && y) || (ARCH_CHIP_MK60N512VLL100 && y) || (ARCH_CHIP_MK60N512VLQ100 && y) || (ARCH_CHIP_MK60N512VMD100 && y) || (ARCH_CHIP_MK60X256VLQ100 && y) || (ARCH_CHIP_MK60X256VMD100 && y) || (ARCH_CHIP_MK60FN1M0VLQ12 && y) || (ARCH_CHIP_MK64FN1M0VLL12 && y) || (ARCH_CHIP_MK64FX512VLL12 && y) || (ARCH_CHIP_MK64FX512VDC12 && y) || (ARCH_CHIP_MK64FN1M0VDC12 && y) || (ARCH_CHIP_MK64FX512VLQ12 && y) || (ARCH_CHIP_MK64FX512VMD12 && y) || (ARCH_CHIP_MK64FN1M0VMD12 && y) || (ARCH_CHIP_MK66FX1M0VMD18 && y) || (ARCH_CHIP_MK66FN2M0VMD18 && y) || (ARCH_CHIP_MK66FX1M0VLQ18 && y) || (ARCH_CHIP_MK66FN2M0VLQ18 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}]}, {"type": 3, "name": "KINETIS_HAVE_I2C2", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_MK60N256VMD100 && y) || (ARCH_CHIP_MK60N512VLL100 && y) || (ARCH_CHIP_MK60N512VLQ100 && y) || (ARCH_CHIP_MK60N512VMD100 && y) || (ARCH_CHIP_MK60X256VLQ100 && y) || (ARCH_CHIP_MK60X256VMD100 && y) || (ARCH_CHIP_MK60FN1M0VLQ12 && y) || (ARCH_CHIP_MK64FN1M0VLL12 && y) || (ARCH_CHIP_MK64FX512VLL12 && y) || (ARCH_CHIP_MK64FX512VDC12 && y) || (ARCH_CHIP_MK64FN1M0VDC12 && y) || (ARCH_CHIP_MK64FX512VLQ12 && y) || (ARCH_CHIP_MK64FX512VMD12 && y) || (ARCH_CHIP_MK64FN1M0VMD12 && y) || (ARCH_CHIP_MK66FX1M0VMD18 && y) || (ARCH_CHIP_MK66FN2M0VMD18 && y) || (ARCH_CHIP_MK66FX1M0VLQ18 && y) || (ARCH_CHIP_MK66FN2M0VLQ18 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}]}, {"type": 3, "name": "KINETIS_HAVE_I2C3", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_MK66FX1M0VMD18 && y) || (ARCH_CHIP_MK66FN2M0VMD18 && y) || (ARCH_CHIP_MK66FX1M0VLQ18 && y) || (ARCH_CHIP_MK66FN2M0VLQ18 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}]}, {"type": 3, "name": "KINETIS_HAVE_SPI1", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_MK64FN1M0VLL12 && y) || (ARCH_CHIP_MK64FX512VLL12 && y) || (ARCH_CHIP_MK64FX512VDC12 && y) || (ARCH_CHIP_MK64FN1M0VDC12 && y) || (ARCH_CHIP_MK64FX512VLQ12 && y) || (ARCH_CHIP_MK64FX512VMD12 && y) || (ARCH_CHIP_MK64FN1M0VMD12 && y) || (ARCH_CHIP_MK66FX1M0VMD18 && y) || (ARCH_CHIP_MK66FN2M0VMD18 && y) || (ARCH_CHIP_MK66FX1M0VLQ18 && y) || (ARCH_CHIP_MK66FN2M0VLQ18 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}]}, {"type": 3, "name": "KINETIS_HAVE_SPI2", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_MK64FN1M0VLL12 && y) || (ARCH_CHIP_MK64FX512VLL12 && y) || (ARCH_CHIP_MK64FX512VDC12 && y) || (ARCH_CHIP_MK64FN1M0VDC12 && y) || (ARCH_CHIP_MK64FX512VLQ12 && y) || (ARCH_CHIP_MK64FX512VMD12 && y) || (ARCH_CHIP_MK64FN1M0VMD12 && y) || (ARCH_CHIP_MK66FX1M0VMD18 && y) || (ARCH_CHIP_MK66FN2M0VMD18 && y) || (ARCH_CHIP_MK66FX1M0VLQ18 && y) || (ARCH_CHIP_MK66FN2M0VLQ18 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}]}, {"type": 3, "name": "KINETIS_HAVE_TPM1", "value": "n", "user_value": null, "rev_dep": "ARCH_FAMILY_K66 && ARCH_CHIP_KINETIS && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}]}, {"type": 3, "name": "KINETIS_HAVE_TPM2", "value": "n", "user_value": null, "rev_dep": "ARCH_FAMILY_K66 && ARCH_CHIP_KINETIS && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}]}, {"type": 3, "name": "KINETIS_TRACE", "value": "n", "user_value": null, "dep": "n", "prompt": "Trace", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Enable trace clocking on power up."}, {"type": 3, "name": "KINETIS_FLEXBUS", "value": "n", "user_value": null, "dep": "n", "prompt": "FlexBus", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Enable flexbus clocking on power up."}, {"type": 3, "name": "KINETIS_UART0", "value": "n", "user_value": null, "dep": "n", "prompt": "UART0", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "UART0_SERIALDRIVER", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "KINETIS_UART", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "KINETIS_SERIALDRIVER", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support UART0"}, {"type": 3, "name": "KINETIS_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "KINETIS_UART", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "KINETIS_SERIALDRIVER", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support UART1"}, {"type": 3, "name": "KINETIS_UART2", "value": "n", "user_value": null, "dep": "n", "prompt": "UART2", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "UART2_SERIALDRIVER", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "KINETIS_UART", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "KINETIS_SERIALDRIVER", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support UART2"}, {"type": 3, "name": "KINETIS_UART3", "value": "n", "user_value": null, "dep": "n", "prompt": "UART3", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "UART3_SERIALDRIVER", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "KINETIS_UART", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "KINETIS_SERIALDRIVER", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support UART3"}, {"type": 3, "name": "KINETIS_UART4", "value": "n", "user_value": null, "dep": "n", "prompt": "UART4", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "UART4_SERIALDRIVER", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "KINETIS_UART", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "KINETIS_SERIALDRIVER", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support UART4"}, {"type": 3, "name": "KINETIS_UART5", "value": "n", "user_value": null, "dep": "n", "prompt": "UART5", "cond": "KINETIS_HAVE_UART5 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_HAVE_UART5 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "UART5_SERIALDRIVER", "cond": "KINETIS_HAVE_UART5 && ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "KINETIS_UART", "cond": "KINETIS_HAVE_UART5 && ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "KINETIS_SERIALDRIVER", "cond": "KINETIS_HAVE_UART5 && ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "KINETIS_HAVE_UART5 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support UART5"}, {"type": 3, "name": "KINETIS_LPUART0", "value": "n", "user_value": null, "dep": "n", "prompt": "Low power LPUART0", "cond": "KINETIS_HAVE_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_HAVE_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "OTHER_UART_SERIALDRIVER", "cond": "KINETIS_HAVE_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "KINETIS_LPUART", "cond": "KINETIS_HAVE_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "KINETIS_SERIALDRIVER", "cond": "KINETIS_HAVE_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "KINETIS_HAVE_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support the low power UART0"}, {"type": 3, "name": "KINETIS_LPUART1", "value": "n", "user_value": null, "dep": "n", "prompt": "Low power LPUART1", "cond": "KINETIS_HAVE_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_HAVE_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "OTHER_UART_SERIALDRIVER", "cond": "KINETIS_HAVE_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "KINETIS_LPUART", "cond": "KINETIS_HAVE_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "KINETIS_SERIALDRIVER", "cond": "KINETIS_HAVE_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "KINETIS_HAVE_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support the low power UART1"}, {"type": 3, "name": "KINETIS_ENET", "value": "n", "user_value": null, "dep": "n", "prompt": "Ethernet", "cond": "(ARCH_FAMILY_K60 || ARCH_FAMILY_K64 || ARCH_FAMILY_K66) && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_FAMILY_K60 || ARCH_FAMILY_K64 || ARCH_FAMILY_K66) && ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PHY", "cond": "(ARCH_FAMILY_K60 || ARCH_FAMILY_K64 || ARCH_FAMILY_K66) && ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "ARCH_HAVE_NETDEV_STATISTICS", "cond": "(ARCH_FAMILY_K60 || ARCH_FAMILY_K64 || ARCH_FAMILY_K66) && ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "NET", "cond": "(ARCH_FAMILY_K60 || ARCH_FAMILY_K64 || ARCH_FAMILY_K66) && ARCH_CHIP_KINETIS && ARCH_ARM"}, {"symbol": "NETDEVICES", "cond": "(ARCH_FAMILY_K60 || ARCH_FAMILY_K64 || ARCH_FAMILY_K66) && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support Ethernet (K6x only)"}, {"type": 3, "name": "KINETIS_RNGB", "value": "n", "user_value": null, "dep": "n", "prompt": "Random number generator", "cond": "(ARCH_FAMILY_K60 || ARCH_FAMILY_K64 || ARCH_FAMILY_K66) && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_FAMILY_K60 || ARCH_FAMILY_K64 || ARCH_FAMILY_K66) && ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_RNG", "cond": "(ARCH_FAMILY_K60 || ARCH_FAMILY_K64 || ARCH_FAMILY_K66) && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support the random number generator(K6x only)"}, {"type": 3, "name": "KINETIS_FLEXCAN0", "value": "n", "user_value": null, "dep": "n", "prompt": "FlexCAN0", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support FlexCAN0"}, {"type": 3, "name": "KINETIS_FLEXCAN1", "value": "n", "user_value": null, "dep": "n", "prompt": "FlexCAN1", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support FlexCAN1"}, {"type": 3, "name": "KINETIS_SPI0", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI0", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support SPI0"}, {"type": 3, "name": "KINETIS_SPI1", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI1", "cond": "KINETIS_HAVE_SPI1 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_HAVE_SPI1 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "KINETIS_HAVE_SPI1 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support SPI1"}, {"type": 3, "name": "KINETIS_SPI2", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI2", "cond": "KINETIS_HAVE_SPI2 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_HAVE_SPI2 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "KINETIS_HAVE_SPI2 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support SPI2"}, {"type": 3, "name": "KINETIS_I2C0", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C0", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "I2C", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support I2C0"}, {"type": 3, "name": "KINETIS_I2C1", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C1", "cond": "KINETIS_HAVE_I2C1 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_HAVE_I2C1 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "I2C", "cond": "KINETIS_HAVE_I2C1 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support I2C1"}, {"type": 3, "name": "KINETIS_I2C2", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C2", "cond": "KINETIS_HAVE_I2C2 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_HAVE_I2C2 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "I2C", "cond": "KINETIS_HAVE_I2C2 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support I2C2"}, {"type": 3, "name": "KINETIS_I2C3", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C3", "cond": "KINETIS_HAVE_I2C3 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_HAVE_I2C3 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "I2C", "cond": "KINETIS_HAVE_I2C3 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support I2C3"}, {"type": 3, "name": "KINETIS_I2S", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support I2S"}, {"type": 3, "name": "KINETIS_DAC0", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC0", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support DAC0"}, {"type": 3, "name": "KINETIS_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC1", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support DAC1"}, {"type": 3, "name": "KINETIS_ADC0", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC0", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support ADC0"}, {"type": 3, "name": "KINETIS_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC1", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support ADC1"}, {"type": 3, "name": "KINETIS_CMP", "value": "n", "user_value": null, "dep": "n", "prompt": "CMP", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support CMP"}, {"type": 3, "name": "KINETIS_VREF", "value": "n", "user_value": null, "dep": "n", "prompt": "VREF", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support VREF"}, {"type": 3, "name": "KINETIS_SDHC", "value": "n", "user_value": null, "dep": "n", "prompt": "SDHC", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SDIO", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support SD host controller"}, {"type": 3, "name": "KINETIS_FTM0", "value": "n", "user_value": null, "dep": "n", "prompt": "FTM0", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support FlexTimer 0"}, {"type": 3, "name": "KINETIS_FTM1", "value": "n", "user_value": null, "dep": "n", "prompt": "FTM1", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support FlexTimer 1"}, {"type": 3, "name": "KINETIS_FTM2", "value": "n", "user_value": null, "dep": "n", "prompt": "FTM2", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support FlexTimer 2"}, {"type": 3, "name": "KINETIS_FTM3", "value": "n", "user_value": null, "dep": "n", "prompt": "FTM3", "cond": "KINETIS_HAVE_FTM3 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_HAVE_FTM3 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support FlexTimer 3"}, {"type": 3, "name": "KINETIS_TPM1", "value": "n", "user_value": null, "dep": "n", "prompt": "TPM1", "cond": "KINETIS_HAVE_TPM1 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_HAVE_TPM1 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support TPM module 1"}, {"type": 3, "name": "KINETIS_TPM2", "value": "n", "user_value": null, "dep": "n", "prompt": "TPM2", "cond": "KINETIS_HAVE_TPM2 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_HAVE_TPM2 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support TPM module 2"}, {"type": 3, "name": "KINETIS_LPTIMER", "value": "n", "user_value": null, "dep": "n", "prompt": "Low power timer (LPTIMER)", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support the low power timer"}, {"type": 3, "name": "KINETIS_RTC", "value": "n", "user_value": null, "dep": "n", "prompt": "RTC", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support RTC"}, {"type": 3, "name": "KINETIS_SLCD", "value": "n", "user_value": null, "dep": "n", "prompt": "Segment LCD (SLCD)", "cond": "ARCH_FAMILY_K40 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_FAMILY_K40 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support the segment LCD (K40 only)"}, {"type": 3, "name": "KINETIS_EWM", "value": "n", "user_value": null, "dep": "n", "prompt": "External watchdog (WVM)", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support the external watchdog"}, {"type": 3, "name": "KINETIS_CMT", "value": "n", "user_value": null, "dep": "n", "prompt": "Carrier modulator transmitter (CMT)", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support Carrier Modulator Transmitter"}, {"type": 3, "name": "KINETIS_USBOTG", "value": "n", "user_value": null, "dep": "n", "prompt": "USB OTG", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support USB OTG (see also USBHOST and USBDEV)"}, {"type": 3, "name": "KINETIS_USBDCD", "value": "n", "user_value": null, "dep": "n", "prompt": "USB device controller", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support the USB Device Charger Detection module"}, {"type": 3, "name": "KINETIS_LLWU", "value": "n", "user_value": null, "dep": "n", "prompt": "Low leakage wake-up unit (LLWU)", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support the Low Leakage Wake-Up Unit"}, {"type": 3, "name": "KINETIS_TSI", "value": "n", "user_value": null, "dep": "n", "prompt": "Touchscreen interface (TSI)", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support the touch screeen interface"}, {"type": 3, "name": "KINETIS_FTFL", "value": "n", "user_value": null, "dep": "n", "prompt": "FLASH (FTFL)", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support FLASH"}, {"type": 3, "name": "KINETIS_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support DMA"}, {"type": 3, "name": "KINETIS_CRC", "value": "n", "user_value": null, "dep": "n", "prompt": "CRC", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support CRC"}, {"type": 3, "name": "KINETIS_PDB", "value": "n", "user_value": null, "dep": "n", "prompt": "Programmable delay block (PDB)", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support the Programmable Delay Block"}, {"type": 3, "name": "KINETIS_PIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Programmable interval timer (PIT)", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support Programmable Interval Timers"}]}, {"type": 31, "dep": "n", "prompt": "Kinetis FTM PWM Configuration", "cond": "(KINETIS_FTM0 || KINETIS_FTM1 || KINETIS_FTM2 || KINETIS_FTM3) && ARCH_CHIP_KINETIS && ARCH_ARM", "children": [{"type": 3, "name": "KINETIS_FTM0_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "FTM0 PWM", "cond": "KINETIS_FTM0 && (KINETIS_FTM0 || KINETIS_FTM1 || KINETIS_FTM2 || KINETIS_FTM3) && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_FTM0 && (KINETIS_FTM0 || KINETIS_FTM1 || KINETIS_FTM2 || KINETIS_FTM3) && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Reserve timer 0 for use by PWM\n\nTimer devices may be used for different purposes.  One special\npurpose is to generate modulated outputs for such things as motor\ncontrol.  If KINETIS_FTM0 is defined then THIS following may also be\ndefined to indicate that the timer is intended to be used for pulsed\noutput modulation.", "children": [{"type": 27, "name": "KINETIS_FTM0_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "FTM0 PWM Output Channel", "cond": "KINETIS_FTM0_PWM && (KINETIS_FTM0 || KINETIS_FTM1 || KINETIS_FTM2 || KINETIS_FTM3) && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "KINETIS_FTM0_PWM && (KINETIS_FTM0 || KINETIS_FTM1 || KINETIS_FTM2 || KINETIS_FTM3) && ARCH_CHIP_KINETIS && ARCH_ARM"}], "ranges": [{"min": "0", "max": "7", "cond": "KINETIS_FTM0_PWM && (KINETIS_FTM0 || KINETIS_FTM1 || KINETIS_FTM2 || KINETIS_FTM3) && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "If FTM0 is enabled for PWM usage, you also need specifies the timer output\nchannel {0,..,7}"}]}, {"type": 3, "name": "KINETIS_FTM1_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "FTM1 PWM", "cond": "KINETIS_FTM1 && (KINETIS_FTM0 || KINETIS_FTM1 || KINETIS_FTM2 || KINETIS_FTM3) && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_FTM1 && (KINETIS_FTM0 || KINETIS_FTM1 || KINETIS_FTM2 || KINETIS_FTM3) && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Reserve timer 1 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If KINETIS_FTM1\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "KINETIS_FTM1_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "FTM1 PWM Output Channel", "cond": "KINETIS_FTM1_PWM && (KINETIS_FTM0 || KINETIS_FTM1 || KINETIS_FTM2 || KINETIS_FTM3) && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "KINETIS_FTM1_PWM && (KINETIS_FTM0 || KINETIS_FTM1 || KINETIS_FTM2 || KINETIS_FTM3) && ARCH_CHIP_KINETIS && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "KINETIS_FTM1_PWM && (KINETIS_FTM0 || KINETIS_FTM1 || KINETIS_FTM2 || KINETIS_FTM3) && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "If FTM1 is enabled for PWM usage, you also need specifies the timer output\nchannel {0,..,1}"}]}, {"type": 3, "name": "KINETIS_FTM2_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "FTM2 PWM", "cond": "KINETIS_FTM2 && (KINETIS_FTM0 || KINETIS_FTM1 || KINETIS_FTM2 || KINETIS_FTM3) && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_FTM2 && (KINETIS_FTM0 || KINETIS_FTM1 || KINETIS_FTM2 || KINETIS_FTM3) && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Reserve timer 2 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If KINETIS_FTM2\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "KINETIS_FTM2_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "FTM2 PWM Output Channel", "cond": "KINETIS_FTM2_PWM && (KINETIS_FTM0 || KINETIS_FTM1 || KINETIS_FTM2 || KINETIS_FTM3) && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "KINETIS_FTM2_PWM && (KINETIS_FTM0 || KINETIS_FTM1 || KINETIS_FTM2 || KINETIS_FTM3) && ARCH_CHIP_KINETIS && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "KINETIS_FTM2_PWM && (KINETIS_FTM0 || KINETIS_FTM1 || KINETIS_FTM2 || KINETIS_FTM3) && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "If FTM2 is enabled for PWM usage, you also need specifies the timer output\nchannel {0,..,1}"}]}, {"type": 3, "name": "KINETIS_FTM3_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "FTM3 PWM", "cond": "KINETIS_FTM3 && (KINETIS_FTM0 || KINETIS_FTM1 || KINETIS_FTM2 || KINETIS_FTM3) && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_FTM3 && (KINETIS_FTM0 || KINETIS_FTM1 || KINETIS_FTM2 || KINETIS_FTM3) && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Reserve timer 3 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If KINETIS_FTM3\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "KINETIS_FTM3_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "FTM3 PWM Output Channel", "cond": "KINETIS_FTM3_PWM && (KINETIS_FTM0 || KINETIS_FTM1 || KINETIS_FTM2 || KINETIS_FTM3) && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "KINETIS_FTM3_PWM && (KINETIS_FTM0 || KINETIS_FTM1 || KINETIS_FTM2 || KINETIS_FTM3) && ARCH_CHIP_KINETIS && ARCH_ARM"}], "ranges": [{"min": "0", "max": "7", "cond": "KINETIS_FTM3_PWM && (KINETIS_FTM0 || KINETIS_FTM1 || KINETIS_FTM2 || KINETIS_FTM3) && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "If FTM3 is enabled for PWM usage, you also need specifies the timer output\nchannel {0,..,7}"}]}]}, {"type": 31, "dep": "n", "prompt": "Kinetis GPIO Interrupt Configuration", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "children": [{"type": 3, "name": "KINETIS_GPIOIRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIO pin interrupts", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "help": "Enable support for interrupting GPIO pins", "children": [{"type": 3, "name": "KINETIS_PORTAINTS", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIOA interrupts", "cond": "KINETIS_GPIOIRQ && ARCH_CHIP_KINETIS && ARCH_ARM", "help": "Enable support for 32 interrupts from GPIO port A pins"}, {"type": 3, "name": "KINETIS_PORTBINTS", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIOB interrupts", "cond": "KINETIS_GPIOIRQ && ARCH_CHIP_KINETIS && ARCH_ARM", "help": "Enable support for 32 interrupts from GPIO port B pins"}, {"type": 3, "name": "KINETIS_PORTCINTS", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIOC interrupts", "cond": "KINETIS_GPIOIRQ && ARCH_CHIP_KINETIS && ARCH_ARM", "help": "Enable support for 32 interrupts from GPIO port C pins"}, {"type": 3, "name": "KINETIS_PORTDINTS", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIOD interrupts", "cond": "KINETIS_GPIOIRQ && ARCH_CHIP_KINETIS && ARCH_ARM", "help": "Enable support for 32 interrupts from GPIO port D pins"}, {"type": 3, "name": "KINETIS_PORTEINTS", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIOE interrupts", "cond": "KINETIS_GPIOIRQ && ARCH_CHIP_KINETIS && ARCH_ARM", "help": "Enable support for 32 interrupts from GPIO port E pins"}]}]}, {"type": 31, "dep": "n", "prompt": "Kinetis Ethernet Configuration", "cond": "KINETIS_ENET && ARCH_CHIP_KINETIS && ARCH_ARM", "children": [{"type": 3, "name": "KINETIS_ENETENHANCEDBD", "value": "n", "user_value": null, "dep": "n", "prompt": "Use enhanced buffer descriptors", "cond": "KINETIS_ENET && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_ENET && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Use enhanced, 32-byte buffer descriptors"}, {"type": 27, "name": "KINETIS_ENETNETHIFS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of Ethernet interfaces", "cond": "KINETIS_ENET && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "KINETIS_ENET && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Number of Ethernet interfaces supported by the hardware.  Must be\none for now."}, {"type": 27, "name": "KINETIS_ENETNRXBUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of Ethernet Rx buffers", "cond": "KINETIS_ENET && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "6", "default": "6", "cond": "KINETIS_ENET && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Number of Ethernet Rx buffers to use.  The size of one buffer is\ndetermined by NET_BUFSIZE"}, {"type": 27, "name": "KINETIS_ENETNTXBUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of Ethernet Tx buffers", "cond": "KINETIS_ENET && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "KINETIS_ENET && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Number of Ethernet Tx buffers to use. The size of one buffer is\ndetermined by NET_BUFSIZE"}, {"type": 3, "name": "KINETIS_ENETUSEMII", "value": "n", "user_value": null, "dep": "n", "prompt": "Use MII interface", "cond": "KINETIS_ENET && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_ENET && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "The the MII PHY interface.  Default:  Use RMII interface"}, {"type": 3, "name": "KINETIS_ENET_MDIOPULLUP", "value": "n", "user_value": null, "dep": "n", "prompt": "MDIO pull-up", "cond": "KINETIS_ENET && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_ENET && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "If there is no on-board pull-up resister on the MII/RMII MDIO line,\nthen this option may be selected in order to configure an internal\npull-up on MDIO."}, {"type": 3, "name": "KINETIS_ENET_NORXER", "value": "n", "user_value": null, "dep": "n", "prompt": "Suppress RXER", "cond": "KINETIS_ENET && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_ENET && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "If selected, then the MII/RMII RXER output will be configured as a\nGPIO and pulled low."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "RMII Clock Source", "cond": "!KINETIS_ENETUSEMII && (ARCH_FAMILY_K64 || ARCH_FAMILY_K66) && KINETIS_ENET && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "KINETIS_EMAC_RMIICLKEXTAL", "default": "n", "cond": "!KINETIS_ENETUSEMII && (ARCH_FAMILY_K64 || ARCH_FAMILY_K66) && KINETIS_ENET && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "The RMII clock can be selected between EXTAL or ENET_1588_CLKIN", "children": [{"type": 3, "name": "KINETIS_EMAC_RMIICLKEXTAL", "value": "n", "user_value": null, "dep": "n", "prompt": "Use EXTAL for RMII Clock", "cond": "y"}, {"type": 3, "name": "KINETIS_EMAC_RMIICLK1588CLKIN", "value": "n", "user_value": null, "dep": "n", "prompt": "Use ENET_1588_CLKIN for RMII Clock", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && KINETIS_ENET && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "KINETIS_EMAC_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && KINETIS_ENET && ARCH_CHIP_KINETIS && ARCH_ARM"}, {"name": "KINETIS_EMAC_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && KINETIS_ENET && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Work queue support is required to use the Ethernet driver.  If the\nlow priority work queue is available, then it should be used by the\ndriver.", "children": [{"type": 3, "name": "KINETIS_EMAC_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "KINETIS_EMAC_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}]}, {"type": 31, "dep": "n", "prompt": "Kinetis SDHC Configuration", "cond": "KINETIS_SDHC && ARCH_CHIP_KINETIS && ARCH_ARM", "children": [{"type": 3, "name": "KINETIS_SDHC_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "Support DMA data transfers", "cond": "KINETIS_SDHC && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "KINETIS_SDHC && ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "SDIO_DMA", "cond": "KINETIS_SDHC && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Support DMA data transfers.\nEnable SD card DMA data transfers.  This is marginally optional.\nFor most usages, SD accesses will cause data overruns if used without\nDMA."}, {"type": 3, "name": "KINETIS_SDHC_WIDTH_D1_ONLY", "value": "n", "user_value": null, "dep": "n", "prompt": "Use D1 only", "cond": "KINETIS_SDHC && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_SDHC && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Select 1-bit transfer mode.  Default: 4-bit transfer mode."}, {"type": 3, "name": "KINETIS_SDHC_ABSFREQ", "value": "n", "user_value": null, "dep": "n", "prompt": "Custom transfer frequencies", "cond": "KINETIS_SDHC && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_SDHC && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Select SDCLK frequencies corresponding to various modes of operation.\nThese values may be provided in either the NuttX configuration file\nor in the board.h file\n\nNOTE:  These settings are not currently used.  Since there are only\nfour frequencies, it makes more sense to just \"can\" the fixed\nfrequency prescaler and divider values.", "children": [{"type": 27, "name": "KINETIS_IDMODE_FREQ", "value": "", "user_value": null, "dep": "n", "prompt": "ID mode frequency", "cond": "KINETIS_SDHC_ABSFREQ && KINETIS_SDHC && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "400000", "default": "400000", "cond": "KINETIS_SDHC_ABSFREQ && KINETIS_SDHC && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Initial, ID mode SD frequency"}, {"type": 27, "name": "KINETIS_MMCXFR_FREQ", "value": "", "user_value": null, "dep": "n", "prompt": "MMC transfer frequency", "cond": "KINETIS_SDHC_ABSFREQ && KINETIS_SDHC && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "20000000", "default": "20000000", "cond": "KINETIS_SDHC_ABSFREQ && KINETIS_SDHC && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Frequency to use for transferring data to/from an MMC card"}, {"type": 27, "name": "KINETIS_SD1BIT_FREQ", "value": "", "user_value": null, "dep": "n", "prompt": "SD 1-bit transfer frequency", "cond": "KINETIS_SDHC_WIDTH_D1_ONLY && KINETIS_SDHC_ABSFREQ && KINETIS_SDHC && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "20000000", "default": "20000000", "cond": "KINETIS_SDHC_WIDTH_D1_ONLY && KINETIS_SDHC_ABSFREQ && KINETIS_SDHC && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Frequency to use for transferring data to/from an SD card using on a single data liune."}, {"type": 27, "name": "KINETIS_SD4BIT_FREQ", "value": "", "user_value": null, "dep": "n", "prompt": "SD 4-bit transfer frequency", "cond": "!KINETIS_SDHC_WIDTH_D1_ONLY && KINETIS_SDHC_ABSFREQ && KINETIS_SDHC && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "20000000", "default": "20000000", "cond": "!KINETIS_SDHC_WIDTH_D1_ONLY && KINETIS_SDHC_ABSFREQ && KINETIS_SDHC && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Frequency to use for transferring data to/from an SD card using all four data lines."}]}]}, {"type": 31, "dep": "n", "prompt": "Kinetis UART Configuration", "cond": "ARCH_CHIP_KINETIS && ARCH_ARM", "children": [{"type": 6, "dep": "n", "prompt": "Serial Driver Configuration", "cond": "(KINETIS_SERIALDRIVER || OTHER_SERIALDRIVER) && ARCH_CHIP_KINETIS && ARCH_ARM"}, {"type": 3, "name": "KINETIS_UART_BREAKS", "value": "n", "user_value": null, "dep": "n", "prompt": "Add TIOxSBRK to support sending Breaks", "cond": "(KINETIS_UART || KINETIS_LPUART) && (KINETIS_SERIALDRIVER || OTHER_SERIALDRIVER) && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(KINETIS_UART || KINETIS_LPUART) && (KINETIS_SERIALDRIVER || OTHER_SERIALDRIVER) && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Add TIOCxBRK routines to send a line break per the Kinetis manual, the\nbreak will be a pulse based on the value M. This is not a BSD compatible\nbreak.", "children": [{"type": 3, "name": "KINETIS_UART_EXTEDED_BREAK", "value": "n", "user_value": null, "dep": "n", "prompt": "Selects a longer transmitted break character length", "cond": "KINETIS_UART_BREAKS && (KINETIS_SERIALDRIVER || OTHER_SERIALDRIVER) && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_UART_BREAKS && (KINETIS_SERIALDRIVER || OTHER_SERIALDRIVER) && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Sets BRK13 to send a longer transmitted break character."}, {"type": 3, "name": "KINETIS_SERIALBRK_BSDCOMPAT", "value": "n", "user_value": null, "dep": "n", "prompt": "BSD compatible break the break asserted until released", "cond": "(KINETIS_UART || KINETIS_LPUART) && KINETIS_UART_BREAKS && (KINETIS_SERIALDRIVER || OTHER_SERIALDRIVER) && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(KINETIS_UART || KINETIS_LPUART) && KINETIS_UART_BREAKS && (KINETIS_SERIALDRIVER || OTHER_SERIALDRIVER) && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Enable using a BSD compatible break: TIOCSBRK will start the break\nand TIOCCBRK will end the break."}]}, {"type": 3, "name": "KINETIS_UART_SINGLEWIRE", "value": "n", "user_value": null, "dep": "n", "prompt": "Single Wire Support", "cond": "(KINETIS_UART || KINETIS_LPUART) && (KINETIS_SERIALDRIVER || OTHER_SERIALDRIVER) && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(KINETIS_UART || KINETIS_LPUART) && (KINETIS_SERIALDRIVER || OTHER_SERIALDRIVER) && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Enable single wire UART and LPUART support. The option enables support\nfor the TIOCSSINGLEWIRE ioctl in the Kineteis serial drivers."}, {"type": 3, "name": "KINETIS_UARTFIFOS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable UART0 FIFO", "cond": "KINETIS_UART0 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_UART0 && ARCH_CHIP_KINETIS && ARCH_ARM"}]}]}, {"type": 31, "dep": "n", "prompt": "Kinetis LPUART0 Configuration", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM", "children": [{"type": 27, "name": "LPUART0_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "256", "default": "256", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "LPUART0_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "256", "default": "256", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "LPUART0_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "115200", "default": "115200", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "The configured BAUD of the UART."}, {"type": 27, "name": "LPUART0_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character size", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "LPUART0_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "ranges": [{"min": "0", "max": "2", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "LPUART0_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "use 2 stop bits", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "1=Two stop bits"}, {"type": 3, "name": "LPUART0_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "LPUART0 RTS flow control", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Enable LPUART0 RTS flow control"}, {"type": 3, "name": "LPUART0_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "LPUART0 CTS flow control", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Enable LPUART0 CTS flow control"}, {"type": 3, "name": "LPUART0_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "LPUART0 DMA support", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "SERIAL_DMA", "cond": "KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Enable DMA transfers on LPUART0"}]}, {"type": 31, "dep": "n", "prompt": "Kinetis LPUART1 Configuration", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM", "children": [{"type": 27, "name": "LPUART1_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "256", "default": "256", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "LPUART1_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "256", "default": "256", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "LPUART1_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "115200", "default": "115200", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "The configured BAUD of the UART."}, {"type": 27, "name": "LPUART1_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character size", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "LPUART1_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "ranges": [{"min": "0", "max": "2", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "LPUART1_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "use 2 stop bits", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "1=Two stop bits"}, {"type": 3, "name": "LPUART1_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "LPUART1 RTS flow control", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Enable LPUART1 RTS flow control"}, {"type": 3, "name": "LPUART1_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "LPUART1 CTS flow control", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Enable LPUART1 CTS flow control"}, {"type": 3, "name": "LPUART1_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "LPUART1 DMA support", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "selects": [{"symbol": "SERIAL_DMA", "cond": "KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Enable DMA transfers on LPUART1"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Kinetis LPUART Serial Console", "cond": "DEV_CONSOLE && KINETIS_LPUART && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "NO_LPUART_SERIAL_CONSOLE", "default": "n", "cond": "DEV_CONSOLE && KINETIS_LPUART && ARCH_CHIP_KINETIS && ARCH_ARM"}], "children": [{"type": 3, "name": "LPUART0_SERIAL_CONSOLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Use LPUART0 as the serial console", "cond": "KINETIS_LPUART0 && y", "selects": [{"symbol": "OTHER_SERIAL_CONSOLE", "cond": "KINETIS_LPUART0 && y"}], "help": "Use the LPUART0 device as the serial console"}, {"type": 3, "name": "LPUART1_SERIAL_CONSOLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Use LPUART1 as the serial console", "cond": "KINETIS_LPUART1 && y", "selects": [{"symbol": "OTHER_SERIAL_CONSOLE", "cond": "KINETIS_LPUART1 && y"}], "help": "Use the LPUART1 device as the serial console"}, {"type": 3, "name": "NO_LPUART_SERIAL_CONSOLE", "value": "n", "user_value": null, "dep": "n", "prompt": "No LPUART serial console", "cond": "y", "help": "No serial LPUART based console OR some other serial device provides\nthe serial console"}]}, {"type": 3, "name": "KINETIS_MERGE_TTY", "value": "n", "user_value": null, "dep": "n", "prompt": "Kinetis Merge TTY names for LPUARTS", "cond": "KINETIS_LPUART && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_LPUART && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Enable the merging of the TTY names when both LPUARTs and UARTs\nare defined.  When enabled, all both LPUARTS and UART types will be\nlisted as dev/ttySn. When disabled, LPUARTS willbe listed as\n/dev/ttyLPn and UARTs as /dev/ttySn see also (KINETS_LPUART_LOWEST)", "children": [{"type": 3, "name": "KINETS_LPUART_LOWEST", "value": "n", "user_value": null, "dep": "n", "prompt": "Kinetis Order ttySn LPUARTs before UARTS", "cond": "KINETIS_LPUART && KINETIS_UART && KINETIS_MERGE_TTY && ARCH_CHIP_KINETIS && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KINETIS_LPUART && KINETIS_UART && KINETIS_MERGE_TTY && ARCH_CHIP_KINETIS && ARCH_ARM"}], "help": "Used with KINETIS_MERGE_TTY, will set the order of ttySn assignments\nEnabled will order the LPUART's before the UARTS."}]}, {"type": 6, "dep": "n", "prompt": "Kinetis Configuration Options", "cond": "ARCH_CHIP_KL && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Kinetis Chip Selection", "cond": "ARCH_CHIP_KL && ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "ARCH_CHIP_MKL25Z128", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_CHIP_KL && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_MKL25Z64", "value": "n", "user_value": null, "dep": "n", "prompt": "MKL25Z64", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_KL2X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MKL25Z128", "value": "n", "user_value": null, "dep": "n", "prompt": "MKL25Z128", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_KL2X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_MKL26Z128", "value": "n", "user_value": null, "dep": "n", "prompt": "MKL26Z128", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_KL2X", "cond": "y"}]}]}, {"type": 3, "name": "ARCH_FAMILY_KL2X", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_MKL25Z64 && y) || (ARCH_CHIP_MKL25Z128 && y) || (ARCH_CHIP_MKL26Z128 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}]}, {"type": 31, "dep": "n", "prompt": "Kinetis Peripheral Support", "cond": "ARCH_CHIP_KL && ARCH_ARM", "children": [{"type": 3, "name": "KL_TRACE", "value": "n", "user_value": null, "dep": "n", "prompt": "Trace", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Enable trace clocking on power up."}, {"type": 3, "name": "KL_FLEXBUS", "value": "n", "user_value": null, "dep": "n", "prompt": "FlexBus", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Enable flexbus clocking on power up."}, {"type": 3, "name": "KL_UART0", "value": "n", "user_value": null, "dep": "n", "prompt": "UART0", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "selects": [{"symbol": "UART0_SERIALDRIVER", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support UART0"}, {"type": 3, "name": "KL_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support UART1"}, {"type": 3, "name": "KL_UART2", "value": "n", "user_value": null, "dep": "n", "prompt": "UART2", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "selects": [{"symbol": "UART2_SERIALDRIVER", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support UART2"}, {"type": 3, "name": "KL_RNGB", "value": "n", "user_value": null, "dep": "n", "prompt": "Random number generator", "cond": "ARCH_FAMILY_K60 && ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_FAMILY_K60 && ARCH_CHIP_KL && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_RNG", "cond": "ARCH_FAMILY_K60 && ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support the random number generator(K60 only)"}, {"type": 3, "name": "KL_FLEXCAN0", "value": "n", "user_value": null, "dep": "n", "prompt": "FlexCAN0", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support FlexCAN0"}, {"type": 3, "name": "KL_FLEXCAN1", "value": "n", "user_value": null, "dep": "n", "prompt": "FlexCAN1", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support FlexCAN1"}, {"type": 3, "name": "KL_SPI0", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI0", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "ARCH_CHIP_KL && ARCH_ARM"}, {"symbol": "SPI_EXCHANGE", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support SPI0"}, {"type": 3, "name": "KL_SPI1", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI1", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "ARCH_CHIP_KL && ARCH_ARM"}, {"symbol": "SPI_EXCHANGE", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support SPI1"}, {"type": 3, "name": "KL_SPI2", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI2", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support SPI2"}, {"type": 3, "name": "KL_I2C0", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C0", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support I2C0"}, {"type": 3, "name": "KL_I2C1", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C1", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support I2C1"}, {"type": 3, "name": "KL_I2S", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support I2S"}, {"type": 3, "name": "KL_DAC0", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC0", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support DAC0"}, {"type": 3, "name": "KL_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC1", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support DAC1"}, {"type": 3, "name": "KL_ADC0", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC0", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support ADC0"}, {"type": 3, "name": "KL_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC1", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support ADC1"}, {"type": 3, "name": "KL_CMP", "value": "n", "user_value": null, "dep": "n", "prompt": "CMP", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support CMP"}, {"type": 3, "name": "KL_VREF", "value": "n", "user_value": null, "dep": "n", "prompt": "VREF", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support VREF"}, {"type": 3, "name": "KL_TPM0", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer/PWM Module 0", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support FlexTimer 0"}, {"type": 3, "name": "KL_TPM1", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer/PWM Module 1", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support FlexTimer 1"}, {"type": 3, "name": "KL_TPM2", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer/PWM Module 2", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support FlexTimer 2"}, {"type": 3, "name": "KL_LPTIMER", "value": "n", "user_value": null, "dep": "n", "prompt": "Low power timer (LPTIMER)", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support the low power timer"}, {"type": 3, "name": "KL_RTC", "value": "n", "user_value": null, "dep": "n", "prompt": "RTC", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support RTC"}, {"type": 3, "name": "KL_SLCD", "value": "n", "user_value": null, "dep": "n", "prompt": "Segment LCD (SLCD)", "cond": "ARCH_FAMILY_K40 && ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_FAMILY_K40 && ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support the segment LCD (K40 only)"}, {"type": 3, "name": "KL_EWM", "value": "n", "user_value": null, "dep": "n", "prompt": "External watchdog (WVM)", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support the external watchdog"}, {"type": 3, "name": "KL_CMT", "value": "n", "user_value": null, "dep": "n", "prompt": "Carrier modulator transmitter (CMT)", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support Carrier Modulator Transmitter"}, {"type": 3, "name": "KL_USBOTG", "value": "n", "user_value": null, "dep": "n", "prompt": "USB OTG", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support USB OTG (see also USBHOST and USBDEV)"}, {"type": 3, "name": "KL_USBDCD", "value": "n", "user_value": null, "dep": "n", "prompt": "USB device controller", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support the USB Device Charger Detection module"}, {"type": 3, "name": "KL_LLWU", "value": "n", "user_value": null, "dep": "n", "prompt": "Low leakage wake-up unit (LLWU)", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support the Low Leakage Wake-Up Unit"}, {"type": 3, "name": "KL_TSI", "value": "n", "user_value": null, "dep": "n", "prompt": "Touchscreen interface (TSI)", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support the touch screeen interface"}, {"type": 3, "name": "KL_FTFL", "value": "n", "user_value": null, "dep": "n", "prompt": "FLASH (FTFL)", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support FLASH"}, {"type": 3, "name": "KL_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support DMA"}, {"type": 3, "name": "KL_CRC", "value": "n", "user_value": null, "dep": "n", "prompt": "CRC", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support CRC"}, {"type": 3, "name": "KL_PDB", "value": "n", "user_value": null, "dep": "n", "prompt": "Programmable delay block (PDB)", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support the Programmable Delay Block"}, {"type": 3, "name": "KL_PIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Programmable interval timer (PIT)", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "help": "Support Programmable Interval Timers"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SysTick clock source", "cond": "ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "KL_SYSTICK_CORECLK", "default": "n", "cond": "ARCH_CHIP_KL && ARCH_ARM"}], "children": [{"type": 3, "name": "KL_SYSTICK_CORECLK", "value": "n", "user_value": null, "dep": "n", "prompt": "Cortex-M0 core clock", "cond": "y"}, {"type": 3, "name": "KL_SYSTICK_CORECLK_DIV16", "value": "n", "user_value": null, "dep": "n", "prompt": "Cortex-M0 core clock divided by 16", "cond": "y"}]}, {"type": 3, "name": "KL_TPM0_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TPM0 PWM", "cond": "KL_TPM0 && ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KL_TPM0 && ARCH_CHIP_KL && ARCH_ARM"}], "help": "Reserve timer 0 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If KL_TPM0\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "KL_TPM0_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TPM0 PWM Output Channel", "cond": "KL_TPM0_PWM && ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "KL_TPM0_PWM && ARCH_CHIP_KL && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "KL_TPM0_PWM && ARCH_CHIP_KL && ARCH_ARM"}], "help": "If TIM0 is enabled for PWM usage, you also need specifies the timer output\nchannel {0,..,5}"}]}, {"type": 3, "name": "KL_TPM1_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TPM1 PWM", "cond": "KL_TPM1 && ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KL_TPM1 && ARCH_CHIP_KL && ARCH_ARM"}], "help": "Reserve timer 1 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If KL_TPM1\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "KL_TPM1_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TPM1 PWM Output Channel", "cond": "KL_TPM1_PWM && ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "KL_TPM1_PWM && ARCH_CHIP_KL && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "(ARCH_CHIP_MKL25Z64 || ARCH_CHIP_MKL25Z128 || ARCH_CHIP_MKL26Z128) && KL_TPM1_PWM && ARCH_CHIP_KL && ARCH_ARM"}, {"min": "0", "max": "5", "cond": "!ARCH_CHIP_MKL25Z64 && !ARCH_CHIP_MKL25Z128 && !ARCH_CHIP_MKL26Z128 && KL_TPM1_PWM && ARCH_CHIP_KL && ARCH_ARM"}], "help": "If TIM1 is enabled for PWM usage, you also need specifies the timer output\nchannel {0,..,5}"}]}, {"type": 3, "name": "KL_TPM2_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TPM2 PWM", "cond": "KL_TPM2 && ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "KL_TPM2 && ARCH_CHIP_KL && ARCH_ARM"}], "help": "Reserve timer 2 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If KL_TPM2\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "KL_TPM2_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TPM2 PWM Output Channel", "cond": "KL_TPM2_PWM && ARCH_CHIP_KL && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "KL_TPM2_PWM && ARCH_CHIP_KL && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "(ARCH_CHIP_MKL25Z64 || ARCH_CHIP_MKL25Z128 || ARCH_CHIP_MKL26Z128) && KL_TPM2_PWM && ARCH_CHIP_KL && ARCH_ARM"}, {"min": "0", "max": "5", "cond": "!ARCH_CHIP_MKL25Z64 && !ARCH_CHIP_MKL25Z128 && !ARCH_CHIP_MKL26Z128 && KL_TPM2_PWM && ARCH_CHIP_KL && ARCH_ARM"}], "help": "If TIM2 is enabled for PWM usage, you also need specifies the timer output\nchannel {0,..,5}"}]}, {"type": 6, "dep": "n", "prompt": "Kinetis GPIO Interrupt Configuration", "cond": "ARCH_CHIP_KL && ARCH_ARM"}, {"type": 3, "name": "KL_GPIOIRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIO pin interrupts", "cond": "ARCH_CHIP_KL && ARCH_ARM", "help": "Enable support for interrupting GPIO pins", "children": [{"type": 3, "name": "KL_PORTAINTS", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIOA interrupts", "cond": "KL_GPIOIRQ && ARCH_CHIP_KL && ARCH_ARM", "help": "Enable support for 32 interrupts from GPIO port A pins"}, {"type": 3, "name": "KL_PORTDINTS", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIOD interrupts", "cond": "KL_GPIOIRQ && ARCH_CHIP_KL && ARCH_ARM", "help": "Enable support for 32 interrupts from GPIO port D pins"}]}, {"type": 6, "dep": "n", "prompt": "LC823450 Configuration Options", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM"}, {"type": 31, "dep": "n", "prompt": "LC823450 Peripheral Support", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM", "children": [{"type": 3, "name": "SERIAL_TERMIOS", "value": "y", "user_value": 2, "dep": "n", "prompt": "Serial driver TERMIOS supported", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM"}], "help": "Serial driver supports termios.h interfaces (tcsetattr, tcflush, etc.).\nIf this is not defined, then the terminal settings (baud, parity, etc).\nare not configurable at runtime; serial streams cannot be flushed, etc.."}, {"type": 3, "name": "LC823450_UART0", "value": "n", "user_value": null, "dep": "n", "prompt": "UART0", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM"}], "selects": [{"symbol": "UART0_SERIALDRIVER", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 3, "name": "LC823450_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 3, "name": "LC823450_UART2", "value": "n", "user_value": null, "dep": "n", "prompt": "UART2", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM"}], "selects": [{"symbol": "UART2_SERIALDRIVER", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 3, "name": "LC823450_WDT", "value": "n", "user_value": null, "dep": "n", "prompt": "Watchdog", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM"}], "selects": [{"symbol": "WATCHDOG", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 3, "name": "LC823450_SPIFI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI Flash Interface (SPIFI)", "cond": "MTD && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "MTD && ARCH_CHIP_LC823450 && ARCH_ARM"}], "children": [{"type": 27, "name": "LC823450_SPIFI_DEVNO", "value": "", "user_value": null, "dep": "n", "prompt": "number in /dev/mtdblk?", "cond": "LC823450_SPIFI && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "LC823450_SPIFI && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 27, "name": "LC823450_SPIFI_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "SPI FLASH size (byte)", "cond": "LC823450_SPIFI && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "4194304", "default": "4194304", "cond": "LC823450_SPIFI && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 3, "name": "LC823450_SPIFI_QUADIO", "value": "n", "user_value": null, "dep": "n", "prompt": "SPIFI 4bit access", "cond": "LC823450_SPIFI && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LC823450_SPIFI && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 3, "name": "LC823450_SPIFI_RAMFAT", "value": "n", "user_value": null, "dep": "n", "prompt": "SPIFI with SRAM FAT", "cond": "LC823450_SPIFI && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LC823450_SPIFI && ARCH_CHIP_LC823450 && ARCH_ARM"}], "children": [{"type": 47, "name": "LC823450_SPIFI_RAMFAT_VOLUMELABEL", "value": "", "user_value": null, "dep": "n", "prompt": "volume label for SRAM FAT", "cond": "LC823450_SPIFI_RAMFAT && LC823450_SPIFI && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 3, "name": "LC823450_SPIFI_BACKUP", "value": "n", "user_value": null, "dep": "n", "prompt": "power dwon tolerance I/O", "cond": "LC823450_SPIFI && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LC823450_SPIFI && ARCH_CHIP_LC823450 && ARCH_ARM"}], "children": [{"type": 24, "name": "LC823450_SPIFI_BACKUP_HEAD_OFFSET", "value": "", "user_value": null, "dep": "n", "prompt": "backup header offset", "cond": "LC823450_SPIFI_BACKUP && LC823450_SPIFI && ARCH_CHIP_LC823450 && ARCH_ARM"}, {"type": 24, "name": "LC823450_SPIFI_BACKUP_VAL_OFFSET", "value": "", "user_value": null, "dep": "n", "prompt": "backup area offset", "cond": "LC823450_SPIFI_BACKUP && LC823450_SPIFI && ARCH_CHIP_LC823450 && ARCH_ARM"}]}]}, {"type": 3, "name": "LC823450_SDIF", "value": "n", "user_value": null, "dep": "n", "prompt": "SD/eMMC driver", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM"}], "children": [{"type": 3, "name": "LC823450_SDIF_PATCH", "value": "n", "user_value": null, "dep": "n", "prompt": "SD/eMMC driver patch support", "cond": "LC823450_SDIF && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LC823450_SDIF && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 3, "name": "LC823450_SDIF_SDC", "value": "n", "user_value": null, "dep": "n", "prompt": "SD card support", "cond": "LC823450_SDIF && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LC823450_SDIF && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 3, "name": "LC823450_SDC_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA support for eMMC/SD", "cond": "LC823450_SDIF && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "LC823450_SDIF && ARCH_CHIP_LC823450 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_DMA", "cond": "LC823450_SDIF && ARCH_CHIP_LC823450 && ARCH_ARM"}]}]}, {"type": 3, "name": "LC823450_MTD", "value": "n", "user_value": null, "dep": "n", "prompt": "LC823450 MTD devices", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM"}], "selects": [{"symbol": "MTD_PARTITION", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM"}], "help": "Build support for LC823450 MTD eMMC/uSD", "children": [{"type": 27, "name": "MTD_DEV_MAX", "value": "", "user_value": null, "dep": "n", "prompt": "Max MTD devices", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 27, "name": "MTD_DEVNO_EMMC", "value": "", "user_value": null, "dep": "n", "prompt": "Device No. for eMMC", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 27, "name": "MTD_DEVNO_SDC", "value": "", "user_value": null, "dep": "n", "prompt": "Device No. for SD", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 47, "name": "MTD_DEVPATH0", "value": "", "user_value": null, "dep": "n", "prompt": "Device path for eMMC", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "/dev/mtdblock0", "default": "/dev/mtdblock0", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 47, "name": "MTD_DEVPATH1", "value": "", "user_value": null, "dep": "n", "prompt": "Device path for SD", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "/dev/mtdblock1", "default": "/dev/mtdblock1", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 47, "name": "MTD_CONFIG_DEVPATH", "value": "", "user_value": null, "dep": "n", "prompt": "Device path for config", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "/dev/mtdblock0p2", "default": "/dev/mtdblock0p2", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 47, "name": "MTD_ETC_DEVPATH", "value": "", "user_value": null, "dep": "n", "prompt": "Device path for etc", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "/dev/mtdblock0p5", "default": "/dev/mtdblock0p5", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 47, "name": "MTD_SYSTEM_DEVPATH", "value": "", "user_value": null, "dep": "n", "prompt": "Device path for system", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "/dev/mtdblock0p6", "default": "/dev/mtdblock0p6", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 47, "name": "MTD_LOG_DEVPATH", "value": "", "user_value": null, "dep": "n", "prompt": "Device path for log", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "/dev/mtdblock0p7", "default": "/dev/mtdblock0p7", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 47, "name": "MTD_CACHE_DEVPATH", "value": "", "user_value": null, "dep": "n", "prompt": "Device path for cache", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "/dev/mtdblock0p9", "default": "/dev/mtdblock0p9", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 47, "name": "MTD_CP_DEVPATH", "value": "", "user_value": null, "dep": "n", "prompt": "Device path for content on eMMC", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "/dev/mtdblock0p10", "default": "/dev/mtdblock0p10", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 27, "name": "MTD_CP_STARTBLOCK", "value": "", "user_value": null, "dep": "n", "prompt": "Start block for content on eMMC", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "602112", "default": "602112", "cond": "LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM"}]}]}, {"type": 27, "name": "LC823450_I2C_TIMEOSEC", "value": "", "user_value": null, "dep": "n", "prompt": "I2C timeout (sec)", "cond": "I2C && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "I2C && ARCH_CHIP_LC823450 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "2", "cond": "I2C && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 27, "name": "LC823450_I2C_TIMEOMS", "value": "", "user_value": null, "dep": "n", "prompt": "I2C timeout (msec)", "cond": "I2C && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "500", "default": "500", "cond": "I2C && ARCH_CHIP_LC823450 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "999", "cond": "I2C && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 3, "name": "LC823450_I2C0", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C0", "cond": "I2C && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "I2C && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 3, "name": "LC823450_I2C1", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C1", "cond": "I2C && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "I2C && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 3, "name": "LC823450_SPI_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA for SPI", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_DMA", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 3, "name": "LC823450_PWM0_CH0", "value": "n", "user_value": null, "dep": "n", "prompt": "MTM0-Ch0 PWM device", "cond": "PWM && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "PWM && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 3, "name": "LC823450_PWM0_CH1", "value": "n", "user_value": null, "dep": "n", "prompt": "MTM0-Ch1 PWM device", "cond": "PWM && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "PWM && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 3, "name": "LC823450_PWM1_CH0", "value": "n", "user_value": null, "dep": "n", "prompt": "MTM1-Ch0 PWM device", "cond": "PWM && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "PWM && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 3, "name": "LC823450_PWM1_CH1", "value": "n", "user_value": null, "dep": "n", "prompt": "MTM1-Ch1 PWM device", "cond": "PWM && ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "PWM && ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "HS driver current boost", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM", "children": [{"type": 3, "name": "LC823450_USBDEV_CUSTOM_HSDSEL_0", "value": "n", "user_value": null, "dep": "n", "prompt": "normal", "cond": "y"}, {"type": 3, "name": "LC823450_USBDEV_CUSTOM_HSDSEL_5", "value": "n", "user_value": null, "dep": "n", "prompt": "5% boost", "cond": "y"}, {"type": 3, "name": "LC823450_USBDEV_CUSTOM_HSDSEL_10", "value": "n", "user_value": null, "dep": "n", "prompt": "10% boost", "cond": "y"}]}, {"type": 3, "name": "LC823450_LSISTBY", "value": "n", "user_value": null, "dep": "n", "prompt": "LIS Standby", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 3, "name": "LC823450_MTM0_TICK", "value": "n", "user_value": null, "dep": "n", "prompt": "use MTM0 for tick", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 3, "name": "LC823450_SLEEP_MODE", "value": "n", "user_value": null, "dep": "n", "prompt": "sleep mode", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM"}]}, {"type": 3, "name": "HRT_TIMER", "value": "n", "user_value": null, "dep": "n", "prompt": "High resolution timer", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LC823450 && ARCH_ARM"}]}]}, {"type": 6, "dep": "n", "prompt": "Tiva/Stellaris Configuration Options", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Tiva/Stellaris Chip Selection", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "ARCH_CHIP_LM3S6965", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_LM3S6918", "value": "n", "user_value": null, "dep": "n", "prompt": "LM3S6918", "cond": "ARCH_CHIP_LM && y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "ARCH_CHIP_LM3S", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_I2C1", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_SSI1", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_TIMER3", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_ETHERNET", "cond": "ARCH_CHIP_LM && y"}]}, {"type": 3, "name": "ARCH_CHIP_LM3S9B96", "value": "n", "user_value": null, "dep": "n", "prompt": "LM3S9B96", "cond": "ARCH_CHIP_LM && y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "ARCH_CHIP_LM3S", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_UART3", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_I2C1", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_SSI1", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_TIMER3", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_ETHERNET", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_GPIOH_IRQS", "cond": "ARCH_CHIP_LM && y"}]}, {"type": 3, "name": "ARCH_CHIP_LM3S6432", "value": "n", "user_value": null, "dep": "n", "prompt": "LM3S6432", "cond": "ARCH_CHIP_LM && y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "ARCH_CHIP_LM3S", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_ETHERNET", "cond": "ARCH_CHIP_LM && y"}]}, {"type": 3, "name": "ARCH_CHIP_LM3S6965", "value": "n", "user_value": null, "dep": "n", "prompt": "LM3S6965", "cond": "ARCH_CHIP_LM && y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "ARCH_CHIP_LM3S", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_UART3", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_I2C1", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_TIMER3", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_ETHERNET", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_GPIOH_IRQS", "cond": "ARCH_CHIP_LM && y"}]}, {"type": 3, "name": "ARCH_CHIP_LM3S8962", "value": "n", "user_value": null, "dep": "n", "prompt": "LM3S8962", "cond": "ARCH_CHIP_LM && y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "ARCH_CHIP_LM3S", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_UART3", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_I2C1", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_TIMER3", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_TIMER4", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_TIMER5", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_ETHERNET", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "TIVA_HAVE_GPIOH_IRQS", "cond": "ARCH_CHIP_LM && y"}]}, {"type": 3, "name": "ARCH_CHIP_LM4F120", "value": "n", "user_value": null, "dep": "n", "prompt": "LM4F120", "cond": "ARCH_CHIP_LM && y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "ARCH_CHIP_LM4F", "cond": "ARCH_CHIP_LM && y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_CHIP_LM && y"}]}, {"type": 3, "name": "ARCH_CHIP_TM4C123GH6ZRB", "value": "n", "user_value": null, "dep": "n", "prompt": "TM4C123GH6ZRB", "cond": "ARCH_CHIP_TIVA && y", "selects": [{"symbol": "ARCH_CHIP_TM4C", "cond": "ARCH_CHIP_TIVA && y"}, {"symbol": "ARCH_CHIP_TM4C123", "cond": "ARCH_CHIP_TIVA && y"}, {"symbol": "TIVA_HAVE_GPIOP_IRQS", "cond": "ARCH_CHIP_TIVA && y"}, {"symbol": "TIVA_HAVE_GPIOQ_IRQS", "cond": "ARCH_CHIP_TIVA && y"}, {"symbol": "TIVA_HAVE_I2C4", "cond": "ARCH_CHIP_TIVA && y"}, {"symbol": "TIVA_HAVE_I2C5", "cond": "ARCH_CHIP_TIVA && y"}]}, {"type": 3, "name": "ARCH_CHIP_TM4C123GH6PMI", "value": "n", "user_value": null, "dep": "n", "prompt": "TM4C123GH6PMI", "cond": "ARCH_CHIP_TIVA && y", "selects": [{"symbol": "ARCH_CHIP_TM4C", "cond": "ARCH_CHIP_TIVA && y"}, {"symbol": "ARCH_CHIP_TM4C123", "cond": "ARCH_CHIP_TIVA && y"}, {"symbol": "TIVA_HAVE_GPIOA_IRQS", "cond": "ARCH_CHIP_TIVA && y"}, {"symbol": "TIVA_HAVE_GPIOB_IRQS", "cond": "ARCH_CHIP_TIVA && y"}, {"symbol": "TIVA_HAVE_GPIOC_IRQS", "cond": "ARCH_CHIP_TIVA && y"}, {"symbol": "TIVA_HAVE_GPIOD_IRQS", "cond": "ARCH_CHIP_TIVA && y"}, {"symbol": "TIVA_HAVE_GPIOE_IRQS", "cond": "ARCH_CHIP_TIVA && y"}, {"symbol": "TIVA_HAVE_GPIOF_IRQS", "cond": "ARCH_CHIP_TIVA && y"}, {"symbol": "TIVA_HAVE_ADC0", "cond": "ARCH_CHIP_TIVA && y"}, {"symbol": "TIVA_HAVE_ADC1", "cond": "ARCH_CHIP_TIVA && y"}]}, {"type": 3, "name": "ARCH_CHIP_TM4C1294NC", "value": "n", "user_value": null, "dep": "n", "prompt": "TM4C1294NC", "cond": "ARCH_CHIP_TIVA && y", "selects": [{"symbol": "ARCH_CHIP_TM4C", "cond": "ARCH_CHIP_TIVA && y"}, {"symbol": "ARCH_CHIP_TM4C129", "cond": "ARCH_CHIP_TIVA && y"}, {"symbol": "TIVA_HAVE_ETHERNET", "cond": "ARCH_CHIP_TIVA && y"}]}, {"type": 3, "name": "ARCH_CHIP_TM4C129XNC", "value": "n", "user_value": null, "dep": "n", "prompt": "TM4C129XNC", "cond": "ARCH_CHIP_TIVA && y", "selects": [{"symbol": "ARCH_CHIP_TM4C", "cond": "ARCH_CHIP_TIVA && y"}, {"symbol": "ARCH_CHIP_TM4C129", "cond": "ARCH_CHIP_TIVA && y"}, {"symbol": "TIVA_HAVE_ETHERNET", "cond": "ARCH_CHIP_TIVA && y"}]}, {"type": 3, "name": "ARCH_CHIP_CC3200", "value": "n", "user_value": null, "dep": "n", "prompt": "CC3200", "cond": "ARCH_CHIP_TIVA && y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "ARCH_CHIP_TIVA && y"}, {"symbol": "TIVA_HAVE_I2C1", "cond": "ARCH_CHIP_TIVA && y"}]}]}, {"type": 3, "name": "ARCH_CHIP_LM3S", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LM3S6918 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S9B96 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S6432 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S6965 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S8962 && ARCH_CHIP_LM && y)", "dep": "n", "selects": [{"symbol": "TIVA_HAVE_GPIOA_IRQS", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_GPIOB_IRQS", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_GPIOC_IRQS", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_GPIOD_IRQS", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_GPIOE_IRQS", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_GPIOF_IRQS", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_GPIOG_IRQS", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_SSI0", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CHIP_LM4F", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_LM4F120 && ARCH_CHIP_LM && y", "dep": "n", "selects": [{"symbol": "TIVA_HAVE_GPIOA_IRQS", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_GPIOB_IRQS", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_GPIOC_IRQS", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_GPIOD_IRQS", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_GPIOE_IRQS", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_GPIOF_IRQS", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_GPIOG_IRQS", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_GPIOH_IRQS", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_I2C1", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_I2C2", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_I2C3", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_UART3", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_UART4", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_UART5", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_UART6", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_UART7", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_SSI0", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_SSI1", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_SSI2", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_SSI3", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_TIMER3", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_TIMER4", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_TIMER5", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CHIP_TM4C123", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_TM4C123GH6ZRB && ARCH_CHIP_TIVA && y) || (ARCH_CHIP_TM4C123GH6PMI && ARCH_CHIP_TIVA && y)", "dep": "n"}, {"type": 3, "name": "ARCH_CHIP_TM4C129", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_TM4C1294NC && ARCH_CHIP_TIVA && y) || (ARCH_CHIP_TM4C129XNC && ARCH_CHIP_TIVA && y)", "dep": "n", "selects": [{"symbol": "TIVA_HAVE_GPIOP_IRQS", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_GPIOQ_IRQS", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_I2C4", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_I2C5", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_I2C6", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_I2C7", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_I2C8", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_I2C9", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_TIMER6", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_TIMER7", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CHIP_TM4C", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_TM4C123GH6ZRB && ARCH_CHIP_TIVA && y) || (ARCH_CHIP_TM4C123GH6PMI && ARCH_CHIP_TIVA && y) || (ARCH_CHIP_TM4C1294NC && ARCH_CHIP_TIVA && y) || (ARCH_CHIP_TM4C129XNC && ARCH_CHIP_TIVA && y)", "dep": "n", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "ARCH_HAVE_FPU", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_ADC0", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_ADC1", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_GPIOP_IRQS", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_I2C1", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_I2C2", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_I2C3", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_UART3", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_UART4", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_UART5", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_UART6", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_UART7", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_SSI0", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_SSI1", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_SSI2", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_SSI3", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_TIMER0", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_TIMER1", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_TIMER2", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_TIMER3", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_TIMER4", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "TIVA_HAVE_TIMER5", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "LM_REVA2", "value": "n", "user_value": null, "dep": "n", "prompt": "Rev A2", "cond": "ARCH_CHIP_LM && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LM && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Some early silicon returned an increase LDO voltage or 2.75V to work\naround a PLL bug"}, {"type": 3, "name": "TIVA_BOARD_EARLYINIT", "value": "n", "user_value": null, "rev_dep": "ARCH_BOARD_CC3200_LAUNCHPAD && ARCH_CHIP_CC3200 && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 31, "dep": "n", "prompt": "Tiva/Stellaris Peripheral Support", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "children": [{"type": 3, "name": "TIVA_ADC", "value": "n", "user_value": null, "rev_dep": "(TIVA_ADC0 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_ADC1 && TIVA_HAVE_ADC0 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_ADC0", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_TM4C123GH6PMI && ARCH_CHIP_TIVA && y) || (ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_ADC1", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_TM4C123GH6PMI && ARCH_CHIP_TIVA && y) || (ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_I2C", "value": "n", "user_value": null, "rev_dep": "(TIVA_I2C0 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_I2C1 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_I2C2 && TIVA_HAVE_I2C2 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_I2C3 && TIVA_HAVE_I2C3 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_I2C4 && TIVA_HAVE_I2C4 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_I2C5 && TIVA_HAVE_I2C5 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_I2C6 && TIVA_HAVE_I2C6 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_I2C7 && TIVA_HAVE_I2C7 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_I2C8 && TIVA_HAVE_I2C8 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_I2C9 && TIVA_HAVE_I2C9 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_I2C1", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LM3S6918 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S9B96 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S6965 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S8962 && ARCH_CHIP_LM && y) || (ARCH_CHIP_CC3200 && ARCH_CHIP_TIVA && y) || (ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_I2C2", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_I2C3", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_I2C4", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_TM4C123GH6ZRB && ARCH_CHIP_TIVA && y) || (ARCH_CHIP_TM4C129 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_I2C5", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_TM4C123GH6ZRB && ARCH_CHIP_TIVA && y) || (ARCH_CHIP_TM4C129 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_I2C6", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_TM4C129 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_I2C7", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_TM4C129 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_I2C8", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_TM4C129 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_I2C9", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_TM4C129 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_UART3", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LM3S9B96 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S6965 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S8962 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_UART4", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_UART5", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_UART6", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_UART7", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_SSI0", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LM3S && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_SSI1", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LM3S6918 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S9B96 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_SSI2", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_SSI3", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_ETHERNET", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LM3S6918 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S9B96 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S6432 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S6965 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S8962 && ARCH_CHIP_LM && y) || (ARCH_CHIP_TM4C1294NC && ARCH_CHIP_TIVA && y) || (ARCH_CHIP_TM4C129XNC && ARCH_CHIP_TIVA && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_SSI", "value": "n", "user_value": null, "rev_dep": "(TIVA_SSI0 && TIVA_HAVE_SSI0 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_SSI1 && TIVA_HAVE_SSI1 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_SSI2 && TIVA_HAVE_SSI2 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_SSI3 && TIVA_HAVE_SSI3 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_TIMER", "value": "n", "user_value": null, "rev_dep": "(TIVA_TIMER0 && TIVA_HAVE_TIMER0 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_TIMER1 && TIVA_HAVE_TIMER1 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_TIMER2 && TIVA_HAVE_TIMER2 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_TIMER3 && TIVA_HAVE_TIMER3 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_TIMER4 && TIVA_HAVE_TIMER4 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_TIMER5 && TIVA_HAVE_TIMER5 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_TIMER6 && TIVA_HAVE_TIMER6 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_TIMER7 && TIVA_HAVE_TIMER7 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_TIMER0", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_TIMER1", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_TIMER2", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_TIMER3", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LM3S6918 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S9B96 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S6965 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S8962 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_TIMER4", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LM3S8962 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_TIMER5", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LM3S8962 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_TIMER6", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_TM4C129 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_TIMER7", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_TM4C129 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_ADC0", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC0", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_ADC", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC1", "cond": "TIVA_HAVE_ADC0 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_ADC0 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_ADC", "cond": "TIVA_HAVE_ADC0 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_I2C0", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C0", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_I2C", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_I2C1", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C1", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_I2C", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_I2C2", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C2", "cond": "TIVA_HAVE_I2C2 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_I2C2 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_I2C", "cond": "TIVA_HAVE_I2C2 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_I2C3", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C3", "cond": "TIVA_HAVE_I2C3 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_I2C3 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_I2C", "cond": "TIVA_HAVE_I2C3 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_I2C4", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C4", "cond": "TIVA_HAVE_I2C4 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_I2C4 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_I2C", "cond": "TIVA_HAVE_I2C4 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_I2C5", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C5", "cond": "TIVA_HAVE_I2C5 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_I2C5 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_I2C", "cond": "TIVA_HAVE_I2C5 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_I2C6", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C6", "cond": "TIVA_HAVE_I2C6 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_I2C6 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_I2C", "cond": "TIVA_HAVE_I2C6 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_I2C7", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C7", "cond": "TIVA_HAVE_I2C7 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_I2C7 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_I2C", "cond": "TIVA_HAVE_I2C7 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_I2C8", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C8", "cond": "TIVA_HAVE_I2C8 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_I2C8 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_I2C", "cond": "TIVA_HAVE_I2C8 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_I2C9", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C9", "cond": "TIVA_HAVE_I2C9 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_I2C9 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_I2C", "cond": "TIVA_HAVE_I2C9 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_UART0", "value": "n", "user_value": null, "dep": "n", "prompt": "UART0", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "UART0_SERIALDRIVER", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_UART2", "value": "n", "user_value": null, "dep": "n", "prompt": "UART2", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "UART2_SERIALDRIVER", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_UART3", "value": "n", "user_value": null, "dep": "n", "prompt": "UART3", "cond": "TIVA_HAVE_UART3 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_UART3 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "UART3_SERIALDRIVER", "cond": "TIVA_HAVE_UART3 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_UART4", "value": "n", "user_value": null, "dep": "n", "prompt": "UART4", "cond": "TIVA_HAVE_UART4 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_UART4 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "UART4_SERIALDRIVER", "cond": "TIVA_HAVE_UART4 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_UART5", "value": "n", "user_value": null, "dep": "n", "prompt": "UART5", "cond": "TIVA_HAVE_UART5 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_UART5 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "UART5_SERIALDRIVER", "cond": "TIVA_HAVE_UART5 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_UART6", "value": "n", "user_value": null, "dep": "n", "prompt": "UART6", "cond": "TIVA_HAVE_UART6 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_UART6 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "UART6_SERIALDRIVER", "cond": "TIVA_HAVE_UART6 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_UART7", "value": "n", "user_value": null, "dep": "n", "prompt": "UART7", "cond": "TIVA_HAVE_UART7 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_UART7 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "UART7_SERIALDRIVER", "cond": "TIVA_HAVE_UART7 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_SSI0", "value": "n", "user_value": null, "dep": "n", "prompt": "SSI0", "cond": "TIVA_HAVE_SSI0 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_SSI0 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_SSI", "cond": "TIVA_HAVE_SSI0 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_SSI1", "value": "n", "user_value": null, "dep": "n", "prompt": "SSI1", "cond": "TIVA_HAVE_SSI1 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_SSI1 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_SSI", "cond": "TIVA_HAVE_SSI1 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_SSI2", "value": "n", "user_value": null, "dep": "n", "prompt": "SSI2", "cond": "TIVA_HAVE_SSI2 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_SSI2 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_SSI", "cond": "TIVA_HAVE_SSI2 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_SSI3", "value": "n", "user_value": null, "dep": "n", "prompt": "SSI3", "cond": "TIVA_HAVE_SSI3 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_SSI3 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_SSI", "cond": "TIVA_HAVE_SSI3 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_TIMER0", "value": "n", "user_value": null, "dep": "n", "prompt": "16-/32-bit Timer 0", "cond": "TIVA_HAVE_TIMER0 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_TIMER0 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_TIMER", "cond": "TIVA_HAVE_TIMER0 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_TIMER1", "value": "n", "user_value": null, "dep": "n", "prompt": "16-/32-bit Timer 1", "cond": "TIVA_HAVE_TIMER1 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_TIMER1 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_TIMER", "cond": "TIVA_HAVE_TIMER1 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_TIMER2", "value": "n", "user_value": null, "dep": "n", "prompt": "16-/32-bit Timer 2", "cond": "TIVA_HAVE_TIMER2 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_TIMER2 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_TIMER", "cond": "TIVA_HAVE_TIMER2 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_TIMER3", "value": "n", "user_value": null, "dep": "n", "prompt": "16-/32-bit Timer 3", "cond": "TIVA_HAVE_TIMER3 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_TIMER3 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_TIMER", "cond": "TIVA_HAVE_TIMER3 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_TIMER4", "value": "n", "user_value": null, "dep": "n", "prompt": "16-/32-bit Timer 4", "cond": "TIVA_HAVE_TIMER4 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_TIMER4 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_TIMER", "cond": "TIVA_HAVE_TIMER4 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_TIMER5", "value": "n", "user_value": null, "dep": "n", "prompt": "16-/32-bit Timer 5", "cond": "TIVA_HAVE_TIMER5 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_TIMER5 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_TIMER", "cond": "TIVA_HAVE_TIMER5 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_TIMER6", "value": "n", "user_value": null, "dep": "n", "prompt": "16-/32-bit Timer 6", "cond": "TIVA_HAVE_TIMER6 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_TIMER6 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_TIMER", "cond": "TIVA_HAVE_TIMER6 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_TIMER7", "value": "n", "user_value": null, "dep": "n", "prompt": "16-/32-bit Timer 7", "cond": "TIVA_HAVE_TIMER7 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_TIMER7 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_TIMER", "cond": "TIVA_HAVE_TIMER7 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_ETHERNET", "value": "n", "user_value": null, "dep": "n", "prompt": "Ethernet", "cond": "TIVA_HAVE_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "NETDEVICES", "cond": "TIVA_HAVE_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "ARCH_HAVE_NETDEV_STATISTICS", "cond": "(ARCH_CHIP_LM3S || ARCH_CHIP_LM4F) && TIVA_HAVE_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "This must be set (along with NET) to build the Stellaris Ethernet driver."}, {"type": 3, "name": "TIVA_FLASH", "value": "n", "user_value": null, "dep": "n", "prompt": "Internal FLASH driver", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Enable MTD driver support for internal FLASH."}]}, {"type": 31, "dep": "n", "prompt": "Enable GPIO Interrupts", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "children": [{"type": 3, "name": "TIVA_GPIO_IRQS", "value": "n", "user_value": null, "rev_dep": "(TIVA_GPIOA_IRQS && TIVA_HAVE_GPIOA_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_GPIOB_IRQS && TIVA_HAVE_GPIOB_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_GPIOC_IRQS && TIVA_HAVE_GPIOC_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_GPIOD_IRQS && TIVA_HAVE_GPIOD_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_GPIOE_IRQS && TIVA_HAVE_GPIOE_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_GPIOF_IRQS && TIVA_HAVE_GPIOF_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_GPIOG_IRQS && TIVA_HAVE_GPIOG_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_GPIOH_IRQS && TIVA_HAVE_GPIOH_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_GPIOJ_IRQS && TIVA_HAVE_GPIOJ_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_GPIOK_IRQS && TIVA_HAVE_GPIOK_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_GPIOL_IRQS && TIVA_HAVE_GPIOL_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_GPIOM_IRQS && TIVA_HAVE_GPIOM_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_GPION_IRQS && TIVA_HAVE_GPION_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_GPIOP_IRQS && TIVA_HAVE_GPIOP_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_GPIOQ_IRQS && TIVA_HAVE_GPIOQ_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_GPIOR_IRQS && TIVA_HAVE_GPIOR_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_GPIOS_IRQS && TIVA_HAVE_GPIOS_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (TIVA_GPIOT_IRQS && TIVA_HAVE_GPIOT_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_GPIOA_IRQS", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_TM4C123GH6PMI && ARCH_CHIP_TIVA && y) || (ARCH_CHIP_LM3S && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_GPIOB_IRQS", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_TM4C123GH6PMI && ARCH_CHIP_TIVA && y) || (ARCH_CHIP_LM3S && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_GPIOC_IRQS", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_TM4C123GH6PMI && ARCH_CHIP_TIVA && y) || (ARCH_CHIP_LM3S && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_GPIOD_IRQS", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_TM4C123GH6PMI && ARCH_CHIP_TIVA && y) || (ARCH_CHIP_LM3S && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_GPIOE_IRQS", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_TM4C123GH6PMI && ARCH_CHIP_TIVA && y) || (ARCH_CHIP_LM3S && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_GPIOF_IRQS", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_TM4C123GH6PMI && ARCH_CHIP_TIVA && y) || (ARCH_CHIP_LM3S && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_GPIOG_IRQS", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LM3S && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_GPIOH_IRQS", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LM3S9B96 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S6965 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM3S8962 && ARCH_CHIP_LM && y) || (ARCH_CHIP_LM4F && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_GPIOJ_IRQS", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_GPIOK_IRQS", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_GPIOL_IRQS", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_GPIOM_IRQS", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_GPION_IRQS", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_GPIOP_IRQS", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_TM4C123GH6ZRB && ARCH_CHIP_TIVA && y) || (ARCH_CHIP_TM4C129 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_CHIP_TM4C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_GPIOQ_IRQS", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_TM4C123GH6ZRB && ARCH_CHIP_TIVA && y) || (ARCH_CHIP_TM4C129 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_GPIOR_IRQS", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_GPIOS_IRQS", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_HAVE_GPIOT_IRQS", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_GPIOA_IRQS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable GPIOA IRQs", "cond": "TIVA_HAVE_GPIOA_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_GPIOA_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_GPIO_IRQS", "cond": "TIVA_HAVE_GPIOA_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_GPIOB_IRQS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable GPIOB IRQs", "cond": "TIVA_HAVE_GPIOB_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_GPIOB_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_GPIO_IRQS", "cond": "TIVA_HAVE_GPIOB_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_GPIOC_IRQS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable GPIOC IRQs", "cond": "TIVA_HAVE_GPIOC_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_GPIOC_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_GPIO_IRQS", "cond": "TIVA_HAVE_GPIOC_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_GPIOD_IRQS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable GPIOD IRQs", "cond": "TIVA_HAVE_GPIOD_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_GPIOD_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_GPIO_IRQS", "cond": "TIVA_HAVE_GPIOD_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_GPIOE_IRQS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable GPIOE IRQs", "cond": "TIVA_HAVE_GPIOE_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_GPIOE_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_GPIO_IRQS", "cond": "TIVA_HAVE_GPIOE_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_GPIOF_IRQS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable GPIOF IRQs", "cond": "TIVA_HAVE_GPIOF_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_GPIOF_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_GPIO_IRQS", "cond": "TIVA_HAVE_GPIOF_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_GPIOG_IRQS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable GPIOG IRQs", "cond": "TIVA_HAVE_GPIOG_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_GPIOG_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_GPIO_IRQS", "cond": "TIVA_HAVE_GPIOG_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_GPIOH_IRQS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable GPIOH IRQs", "cond": "TIVA_HAVE_GPIOH_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_GPIOH_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_GPIO_IRQS", "cond": "TIVA_HAVE_GPIOH_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_GPIOJ_IRQS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable GPIOJ IRQs", "cond": "TIVA_HAVE_GPIOJ_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_GPIOJ_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_GPIO_IRQS", "cond": "TIVA_HAVE_GPIOJ_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_GPIOK_IRQS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable GPIOK IRQs", "cond": "TIVA_HAVE_GPIOK_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_GPIOK_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_GPIO_IRQS", "cond": "TIVA_HAVE_GPIOK_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_GPIOL_IRQS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable GPIOL IRQs", "cond": "TIVA_HAVE_GPIOL_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_GPIOL_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_GPIO_IRQS", "cond": "TIVA_HAVE_GPIOL_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_GPIOM_IRQS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable GPIOM IRQs", "cond": "TIVA_HAVE_GPIOM_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_GPIOM_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_GPIO_IRQS", "cond": "TIVA_HAVE_GPIOM_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_GPION_IRQS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable GPION IRQs", "cond": "TIVA_HAVE_GPION_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_GPION_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_GPIO_IRQS", "cond": "TIVA_HAVE_GPION_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_GPIOP_IRQS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable GPIOP IRQs", "cond": "TIVA_HAVE_GPIOP_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_GPIOP_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_GPIO_IRQS", "cond": "TIVA_HAVE_GPIOP_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_GPIOQ_IRQS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable GPIOQ IRQs", "cond": "TIVA_HAVE_GPIOQ_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_GPIOQ_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_GPIO_IRQS", "cond": "TIVA_HAVE_GPIOQ_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_GPIOR_IRQS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable GPIOR IRQs", "cond": "TIVA_HAVE_GPIOR_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_GPIOR_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_GPIO_IRQS", "cond": "TIVA_HAVE_GPIOR_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_GPIOS_IRQS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable GPIOS IRQs", "cond": "TIVA_HAVE_GPIOS_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_GPIOS_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_GPIO_IRQS", "cond": "TIVA_HAVE_GPIOS_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_GPIOT_IRQS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable GPIOT IRQs", "cond": "TIVA_HAVE_GPIOT_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_HAVE_GPIOT_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_GPIO_IRQS", "cond": "TIVA_HAVE_GPIOT_IRQS && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}]}, {"type": 31, "dep": "n", "prompt": "I2C Configuration", "cond": "TIVA_I2C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "children": [{"type": 3, "name": "TIVA_I2C_DYNTIMEO", "value": "n", "user_value": null, "dep": "n", "prompt": "Use dynamic timeouts", "cond": "TIVA_I2C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_I2C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "children": [{"type": 27, "name": "TIVA_I2C_DYNTIMEO_USECPERBYTE", "value": "", "user_value": null, "dep": "n", "prompt": "Timeout Microseconds per Byte", "cond": "TIVA_I2C_DYNTIMEO && TIVA_I2C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "500", "default": "500", "cond": "TIVA_I2C_DYNTIMEO && TIVA_I2C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 27, "name": "TIVA_I2C_DYNTIMEO_STARTSTOP", "value": "", "user_value": null, "dep": "n", "prompt": "Timeout for Start/Stop (Milliseconds)", "cond": "TIVA_I2C_DYNTIMEO && TIVA_I2C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "1000", "default": "1000", "cond": "TIVA_I2C_DYNTIMEO && TIVA_I2C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}]}, {"type": 27, "name": "TIVA_I2C_TIMEOSEC", "value": "", "user_value": null, "dep": "n", "prompt": "Timeout seconds", "cond": "TIVA_I2C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "TIVA_I2C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 27, "name": "TIVA_I2C_TIMEOMS", "value": "", "user_value": null, "dep": "n", "prompt": "Timeout Milliseconds", "cond": "!TIVA_I2C_DYNTIMEO && !TIVA_I2C_DYNTIMEO && TIVA_I2C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "500", "default": "500", "cond": "!TIVA_I2C_DYNTIMEO && !TIVA_I2C_DYNTIMEO && TIVA_I2C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 27, "name": "TIVA_I2C_TIMEOTICKS", "value": "", "user_value": null, "dep": "n", "prompt": "Timeout for Done and Stop (ticks)", "cond": "!TIVA_I2C_DYNTIMEO && !TIVA_I2C_DYNTIMEO && TIVA_I2C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "500", "default": "500", "cond": "!TIVA_I2C_DYNTIMEO && !TIVA_I2C_DYNTIMEO && TIVA_I2C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_I2C_HIGHSPEED", "value": "n", "user_value": null, "dep": "n", "prompt": "High speed support", "cond": "ARCH_CHIP_TM4C && EXPERIMENTAL && TIVA_I2C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_TM4C && EXPERIMENTAL && TIVA_I2C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Enable support for high speed I2C transfers.\nOnly partially implemented and completely untested."}, {"type": 3, "name": "TIVA_I2C_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register level debug", "cond": "DEBUG_I2C_INFO && TIVA_I2C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_I2C_INFO && TIVA_I2C && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Enables extremely detailed register access debug output."}]}, {"type": 31, "dep": "n", "prompt": "Timer Configuration", "cond": "TIVA_TIMER && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "children": [{"type": 3, "name": "TIVA_TIMER_32BIT", "value": "n", "user_value": null, "dep": "n", "prompt": "32-bit timer support", "cond": "TIVA_TIMER && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_TIMER && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "children": [{"type": 3, "name": "TIVA_TIMER32_PERIODIC", "value": "n", "user_value": null, "dep": "n", "prompt": "32-bit one-shot/periodic timer support", "cond": "TIVA_TIMER_32BIT && TIVA_TIMER && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_TIMER_32BIT && TIVA_TIMER && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_TIMER32_RTC", "value": "n", "user_value": null, "dep": "n", "prompt": "32-bit RTC (needs 32.768-KHz input)", "cond": "TIVA_TIMER_32BIT && TIVA_TIMER && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_TIMER_32BIT && TIVA_TIMER && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}]}, {"type": 3, "name": "TIVA_TIMER_16BIT", "value": "n", "user_value": null, "dep": "n", "prompt": "16-bit timer support", "cond": "TIVA_TIMER && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_TIMER && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "children": [{"type": 3, "name": "TIVA_TIMER16_PERIODIC", "value": "n", "user_value": null, "dep": "n", "prompt": "16-bit one-shot/periodic timer support", "cond": "TIVA_TIMER_16BIT && TIVA_TIMER && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_TIMER_16BIT && TIVA_TIMER && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_TIMER16_EDGECOUNT", "value": "n", "user_value": null, "dep": "n", "prompt": "16-bit input edge-count capture support", "cond": "EXPERIMENTAL && TIVA_TIMER_16BIT && TIVA_TIMER && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && TIVA_TIMER_16BIT && TIVA_TIMER && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_TIMER16_TIMECAP", "value": "n", "user_value": null, "dep": "n", "prompt": "16-bit input time capture support", "cond": "EXPERIMENTAL && TIVA_TIMER_16BIT && TIVA_TIMER && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && TIVA_TIMER_16BIT && TIVA_TIMER && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_TIMER16_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "16-bit PWM output support", "cond": "EXPERIMENTAL && TIVA_TIMER_16BIT && TIVA_TIMER && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && TIVA_TIMER_16BIT && TIVA_TIMER && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}]}, {"type": 3, "name": "TIVA_TIMER_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register level debug", "cond": "DEBUG_TIMER_INFO && TIVA_TIMER && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_TIMER_INFO && TIVA_TIMER && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Enables extremely detailed register access debug output."}]}, {"type": 31, "dep": "n", "prompt": "ADC Configuration", "cond": "TIVA_ADC && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "children": [{"type": 3, "name": "TIVA_ADC_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register level debug", "cond": "DEBUG_ANALOG_INFO && TIVA_ADC && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ANALOG_INFO && TIVA_ADC && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Enables extremely detailed register access debug output."}]}, {"type": 31, "dep": "n", "prompt": "Stellaris Ethernet Configuration", "cond": "ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "children": [{"type": 3, "name": "TIVA_ETHLEDS", "value": "n", "user_value": null, "dep": "n", "prompt": "Ethernet LEDs", "cond": "ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Enable to use Ethernet LEDs on the board."}, {"type": 3, "name": "TIVA_ETHHDUPLEX", "value": "n", "user_value": null, "dep": "n", "prompt": "Force Half Duplex", "cond": "ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Set to force half duplex operation"}, {"type": 3, "name": "TIVA_ETHNOAUTOCRC", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable auto-CRC", "cond": "ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Set to suppress auto-CRC generation"}, {"type": 3, "name": "TIVA_ETHNOPAD", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable Tx Padding", "cond": "ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Set to suppress Tx padding"}, {"type": 3, "name": "TIVA_MULTICAST", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Multicast", "cond": "ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Set to enable multicast frames"}, {"type": 3, "name": "TIVA_PROMISCUOUS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Promiscuous Mode", "cond": "ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Set to enable promiscuous mode"}, {"type": 3, "name": "TIVA_TIMESTAMP", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Timestamping", "cond": "ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_BADCRC", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Bad CRC Rejection", "cond": "ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Set to enable bad CRC rejection."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "LM3S_ETHERNET_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"name": "LM3S_ETHERNET_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Work queue support is required to use the Ethernet driver.  If the\nlow priority work queue is available, then it should be used by the\ndriver.", "children": [{"type": 3, "name": "LM3S_ETHERNET_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "LM3S_ETHERNET_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}, {"type": 3, "name": "TIVA_DUMPPACKET", "value": "n", "user_value": null, "dep": "n", "prompt": "Dump Packets", "cond": "ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LM3S && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Dump each packet received/sent to the console."}]}, {"type": 31, "dep": "n", "prompt": "Ethernet Configuration", "cond": "ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "PHY selection", "cond": "ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "TIVA_PHY_INTERNAL", "default": "n", "cond": "ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "children": [{"type": 3, "name": "TIVA_PHY_INTERNAL", "value": "n", "user_value": null, "dep": "n", "prompt": "Internal PHY", "cond": "y", "help": "Use the built-in, internal Tiva PHY"}, {"type": 3, "name": "TIVA_PHY_MII", "value": "n", "user_value": null, "dep": "n", "prompt": "External MII interface", "cond": "EXPERIMENTAL && y", "help": "Support external PHY MII interface."}, {"type": 3, "name": "TIVA_PHY_RMII", "value": "n", "user_value": null, "dep": "n", "prompt": "External RMII interface", "cond": "EXPERIMENTAL && y", "help": "Support external PHY RMII interface."}]}, {"type": 3, "name": "TIVA_AUTONEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Use autonegotiation", "cond": "ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Use PHY autonegotiation to determine speed and mode"}, {"type": 27, "name": "TIVA_PHYADDR", "value": "", "user_value": null, "dep": "n", "prompt": "PHY address", "cond": "!TIVA_PHY_INTERNAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!TIVA_PHY_INTERNAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "The 5-bit address of the PHY on the board.  Default: 1"}, {"type": 3, "name": "TIVA_ETHFD", "value": "n", "user_value": null, "dep": "n", "prompt": "Full duplex", "cond": "!TIVA_AUTONEG && !TIVA_PHY_INTERNAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!TIVA_AUTONEG && !TIVA_PHY_INTERNAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "If TIVA_AUTONEG is not defined, then this may be defined to select full duplex\nmode. Default: half-duplex"}, {"type": 3, "name": "TIVA_ETH100MBPS", "value": "n", "user_value": null, "dep": "n", "prompt": "100 Mbps", "cond": "!TIVA_AUTONEG && !TIVA_PHY_INTERNAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!TIVA_AUTONEG && !TIVA_PHY_INTERNAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "If TIVA_AUTONEG is not defined, then this may be defined to select 100 MBps\nspeed.  Default: 10 Mbps"}, {"type": 27, "name": "TIVA_PHYSR", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Status Register Address (decimal)", "cond": "TIVA_AUTONEG && !TIVA_PHY_INTERNAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "help": "This must be provided if TIVA_AUTONEG is defined.  The PHY status register\naddress may diff from PHY to PHY.  This configuration sets the address of\nthe PHY status register."}, {"type": 3, "name": "TIVA_PHYSR_ALTCONFIG", "value": "n", "user_value": null, "dep": "n", "prompt": "PHY Status Alternate Bit Layout", "cond": "TIVA_AUTONEG && !TIVA_PHY_INTERNAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_AUTONEG && !TIVA_PHY_INTERNAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Different PHYs present speed and mode information in different ways.  Some\nwill present separate information for speed and mode (this is the default).\nThose PHYs, for example, may provide a 10/100 Mbps indication and a separate\nfull/half duplex indication. This options selects an alternative representation\nwhere speed and mode information are combined.  This might mean, for example,\nseparate bits for 10HD, 100HD, 10FD and 100FD."}, {"type": 24, "name": "TIVA_PHYSR_SPEED", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Speed Mask", "cond": "!TIVA_PHYSR_ALTCONFIG && TIVA_AUTONEG && !TIVA_PHY_INTERNAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "help": "This must be provided if TIVA_AUTONEG is defined.  This provides bit mask\nfor isolating the 10 or 100MBps speed indication."}, {"type": 24, "name": "TIVA_PHYSR_100MBPS", "value": "", "user_value": null, "dep": "n", "prompt": "PHY 100Mbps Speed Value", "cond": "!TIVA_PHYSR_ALTCONFIG && TIVA_AUTONEG && !TIVA_PHY_INTERNAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "help": "This must be provided if TIVA_AUTONEG is defined.  This provides the value\nof the speed bit(s) indicating 100MBps speed."}, {"type": 24, "name": "TIVA_PHYSR_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Mode Mask", "cond": "!TIVA_PHYSR_ALTCONFIG && TIVA_AUTONEG && !TIVA_PHY_INTERNAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "help": "This must be provided if TIVA_AUTONEG is defined.  This provide bit mask\nfor isolating the full or half duplex mode bits."}, {"type": 24, "name": "TIVA_PHYSR_FULLDUPLEX", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Full Duplex Mode Value", "cond": "!TIVA_PHYSR_ALTCONFIG && TIVA_AUTONEG && !TIVA_PHY_INTERNAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "help": "This must be provided if TIVA_AUTONEG is defined.  This provides the\nvalue of the mode bits indicating full duplex mode."}, {"type": 24, "name": "TIVA_PHYSR_ALTMODE", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Mode Mask", "cond": "TIVA_PHYSR_ALTCONFIG && TIVA_AUTONEG && !TIVA_PHY_INTERNAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "help": "This must be provided if TIVA_AUTONEG is defined.  This provide bit mask\nfor isolating the speed and full/half duplex mode bits."}, {"type": 24, "name": "TIVA_PHYSR_10HD", "value": "", "user_value": null, "dep": "n", "prompt": "10MBase-T Half Duplex Value", "cond": "TIVA_PHYSR_ALTCONFIG && TIVA_AUTONEG && !TIVA_PHY_INTERNAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "help": "This must be provided if TIVA_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 10Mbps, half duplex setting."}, {"type": 24, "name": "TIVA_PHYSR_100HD", "value": "", "user_value": null, "dep": "n", "prompt": "100Base-T Half Duplex Value", "cond": "TIVA_PHYSR_ALTCONFIG && TIVA_AUTONEG && !TIVA_PHY_INTERNAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "help": "This must be provided if TIVA_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 100Mbps, half duplex setting."}, {"type": 24, "name": "TIVA_PHYSR_10FD", "value": "", "user_value": null, "dep": "n", "prompt": "10Base-T Full Duplex Value", "cond": "TIVA_PHYSR_ALTCONFIG && TIVA_AUTONEG && !TIVA_PHY_INTERNAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "help": "This must be provided if TIVA_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 10Mbps, full duplex setting."}, {"type": 24, "name": "TIVA_PHYSR_100FD", "value": "", "user_value": null, "dep": "n", "prompt": "100Base-T Full Duplex Value", "cond": "TIVA_PHYSR_ALTCONFIG && TIVA_AUTONEG && !TIVA_PHY_INTERNAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "help": "This must be provided if TIVA_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 100Mbps, full duplex setting."}, {"type": 3, "name": "TIVA_PHY_INTERRUPTS", "value": "n", "user_value": null, "dep": "n", "prompt": "PHY interrupt support", "cond": "ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "ARCH_PHY_INTERRUPT", "cond": "ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"symbol": "NETDEV_PHY_IOCTL", "cond": "ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Enable logic to signal user tasks when a PHY interrupt occurs.  The\nPHY interrupt may indicate a change in the link status such as, for\nexample, when a cable is plugged in or unplugged."}, {"type": 27, "name": "TIVA_EMAC_NRXDESC", "value": "", "user_value": null, "dep": "n", "prompt": "Number of RX descriptors", "cond": "ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Number of RX DMA descriptors to use."}, {"type": 27, "name": "TIVA_EMAC_NTXDESC", "value": "", "user_value": null, "dep": "n", "prompt": "Number of TX descriptors", "cond": "ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Number of TX DMA descriptors to use."}, {"type": 3, "name": "TIVA_EMAC_ENHANCEDDESC", "value": "n", "user_value": null, "rev_dep": "TIVA_EMAC_PTP && EXPERIMENTAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 3, "name": "TIVA_EMAC_PTP", "value": "n", "user_value": null, "dep": "n", "prompt": "Precision Time Protocol (PTP)", "cond": "EXPERIMENTAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "selects": [{"symbol": "TIVA_EMAC_ENHANCEDDESC", "cond": "EXPERIMENTAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Precision Time Protocol (PTP).  Not supported but some hooks are indicated\nwith this condition."}, {"type": 3, "name": "TIVA_EMAC_HWCHECKSUM", "value": "n", "user_value": null, "dep": "n", "prompt": "Use hardware checksums", "cond": "EXPERIMENTAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Use the hardware checksum capabilities of the Tiva chip"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "TIVA_ETHERNET_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}, {"name": "TIVA_ETHERNET_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Work queue support is required to use the Ethernet driver.  If the\nlow priority work queue is available, then it should be used by the\ndriver.", "children": [{"type": 3, "name": "TIVA_ETHERNET_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "TIVA_ETHERNET_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}, {"type": 3, "name": "TIVA_ETHERNET_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register-Level Debug", "cond": "DEBUG_NET_INFO && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_NET_INFO && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Enable very low-level register access debug.  Depends on CONFIG_DEBUG_FEATURES."}]}, {"type": 3, "name": "TIVA_BOARDMAC", "value": "n", "user_value": null, "dep": "n", "prompt": "Board MAC", "cond": "TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "If the board-specific logic can provide a MAC address (via\ntiva_ethernetmac()), then this should be selected."}, {"type": 31, "dep": "n", "prompt": "Tiva/Stellaris SSI Configuration", "cond": "TIVA_SSI && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "children": [{"type": 3, "name": "SSI_POLLWAIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Poll Wait (No-Interrupt) Mode", "cond": "TIVA_SSI && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "TIVA_SSI && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}]}, {"type": 27, "name": "SSI_TXLIMIT", "value": "", "user_value": null, "dep": "n", "prompt": "Tx Limit", "cond": "TIVA_SSI && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "TIVA_SSI && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "Default of 4 assumes half of the 8 entry FIFO"}]}, {"type": 31, "dep": "n", "prompt": "Tiva/Stellaris Internal Flash Driver Configuration", "cond": "TIVA_FLASH && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "children": [{"type": 27, "name": "TIVA_FLASH_STARTPAGE", "value": "", "user_value": null, "dep": "n", "prompt": "First page accessible by the MTD driver", "cond": "TIVA_FLASH && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "defaults": [{"name": "250", "default": "250", "cond": "TIVA_FLASH && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM"}], "help": "To prevent accessing FLASH sections where code is stored."}]}, {"type": 6, "dep": "n", "prompt": "LPC11xx Configuration Options", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "NXP LPC11XX Chip Selection", "cond": "ARCH_CHIP_LPC11XX && ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "ARCH_CHIP_LPC1115", "default": "n", "cond": "ARCH_CHIP_LPC11XX && ARCH_CHIP_LPC11XX && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_LPC1114", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1114", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC111X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC1115", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1115", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC111X", "cond": "y"}]}]}, {"type": 3, "name": "ARCH_FAMILY_LPC111X", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LPC1114 && y) || (ARCH_CHIP_LPC1115 && y)", "dep": "n"}, {"type": 31, "dep": "n", "prompt": "LPC11xx Peripheral Support", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "System Clock:", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "LPC11_INTRCOSC", "default": "n", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM"}], "children": [{"type": 3, "name": "LPC11_INTRCOSC", "value": "n", "user_value": null, "dep": "n", "prompt": "Internal RC", "cond": "y"}, {"type": 3, "name": "LPC11_MAINOSC", "value": "n", "user_value": null, "dep": "n", "prompt": "External Crystal", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SysTick clock source", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "LPC11_SYSTICK_CORECLK", "default": "n", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM"}], "children": [{"type": 3, "name": "LPC11_SYSTICK_CORECLK", "value": "n", "user_value": null, "dep": "n", "prompt": "Cortex-M0 core clock", "cond": "y"}, {"type": 3, "name": "LPC11_SYSTICK_CORECLK_DIV16", "value": "n", "user_value": null, "dep": "n", "prompt": "Cortex-M0 core clock divided by 16", "cond": "y"}]}, {"type": 3, "name": "LPC11_PLL", "value": "n", "user_value": null, "dep": "n", "prompt": "PLL", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC11_UART0", "value": "n", "user_value": null, "dep": "n", "prompt": "UART0", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM"}], "selects": [{"symbol": "UART0_SERIALDRIVER", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC11_CAN0", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN0", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC11_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC11_SSP0", "value": "n", "user_value": null, "dep": "n", "prompt": "SSP0", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC11_SSP1", "value": "n", "user_value": null, "dep": "n", "prompt": "SSP1", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC11_I2C0", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C0", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC11_TMR0", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 0", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC11_TMR1", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 1", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC11_WDT", "value": "n", "user_value": null, "dep": "n", "prompt": "WDT", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC11_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC11_FLASH", "value": "n", "user_value": null, "dep": "n", "prompt": "FLASH", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM"}]}]}, {"type": 31, "dep": "n", "prompt": "Serial driver options", "cond": "(LPC11_UART0 || LPC11_UART1 || LPC11_UART2 || LPC11_UART3 || LPC11_UART4) && ARCH_CHIP_LPC11XX && ARCH_ARM", "children": [{"type": 3, "name": "SERIAL_TERMIOS", "value": "y", "user_value": 2, "dep": "n", "prompt": "Serial driver TERMIOS supported", "cond": "(LPC11_UART0 || LPC11_UART1 || LPC11_UART2 || LPC11_UART3) && (LPC11_UART0 || LPC11_UART1 || LPC11_UART2 || LPC11_UART3 || LPC11_UART4) && ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(LPC11_UART0 || LPC11_UART1 || LPC11_UART2 || LPC11_UART3) && (LPC11_UART0 || LPC11_UART1 || LPC11_UART2 || LPC11_UART3 || LPC11_UART4) && ARCH_CHIP_LPC11XX && ARCH_ARM"}], "help": "Serial driver supports termios.h interfaces (tcsetattr, tcflush, etc.).\nIf this is not defined, then the terminal settings (baud, parity, etc).\nare not configurable at runtime; serial streams cannot be flushed, etc.."}]}, {"type": 31, "dep": "n", "prompt": "ADC driver options", "cond": "LPC11_ADC && ARCH_CHIP_LPC11XX && ARCH_ARM", "children": [{"type": 27, "name": "ADC0_AVERAGE", "value": "", "user_value": null, "dep": "n", "prompt": "ADC0 average", "cond": "LPC11_ADC && ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "200", "default": "200", "cond": "LPC11_ADC && ARCH_CHIP_LPC11XX && ARCH_ARM"}]}, {"type": 24, "name": "ADC0_MASK", "value": "", "user_value": null, "dep": "n", "prompt": "ADC0 mask", "cond": "LPC11_ADC && ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "0x01", "default": "0x01", "cond": "LPC11_ADC && ARCH_CHIP_LPC11XX && ARCH_ARM"}]}, {"type": 27, "name": "ADC0_SPS", "value": "", "user_value": null, "dep": "n", "prompt": "ADC0 SPS", "cond": "LPC11_ADC && ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "1000", "default": "1000", "cond": "LPC11_ADC && ARCH_CHIP_LPC11XX && ARCH_ARM"}]}, {"type": 3, "name": "ADC_CHANLIST", "value": "n", "user_value": null, "dep": "n", "prompt": "Use ADC channel list", "cond": "LPC11_ADC && ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC11_ADC && ARCH_CHIP_LPC11XX && ARCH_ARM"}], "help": "The errata that states: \"A/D Global Data register should not be used\nwith burst mode or hardware triggering\".  If this option is selected,\nthen the ADC driver will grab from the individual channel registers\nrather than from the global data register as this is the stated\nworkaround in the errata.\n\nThe ADC interrupt will trigger on conversion complete on the last\nchannel listed in the array g_adc_chanlist[] (as opposed to\ntriggering interrupt from the global DONE flag).\n\nIf this option is enabled, then the platform specific code must do\ntwo things:  (1) define ADC_NCHANNELS in the configuration file and\n(2) provide an array g_adc_chanlist[] with the channel numbers\nmatching the ADC0_MASK within the board-specific library."}, {"type": 3, "name": "ADC_BURSTMODE", "value": "n", "user_value": null, "dep": "n", "prompt": "One interrupt at the end of all ADC cconversions", "cond": "LPC11_ADC && ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC11_ADC && ARCH_CHIP_LPC11XX && ARCH_ARM"}], "help": "Select this if you want to generate only one interrupt once all selected channels has been converted by the ADC"}, {"type": 27, "name": "ADC_NCHANNELS", "value": "", "user_value": null, "dep": "n", "prompt": "ADC0 number of channels", "cond": "ADC_CHANLIST && LPC11_ADC && ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "ADC_CHANLIST && LPC11_ADC && ARCH_CHIP_LPC11XX && ARCH_ARM"}], "help": "If ADC_CHANLIST is enabled, then the platform specific code\nmust do two things:  (1) define ADC_NCHANNELS in the configuration\nfile and (2) provide an array g_adc_chanlist[] with the channel\nnumbers matching the ADC0_MASK within the board-specific library."}]}, {"type": 31, "dep": "n", "prompt": "CAN driver options", "cond": "(LPC11_CAN1 || LPC11_CAN2) && ARCH_CHIP_LPC11XX && ARCH_ARM", "children": [{"type": 3, "name": "CAN_EXTID", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN extended IDs", "cond": "(LPC11_CAN1 || LPC11_CAN2) && ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(LPC11_CAN1 || LPC11_CAN2) && ARCH_CHIP_LPC11XX && ARCH_ARM"}], "help": "Enables support for the 29-bit extended ID.  Default Standard 11-bit IDs."}, {"type": 27, "name": "CAN1_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "CAN1 BAUD", "cond": "LPC11_CAN1 && (LPC11_CAN1 || LPC11_CAN2) && ARCH_CHIP_LPC11XX && ARCH_ARM", "help": "CAN1 BAUD rate.  Required if LPC11_CAN1 is defined."}, {"type": 27, "name": "CAN2_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "CAN2 BAUD", "cond": "LPC11_CAN2 && (LPC11_CAN1 || LPC11_CAN2) && ARCH_CHIP_LPC11XX && ARCH_ARM", "help": "CAN2 BAUD rate.  Required if LPC11_CAN2 is defined."}, {"type": 27, "name": "CAN1_DIVISOR", "value": "", "user_value": null, "dep": "n", "prompt": "CAN1 CCLK divisor", "cond": "LPC11_CAN1 && (LPC11_CAN1 || LPC11_CAN2) && ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "LPC11_CAN1 && (LPC11_CAN1 || LPC11_CAN2) && ARCH_CHIP_LPC11XX && ARCH_ARM"}], "help": "CAN1 is clocked at CCLK divided by this number. (the CCLK frequency is divided\nby this number to get the CAN clock). Options = {1,2,4,6}. Default: 4."}, {"type": 27, "name": "CAN2_DIVISOR", "value": "", "user_value": null, "dep": "n", "prompt": "CAN2 CCLK divisor", "cond": "LPC11_CAN2 && (LPC11_CAN1 || LPC11_CAN2) && ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "LPC11_CAN2 && (LPC11_CAN1 || LPC11_CAN2) && ARCH_CHIP_LPC11XX && ARCH_ARM"}], "help": "CAN2 is clocked at CCLK divided by this number. (the CCLK frequency is divided\nby this number to get the CAN clock). Options = {1,2,4,6}. Default: 4."}, {"type": 27, "name": "CAN_TSEG1", "value": "", "user_value": null, "dep": "n", "prompt": "TSEG1 quanta", "cond": "(LPC11_CAN1 || LPC11_CAN2) && ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "6", "default": "6", "cond": "(LPC11_CAN1 || LPC11_CAN2) && ARCH_CHIP_LPC11XX && ARCH_ARM"}], "help": "The number of CAN time quanta in segment 1. Default: 6"}, {"type": 27, "name": "CAN_TSEG2", "value": "", "user_value": null, "dep": "n", "prompt": "TSEG2 quanta", "cond": "(LPC11_CAN1 || LPC11_CAN2) && ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "(LPC11_CAN1 || LPC11_CAN2) && ARCH_CHIP_LPC11XX && ARCH_ARM"}], "help": "The number of CAN time quanta in segment 2. Default: 7"}, {"type": 3, "name": "CAN_SAM", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN sampling", "cond": "(LPC11_CAN1 || LPC11_CAN2) && ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(LPC11_CAN1 || LPC11_CAN2) && ARCH_CHIP_LPC11XX && ARCH_ARM"}], "help": "The bus is sampled 3 times (recommended for low to medium speed buses to spikes on the bus-line)."}, {"type": 3, "name": "CAN_LOOPBACK", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN loopback mode", "cond": "(LPC11_CAN1 || LPC11_CAN2) && ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(LPC11_CAN1 || LPC11_CAN2) && ARCH_CHIP_LPC11XX && ARCH_ARM"}], "help": "Enable CAN loopback mode"}, {"type": 3, "name": "CAN_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register level debug", "cond": "DEBUG_CAN_INFO && (LPC11_CAN1 || LPC11_CAN2) && ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_CAN_INFO && (LPC11_CAN1 || LPC11_CAN2) && ARCH_CHIP_LPC11XX && ARCH_ARM"}], "help": "Output detailed register-level CAN debug information.  Requires also\nCONFIG_DEBUG_CAN_INFO."}]}, {"type": 3, "name": "LPC11_GPIOIRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIO interrupt support", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC11XX && ARCH_ARM"}], "help": "Enable support for GPIO interrupts"}, {"type": 31, "dep": "n", "prompt": "I2C driver options", "cond": "(LPC11_I2C0 || LPC11_I2C1 || LPC11_I2C2) && ARCH_CHIP_LPC11XX && ARCH_ARM", "children": [{"type": 27, "name": "LPC11_I2C0_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "I2C0 frequency", "cond": "LPC11_I2C0 && (LPC11_I2C0 || LPC11_I2C1 || LPC11_I2C2) && ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "100000", "default": "100000", "cond": "LPC11_I2C0 && (LPC11_I2C0 || LPC11_I2C1 || LPC11_I2C2) && ARCH_CHIP_LPC11XX && ARCH_ARM"}]}, {"type": 27, "name": "LPC11_I2C1_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "I2C1 frequency", "cond": "LPC11_I2C1 && (LPC11_I2C0 || LPC11_I2C1 || LPC11_I2C2) && ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "100000", "default": "100000", "cond": "LPC11_I2C1 && (LPC11_I2C0 || LPC11_I2C1 || LPC11_I2C2) && ARCH_CHIP_LPC11XX && ARCH_ARM"}]}, {"type": 27, "name": "LPC11_I2C2_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "I2C2 frequency", "cond": "LPC11_I2C2 && (LPC11_I2C0 || LPC11_I2C1 || LPC11_I2C2) && ARCH_CHIP_LPC11XX && ARCH_ARM", "defaults": [{"name": "100000", "default": "100000", "cond": "LPC11_I2C2 && (LPC11_I2C0 || LPC11_I2C1 || LPC11_I2C2) && ARCH_CHIP_LPC11XX && ARCH_ARM"}]}]}, {"type": 6, "dep": "n", "prompt": "LPC17xx Configuration Options", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "NXP LPC17XX Chip Selection", "cond": "ARCH_CHIP_LPC17XX && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "ARCH_CHIP_LPC1768", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_LPC1751", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1751", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC175X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC1752", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1752", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC175X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC1754", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1754", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC175X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC1756", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1756", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC175X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC1758", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1758", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC175X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC1759", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1759", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC175X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC1764", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1764", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC176X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC1765", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1765", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC176X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC1766", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1766", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC176X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC1767", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1767", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC176X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC1768", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1768", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC176X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC1769", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1769", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC176X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC1773", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1773", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC177X", "cond": "y"}, {"symbol": "ARCH_HAVE_SPIFI", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC1774", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1774", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC177X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC1776", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1776", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC177X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC1777", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1777", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC177X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC1778", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1778", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC177X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC1785", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1785", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC178X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC1786", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1786", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC178X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC1787", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1787", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC178X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC1788", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC1788", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LPC178X", "cond": "y"}]}]}, {"type": 3, "name": "ARCH_FAMILY_LPC175X", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LPC1751 && y) || (ARCH_CHIP_LPC1752 && y) || (ARCH_CHIP_LPC1754 && y) || (ARCH_CHIP_LPC1756 && y) || (ARCH_CHIP_LPC1758 && y) || (ARCH_CHIP_LPC1759 && y)", "dep": "n"}, {"type": 3, "name": "ARCH_FAMILY_LPC176X", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LPC1764 && y) || (ARCH_CHIP_LPC1765 && y) || (ARCH_CHIP_LPC1766 && y) || (ARCH_CHIP_LPC1767 && y) || (ARCH_CHIP_LPC1768 && y) || (ARCH_CHIP_LPC1769 && y)", "dep": "n"}, {"type": 3, "name": "ARCH_FAMILY_LPC177X", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LPC1773 && y) || (ARCH_CHIP_LPC1774 && y) || (ARCH_CHIP_LPC1776 && y) || (ARCH_CHIP_LPC1777 && y) || (ARCH_CHIP_LPC1778 && y)", "dep": "n"}, {"type": 3, "name": "ARCH_FAMILY_LPC178X", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LPC1785 && y) || (ARCH_CHIP_LPC1786 && y) || (ARCH_CHIP_LPC1787 && y) || (ARCH_CHIP_LPC1788 && y)", "dep": "n"}, {"type": 3, "name": "ARCH_HAVE_SPIFI", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_LPC1773 && y", "dep": "n"}, {"type": 31, "dep": "n", "prompt": "LPC17xx Peripheral Support", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "children": [{"type": 3, "name": "LPC17_MAINOSC", "value": "n", "user_value": null, "dep": "n", "prompt": "Main oscillator", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_PLL0", "value": "n", "user_value": null, "dep": "n", "prompt": "PLL0", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_PLL1", "value": "n", "user_value": null, "dep": "n", "prompt": "PLL1", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_EMC", "value": "n", "user_value": null, "dep": "n", "prompt": "EMC", "cond": "ARCH_FAMILY_LPC178X && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_FAMILY_LPC178X && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_EXTNAND", "cond": "ARCH_FAMILY_LPC178X && ARCH_CHIP_LPC17XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_EXTSRAM0", "cond": "ARCH_FAMILY_LPC178X && ARCH_CHIP_LPC17XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_EXTDRAM", "cond": "ARCH_FAMILY_LPC178X && ARCH_CHIP_LPC17XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_EXTNOR", "cond": "ARCH_FAMILY_LPC178X && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_ETHERNET", "value": "n", "user_value": null, "dep": "n", "prompt": "Ethernet", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}], "selects": [{"symbol": "NETDEVICES", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_PHY", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_NETDEV_STATISTICS", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_LCD", "value": "n", "user_value": null, "dep": "n", "prompt": "LCD controller", "cond": "(ARCH_FAMILY_LPC177X || ARCH_FAMILY_LPC178X) && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_FAMILY_LPC177X || ARCH_FAMILY_LPC178X) && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_USBHOST", "value": "n", "user_value": null, "dep": "n", "prompt": "USB host", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}], "selects": [{"symbol": "USBHOST", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}, {"symbol": "USBHOST_HAVE_ASYNCH", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_USBDEV", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Device", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}], "selects": [{"symbol": "USBDEV", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}], "children": [{"type": 3, "name": "LPC17_USBOTG", "value": "n", "user_value": null, "dep": "n", "prompt": "USB OTG", "cond": "LPC17_USBHOST && LPC17_USBDEV && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC17_USBHOST && LPC17_USBDEV && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}]}, {"type": 3, "name": "LPC17_SDCARD", "value": "n", "user_value": null, "dep": "n", "prompt": "SD Card Interface", "cond": "(ARCH_FAMILY_LPC177X || ARCH_FAMILY_LPC178X) && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_FAMILY_LPC177X || ARCH_FAMILY_LPC178X) && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SDIO", "cond": "(ARCH_FAMILY_LPC177X || ARCH_FAMILY_LPC178X) && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_UART0", "value": "n", "user_value": null, "dep": "n", "prompt": "UART0", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}], "selects": [{"symbol": "UART0_SERIALDRIVER", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_UART2", "value": "n", "user_value": null, "dep": "n", "prompt": "UART2", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}], "selects": [{"symbol": "UART2_SERIALDRIVER", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_UART3", "value": "n", "user_value": null, "dep": "n", "prompt": "UART3", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}], "selects": [{"symbol": "UART3_SERIALDRIVER", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_UART4", "value": "n", "user_value": null, "dep": "n", "prompt": "UART4", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}], "selects": [{"symbol": "UART4_SERIALDRIVER", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_CAN1", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN1", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}], "selects": [{"symbol": "UART4_SERIALDRIVER", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_CAN2", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN2", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "(ARCH_FAMILY_LPC175X || ARCH_FAMILY_LPC176X) && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_FAMILY_LPC175X || ARCH_FAMILY_LPC176X) && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_SSP0", "value": "n", "user_value": null, "dep": "n", "prompt": "SSP0", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_SSP1", "value": "n", "user_value": null, "dep": "n", "prompt": "SSP1", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_SSP2", "value": "n", "user_value": null, "dep": "n", "prompt": "SSP1", "cond": "(ARCH_FAMILY_LPC177X || ARCH_FAMILY_LPC178X) && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_FAMILY_LPC177X || ARCH_FAMILY_LPC178X) && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_SPIFI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPIFI Interface", "cond": "ARCH_HAVE_SPIFI && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_SPIFI && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_I2C0", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C0", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_I2C1", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C1", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_I2C2", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C2", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_I2S", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_TMR0", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 0", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}], "children": [{"type": 27, "name": "LPC17_MAT0_PIN", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 MAT0 Output Pin", "cond": "LPC17_TMR0 && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "LPC17_TMR0 && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "LPC17_TMR0 && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "If TIM1 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}]}, {"type": 3, "name": "LPC17_TMR1", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 1", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_TMR2", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 2", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_TMR3", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 3", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_RIT", "value": "n", "user_value": null, "dep": "n", "prompt": "RIT", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_PWM0", "value": "n", "user_value": null, "dep": "n", "prompt": "PWM0", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_PWM1", "value": "n", "user_value": null, "dep": "n", "prompt": "PWM1", "cond": "(ARCH_FAMILY_LPC177X || ARCH_FAMILY_LPC178X || ARCH_FAMILY_LPC176X) && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_FAMILY_LPC177X || ARCH_FAMILY_LPC178X || ARCH_FAMILY_LPC176X) && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "children": [{"type": 27, "name": "LPC17_PWM1_PIN", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 PWM Output Pin", "cond": "LPC17_PWM1 && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "LPC17_PWM1 && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "LPC17_PWM1 && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "If TIM1 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}]}, {"type": 3, "name": "LPC17_MCPWM", "value": "n", "user_value": null, "dep": "n", "prompt": "MCPWM", "cond": "(ARCH_FAMILY_LPC175X || ARCH_FAMILY_LPC176X) && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_FAMILY_LPC175X || ARCH_FAMILY_LPC176X) && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "children": [{"type": 27, "name": "LPC17_MCPWM1_PIN", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 MCPWM Output Pin", "cond": "LPC17_MCPWM && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "LPC17_MCPWM && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "LPC17_MCPWM && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "If TIM1 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}]}, {"type": 3, "name": "LPC17_QEI", "value": "n", "user_value": null, "dep": "n", "prompt": "QEI", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_RTC", "value": "n", "user_value": null, "dep": "n", "prompt": "RTC", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}], "children": [{"type": 3, "name": "LPC17_RTCEV", "value": "n", "user_value": null, "dep": "n", "prompt": "RTC event monitor", "cond": "LPC17_RTC && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC17_RTC && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}]}, {"type": 3, "name": "LPC17_WDT", "value": "n", "user_value": null, "dep": "n", "prompt": "WDT", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_GPDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "GPDMA", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}], "selects": [{"symbol": "ARCH_DMA", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_CRC", "value": "n", "user_value": null, "dep": "n", "prompt": "CRC engine", "cond": "(ARCH_FAMILY_LPC177X || ARCH_FAMILY_LPC178X) && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_FAMILY_LPC177X || ARCH_FAMILY_LPC178X) && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_FLASH", "value": "n", "user_value": null, "dep": "n", "prompt": "FLASH", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC17_EEPROM", "value": "n", "user_value": null, "dep": "n", "prompt": "EEPROM", "cond": "(ARCH_FAMILY_LPC177X || ARCH_FAMILY_LPC178X) && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_FAMILY_LPC177X || ARCH_FAMILY_LPC178X) && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}]}, {"type": 31, "dep": "n", "prompt": "External Memory Configuration", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "children": [{"type": 3, "name": "ARCH_HAVE_EXTNAND", "value": "n", "user_value": null, "rev_dep": "(LPC17_EMC && ARCH_FAMILY_LPC178X && ARCH_CHIP_LPC17XX && ARCH_ARM) || (ARCH_CHIP_LPC3130 && y) || (ARCH_CHIP_LPC3131 && y) || (ARCH_CHIP_LPC3152 && y) || (ARCH_CHIP_LPC3154 && y) || (ARCH_CHIP_ATSAM3X8E && y) || (ARCH_CHIP_ATSAM3X4E && y) || (ARCH_CHIP_SAM3U && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4E && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4S && ARCH_CHIP_SAM34 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "ARCH_HAVE_EXTNOR", "value": "n", "user_value": null, "rev_dep": "(LPC17_EMC && ARCH_FAMILY_LPC178X && ARCH_CHIP_LPC17XX && ARCH_ARM) || (ARCH_CHIP_ATSAM3X8E && y) || (ARCH_CHIP_ATSAM3X4E && y) || (ARCH_CHIP_SAM3U && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4E && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4S && ARCH_CHIP_SAM34 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "ARCH_HAVE_EXTDRAM", "value": "n", "user_value": null, "rev_dep": "(LPC17_EMC && ARCH_FAMILY_LPC178X && ARCH_CHIP_LPC17XX && ARCH_ARM) || (ARCH_CHIP_LPC3130 && y) || (ARCH_CHIP_LPC3131 && y) || (ARCH_CHIP_LPC3152 && y) || (ARCH_CHIP_LPC3154 && y)", "dep": "n"}, {"type": 3, "name": "ARCH_HAVE_EXTSRAM0", "value": "n", "user_value": null, "rev_dep": "(LPC17_EMC && ARCH_FAMILY_LPC178X && ARCH_CHIP_LPC17XX && ARCH_ARM) || (ARCH_CHIP_LPC3130 && y) || (ARCH_CHIP_LPC3131 && y) || (ARCH_CHIP_LPC3152 && y) || (ARCH_CHIP_LPC3154 && y) || (ARCH_CHIP_ATSAM3X8E && y) || (ARCH_CHIP_ATSAM3X4E && y) || (ARCH_CHIP_SAM3U && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4E && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4S && ARCH_CHIP_SAM34 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "LPC17_EXTNAND", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure external NAND", "cond": "ARCH_HAVE_EXTNAND && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_EXTNAND && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Configure external NAND memory and, if applicable, map then external\nNAND into the memory map.", "children": [{"type": 27, "name": "LPC17_EXTNANDSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "External NAND size", "cond": "LPC17_EXTNAND && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "LPC17_EXTNAND && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Size of the external NAND in bytes."}]}, {"type": 3, "name": "LPC17_EXTNOR", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure external NOR memory", "cond": "ARCH_HAVE_EXTNOR && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_EXTNOR && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Configure external NOR memory and, if applicable, map then external\nNOR into the memory map.", "children": [{"type": 27, "name": "LPC17_EXTNORSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "External NOR size", "cond": "LPC17_EXTNOR && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "LPC17_EXTNOR && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Size of the external NOR in bytes."}]}, {"type": 3, "name": "LPC17_EXTDRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure external DRAM", "cond": "ARCH_HAVE_EXTDRAM && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_EXTDRAM && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SDRAM", "cond": "ARCH_HAVE_EXTDRAM && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Configure external DRAM memory and, if applicable, map then external\nDRAM into the memory map.", "children": [{"type": 27, "name": "LPC17_EXTDRAMSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "External SDRAM size", "cond": "LPC17_EXTDRAM && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "LPC17_EXTDRAM && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Size of the external SDRAM in bytes."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SDRAM Width Selection", "cond": "LPC17_EXTDRAM && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "LPC17_SDRAM_16BIT", "default": "n", "cond": "LPC17_EXTDRAM && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "children": [{"type": 3, "name": "LPC17_SDRAM_8BIT", "value": "n", "user_value": null, "dep": "n", "prompt": "8-bit", "cond": "y"}, {"type": 3, "name": "LPC17_SDRAM_16BIT", "value": "n", "user_value": null, "dep": "n", "prompt": "16-bit", "cond": "y"}, {"type": 3, "name": "LPC17_SDRAM_32BIT", "value": "n", "user_value": null, "dep": "n", "prompt": "32-bit", "cond": "y"}]}, {"type": 3, "name": "LPC17_EXTDRAMHEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Add external SDRAM to the heap", "cond": "LPC17_EXTDRAM && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "LPC17_EXTDRAM && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Add the external SDRAM into the heap."}]}, {"type": 3, "name": "LPC17_EXTSRAM0", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure external SRAM (Bank 0)", "cond": "ARCH_HAVE_EXTSRAM0 && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_EXTSRAM0 && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Configure external SRAM Bank 0 memory and, if applicable, map then\nexternal SRAM Bank 0 into the memory map.", "children": [{"type": 27, "name": "LPC17_EXTSRAM0SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "External SRAM size", "cond": "LPC17_EXTSRAM0 && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "LPC17_EXTSRAM0 && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Size of the external SRAM Bank 0 in bytes."}, {"type": 3, "name": "LPC17_EXTSRAM0HEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Add external SRAM (Bank 0) to the heap", "cond": "LPC17_EXTSRAM0 && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "LPC17_EXTSRAM0 && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Add external SRAM Bank 0 into the heap."}]}]}, {"type": 31, "dep": "n", "prompt": "Serial driver options", "cond": "(LPC17_UART0 || LPC17_UART1 || LPC17_UART2 || LPC17_UART3 || LPC17_UART4) && ARCH_CHIP_LPC17XX && ARCH_ARM", "children": [{"type": 3, "name": "UART1_RINGINDICATOR", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1 ring indicator", "cond": "LPC17_UART1 && (LPC17_UART0 || LPC17_UART1 || LPC17_UART2 || LPC17_UART3 || LPC17_UART4) && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC17_UART1 && (LPC17_UART0 || LPC17_UART1 || LPC17_UART2 || LPC17_UART3 || LPC17_UART4) && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Enable UART1 ring indicator"}]}, {"type": 31, "dep": "n", "prompt": "ADC driver options", "cond": "LPC17_ADC && ARCH_CHIP_LPC17XX && ARCH_ARM", "children": [{"type": 27, "name": "ADC0_AVERAGE", "value": "", "user_value": null, "dep": "n", "prompt": "ADC0 average", "cond": "LPC17_ADC && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "200", "default": "200", "cond": "LPC17_ADC && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 24, "name": "ADC0_MASK", "value": "", "user_value": null, "dep": "n", "prompt": "ADC0 mask", "cond": "LPC17_ADC && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "0x01", "default": "0x01", "cond": "LPC17_ADC && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 27, "name": "ADC0_SPS", "value": "", "user_value": null, "dep": "n", "prompt": "ADC0 SPS", "cond": "LPC17_ADC && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "1000", "default": "1000", "cond": "LPC17_ADC && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 3, "name": "ADC_CHANLIST", "value": "n", "user_value": null, "dep": "n", "prompt": "Use ADC channel list", "cond": "LPC17_ADC && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC17_ADC && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "The errata that states: \"A/D Global Data register should not be used\nwith burst mode or hardware triggering\".  If this option is selected,\nthen the ADC driver will grab from the individual channel registers\nrather than from the global data register as this is the stated\nworkaround in the errata.\n\nThe ADC interrupt will trigger on conversion complete on the last\nchannel listed in the array g_adc_chanlist[] (as opposed to\ntriggering interrupt from the global DONE flag).\n\nIf this option is enabled, then the platform specific code must do\ntwo things:  (1) define ADC_NCHANNELS in the configuration file and\n(2) provide an array g_adc_chanlist[] with the channel numbers\nmatching the ADC0_MASK within the board-specific library."}, {"type": 3, "name": "ADC_BURSTMODE", "value": "n", "user_value": null, "dep": "n", "prompt": "One interrupt at the end of all ADC cconversions", "cond": "LPC17_ADC && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC17_ADC && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Select this if you want to generate only one interrupt once all selected channels has been converted by the ADC"}, {"type": 27, "name": "ADC_NCHANNELS", "value": "", "user_value": null, "dep": "n", "prompt": "ADC0 number of channels", "cond": "ADC_CHANLIST && LPC17_ADC && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "ADC_CHANLIST && LPC17_ADC && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "If ADC_CHANLIST is enabled, then the platform specific code\nmust do two things:  (1) define ADC_NCHANNELS in the configuration\nfile and (2) provide an array g_adc_chanlist[] with the channel\nnumbers matching the ADC0_MASK within the board-specific library."}]}, {"type": 31, "dep": "n", "prompt": "CAN driver options", "cond": "(LPC17_CAN1 || LPC17_CAN2) && ARCH_CHIP_LPC17XX && ARCH_ARM", "children": [{"type": 3, "name": "CAN_EXTID", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN extended IDs", "cond": "(LPC17_CAN1 || LPC17_CAN2) && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(LPC17_CAN1 || LPC17_CAN2) && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Enables support for the 29-bit extended ID.  Default Standard 11-bit IDs."}, {"type": 27, "name": "CAN1_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "CAN1 BAUD", "cond": "LPC17_CAN1 && (LPC17_CAN1 || LPC17_CAN2) && ARCH_CHIP_LPC17XX && ARCH_ARM", "help": "CAN1 BAUD rate.  Required if LPC17_CAN1 is defined."}, {"type": 27, "name": "CAN2_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "CAN2 BAUD", "cond": "LPC17_CAN2 && (LPC17_CAN1 || LPC17_CAN2) && ARCH_CHIP_LPC17XX && ARCH_ARM", "help": "CAN2 BAUD rate.  Required if LPC17_CAN2 is defined."}, {"type": 27, "name": "CAN1_DIVISOR", "value": "", "user_value": null, "dep": "n", "prompt": "CAN1 CCLK divisor", "cond": "LPC17_CAN1 && (LPC17_CAN1 || LPC17_CAN2) && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "LPC17_CAN1 && (LPC17_CAN1 || LPC17_CAN2) && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "CAN1 is clocked at CCLK divided by this number. (the CCLK frequency is divided\nby this number to get the CAN clock). Options = {1,2,4,6}. Default: 4."}, {"type": 27, "name": "CAN2_DIVISOR", "value": "", "user_value": null, "dep": "n", "prompt": "CAN2 CCLK divisor", "cond": "LPC17_CAN2 && (LPC17_CAN1 || LPC17_CAN2) && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "LPC17_CAN2 && (LPC17_CAN1 || LPC17_CAN2) && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "CAN2 is clocked at CCLK divided by this number. (the CCLK frequency is divided\nby this number to get the CAN clock). Options = {1,2,4,6}. Default: 4."}, {"type": 27, "name": "CAN_TSEG1", "value": "", "user_value": null, "dep": "n", "prompt": "TSEG1 quanta", "cond": "(LPC17_CAN1 || LPC17_CAN2) && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "6", "default": "6", "cond": "(LPC17_CAN1 || LPC17_CAN2) && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "The number of CAN time quanta in segment 1. Default: 6"}, {"type": 27, "name": "CAN_TSEG2", "value": "", "user_value": null, "dep": "n", "prompt": "TSEG2 quanta", "cond": "(LPC17_CAN1 || LPC17_CAN2) && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "(LPC17_CAN1 || LPC17_CAN2) && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "The number of CAN time quanta in segment 2. Default: 7"}, {"type": 3, "name": "CAN_SAM", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN sampling", "cond": "(LPC17_CAN1 || LPC17_CAN2) && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(LPC17_CAN1 || LPC17_CAN2) && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "The bus is sampled 3 times (recommended for low to medium speed buses to spikes on the bus-line)."}, {"type": 3, "name": "CAN_LOOPBACK", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN loopback mode", "cond": "(LPC17_CAN1 || LPC17_CAN2) && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(LPC17_CAN1 || LPC17_CAN2) && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Enable CAN loopback mode"}, {"type": 3, "name": "LPC17_CAN_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register level debug", "cond": "DEBUG_CAN_INFO && (LPC17_CAN1 || LPC17_CAN2) && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_CAN_INFO && (LPC17_CAN1 || LPC17_CAN2) && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Output detailed register-level CAN debug information.  Requires also\nCONFIG_DEBUG_CAN_INFO."}]}, {"type": 3, "name": "LPC17_GPIOIRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIO interrupt support", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Enable support for GPIO interrupts"}, {"type": 31, "dep": "n", "prompt": "I2C driver options", "cond": "(LPC17_I2C0 || LPC17_I2C1 || LPC17_I2C2) && ARCH_CHIP_LPC17XX && ARCH_ARM", "children": [{"type": 27, "name": "LPC17_I2C0_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "I2C0 frequency", "cond": "LPC17_I2C0 && (LPC17_I2C0 || LPC17_I2C1 || LPC17_I2C2) && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "100000", "default": "100000", "cond": "LPC17_I2C0 && (LPC17_I2C0 || LPC17_I2C1 || LPC17_I2C2) && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 27, "name": "LPC17_I2C1_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "I2C1 frequency", "cond": "LPC17_I2C1 && (LPC17_I2C0 || LPC17_I2C1 || LPC17_I2C2) && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "100000", "default": "100000", "cond": "LPC17_I2C1 && (LPC17_I2C0 || LPC17_I2C1 || LPC17_I2C2) && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 27, "name": "LPC17_I2C2_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "I2C2 frequency", "cond": "LPC17_I2C2 && (LPC17_I2C0 || LPC17_I2C1 || LPC17_I2C2) && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "100000", "default": "100000", "cond": "LPC17_I2C2 && (LPC17_I2C0 || LPC17_I2C1 || LPC17_I2C2) && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}]}, {"type": 31, "dep": "n", "prompt": "SDCARD Configuration", "cond": "LPC17_SDCARD && ARCH_CHIP_LPC17XX && ARCH_ARM", "children": [{"type": 3, "name": "LPC17_SDCARD_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "Support DMA data transfers", "cond": "LPC17_GPDMA && LPC17_SDCARD && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "LPC17_GPDMA && LPC17_GPDMA && LPC17_SDCARD && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "selects": [{"symbol": "SDIO_DMA", "cond": "LPC17_GPDMA && LPC17_SDCARD && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Support DMA data transfers.\nEnable SD card DMA data transfers.  This is marginally optional.\nFor most usages, SD accesses will cause data overruns if used without\nDMA."}, {"type": 3, "name": "LPC17_SDCARD_WIDTH_D1_ONLY", "value": "n", "user_value": null, "dep": "n", "prompt": "Use D1 only", "cond": "LPC17_SDCARD && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC17_SDCARD && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Select 1-bit transfer mode.  This may be selected to force the driver\noperate with only a single data line (the default is to use all\n4 SD data lines).Default: 4-bit transfer mode."}]}, {"type": 31, "dep": "n", "prompt": "Ethernet driver options", "cond": "LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM", "children": [{"type": 3, "name": "PHY_AUTONEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Autonegiation", "cond": "LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM", "help": "Enable auto-negotion"}, {"type": 3, "name": "PHY_SPEED100", "value": "n", "user_value": null, "dep": "n", "prompt": "100Mbit/Sec", "cond": "!PHY_AUTONEG && LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM", "help": "Select 100Mbit vs. 10Mbit speed."}, {"type": 3, "name": "PHY_FDUPLEX", "value": "n", "user_value": null, "dep": "n", "prompt": "Full duplex", "cond": "!PHY_AUTONEG && LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM", "help": "Select full (vs. half) duplex"}, {"type": 27, "name": "NET_EMACRAM_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "EMAC RAM Size", "cond": "LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "16384", "default": "16384", "cond": "LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Size of EMAC RAM.  Default: 16384 bytes"}, {"type": 27, "name": "NET_NTXDESC", "value": "", "user_value": null, "dep": "n", "prompt": "Number of Tx descriptors", "cond": "LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "13", "default": "13", "cond": "LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Configured number of Tx descriptors. Default: 13"}, {"type": 27, "name": "NET_NRXDESC", "value": "", "user_value": null, "dep": "n", "prompt": "Number of Rx descriptors", "cond": "LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "13", "default": "13", "cond": "LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Configured number of Rx descriptors. Default: 13"}, {"type": 27, "name": "NET_PRIORITY", "value": "", "user_value": null, "dep": "n", "prompt": "Ethernet interrupt priority", "cond": "ARCH_IRQPRIO && EXPERIMENTAL && LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "128", "default": "128", "cond": "ARCH_IRQPRIO && EXPERIMENTAL && LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Ethernet interrupt priority.  The default is the default priority (128)."}, {"type": 3, "name": "NET_WOL", "value": "n", "user_value": null, "dep": "n", "prompt": "Wake-up on LAN", "cond": "LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Enable Wake-up on Lan (not fully implemented)."}, {"type": 3, "name": "LPC17_NET_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Ethernet register-level debug", "cond": "DEBUG_NET_INFO && LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_NET_INFO && LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Enable low level register debug.  Also needs CONFIG_DEBUG_NET_INFO."}, {"type": 3, "name": "NET_HASH", "value": "n", "user_value": null, "dep": "n", "prompt": "Hashing", "cond": "LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Enable receipt of near-perfect match frames."}, {"type": 3, "name": "LPC17_MULTICAST", "value": "n", "user_value": null, "dep": "n", "prompt": "Multicast", "cond": "LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "NET_IGMP && LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM"}, {"name": "n", "default": "n", "cond": "!NET_IGMP && LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Enable receipt of multicast (and unicast) frames. Automatically set\nif NET_IGMP is selected."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "LPC17_ETHERNET_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM"}, {"name": "LPC17_ETHERNET_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Work queue support is required to use the Ethernet driver.  If the\nlow priority work queue is available, then it should be used by the\ndriver.", "children": [{"type": 3, "name": "LPC17_ETHERNET_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "LPC17_ETHERNET_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}]}, {"type": 31, "dep": "n", "prompt": "LCD device driver options", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM", "children": [{"type": 24, "name": "LPC17_LCD_VRAMBASE", "value": "", "user_value": null, "dep": "n", "prompt": "Video RAM base address", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "0xa0010000", "default": "0xa0010000", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Base address of the video RAM frame buffer.  The default is\n(LPC17_EXTDRAM_CS0 + 0x00010000)"}, {"type": 27, "name": "LPC17_LCD_REFRESH_FREQ", "value": "", "user_value": null, "dep": "n", "prompt": "LCD refesh rate (Hz)", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "50", "default": "50", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "LCD refesh rate (Hz)"}, {"type": 3, "name": "LPC17_LCD_BACKLIGHT", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable backlight", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Enable backlight support.  If LPC17_LCD_BACKLIGHT is selected, then\nthe board-specific logic must provide this lpc17_backlight()\ninterface so that the LCD driver can turn the backlight on and off\nas necessary.  You should select this option and implement\nlpc17_backlight() if your board provides GPIO control over the\nbacklight.  This interface provides only ON/OFF control of the\nbacklight.  If you want finer control over the backlight level (for\nexample, using PWM), then this interface would need to be extended."}, {"type": 3, "name": "LPC17_LCD_TFTPANEL", "value": "n", "user_value": null, "dep": "n", "prompt": "TFT Panel", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "TFT Panel vs. STN display.  STN display panels require algorithmic\npixel pattern generation to provide pseudo gray scaling on\nmonochrome displays, or color creation on color displays.  TFT\ndisplay panels require the digital color value of each pixel to be\napplied to the display data inputs."}, {"type": 3, "name": "LPC17_LCD_MONOCHROME", "value": "n", "user_value": null, "dep": "n", "prompt": "Monochrome LCD", "cond": "!LPC17_LCD_TFTPANEL && LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!LPC17_LCD_TFTPANEL && LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "STN LCD monochrome/color selection.  Selects monochrome LCD.  This\nselection has no meaning for a TFT panel."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Bits per pixel", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "LPC17_LCD_BPP24", "default": "n", "cond": "LPC17_LCD_TFTPANEL && LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM"}, {"name": "LPC17_LCD_BPP16_565", "default": "n", "cond": "!LPC17_LCD_TFTPANEL && LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "children": [{"type": 3, "name": "LPC17_LCD_BPP1", "value": "n", "user_value": null, "dep": "n", "prompt": "1 bit per pixel", "cond": "y"}, {"type": 3, "name": "LPC17_LCD_BPP2", "value": "n", "user_value": null, "dep": "n", "prompt": "2 bit per pixel", "cond": "y"}, {"type": 3, "name": "LPC17_LCD_BPP4", "value": "n", "user_value": null, "dep": "n", "prompt": "4 bit per pixel", "cond": "y"}, {"type": 3, "name": "LPC17_LCD_BPP8", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bit per pixel", "cond": "y"}, {"type": 3, "name": "LPC17_LCD_BPP16", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bit per pixel", "cond": "!LPC17_LCD_MONOCHROME && y"}, {"type": 3, "name": "LPC17_LCD_BPP24", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bit per pixel", "cond": "LPC17_LCD_TFTPANEL && y"}, {"type": 3, "name": "LPC17_LCD_BPP16_565", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp, 5:6:5 mode", "cond": "!LPC17_LCD_MONOCHROME && y"}, {"type": 3, "name": "LPC17_LCD_BPP12_444", "value": "n", "user_value": null, "dep": "n", "prompt": "12 bpp, 4:4:4 mode", "cond": "!LPC17_LCD_MONOCHROME && y"}]}, {"type": 24, "name": "LPC17_LCD_BACKCOLOR", "value": "", "user_value": null, "dep": "n", "prompt": "Initial background color", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "0x0", "default": "0x0", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Initial background color"}, {"type": 27, "name": "LPC17_LCD_HWIDTH", "value": "", "user_value": null, "dep": "n", "prompt": "Display width (pixels)", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "480", "default": "480", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Horizontal width the display in pixels"}, {"type": 27, "name": "LPC17_LCD_HPULSE", "value": "", "user_value": null, "dep": "n", "prompt": "Horizontal pulse", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 27, "name": "LPC17_LCD_HFRONTPORCH", "value": "", "user_value": null, "dep": "n", "prompt": "Horizontal front porch", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "5", "default": "5", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 27, "name": "LPC17_LCD_HBACKPORCH", "value": "", "user_value": null, "dep": "n", "prompt": "Horizontal back porch", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "40", "default": "40", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 27, "name": "LPC17_LCD_VHEIGHT", "value": "", "user_value": null, "dep": "n", "prompt": "Display height (rows)", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "272", "default": "272", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Vertical height of the display in rows"}, {"type": 27, "name": "LPC17_LCD_VPULSE", "value": "", "user_value": null, "dep": "n", "prompt": "Vertical pulse", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 27, "name": "LPC17_LCD_VFRONTPORCH", "value": "", "user_value": null, "dep": "n", "prompt": "Vertical front porch", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}, {"type": 27, "name": "LPC17_LCD_VBACKPORCH", "value": "", "user_value": null, "dep": "n", "prompt": "Vertical back porch", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "LPC17_LCD && ARCH_CHIP_LPC17XX && ARCH_ARM"}]}]}, {"type": 31, "dep": "n", "prompt": "USB device driver options", "cond": "LPC17_USBDEV && ARCH_CHIP_LPC17XX && ARCH_ARM", "children": [{"type": 27, "name": "LPC17_USBDEV_EP0_MAXSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "EP0 Max packet size", "cond": "LPC17_USBDEV && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "64", "default": "64", "cond": "LPC17_USBDEV && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Endpoint 0 maximum packet size.  Default: 64"}, {"type": 3, "name": "LPC17_USBDEV_FRAME_INTERRUPT", "value": "n", "user_value": null, "dep": "n", "prompt": "USB frame interrupt", "cond": "LPC17_USBDEV && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC17_USBDEV && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Handle USB Start-Of-Frame events.  Enable reading SOF from interrupt\nhandler vs. simply reading on demand. Probably a bad idea... Unless\nthere is some issue with sampling the SOF from hardware asynchronously."}, {"type": 3, "name": "LPC17_USBDEV_EPFAST_INTERRUPT", "value": "n", "user_value": null, "dep": "n", "prompt": "EP fast interrupt handling", "cond": "LPC17_USBDEV && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC17_USBDEV && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Enable high priority interrupts.  I have no idea why you might want to do that"}, {"type": 27, "name": "LPC17_USBDEV_NDMADESCRIPTORS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of DMA descriptors", "cond": "LPC17_USBDEV && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "LPC17_USBDEV && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Number of DMA descriptors to allocate in SRAM.  Default: 8"}, {"type": 3, "name": "LPC17_USBDEV_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable USB device DMA", "cond": "LPC17_USBDEV && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC17_USBDEV && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Enable lpc17xx-specific DMA support"}, {"type": 3, "name": "LPC17_USBDEV_NOVBUS", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable VBUS support", "cond": "LPC17_USBDEV && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC17_USBDEV && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Define if the hardware implementation does not support the VBUS signal"}, {"type": 3, "name": "LPC17_USBDEV_NOLED", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable USB device LCD support", "cond": "LPC17_USBDEV && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC17_USBDEV && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Define if the hardware implementation does not support the LED output"}, {"type": 3, "name": "LPC17_USBDEV_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register level debug", "cond": "DEBUG_USB_INFO && LPC17_USBDEV && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_USB_INFO && LPC17_USBDEV && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Output detailed register-level USB device debug information.  Requires\nalso CONFIG_DEBUG_USB_INFO."}]}, {"type": 31, "dep": "n", "prompt": "USB host driver options", "cond": "LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM", "children": [{"type": 27, "name": "USBHOST_OHCIRAM_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "OHCI RAM Size", "cond": "LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "16384", "default": "16384", "cond": "LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Total size of OHCI RAM (in AHB SRAM Bank 1).  Default: 16384"}, {"type": 27, "name": "USBHOST_NEDS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of Endpoint Descriptors", "cond": "LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Number of endpoint descriptors.  Default: 2"}, {"type": 27, "name": "USBHOST_NTDS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of transfer descriptors", "cond": "LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "3", "default": "3", "cond": "LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Number of transfer descriptors. Default: 3"}, {"type": 27, "name": "USBHOST_TDBUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of descriptor buffers", "cond": "LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Number of transfer descriptor buffers.  Default: 2"}, {"type": 27, "name": "USBHOST_TDBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Descriptor buffer size", "cond": "LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "128", "default": "128", "cond": "LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Size of one transfer descriptor buffer.  Default 128"}, {"type": 27, "name": "USBHOST_IOBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "I/O buffer size", "cond": "LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "512", "default": "512", "cond": "LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Size of one end-user I/O buffer.  This can be zero if the application\ncan guarantee that all end-user I/O buffers reside in AHB SRAM."}, {"type": 27, "name": "LPC17_USBHOST_NPREALLOC", "value": "", "user_value": null, "dep": "n", "prompt": "Max concurrent transfers", "cond": "LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "USBHOST_HUB && LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM"}, {"name": "4", "default": "4", "cond": "!USBHOST_HUB && LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "This number represents a number of pre-allocated structures to support\nconcurrent data transfers.  This number limits that number of concurrent\nasynchronous IN endpoint transfer that can be supported."}, {"type": 3, "name": "USBHOST_BULK_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable bulk EPs", "cond": "LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Disable support for bulk endpoints."}, {"type": 3, "name": "USBHOST_INT_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable interrupt EPs", "cond": "LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Disable support for interrupt endpoints."}, {"type": 3, "name": "USBHOST_ISOC_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable isochronous EPs", "cond": "LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Disable support for isochronous endpoints."}, {"type": 3, "name": "LPC17_USBHOST_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register level debug", "cond": "DEBUG_USB_INFO && LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_USB_INFO && LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM"}], "help": "Output detailed register-level USB host debug information.  Requires\nalso CONFIG_DEBUG_USB_INFO."}]}, {"type": 6, "dep": "n", "prompt": "LPC214x Configuration Options", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM"}, {"type": 3, "name": "ARCH_CHIP_LPC2148", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM"}]}, {"type": 6, "dep": "n", "prompt": "LPC214x Initialization Options", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Memory Execution Mode", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM", "defaults": [{"name": "DEFAULT_MODE", "default": "n", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM"}], "children": [{"type": 3, "name": "EXTMEM_MODE", "value": "n", "user_value": null, "dep": "n", "prompt": "External Memory Mode", "cond": "y", "help": "Code executes from external memory starting at address 0x8000:0000."}, {"type": 3, "name": "RAM_MODE", "value": "n", "user_value": null, "dep": "n", "prompt": "RAM Memory Mode", "cond": "y", "help": "Code executes from on-chip RAM at address 0x4000:0000."}, {"type": 3, "name": "DEFAULT_MODE", "value": "n", "user_value": null, "dep": "n", "prompt": "Default Memory Mode", "cond": "y", "help": "Executes from 0x0000:0000.  In non-default modes, the MEMAP register\nis set override the settings of the CPU configuration pins."}]}, {"type": 24, "name": "CODE_BASE", "value": "", "user_value": null, "dep": "n", "prompt": "Execution Base Address", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM", "defaults": [{"name": "0x00000000", "default": "0x00000000", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM"}], "help": "This must match the expected address for the selected \"Memory\nExecution Address\":\n\nEXTMEM_MODE:  0x8000:0000\nRAM_MODE:     0x4000:0000\nDEFAULT_MODE: 0x0000:0000"}, {"type": 3, "name": "PLL_SETUP", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure the PLL", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM"}]}, {"type": 3, "name": "MAM_SETUP", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure the Memory Accelerator Module (MAM)", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM"}]}, {"type": 3, "name": "APBDIV_SETUP", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure the APB Divider", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM"}]}, {"type": 27, "name": "APBDIV_VALUE", "value": "", "user_value": null, "dep": "n", "prompt": "APB Divisor", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM"}]}, {"type": 3, "name": "EMC_SETUP", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure EMC", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM"}]}, {"type": 3, "name": "BCFG0_SETUP", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure BCFG0", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM"}]}, {"type": 3, "name": "BCFG1_SETUP", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure BCFG1", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM"}]}, {"type": 3, "name": "BCFG2_SETUP", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure BCFG2", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM"}]}, {"type": 3, "name": "BCFG3_SETUP", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure BCFG3", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM"}]}, {"type": 3, "name": "ADC_SETUP", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure ADC", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM"}]}, {"type": 31, "dep": "n", "prompt": "LPC214x Peripheral Support", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM", "children": [{"type": 3, "name": "LPC214X_UART0", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM"}], "selects": [{"symbol": "UART0_SERIALDRIVER", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM"}]}, {"type": 3, "name": "LPC214X_UART1", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM"}]}, {"type": 3, "name": "LPC214X_USBDEV", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Device", "cond": "USBDEV && ARCH_CHIP_LPC214X && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "USBDEV && ARCH_CHIP_LPC214X && ARCH_ARM"}]}]}, {"type": 3, "name": "LPC214x_FIO", "value": "n", "user_value": null, "dep": "n", "prompt": "Fast GPIO", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC214X && ARCH_ARM"}]}, {"type": 31, "dep": "n", "prompt": "LPC214x USB Device Configuration", "cond": "LPC214X_USBDEV && ARCH_CHIP_LPC214X && ARCH_ARM", "children": [{"type": 3, "name": "LPC214X_USBDEV_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Device DMA Support", "cond": "LPC214X_USBDEV && ARCH_CHIP_LPC214X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC214X_USBDEV && ARCH_CHIP_LPC214X && ARCH_ARM"}], "children": [{"type": 24, "name": "LPC214X_USBDEV_DMAINTMASK", "value": "", "user_value": null, "dep": "n", "prompt": "DMA interrupt mask", "cond": "LPC214X_USBDEV_DMA && LPC214X_USBDEV && ARCH_CHIP_LPC214X && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "LPC214X_USBDEV_DMA && LPC214X_USBDEV && ARCH_CHIP_LPC214X && ARCH_ARM"}]}, {"type": 27, "name": "LPC214X_USBDEV_NDMADESCRIPTORS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of USB DMA Descriptors", "cond": "LPC214X_USBDEV_DMA && LPC214X_USBDEV && ARCH_CHIP_LPC214X && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "LPC214X_USBDEV_DMA && LPC214X_USBDEV && ARCH_CHIP_LPC214X && ARCH_ARM"}]}]}, {"type": 3, "name": "LPC214X_USBDEV_EPFAST_INTERRUPT", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Device Fast Endpoint Interrupts", "cond": "LPC214X_USBDEV && ARCH_CHIP_LPC214X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC214X_USBDEV && ARCH_CHIP_LPC214X && ARCH_ARM"}]}, {"type": 3, "name": "LPC214X_USBDEV_FRAME_INTERRUPT", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Device Frame Interrupts", "cond": "LPC214X_USBDEV && ARCH_CHIP_LPC214X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC214X_USBDEV && ARCH_CHIP_LPC214X && ARCH_ARM"}]}, {"type": 3, "name": "LPC214X_USBDEV_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Device Register-Level Debug Output", "cond": "DEBUG_FEATURES && LPC214X_USBDEV && ARCH_CHIP_LPC214X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && LPC214X_USBDEV && ARCH_CHIP_LPC214X && ARCH_ARM"}]}]}, {"type": 6, "dep": "n", "prompt": "LPC2378 Configuration Options", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Memory Execution Mode", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "LPC2378_DEFAULT_MODE", "default": "n", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}], "children": [{"type": 3, "name": "LPC2378_EXTMEM_MODE", "value": "n", "user_value": null, "dep": "n", "prompt": "External Memory Mode", "cond": "EXPERIMENTAL && y", "help": "Code executes from external memory starting at address 0x8000:0000."}, {"type": 3, "name": "LPC2378_RAM_MODE", "value": "n", "user_value": null, "dep": "n", "prompt": "RAM Memory Mode", "cond": "EXPERIMENTAL && y", "help": "Code executes from on-chip RAM at address 0x4000:0000."}, {"type": 3, "name": "LPC2378_DEFAULT_MODE", "value": "n", "user_value": null, "dep": "n", "prompt": "Default Memory Mode", "cond": "y", "help": "Executes from 0x0000:0000.  In non-default modes, the MEMAP register\nis set override the settings of the CPU configuration pins."}]}, {"type": 24, "name": "LPC2378_CODE_BASE", "value": "", "user_value": null, "dep": "n", "prompt": "Execution Base Address", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "0x00000000", "default": "0x00000000", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}], "help": "This must match the expected address for the selected \"Memory\nExecution Address\":\n\nLPC2378_EXTMEM_MODE:  0x8000:0000\nLPC2378_RAM_MODE:     0x4000:0000\nLPC2378_DEFAULT_MODE: 0x0000:0000"}, {"type": 3, "name": "LPC2378_PLL_SETUP", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure the PLL", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}], "children": [{"type": 27, "name": "LPC2378_PLL_CLKSRC", "value": "", "user_value": null, "dep": "n", "prompt": "PLL clock source", "cond": "LPC2378_PLL_SETUP && ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "LPC2378_PLL_SETUP && ARCH_CHIP_LPC2378 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "2", "cond": "LPC2378_PLL_SETUP && ARCH_CHIP_LPC2378 && ARCH_ARM"}], "help": "PLL clock source"}]}, {"type": 3, "name": "LPC2378_MAM_SETUP", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure the Memory Accelerator Module (MAM)", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}]}, {"type": 27, "name": "LPC2378_MAMCR_VALUE", "value": "", "user_value": null, "dep": "n", "prompt": "Memory accelerator mode", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "2", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}], "help": "Memory accelerator mode:\n\nOFF             0\nPART    1\nFULL    2"}, {"type": 27, "name": "LPC2378_MAMTIM_VALUE", "value": "", "user_value": null, "dep": "n", "prompt": "Memory accelerator timing value", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "3", "default": "3", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}], "help": "Memory accelerator timing value"}, {"type": 3, "name": "LPC2378_APBDIV_SETUP", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure the APB Divider", "cond": "EXPERIMENTAL && ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "EXPERIMENTAL && ARCH_CHIP_LPC2378 && ARCH_ARM"}]}, {"type": 27, "name": "LPC2378_APBDIV_VALUE", "value": "", "user_value": null, "dep": "n", "prompt": "APB Divisor", "cond": "EXPERIMENTAL && ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "EXPERIMENTAL && ARCH_CHIP_LPC2378 && ARCH_ARM"}]}, {"type": 3, "name": "LPC2378_EMC_SETUP", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure EMC", "cond": "EXPERIMENTAL && ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_LPC2378 && ARCH_ARM"}]}, {"type": 3, "name": "LPC2378_BCFG0_SETUP", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure BCFG0", "cond": "EXPERIMENTAL && ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_LPC2378 && ARCH_ARM"}]}, {"type": 3, "name": "LPC2378_BCFG1_SETUP", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure BCFG1", "cond": "EXPERIMENTAL && ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_LPC2378 && ARCH_ARM"}]}, {"type": 3, "name": "LPC2378_BCFG2_SETUP", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure BCFG2", "cond": "EXPERIMENTAL && ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_LPC2378 && ARCH_ARM"}]}, {"type": 3, "name": "BCFG3_SETUP", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure BCFG3", "cond": "EXPERIMENTAL && ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_LPC2378 && ARCH_ARM"}]}, {"type": 3, "name": "LPC2378_ADC_SETUP", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure ADC", "cond": "EXPERIMENTAL && ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "EXPERIMENTAL && ARCH_CHIP_LPC2378 && ARCH_ARM"}]}, {"type": 31, "dep": "n", "prompt": "LPC2378 Peripheral Support", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM", "children": [{"type": 3, "name": "LPC2378_UART0", "value": "n", "user_value": null, "dep": "n", "prompt": "UART0", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}], "selects": [{"symbol": "UART0_SERIALDRIVER", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}]}, {"type": 3, "name": "LPC2378_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}]}, {"type": 3, "name": "LPC2378_UART2", "value": "n", "user_value": null, "dep": "n", "prompt": "UART2", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}], "selects": [{"symbol": "UART2_SERIALDRIVER", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}]}, {"type": 3, "name": "LPC2378_UART3", "value": "n", "user_value": null, "dep": "n", "prompt": "UART3", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}], "selects": [{"symbol": "UART3_SERIALDRIVER", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}]}, {"type": 3, "name": "LPC2378_USBDEV", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Device", "cond": "USBDEV && ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "USBDEV && ARCH_CHIP_LPC2378 && ARCH_ARM"}]}, {"type": 3, "name": "LPC2378_I2C0", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C0", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}], "selects": [{"symbol": "I2C", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}]}, {"type": 3, "name": "LPC2378_I2C1", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C1", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}], "selects": [{"symbol": "I2C", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}]}, {"type": 3, "name": "LPC2378_I2C2", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C2", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}], "selects": [{"symbol": "I2C", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}]}, {"type": 3, "name": "LPC2378_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "ARCH_CHIP_LPC2378 && ARCH_ARM"}]}]}, {"type": 31, "dep": "n", "prompt": "LPC2378 USB Device Configuration", "cond": "LPC2378_USBDEV && ARCH_CHIP_LPC2378 && ARCH_ARM", "children": [{"type": 3, "name": "LPC2378_USBDEV_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Device DMA Support", "cond": "LPC2378_USBDEV && ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC2378_USBDEV && ARCH_CHIP_LPC2378 && ARCH_ARM"}], "children": [{"type": 27, "name": "LPC2378_USBDEV_NDMADESCRIPTORS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of USB DMA Descriptors", "cond": "LPC2378_USBDEV_DMA && LPC2378_USBDEV && ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "LPC2378_USBDEV_DMA && LPC2378_USBDEV && ARCH_CHIP_LPC2378 && ARCH_ARM"}]}]}, {"type": 3, "name": "LPC2378_USBDEV_EPFAST_INTERRUPT", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Device Fast Endpoint Interrupts", "cond": "LPC2378_USBDEV && ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC2378_USBDEV && ARCH_CHIP_LPC2378 && ARCH_ARM"}]}, {"type": 3, "name": "LPC2378_USBDEV_FRAME_INTERRUPT", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Device Frame Interrupts", "cond": "LPC2378_USBDEV && ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC2378_USBDEV && ARCH_CHIP_LPC2378 && ARCH_ARM"}]}, {"type": 3, "name": "LPC2378_USBDEV_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Device Register-Level Debug Output", "cond": "DEBUG_FEATURES && LPC2378_USBDEV && ARCH_CHIP_LPC2378 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && LPC2378_USBDEV && ARCH_CHIP_LPC2378 && ARCH_ARM"}]}]}, {"type": 6, "dep": "n", "prompt": "LPC31xx Configuration Options", "cond": "ARCH_CHIP_LPC31XX && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "LPC31 Chip Selection", "cond": "ARCH_CHIP_LPC31XX && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "ARCH_CHIP_LPC3131", "default": "n", "cond": "ARCH_CHIP_LPC31XX && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_LPC3130", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC3130", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_EXTNAND", "cond": "y"}, {"symbol": "ARCH_HAVE_EXTSRAM0", "cond": "y"}, {"symbol": "ARCH_HAVE_EXTSRAM1", "cond": "y"}, {"symbol": "ARCH_HAVE_EXTDRAM", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC3131", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC3131", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_EXTNAND", "cond": "y"}, {"symbol": "ARCH_HAVE_EXTSRAM0", "cond": "y"}, {"symbol": "ARCH_HAVE_EXTSRAM1", "cond": "y"}, {"symbol": "ARCH_HAVE_EXTDRAM", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC3152", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC3152", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_EXTNAND", "cond": "y"}, {"symbol": "ARCH_HAVE_EXTSRAM0", "cond": "y"}, {"symbol": "ARCH_HAVE_EXTSRAM1", "cond": "y"}, {"symbol": "ARCH_HAVE_EXTDRAM", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_LPC3154", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC3154", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_EXTNAND", "cond": "y"}, {"symbol": "ARCH_HAVE_EXTSRAM0", "cond": "y"}, {"symbol": "ARCH_HAVE_EXTSRAM1", "cond": "y"}, {"symbol": "ARCH_HAVE_EXTDRAM", "cond": "y"}]}]}, {"type": 27, "name": "LPC31_SDRAMHCLK", "value": "", "user_value": null, "dep": "n", "prompt": "External SDRAM HCLK", "cond": "LPC31_EXTSDRAM && ARCH_CHIP_LPC31XX && ARCH_ARM", "help": "The SDRAM HCLK may be specified here (if not, it will be calculated)."}, {"type": 31, "dep": "n", "prompt": "LPC31xx Peripheral Support", "cond": "ARCH_CHIP_LPC31XX && ARCH_ARM", "children": [{"type": 3, "name": "LPC31_UART", "value": "n", "user_value": null, "dep": "n", "prompt": "UART", "cond": "ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC31XX && ARCH_ARM"}], "selects": [{"symbol": "UART_SERIALDRIVER", "cond": "ARCH_CHIP_LPC31XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC31_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC31XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC31_USBOTG", "value": "n", "user_value": null, "dep": "n", "prompt": "USB OTG", "cond": "ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC31XX && ARCH_ARM"}], "selects": [{"symbol": "USBHOST_HAVE_ASYNCH", "cond": "ARCH_CHIP_LPC31XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC31_MCI", "value": "n", "user_value": null, "dep": "n", "prompt": "MCI", "cond": "ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC31XX && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SDIO", "cond": "ARCH_CHIP_LPC31XX && ARCH_ARM"}]}]}, {"type": 31, "dep": "n", "prompt": "External Memory Configuration", "cond": "ARCH_CHIP_LPC31XX && ARCH_ARM", "children": [{"type": 3, "name": "ARCH_HAVE_EXTNAND", "value": "n", "user_value": null, "rev_dep": "(LPC17_EMC && ARCH_FAMILY_LPC178X && ARCH_CHIP_LPC17XX && ARCH_ARM) || (ARCH_CHIP_LPC3130 && y) || (ARCH_CHIP_LPC3131 && y) || (ARCH_CHIP_LPC3152 && y) || (ARCH_CHIP_LPC3154 && y) || (ARCH_CHIP_ATSAM3X8E && y) || (ARCH_CHIP_ATSAM3X4E && y) || (ARCH_CHIP_SAM3U && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4E && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4S && ARCH_CHIP_SAM34 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "ARCH_HAVE_EXTDRAM", "value": "n", "user_value": null, "rev_dep": "(LPC17_EMC && ARCH_FAMILY_LPC178X && ARCH_CHIP_LPC17XX && ARCH_ARM) || (ARCH_CHIP_LPC3130 && y) || (ARCH_CHIP_LPC3131 && y) || (ARCH_CHIP_LPC3152 && y) || (ARCH_CHIP_LPC3154 && y)", "dep": "n"}, {"type": 3, "name": "ARCH_HAVE_EXTSRAM0", "value": "n", "user_value": null, "rev_dep": "(LPC17_EMC && ARCH_FAMILY_LPC178X && ARCH_CHIP_LPC17XX && ARCH_ARM) || (ARCH_CHIP_LPC3130 && y) || (ARCH_CHIP_LPC3131 && y) || (ARCH_CHIP_LPC3152 && y) || (ARCH_CHIP_LPC3154 && y) || (ARCH_CHIP_ATSAM3X8E && y) || (ARCH_CHIP_ATSAM3X4E && y) || (ARCH_CHIP_SAM3U && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4E && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4S && ARCH_CHIP_SAM34 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "ARCH_HAVE_EXTSRAM1", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LPC3130 && y) || (ARCH_CHIP_LPC3131 && y) || (ARCH_CHIP_LPC3152 && y) || (ARCH_CHIP_LPC3154 && y) || (ARCH_CHIP_ATSAM3X8E && y) || (ARCH_CHIP_ATSAM3X4E && y) || (ARCH_CHIP_SAM3U && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4E && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4S && ARCH_CHIP_SAM34 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "LPC31_EXTNAND", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure external NAND", "cond": "ARCH_HAVE_EXTNAND && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_EXTNAND && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "help": "Configure external NAND memory and, if applicable, map then external\nNAND into the memory map.", "children": [{"type": 27, "name": "LPC31_EXTNANDSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "External NAND size", "cond": "LPC31_EXTNAND && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "LPC31_EXTNAND && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "help": "Size of the external NAND in bytes."}]}, {"type": 3, "name": "LPC31_EXTDRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure external DRAM", "cond": "ARCH_HAVE_EXTDRAM && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_EXTDRAM && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SDRAM", "cond": "ARCH_HAVE_EXTDRAM && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "help": "Configure external DRAM memory and, if applicable, map then external\nDRAM into the memory map.", "children": [{"type": 27, "name": "LPC31_EXTDRAMSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "External SDRAM size", "cond": "LPC31_EXTDRAM && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "LPC31_EXTDRAM && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "help": "Size of the external SDRAM in bytes."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SDRAM Width Selection", "cond": "LPC31_EXTDRAM && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "LPC31_SDRAM_16BIT", "default": "n", "cond": "LPC31_EXTDRAM && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "children": [{"type": 3, "name": "LPC31_SDRAM_8BIT", "value": "n", "user_value": null, "dep": "n", "prompt": "8-bit", "cond": "y"}, {"type": 3, "name": "LPC31_SDRAM_16BIT", "value": "n", "user_value": null, "dep": "n", "prompt": "16-bit", "cond": "y"}, {"type": 3, "name": "LPC31_SDRAM_32BIT", "value": "n", "user_value": null, "dep": "n", "prompt": "32-bit", "cond": "y"}]}, {"type": 3, "name": "LPC31_EXTDRAMHEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Add external SDRAM to the heap", "cond": "LPC31_EXTDRAM && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "LPC31_EXTDRAM && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "help": "Add the external SDRAM into the heap."}]}, {"type": 3, "name": "LPC31_EXTSRAM0", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure external SRAM (Bank 0)", "cond": "ARCH_HAVE_EXTSRAM0 && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_EXTSRAM0 && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "help": "Configure external SRAM Bank 0 memory and, if applicable, map then\nexternal SRAM Bank 0 into the memory map.", "children": [{"type": 27, "name": "LPC31_EXTSRAM0SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "External SRAM size", "cond": "LPC31_EXTSRAM0 && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "LPC31_EXTSRAM0 && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "help": "Size of the external SRAM Bank 0 in bytes."}, {"type": 3, "name": "LPC31_EXTSRAM0HEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Add external SRAM (Bank 0) to the heap", "cond": "LPC31_EXTSRAM0 && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "LPC31_EXTSRAM0 && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "help": "Add external SRAM Bank 0 into the heap."}]}, {"type": 3, "name": "LPC31_EXTSRAM1", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure external SRAM (Bank 1)", "cond": "ARCH_HAVE_EXTSRAM1 && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_EXTSRAM1 && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "help": "Configure external SRAM Bank 1 memory and, if applicable, map then\nexternal SRAM Bank 1 into the memory map.", "children": [{"type": 27, "name": "LPC31_EXTSRAM1SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "External SRAM1 size", "cond": "LPC31_EXTSRAM1 && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "LPC31_EXTSRAM1 && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "help": "Size of the external SRAM Bank 1 in bytes."}, {"type": 3, "name": "LPC31_EXTSRAM1HEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Add external SRAM (Bank 1) to the heap", "cond": "LPC31_EXTSRAM1 && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "LPC31_EXTSRAM1 && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "help": "Add external SRAM Bank 1 into the heap."}]}]}, {"type": 31, "dep": "n", "prompt": "LPC31xx UART Configuration", "cond": "LPC31_UART && ARCH_CHIP_LPC31XX && ARCH_ARM", "children": [{"type": 3, "name": "LPC31_UART_PRECALCULATED", "value": "n", "user_value": null, "dep": "n", "prompt": "Use pre-calculated BAD configuration", "cond": "LPC31_UART && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC31_UART && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "children": [{"type": 27, "name": "LPC31_UART_DIVADDVAL", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD pre-scaler divisor", "cond": "LPC31_UART_PRECALCULATED && LPC31_UART && ARCH_CHIP_LPC31XX && ARCH_ARM", "help": "BAUD pre-scaler divisor"}, {"type": 27, "name": "LPC31_UART_DIVISOR", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD divisor", "cond": "LPC31_UART_PRECALCULATED && LPC31_UART && ARCH_CHIP_LPC31XX && ARCH_ARM", "help": "BAUD divisor"}, {"type": 27, "name": "LPC31_UART_MULVAL", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD multiplier", "cond": "LPC31_UART_PRECALCULATED && LPC31_UART && ARCH_CHIP_LPC31XX && ARCH_ARM", "help": "BAUD multiplier"}]}]}, {"type": 31, "dep": "n", "prompt": "USB device controller driver (DCD) options", "cond": "LPC31_USBOTG && USBDEV && ARCH_CHIP_LPC31XX && ARCH_ARM", "children": [{"type": 27, "name": "LPC31_USBDEV_EP0_MAXSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "EP0 Max packet size", "cond": "LPC31_USBOTG && USBDEV && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "64", "default": "64", "cond": "LPC31_USBOTG && USBDEV && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "help": "Endpoint 0 maximum packet size.  Default: 64"}, {"type": 3, "name": "LPC31_USBDEV_FRAME_INTERRUPT", "value": "n", "user_value": null, "dep": "n", "prompt": "USB frame interrupt", "cond": "LPC31_USBOTG && USBDEV && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC31_USBOTG && USBDEV && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "help": "Handle USB Start-Of-Frame events.  Enable reading SOF from interrupt\nhandler vs. simply reading on demand. Probably a bad idea... Unless\nthere is some issue with sampling the SOF from hardware asynchronously."}, {"type": 3, "name": "LPC31_USBDEV_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable USB device DMA", "cond": "LPC31_USBOTG && USBDEV && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC31_USBOTG && USBDEV && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "help": "Enable lpc31xx-specific DMA support"}, {"type": 3, "name": "LPC31_USBDEV_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register level debug", "cond": "DEBUG_USB_INFO && LPC31_USBOTG && USBDEV && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_USB_INFO && LPC31_USBOTG && USBDEV && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "help": "Output detailed register-level USB device debug information.  Requires\nalso CONFIG_DEBUG_USB_INFO."}]}, {"type": 31, "dep": "n", "prompt": "USB host controller driver (HCD) options", "cond": "LPC31_USBOTG && USBHOST && ARCH_CHIP_LPC31XX && ARCH_ARM", "children": [{"type": 3, "name": "LPC31_EHCI_SDIS", "value": "n", "user_value": null, "dep": "n", "prompt": "Stream disable", "cond": "LPC31_USBOTG && USBHOST && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC31_USBOTG && USBHOST && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "help": "Selecting this option ensures that overruns/underruns of the latency\nFIFO are eliminated for low bandwidth systems where the RX and TX\nbuffers are sufficient to contain the entire packet. Enabling stream\ndisable also has the effect of ensuring the TX latency is filled\nto capacity before the packet is launched onto the USB.\n\nNote: Time duration to pre-fill the FIFO becomes significant when stream disable is active."}, {"type": 27, "name": "LPC31_EHCI_NQHS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of Queue Head (QH) structures", "cond": "LPC31_USBOTG && USBHOST && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "LPC31_USBOTG && USBHOST && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "help": "Configurable number of Queue Head (QH) structures.  The default is\none per Root hub port plus one for EP0 (4)."}, {"type": 27, "name": "LPC31_EHCI_NQTDS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of Queue Element Transfer Descriptor (qTDs)", "cond": "LPC31_USBOTG && USBHOST && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "6", "default": "6", "cond": "LPC31_USBOTG && USBHOST && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "help": "Configurable number of Queue Element Transfer Descriptor (qTDs).\nThe default is one per root hub plus three from EP0 (6)."}, {"type": 27, "name": "LPC31_EHCI_BUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Size of one request/descriptor buffer", "cond": "LPC31_USBOTG && USBHOST && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "128", "default": "128", "cond": "LPC31_USBOTG && USBHOST && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "help": "The size of one request/descriptor buffer in bytes.  The TD buffe\nsize must be an even number of 32-bit words and must be large enough\nto hangle the largest transfer via a SETUP request."}, {"type": 3, "name": "LPC31_EHCI_PREALLOCATE", "value": "n", "user_value": null, "dep": "n", "prompt": "Preallocate descriptor pool", "cond": "LPC31_USBOTG && USBHOST && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "LPC31_USBOTG && USBHOST && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "help": "Select this option to pre-allocate EHCI queue and descriptor\nstructure pools in .bss.  Otherwise, these pools will be\ndynamically allocated using kmm_memalign()."}, {"type": 3, "name": "LPC31_EHCI_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable low-level EHCI register debug", "cond": "DEBUG_USB_INFO && LPC31_USBOTG && USBHOST && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_USB_INFO && LPC31_USBOTG && USBHOST && ARCH_CHIP_LPC31XX && ARCH_ARM"}]}]}, {"type": 31, "dep": "n", "prompt": "SPI device driver options", "cond": "ARCH_CHIP_LPC31XX && ARCH_ARM", "children": [{"type": 3, "name": "LPC31_SPI_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI Register level debug", "cond": "LPC31_SPI && DEBUG_SPI_INFO && ARCH_CHIP_LPC31XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC31_SPI && DEBUG_SPI_INFO && ARCH_CHIP_LPC31XX && ARCH_ARM"}], "help": "Output detailed register-level SPI device debug information.  Requires also CONFIG_DEBUG_SPI_INFO."}]}, {"type": 6, "dep": "n", "prompt": "LPC43xx Configuration Options", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "LPC43XX Chip Selection", "cond": "ARCH_CHIP_LPC43XX && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "ARCH_CHIP_LPC4330FET100", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_LPC4310FBD144", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC4310FBD144", "cond": "y"}, {"type": 3, "name": "ARCH_CHIP_LPC4310FET100", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC4310FET100", "cond": "y"}, {"type": 3, "name": "ARCH_CHIP_LPC4320FBD144", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC4320FBD144", "cond": "y"}, {"type": 3, "name": "ARCH_CHIP_LPC4320FET100", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC4320FET100", "cond": "y"}, {"type": 3, "name": "ARCH_CHIP_LPC4330FBD144", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC4330FBD144", "cond": "y"}, {"type": 3, "name": "ARCH_CHIP_LPC4330FET100", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC4330FET100", "cond": "y"}, {"type": 3, "name": "ARCH_CHIP_LPC4330FET180", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC4330FET180", "cond": "y"}, {"type": 3, "name": "ARCH_CHIP_LPC4330FET256", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC4330FET256", "cond": "y"}, {"type": 3, "name": "ARCH_CHIP_LPC4337JBD144", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC4337JBD144", "cond": "y"}, {"type": 3, "name": "ARCH_CHIP_LPC4337JET100", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC4337JET100", "cond": "y"}, {"type": 3, "name": "ARCH_CHIP_LPC4337FET256", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC4337FET256", "cond": "y"}, {"type": 3, "name": "ARCH_CHIP_LPC4350FBD208", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC4350FBD208", "cond": "y"}, {"type": 3, "name": "ARCH_CHIP_LPC4350FET180", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC4350FET180", "cond": "y"}, {"type": 3, "name": "ARCH_CHIP_LPC4350FET256", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC4350FET256", "cond": "y"}, {"type": 3, "name": "ARCH_CHIP_LPC4353FBD208", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC4353FBD208", "cond": "y"}, {"type": 3, "name": "ARCH_CHIP_LPC4353FET180", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC4353FET180", "cond": "y"}, {"type": 3, "name": "ARCH_CHIP_LPC4353FET256", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC4353FET256", "cond": "y"}, {"type": 3, "name": "ARCH_CHIP_LPC4357FET180", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC4357FET180", "cond": "y"}, {"type": 3, "name": "ARCH_CHIP_LPC4357FBD208", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC4357FBD208", "cond": "y"}, {"type": 3, "name": "ARCH_CHIP_LPC4357FET256", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC4357FET256", "cond": "y"}, {"type": 3, "name": "ARCH_CHIP_LPC4370FET100", "value": "n", "user_value": null, "dep": "n", "prompt": "LPC4370FET100", "cond": "y"}]}, {"type": 3, "name": "ARCH_FAMILY_LPC4310", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "(ARCH_CHIP_LPC4310FBD144 || ARCH_CHIP_LPC4310FET100) && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_TICKLESS", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_LPC4320", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "(ARCH_CHIP_LPC4320FBD144 || ARCH_CHIP_LPC4320FET100) && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_TICKLESS", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_AHB_SRAM_BANK1", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_LPC4330", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "(ARCH_CHIP_LPC4330FBD144 || ARCH_CHIP_LPC4330FET100 || ARCH_CHIP_LPC4330FET180 || ARCH_CHIP_LPC4330FET256 || ARCH_CHIP_LPC4337JET100) && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_TICKLESS", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_AHB_SRAM_BANK1", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_LPC4337", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "(ARCH_CHIP_LPC4337JBD144 || ARCH_CHIP_LPC4337FET256) && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_TICKLESS", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_AHB_SRAM_BANK1", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_LPC4350", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "(ARCH_CHIP_LPC4350FBD208 || ARCH_CHIP_LPC4350FET180 || ARCH_CHIP_LPC4350FET256) && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_TICKLESS", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_AHB_SRAM_BANK1", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_LPC4353", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "(ARCH_CHIP_LPC4353FBD208 || ARCH_CHIP_LPC4353FET180 || ARCH_CHIP_LPC4353FET256) && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_TICKLESS", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_AHB_SRAM_BANK1", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_LPC4357", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "(ARCH_CHIP_LPC4357FET180 || ARCH_CHIP_LPC4357FBD208 || ARCH_CHIP_LPC4357FET256) && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_TICKLESS", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_AHB_SRAM_BANK1", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_LPC4370", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_LPC4370FET100 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_TICKLESS", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_AHB_SRAM_BANK1", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "LPC43XX Boot Configuration", "cond": "ARCH_CHIP_LPC43XX && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "LPC43_BOOT_SRAM", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "The startup code needs to know if the code is running from internal FLASH,\nexternal FLASH, SPIFI, or SRAM in order to initialize properly.  Note that\na boot device is not specified for cases where the code is copied into SRAM;\nthose cases are all covered by LPC43_BOOT_SRAM.", "children": [{"type": 3, "name": "LPC43_BOOT_SRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "Running from SRAM", "cond": "y"}, {"type": 3, "name": "LPC43_BOOT_SPIFI", "value": "n", "user_value": null, "dep": "n", "prompt": "Running from QuadFLASH", "cond": "y"}, {"type": 3, "name": "LPC43_BOOT_FLASHA", "value": "n", "user_value": null, "dep": "n", "prompt": "Running in internal FLASHA", "cond": "y"}, {"type": 3, "name": "LPC43_BOOT_FLASHB", "value": "n", "user_value": null, "dep": "n", "prompt": "Running in internal FLASHA", "cond": "y"}, {"type": 3, "name": "LPC43_BOOT_CS0FLASH", "value": "n", "user_value": null, "dep": "n", "prompt": "Running in external FLASH CS0", "cond": "y"}, {"type": 3, "name": "LPC43_BOOT_CS1FLASH", "value": "n", "user_value": null, "dep": "n", "prompt": "Running in external FLASH CS1", "cond": "y"}, {"type": 3, "name": "LPC43_BOOT_CS2FLASH", "value": "n", "user_value": null, "dep": "n", "prompt": "Running in external FLASH CS2", "cond": "y"}, {"type": 3, "name": "LPC43_BOOT_CS3FLASH", "value": "n", "user_value": null, "dep": "n", "prompt": "Running in external FLASH CS3", "cond": "y"}]}, {"type": 31, "dep": "n", "prompt": "LPC43xx Peripheral Support", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "children": [{"type": 3, "name": "LPC43_ADC0", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC0", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC1", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_ATIMER", "value": "n", "user_value": null, "dep": "n", "prompt": "Alarm timer", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_CAN1", "value": "n", "user_value": null, "dep": "n", "prompt": "C_CAN1", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_CAN2", "value": "n", "user_value": null, "dep": "n", "prompt": "C_CAN1", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_EMC", "value": "n", "user_value": null, "dep": "n", "prompt": "External Memory Controller (EMC)", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_EXTSDRAM0", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_EXTSDRAM1", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_EXTSDRAM2", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_EXTSDRAM3", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_ETHERNET", "value": "n", "user_value": null, "dep": "n", "prompt": "Ethernet", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "NETDEVICES", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_PHY", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_EVNTMNTR", "value": "n", "user_value": null, "dep": "n", "prompt": "Event Monitor", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_GPDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "GPDMA", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_I2C0", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C0", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_I2C1", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C1", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_I2S0", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S0", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_I2S1", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S1", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_LCD", "value": "n", "user_value": null, "dep": "n", "prompt": "LCD", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_MCPWM", "value": "n", "user_value": null, "dep": "n", "prompt": "Motor Control PWM (MCPWM)", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_QEI", "value": "n", "user_value": null, "dep": "n", "prompt": "Quadrature Controller Interface (QEI)", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_RIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Repetitive Interrupt Timer (RIT)", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}], "children": [{"type": 27, "name": "LPC43_RIT_RES", "value": "", "user_value": null, "dep": "n", "prompt": "Interrupt schedule resolution (nS)", "cond": "LPC43_RIT && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "250", "default": "250", "cond": "LPC43_RIT && ARCH_CHIP_LPC43XX && ARCH_ARM"}]}]}, {"type": 3, "name": "LPC43_RTC", "value": "n", "user_value": null, "dep": "n", "prompt": "Real Time Clock (RTC)", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_SCT", "value": "n", "user_value": null, "dep": "n", "prompt": "State Configurable Timer (SCT)", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_SDMMC", "value": "n", "user_value": null, "dep": "n", "prompt": "SD/MMC", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_SPIFI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI Flash Interface (SPIFI)", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_SSP0", "value": "n", "user_value": null, "dep": "n", "prompt": "SSP0", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_SSP1", "value": "n", "user_value": null, "dep": "n", "prompt": "SSP1", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_TMR0", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 0", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "LPC43_TIMER", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_TMR1", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 1", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_TMR2", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 2", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "LPC43_TIMER", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_TMR3", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 3", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "LPC43_TIMER", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_TIMER", "value": "n", "user_value": null, "rev_dep": "(LPC43_TMR0 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (LPC43_TMR2 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (LPC43_TMR3 && ARCH_CHIP_LPC43XX && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_EXTCLK", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_USART0", "value": "n", "user_value": null, "dep": "n", "prompt": "USART0", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "USART0_SERIALDRIVER", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_USART2", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "USART2_SERIALDRIVER", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_USART3", "value": "n", "user_value": null, "dep": "n", "prompt": "USART3", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "USART3_SERIALDRIVER", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_USBOTG", "value": "n", "user_value": null, "dep": "n", "prompt": "USB EHCI", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "USBHOST_HAVE_ASYNCH", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_USB0", "value": "n", "user_value": null, "dep": "n", "prompt": "USB0", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_USB1", "value": "n", "user_value": null, "dep": "n", "prompt": "USB1", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_WWDT", "value": "n", "user_value": null, "dep": "n", "prompt": "Windowing Watchdog Timer (WWDT)", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}]}]}, {"type": 31, "dep": "n", "prompt": "ADC driver options", "cond": "(LPC43_ADC0 || LPC43_ADC1) && ARCH_CHIP_LPC43XX && ARCH_ARM", "children": [{"type": 24, "name": "ADC0_MASK", "value": "", "user_value": null, "dep": "n", "prompt": "ADC0 mask", "cond": "(LPC43_ADC0 || LPC43_ADC1) && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "0x01", "default": "0x01", "cond": "(LPC43_ADC0 || LPC43_ADC1) && ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 27, "name": "ADC0_FREQ", "value": "", "user_value": null, "dep": "n", "prompt": "ADC0 frequency", "cond": "(LPC43_ADC0 || LPC43_ADC1) && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "4500000", "default": "4500000", "cond": "(LPC43_ADC0 || LPC43_ADC1) && ARCH_CHIP_LPC43XX && ARCH_ARM"}]}]}, {"type": 3, "name": "LPC43_GPIO_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIO interrupt support", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Enable support for GPIO interrupts"}, {"type": 31, "dep": "n", "prompt": "Internal Memory Configuration", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "children": [{"type": 3, "name": "ARCH_HAVE_AHB_SRAM_BANK1", "value": "n", "user_value": null, "rev_dep": "(ARCH_FAMILY_LPC4320 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (ARCH_FAMILY_LPC4330 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (ARCH_FAMILY_LPC4337 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (ARCH_FAMILY_LPC4350 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (ARCH_FAMILY_LPC4353 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (ARCH_FAMILY_LPC4357 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (ARCH_FAMILY_LPC4370 && ARCH_CHIP_LPC43XX && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "LPC43_USE_LOCSRAM_BANK1", "value": "n", "user_value": null, "dep": "n", "prompt": "Use local SRAM bank 1 memory region", "cond": "!LPC43_BOOT_SRAM && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!LPC43_BOOT_SRAM && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Add local SRAM bank 1 memory region."}, {"type": 3, "name": "LPC43_USE_AHBSRAM_BANK0", "value": "n", "user_value": null, "dep": "n", "prompt": "Use AHB SRAM bank 0 memory region", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Add local AHB SRAM bank 0 memory region."}, {"type": 3, "name": "LPC43_USE_AHBSRAM_BANK1", "value": "n", "user_value": null, "dep": "n", "prompt": "Use AHB SRAM bank 1 memory region", "cond": "ARCH_HAVE_AHB_SRAM_BANK1 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_AHB_SRAM_BANK1 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Add local AHB SRAM bank 1 memory region."}, {"type": 3, "name": "LPC43_HEAP_AHBSRAM_BANK2", "value": "n", "user_value": null, "dep": "n", "prompt": "Use AHB SRAM bank 2 (ETB SRAM) memory region", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Add local AHB SRAM bank 2 (ETB SRAM) memory region."}]}, {"type": 31, "dep": "n", "prompt": "External Memory Configuration", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "children": [{"type": 3, "name": "ARCH_HAVE_EXTSDRAM0", "value": "n", "user_value": null, "rev_dep": "LPC43_EMC && ARCH_CHIP_LPC43XX && ARCH_ARM", "dep": "n"}, {"type": 3, "name": "ARCH_HAVE_EXTSDRAM1", "value": "n", "user_value": null, "rev_dep": "LPC43_EMC && ARCH_CHIP_LPC43XX && ARCH_ARM", "dep": "n"}, {"type": 3, "name": "ARCH_HAVE_EXTSDRAM2", "value": "n", "user_value": null, "rev_dep": "LPC43_EMC && ARCH_CHIP_LPC43XX && ARCH_ARM", "dep": "n"}, {"type": 3, "name": "ARCH_HAVE_EXTSDRAM3", "value": "n", "user_value": null, "rev_dep": "LPC43_EMC && ARCH_CHIP_LPC43XX && ARCH_ARM", "dep": "n"}, {"type": 3, "name": "LPC43_EXTSDRAM0", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure external SDRAM0 (on DYNCS0)", "cond": "ARCH_HAVE_EXTSDRAM0 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_EXTSDRAM0 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_EXTSDRAM", "cond": "ARCH_HAVE_EXTSDRAM0 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Configure external SDRAM memory and, if applicable, map then external\nSDRAM into the memory map.", "children": [{"type": 27, "name": "LPC43_EXTSDRAM0_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "External SDRAM0 size", "cond": "LPC43_EXTSDRAM0 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "LPC43_EXTSDRAM0 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Size of the external SDRAM on DYNCS0 in bytes."}, {"type": 3, "name": "LPC43_EXTSDRAM0_HEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Add external SDRAM on DYNCS0 to the heap", "cond": "LPC43_EXTSDRAM0 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "LPC43_EXTSDRAM0 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Add the external SDRAM on DYNCS0 into the heap."}]}, {"type": 3, "name": "LPC43_EXTSDRAM1", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure external SDRAM1 (on DYNCS1)", "cond": "ARCH_HAVE_EXTSDRAM1 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_EXTSDRAM1 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_EXTSDRAM", "cond": "ARCH_HAVE_EXTSDRAM1 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Configure external SDRAM memoryand, if applicable, map then external\nSDRAM into the memory map.", "children": [{"type": 27, "name": "LPC43_EXTSDRAM1_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "External SDRAM1 size", "cond": "LPC43_EXTSDRAM1 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "LPC43_EXTSDRAM1 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Size of the external SDRAM on DYNCS1 in bytes."}, {"type": 3, "name": "LPC43_EXTSDRAM1_HEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Add external SDRAM on DYNCS1 to the heap", "cond": "LPC43_EXTSDRAM1 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "LPC43_EXTSDRAM1 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Add the external SDRAM on DYNCS1 into the heap."}]}, {"type": 3, "name": "LPC43_EXTSDRAM2", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure external SDRAM2 (on DYNCS2)", "cond": "ARCH_HAVE_EXTSDRAM2 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_EXTSDRAM2 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_EXTSDRAM", "cond": "ARCH_HAVE_EXTSDRAM2 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Configure external SDRAM memoryand, if applicable, map then external\nSDRAM into the memory map.", "children": [{"type": 27, "name": "LPC43_EXTSDRAM2_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "External SDRAM2 size", "cond": "LPC43_EXTSDRAM2 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "LPC43_EXTSDRAM2 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Size of the external SDRAM on DYNCS2 in bytes."}, {"type": 3, "name": "LPC43_EXTSDRAM2_HEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Add external SDRAM on DYNCS2 to the heap", "cond": "LPC43_EXTSDRAM2 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "LPC43_EXTSDRAM2 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Add the external SDRAM on DYNCS2 into the heap."}]}, {"type": 3, "name": "LPC43_EXTSDRAM3", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure external SDRAM3 (on DYNCS3)", "cond": "ARCH_HAVE_EXTSDRAM3 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_EXTSDRAM3 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_EXTSDRAM", "cond": "ARCH_HAVE_EXTSDRAM3 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Configure external SDRAM memoryand, if applicable, map then external\nSDRAM into the memory map.", "children": [{"type": 27, "name": "LPC43_EXTSDRAM3_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "External SDRAM3 size", "cond": "LPC43_EXTSDRAM3 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "LPC43_EXTSDRAM3 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Size of the external SDRAM in bytes."}, {"type": 3, "name": "LPC43_EXTSDRAM3_HEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Add external SDRAM on DYNCS3 to the heap", "cond": "LPC43_EXTSDRAM3 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "LPC43_EXTSDRAM3 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Add the external SDRAM on DYNCS3 into the heap."}]}]}, {"type": 31, "dep": "n", "prompt": "Ethernet MAC configuration", "cond": "LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM", "children": [{"type": 27, "name": "LPC43_PHYADDR", "value": "", "user_value": null, "dep": "n", "prompt": "PHY address", "cond": "LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "The 5-bit address of the PHY on the board.  Default: 1"}, {"type": 3, "name": "LPC43_PHYINIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Board-specific PHY Initialization", "cond": "LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Some boards require specialized initialization of the PHY before it can be used.\nThis may include such things as configuring GPIOs, resetting the PHY, etc.  If\nLPC43_PHYINIT is defined in the configuration then the board specific logic must\nprovide lpc43_phyinitialize();  The LPC43 Ethernet driver will call this function\none time before it first uses the PHY."}, {"type": 3, "name": "LPC43_MII", "value": "n", "user_value": null, "dep": "n", "prompt": "Use MII interface", "cond": "LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Support Ethernet MII interface."}, {"type": 3, "name": "LPC43_AUTONEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Use autonegotiation", "cond": "LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Use PHY autonegotiation to determine speed and mode"}, {"type": 3, "name": "LPC43_ETHFD", "value": "n", "user_value": null, "dep": "n", "prompt": "Full duplex", "cond": "!LPC43_AUTONEG && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!LPC43_AUTONEG && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "If LPC43_AUTONEG is not defined, then this may be defined to select full duplex\nmode. Default: half-duplex"}, {"type": 3, "name": "LPC43_ETH100MBPS", "value": "n", "user_value": null, "dep": "n", "prompt": "100 Mbps", "cond": "!LPC43_AUTONEG && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!LPC43_AUTONEG && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "If LPC43_AUTONEG is not defined, then this may be defined to select 100 MBps\nspeed.  Default: 10 Mbps"}, {"type": 27, "name": "LPC43_PHYSR", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Status Register Address (decimal)", "cond": "LPC43_AUTONEG && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM", "help": "This must be provided if LPC43_AUTONEG is defined.  The PHY status register\naddress may diff from PHY to PHY.  This configuration sets the address of\nthe PHY status register."}, {"type": 3, "name": "LPC43_PHYSR_ALTCONFIG", "value": "n", "user_value": null, "dep": "n", "prompt": "PHY Status Alternate Bit Layout", "cond": "LPC43_AUTONEG && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC43_AUTONEG && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Different PHYs present speed and mode information in different ways.  Some\nwill present separate information for speed and mode (this is the default).\nThose PHYs, for example, may provide a 10/100 Mbps indication and a separate\nfull/half duplex indication. This options selects an alternative representation\nwhere speed and mode information are combined.  This might mean, for example,\nseparate bits for 10HD, 100HD, 10FD and 100FD."}, {"type": 24, "name": "LPC43_PHYSR_SPEED", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Speed Mask", "cond": "LPC43_AUTONEG && !LPC43_PHYSR_ALTCONFIG && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM", "help": "This must be provided if LPC43_AUTONEG is defined.  This provides bit mask\nfor isolating the 10 or 100MBps speed indication."}, {"type": 24, "name": "LPC43_PHYSR_100MBPS", "value": "", "user_value": null, "dep": "n", "prompt": "PHY 100Mbps Speed Value", "cond": "LPC43_AUTONEG && !LPC43_PHYSR_ALTCONFIG && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM", "help": "This must be provided if LPC43_AUTONEG is defined.  This provides the value\nof the speed bit(s) indicating 100MBps speed."}, {"type": 24, "name": "LPC43_PHYSR_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Mode Mask", "cond": "LPC43_AUTONEG && !LPC43_PHYSR_ALTCONFIG && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM", "help": "This must be provided if LPC43_AUTONEG is defined.  This provide bit mask\nfor isolating the full or half duplex mode bits."}, {"type": 24, "name": "LPC43_PHYSR_FULLDUPLEX", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Full Duplex Mode Value", "cond": "LPC43_AUTONEG && !LPC43_PHYSR_ALTCONFIG && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM", "help": "This must be provided if LPC43_AUTONEG is defined.  This provides the\nvalue of the mode bits indicating full duplex mode."}, {"type": 24, "name": "LPC43_PHYSR_ALTMODE", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Mode Mask", "cond": "LPC43_AUTONEG && LPC43_PHYSR_ALTCONFIG && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM", "help": "This must be provided if LPC43_AUTONEG is defined.  This provide bit mask\nfor isolating the speed and full/half duplex mode bits."}, {"type": 24, "name": "LPC43_PHYSR_10HD", "value": "", "user_value": null, "dep": "n", "prompt": "10MBase-T Half Duplex Value", "cond": "LPC43_AUTONEG && LPC43_PHYSR_ALTCONFIG && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM", "help": "This must be provided if LPC43_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 10Mbps, half duplex setting."}, {"type": 24, "name": "LPC43_PHYSR_100HD", "value": "", "user_value": null, "dep": "n", "prompt": "100Base-T Half Duplex Value", "cond": "LPC43_AUTONEG && LPC43_PHYSR_ALTCONFIG && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM", "help": "This must be provided if LPC43_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 100Mbps, half duplex setting."}, {"type": 24, "name": "LPC43_PHYSR_10FD", "value": "", "user_value": null, "dep": "n", "prompt": "10Base-T Full Duplex Value", "cond": "LPC43_AUTONEG && LPC43_PHYSR_ALTCONFIG && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM", "help": "This must be provided if LPC43_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 10Mbps, full duplex setting."}, {"type": 24, "name": "LPC43_PHYSR_100FD", "value": "", "user_value": null, "dep": "n", "prompt": "100Base-T Full Duplex Value", "cond": "LPC43_AUTONEG && LPC43_PHYSR_ALTCONFIG && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM", "help": "This must be provided if LPC43_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 100Mbps, full duplex setting."}, {"type": 3, "name": "LPC43_RMII", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "!LPC43_MII && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "LPC43_ETHERNET_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM"}, {"name": "LPC43_ETHERNET_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Work queue support is required to use the Ethernet driver.  If the\nlow priority work queue is available, then it should be used by the\ndriver.", "children": [{"type": 3, "name": "LPC43_ETHERNET_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "LPC43_ETHERNET_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}, {"type": 3, "name": "LPC43_ETHERNET_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register-Level Debug", "cond": "DEBUG_NET_INFO && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_NET_INFO && LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Enable very low-level register access debug.  Depends on CONFIG_DEBUG_NET_INFO."}]}, {"type": 31, "dep": "n", "prompt": "RS-485 Configuration", "cond": "ARCH_CHIP_LPC43XX && ARCH_ARM", "children": [{"type": 3, "name": "USART0_RS485MODE", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART0", "cond": "LPC43_USART0 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC43_USART0 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Enable RS-485 interface on USART0."}, {"type": 3, "name": "USART0_RS485DIROIN", "value": "n", "user_value": null, "dep": "n", "prompt": "Invert direction control pin polarity", "cond": "USART0_RS485_MODE && LPC43_USART0 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "USART0_RS485_MODE && LPC43_USART0 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "If disabled, control pin will be driven to logic 0 when the\ntransmitter has data to be sent.  It will be driven to logic 1 after\nthe last bit of data has been transmitted."}, {"type": 3, "name": "UART1_RS485MODE", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on UART1", "cond": "LPC43_UART1 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC43_UART1 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Enable RS-485 interface on USRT1."}, {"type": 3, "name": "UART1_RS485_DTRDIR", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1 DTR for DIR", "cond": "LPC43_UART1 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC43_UART1 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Use the UART DTR pin for the DIR pin"}, {"type": 3, "name": "USART2_RS485MODE", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART2", "cond": "LPC43_USART2 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC43_USART2 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Enable RS-485 interface on USART2.", "children": [{"type": 3, "name": "USART0_RS485DIROIN", "value": "n", "user_value": null, "dep": "n", "prompt": "Invert direction control pin polarity", "cond": "USART2_RS485MODE && LPC43_USART2 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "USART2_RS485MODE && LPC43_USART2 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "If disabled, control pin will be driven to logic 0 when the transmitter has data to be sent.\nIt will be driven to logic 1 after the last bit of data has been transmitted."}]}, {"type": 3, "name": "USART3_RS485MODE", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART3", "cond": "LPC43_USART3 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC43_USART3 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Enable RS-485 interface on USART3.", "children": [{"type": 3, "name": "USART3_RS485DIROIN", "value": "n", "user_value": null, "dep": "n", "prompt": "Invert direction control pin polarity", "cond": "USART3_RS485MODE && LPC43_USART3 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "USART3_RS485MODE && LPC43_USART3 && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "If disabled, control pin will be driven to logic 0 when the transmitter has data to be sent.\nIt will be driven to logic 1 after the last bit of data has been transmitted."}]}]}, {"type": 31, "dep": "n", "prompt": "I2C Configution", "cond": "LPC43_I2C0 && ARCH_CHIP_LPC43XX && ARCH_ARM", "children": [{"type": 3, "name": "LPC43_I2C0_SUPERFAST", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C0 super fast mode", "cond": "LPC43_I2C0 && LPC43_I2C0 && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC43_I2C0 && LPC43_I2C0 && ARCH_CHIP_LPC43XX && ARCH_ARM"}]}]}, {"type": 31, "dep": "n", "prompt": "USB host controller driver (HCD) options", "cond": "LPC43_USBOTG && USBHOST && ARCH_CHIP_LPC43XX && ARCH_ARM", "children": [{"type": 27, "name": "LPC43_EHCI_NQHS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of Queue Head (QH) structures", "cond": "LPC43_USBOTG && USBHOST && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "LPC43_USBOTG && USBHOST && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Configurable number of Queue Head (QH) structures.  The default is\none per Root hub port plus one for EP0 (4)."}, {"type": 27, "name": "LPC43_EHCI_NQTDS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of Queue Element Transfer Descriptor (qTDs)", "cond": "LPC43_USBOTG && USBHOST && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "6", "default": "6", "cond": "LPC43_USBOTG && USBHOST && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Configurable number of Queue Element Transfer Descriptor (qTDs).\nThe default is one per root hub plus three from EP0 (6)."}, {"type": 27, "name": "LPC43_EHCI_BUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Size of one request/descriptor buffer", "cond": "LPC43_USBOTG && USBHOST && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "128", "default": "128", "cond": "LPC43_USBOTG && USBHOST && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "The size of one request/descriptor buffer in bytes.  The TD buffe\nsize must be an even number of 32-bit words and must be large enough\nto hangle the largest transfer via a SETUP request."}, {"type": 3, "name": "LPC43_EHCI_PREALLOCATE", "value": "n", "user_value": null, "dep": "n", "prompt": "Preallocate descriptor pool", "cond": "LPC43_USBOTG && USBHOST && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "LPC43_USBOTG && USBHOST && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Select this option to pre-allocate EHCI queue and descriptor\nstructure pools in .bss.  Otherwise, these pools will be\ndynamically allocated using kmm_memalign()."}]}, {"type": 31, "dep": "n", "prompt": "USB host controller driver (HCD) options", "cond": "LPC43_USBOTG && USBHOST && ARCH_CHIP_LPC43XX && ARCH_ARM", "children": [{"type": 27, "name": "LPC43_EHCI_NQHS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of Queue Head (QH) structures", "cond": "LPC43_USBOTG && USBHOST && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "LPC43_USBOTG && USBHOST && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Configurable number of Queue Head (QH) structures.  The default is\none per Root hub port plus one for EP0 (4)."}, {"type": 27, "name": "LPC43_EHCI_NQTDS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of Queue Element Transfer Descriptor (qTDs)", "cond": "LPC43_USBOTG && USBHOST && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "6", "default": "6", "cond": "LPC43_USBOTG && USBHOST && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Configurable number of Queue Element Transfer Descriptor (qTDs).\nThe default is one per root hub plus three from EP0 (6)."}, {"type": 27, "name": "LPC43_EHCI_BUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Size of one request/descriptor buffer", "cond": "LPC43_USBOTG && USBHOST && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "128", "default": "128", "cond": "LPC43_USBOTG && USBHOST && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "The size of one request/descriptor buffer in bytes.  The TD buffe\nsize must be an even number of 32-bit words and must be large enough\nto hangle the largest transfer via a SETUP request."}, {"type": 3, "name": "LPC43_EHCI_PREALLOCATE", "value": "n", "user_value": null, "dep": "n", "prompt": "Preallocate descriptor pool", "cond": "LPC43_USBOTG && USBHOST && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "LPC43_USBOTG && USBHOST && ARCH_CHIP_LPC43XX && ARCH_ARM"}], "help": "Select this option to pre-allocate EHCI queue and descriptor\nstructure pools in .bss.  Otherwise, these pools will be\ndynamically allocated using kmm_memalign()."}]}, {"type": 31, "dep": "n", "prompt": "USB device controller driver (DCD) options", "cond": "(LPC43_USB0 || LPC43_USB1) && ARCH_CHIP_LPC43XX && ARCH_ARM", "children": [{"type": 3, "name": "LPC43_USB0DEV_NOVBUS", "value": "n", "user_value": null, "dep": "n", "prompt": "No USB0 VBUS sensing", "cond": "LPC43_USB0 && USBDEV && (LPC43_USB0 || LPC43_USB1) && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC43_USB0 && USBDEV && (LPC43_USB0 || LPC43_USB1) && ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_USB1_ULPI", "value": "n", "user_value": null, "dep": "n", "prompt": "USB1 with ULPI", "cond": "LPC43_USB1 && (LPC43_USB0 || LPC43_USB1) && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC43_USB1 && (LPC43_USB0 || LPC43_USB1) && ARCH_CHIP_LPC43XX && ARCH_ARM"}]}, {"type": 3, "name": "LPC43_USB1DEV_NOVBUS", "value": "n", "user_value": null, "dep": "n", "prompt": "No USB1 VBUS sensing", "cond": "LPC43_USB1 && USBDEV && (LPC43_USB0 || LPC43_USB1) && ARCH_CHIP_LPC43XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LPC43_USB1 && USBDEV && (LPC43_USB0 || LPC43_USB1) && ARCH_CHIP_LPC43XX && ARCH_ARM"}]}]}, {"type": 6, "dep": "n", "prompt": "MoxART Configuration Options", "cond": "ARCH_CHIP_MOXART && ARCH_ARM"}, {"type": 24, "name": "UART_MOXA_MODE_REG", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART mode register address", "cond": "ARCH_CHIP_MOXART && ARCH_ARM", "defaults": [{"name": "0x982000E0", "default": "0x982000E0", "cond": "ARCH_CHIP_MOXART && ARCH_ARM"}]}, {"type": 24, "name": "UART_MOXA_IRQ_STATUS_REG", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART shared IRQ status register address", "cond": "ARCH_CHIP_MOXART && ARCH_ARM", "defaults": [{"name": "0x982000C0", "default": "0x982000C0", "cond": "ARCH_CHIP_MOXART && ARCH_ARM"}]}, {"type": 27, "name": "UART_MOXA_SHARED_IRQ", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART shared IRQ number", "cond": "ARCH_CHIP_MOXART && ARCH_ARM", "defaults": [{"name": "31", "default": "31", "cond": "ARCH_CHIP_MOXART && ARCH_ARM"}]}, {"type": 6, "dep": "n", "prompt": "NUC100/120 Configuration Options", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Nuvoton NUC1xx Chip Selection", "cond": "ARCH_CHIP_NUC1XX && ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "ARCH_CHIP_NUC120LE3AN", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_CHIP_NUC1XX && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_NUC100LC1BN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC100LC1BN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC100", "cond": "y"}, {"symbol": "ARCH_NUC_LOWDENSITY", "cond": "y"}], "help": "Nuvoton NUC100 low density chip: Flash 32K SRAM 4K, LQFP48 package"}, {"type": 3, "name": "ARCH_CHIP_NUC100LD1BN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC100LD1BN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC100", "cond": "y"}, {"symbol": "ARCH_NUC_LOWDENSITY", "cond": "y"}], "help": "Nuvoton NUC100 low density chip: Flash 64K SRAM 4K, LQFP48 package"}, {"type": 3, "name": "ARCH_CHIP_NUC100LD2BN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC100LD2BN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC100", "cond": "y"}, {"symbol": "ARCH_NUC_LOWDENSITY", "cond": "y"}], "help": "Nuvoton NUC100 low density chip: Flash 64K SRAM 8K, LQFP48 package"}, {"type": 3, "name": "ARCH_CHIP_NUC100RC1BN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC100RC1BN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC100", "cond": "y"}, {"symbol": "ARCH_NUC_LOWDENSITY", "cond": "y"}], "help": "Nuvoton NUC100 low density chip: Flash 32K SRAM 4K, LQFP64 package"}, {"type": 3, "name": "ARCH_CHIP_NUC100RD1BN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC100RD1BN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC100", "cond": "y"}, {"symbol": "ARCH_NUC_LOWDENSITY", "cond": "y"}], "help": "Nuvoton NUC100 low density chip: Flash 64K SRAM 4K, LQFP64 package"}, {"type": 3, "name": "ARCH_CHIP_NUC100RD2BN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC100RD2BN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC100", "cond": "y"}, {"symbol": "ARCH_NUC_LOWDENSITY", "cond": "y"}], "help": "Nuvoton NUC100 low density chip: Flash 64K SRAM 8K, LQFP64 package"}, {"type": 3, "name": "ARCH_CHIP_NUC100LD3AN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC100LD3AN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC100", "cond": "y"}, {"symbol": "ARCH_NUC_MEDIUMDENSITY", "cond": "y"}], "help": "Nuvoton NUC100 medium density chip: Flash 64K SRAM 16K, LQFP48 package"}, {"type": 3, "name": "ARCH_CHIP_NUC100LE3AN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC100LE3AN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC100", "cond": "y"}, {"symbol": "ARCH_NUC_MEDIUMDENSITY", "cond": "y"}], "help": "Nuvoton NUC100 medium density chip: Flash 128K SRAM 16K, LQFP48 package"}, {"type": 3, "name": "ARCH_CHIP_NUC100RD3AN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC100RD3AN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC100", "cond": "y"}, {"symbol": "ARCH_NUC_MEDIUMDENSITY", "cond": "y"}, {"symbol": "NUC_HAVE_UART2", "cond": "y"}], "help": "Nuvoton NUC100 medium density chip: Flash 64K SRAM 16K, LQFP64 package"}, {"type": 3, "name": "ARCH_CHIP_NUC100RE3AN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC100RE3AN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC100", "cond": "y"}, {"symbol": "ARCH_NUC_MEDIUMDENSITY", "cond": "y"}, {"symbol": "NUC_HAVE_UART2", "cond": "y"}], "help": "Nuvoton NUC100 medium density chip: Flash 128K SRAM 16K, LQFP64 package"}, {"type": 3, "name": "ARCH_CHIP_NUC100VD2AN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC100VD2AN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC100", "cond": "y"}, {"symbol": "ARCH_NUC_MEDIUMDENSITY", "cond": "y"}, {"symbol": "NUC_HAVE_UART2", "cond": "y"}], "help": "Nuvoton NUC100 medium density chip: Flash 64K SRAM 8K, LQFP100 package"}, {"type": 3, "name": "ARCH_CHIP_NUC100VD3AN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC100VD3AN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC100", "cond": "y"}, {"symbol": "ARCH_NUC_MEDIUMDENSITY", "cond": "y"}, {"symbol": "NUC_HAVE_UART2", "cond": "y"}], "help": "Nuvoton NUC100 medium density chip: Flash 64K SRAM 16K, LQFP100 package"}, {"type": 3, "name": "ARCH_CHIP_NUC100VE3AN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC100VE3AN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC100", "cond": "y"}, {"symbol": "ARCH_NUC_MEDIUMDENSITY", "cond": "y"}, {"symbol": "NUC_HAVE_UART2", "cond": "y"}], "help": "Nuvoton NUC100 medium density chip: Flash 128K SRAM 8K, LQFP100 package"}, {"type": 3, "name": "ARCH_CHIP_NUC120LC1BN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC120LC1BN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC120", "cond": "y"}, {"symbol": "ARCH_NUC_LOWDENSITY", "cond": "y"}], "help": "Nuvoton NUC120 low density chip: Flash 32K SRAM 4K, LQFP48 package"}, {"type": 3, "name": "ARCH_CHIP_NUC120LD1BN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC120LD1BN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC120", "cond": "y"}, {"symbol": "ARCH_NUC_LOWDENSITY", "cond": "y"}], "help": "Nuvoton NUC120 low density chip: Flash 64K SRAM 4K, LQFP48 package"}, {"type": 3, "name": "ARCH_CHIP_NUC120LD2BN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC120LD2BN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC120", "cond": "y"}, {"symbol": "ARCH_NUC_LOWDENSITY", "cond": "y"}], "help": "Nuvoton NUC120 low density chip: Flash 64K SRAM 8K, LQFP48 package"}, {"type": 3, "name": "ARCH_CHIP_NUC120RC1BN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC120RC1BN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC120", "cond": "y"}, {"symbol": "ARCH_NUC_LOWDENSITY", "cond": "y"}], "help": "Nuvoton NUC120 low density chip: Flash 32K SRAM 4K, LQFP64 package"}, {"type": 3, "name": "ARCH_CHIP_NUC120RD1BN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC120RD1BN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC120", "cond": "y"}, {"symbol": "ARCH_NUC_LOWDENSITY", "cond": "y"}], "help": "Nuvoton NUC120 low density chip: Flash 64K SRAM 4K, LQFP64 package"}, {"type": 3, "name": "ARCH_CHIP_NUC120RD2BN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC120RD2BN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC120", "cond": "y"}, {"symbol": "ARCH_NUC_LOWDENSITY", "cond": "y"}], "help": "Nuvoton NUC120 low density chip: Flash 64K SRAM 8K, LQFP64 package"}, {"type": 3, "name": "ARCH_CHIP_NUC120LD3AN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC120LD3AN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC120", "cond": "y"}, {"symbol": "ARCH_NUC_MEDIUMDENSITY", "cond": "y"}], "help": "Nuvoton NUC120 medium density chip: Flash 64K SRAM 16K, LQFP48 package"}, {"type": 3, "name": "ARCH_CHIP_NUC120LE3AN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC120LE3AN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC120", "cond": "y"}, {"symbol": "ARCH_NUC_MEDIUMDENSITY", "cond": "y"}], "help": "Nuvoton NUC120 medium density chip: Flash 128K SRAM 16K, LQFP48 package"}, {"type": 3, "name": "ARCH_CHIP_NUC120RD3AN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC120RD3AN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC120", "cond": "y"}, {"symbol": "ARCH_NUC_MEDIUMDENSITY", "cond": "y"}], "help": "Nuvoton NUC120 medium density chip: Flash 64K SRAM 16K, LQFP64 package"}, {"type": 3, "name": "ARCH_CHIP_NUC120RE3AN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC120RE3AN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC120", "cond": "y"}, {"symbol": "ARCH_NUC_MEDIUMDENSITY", "cond": "y"}], "help": "Nuvoton NUC120 medium density chip: Flash 128K SRAM 16K, LQFP64 package"}, {"type": 3, "name": "ARCH_CHIP_NUC120VD2AN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC120VD2AN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC120", "cond": "y"}, {"symbol": "ARCH_NUC_MEDIUMDENSITY", "cond": "y"}, {"symbol": "NUC_HAVE_UART2", "cond": "y"}], "help": "Nuvoton NUC120 medium density chip: Flash 64K SRAM 8K, LQFP100 package"}, {"type": 3, "name": "ARCH_CHIP_NUC120VD3AN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC120VD3AN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC120", "cond": "y"}, {"symbol": "ARCH_NUC_MEDIUMDENSITY", "cond": "y"}, {"symbol": "NUC_HAVE_UART2", "cond": "y"}], "help": "Nuvoton NUC120 medium density chip: Flash 64K SRAM 16K, LQFP100 package"}, {"type": 3, "name": "ARCH_CHIP_NUC120VE3AN", "value": "n", "user_value": null, "dep": "n", "prompt": "NUC120VE3AN", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_NUC120", "cond": "y"}, {"symbol": "ARCH_NUC_MEDIUMDENSITY", "cond": "y"}, {"symbol": "NUC_HAVE_UART2", "cond": "y"}], "help": "Nuvoton NUC120 medium density chip: Flash 128K SRAM 16K, LQFP100 package"}]}, {"type": 3, "name": "ARCH_FAMILY_NUC100", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_NUC100LC1BN && y) || (ARCH_CHIP_NUC100LD1BN && y) || (ARCH_CHIP_NUC100LD2BN && y) || (ARCH_CHIP_NUC100RC1BN && y) || (ARCH_CHIP_NUC100RD1BN && y) || (ARCH_CHIP_NUC100RD2BN && y) || (ARCH_CHIP_NUC100LD3AN && y) || (ARCH_CHIP_NUC100LE3AN && y) || (ARCH_CHIP_NUC100RD3AN && y) || (ARCH_CHIP_NUC100RE3AN && y) || (ARCH_CHIP_NUC100VD2AN && y) || (ARCH_CHIP_NUC100VD3AN && y) || (ARCH_CHIP_NUC100VE3AN && y)", "dep": "n"}, {"type": 3, "name": "ARCH_FAMILY_NUC120", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_NUC120LC1BN && y) || (ARCH_CHIP_NUC120LD1BN && y) || (ARCH_CHIP_NUC120LD2BN && y) || (ARCH_CHIP_NUC120RC1BN && y) || (ARCH_CHIP_NUC120RD1BN && y) || (ARCH_CHIP_NUC120RD2BN && y) || (ARCH_CHIP_NUC120LD3AN && y) || (ARCH_CHIP_NUC120LE3AN && y) || (ARCH_CHIP_NUC120RD3AN && y) || (ARCH_CHIP_NUC120RE3AN && y) || (ARCH_CHIP_NUC120VD2AN && y) || (ARCH_CHIP_NUC120VD3AN && y) || (ARCH_CHIP_NUC120VE3AN && y)", "dep": "n"}, {"type": 3, "name": "ARCH_NUC_LOWDENSITY", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_NUC100LC1BN && y) || (ARCH_CHIP_NUC100LD1BN && y) || (ARCH_CHIP_NUC100LD2BN && y) || (ARCH_CHIP_NUC100RC1BN && y) || (ARCH_CHIP_NUC100RD1BN && y) || (ARCH_CHIP_NUC100RD2BN && y) || (ARCH_CHIP_NUC120LC1BN && y) || (ARCH_CHIP_NUC120LD1BN && y) || (ARCH_CHIP_NUC120LD2BN && y) || (ARCH_CHIP_NUC120RC1BN && y) || (ARCH_CHIP_NUC120RD1BN && y) || (ARCH_CHIP_NUC120RD2BN && y)", "dep": "n"}, {"type": 3, "name": "ARCH_NUC_MEDIUMDENSITY", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_NUC100LD3AN && y) || (ARCH_CHIP_NUC100LE3AN && y) || (ARCH_CHIP_NUC100RD3AN && y) || (ARCH_CHIP_NUC100RE3AN && y) || (ARCH_CHIP_NUC100VD2AN && y) || (ARCH_CHIP_NUC100VD3AN && y) || (ARCH_CHIP_NUC100VE3AN && y) || (ARCH_CHIP_NUC120LD3AN && y) || (ARCH_CHIP_NUC120LE3AN && y) || (ARCH_CHIP_NUC120RD3AN && y) || (ARCH_CHIP_NUC120RE3AN && y) || (ARCH_CHIP_NUC120VD2AN && y) || (ARCH_CHIP_NUC120VD3AN && y) || (ARCH_CHIP_NUC120VE3AN && y)", "dep": "n"}, {"type": 3, "name": "NUC_HAVE_UART2", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_NUC100RD3AN && y) || (ARCH_CHIP_NUC100RE3AN && y) || (ARCH_CHIP_NUC100VD2AN && y) || (ARCH_CHIP_NUC100VD3AN && y) || (ARCH_CHIP_NUC100VE3AN && y) || (ARCH_CHIP_NUC120VD2AN && y) || (ARCH_CHIP_NUC120VD3AN && y) || (ARCH_CHIP_NUC120VE3AN && y)", "dep": "n"}, {"type": 31, "dep": "n", "prompt": "NUC1XX Peripheral Support", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "children": [{"type": 3, "name": "NUC_PDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "Peripheral DMA", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_FMC", "value": "n", "user_value": null, "dep": "n", "prompt": "Flash memory", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_EBI", "value": "n", "user_value": null, "dep": "n", "prompt": "External bus interface", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_WDT", "value": "n", "user_value": null, "dep": "n", "prompt": "Watchdog timer", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_RTC", "value": "n", "user_value": null, "dep": "n", "prompt": "Real time clock (RTC)", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_TMR0", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer0", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_TMR1", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer1", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_TIMR2", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer2", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_TIMR3", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer3", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_I2C0", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C0 interface", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_I2C1", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C1 interface", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_SPI0", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI0 master/slave", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_SPI1", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI1 master/slave", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_SPI2", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI2 master/slave", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_SPI3", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI3 master/slave", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_PWM0", "value": "n", "user_value": null, "dep": "n", "prompt": "PWM0", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_PWM1", "value": "n", "user_value": null, "dep": "n", "prompt": "PWM1", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_PWM2", "value": "n", "user_value": null, "dep": "n", "prompt": "PWM2", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_PWM3", "value": "n", "user_value": null, "dep": "n", "prompt": "PWM3", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_PWM4", "value": "n", "user_value": null, "dep": "n", "prompt": "PWM4", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_PWM5", "value": "n", "user_value": null, "dep": "n", "prompt": "PWM5", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_PWM6", "value": "n", "user_value": null, "dep": "n", "prompt": "PWM6", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_PWM7", "value": "n", "user_value": null, "dep": "n", "prompt": "PWM7", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_UART0", "value": "n", "user_value": null, "dep": "n", "prompt": "UART0", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}], "selects": [{"symbol": "UART0_SERIALDRIVER", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_UART2", "value": "n", "user_value": null, "dep": "n", "prompt": "UART2", "cond": "NUC_HAVE_UART2 && ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "NUC_HAVE_UART2 && ARCH_CHIP_NUC1XX && ARCH_ARM"}], "selects": [{"symbol": "UART2_SERIALDRIVER", "cond": "NUC_HAVE_UART2 && ARCH_CHIP_NUC1XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "NUC_HAVE_UART2 && ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_USBD", "value": "n", "user_value": null, "dep": "n", "prompt": "USB 2.0 FS device controller", "cond": "ARCH_FAMILY_NUC120 && ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_FAMILY_NUC120 && ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_ACMP", "value": "n", "user_value": null, "dep": "n", "prompt": "Analog comparator", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "Analog-digital-converter (ADC)", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_PS2", "value": "n", "user_value": null, "dep": "n", "prompt": "PS/2 interface", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}, {"type": 3, "name": "NUC_I2S", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S interface", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}]}]}, {"type": 3, "name": "NUC_XTALLO", "value": "n", "user_value": null, "rev_dep": "NUC_SYSTICK_XTALLO && y", "dep": "n"}, {"type": 3, "name": "NUC_INTHI", "value": "n", "user_value": null, "rev_dep": "(NUC_SYSTICK_INTHId2 && y) || (NUC_UARTCLK_INTHI && y)", "dep": "n"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SysTick clock source", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "NUC_SYSTICK_CORECLK", "default": "n", "cond": "ARCH_CHIP_NUC1XX && ARCH_ARM"}], "children": [{"type": 3, "name": "NUC_SYSTICK_CORECLK", "value": "n", "user_value": null, "dep": "n", "prompt": "Cortex-M0 core clock", "cond": "y"}, {"type": 3, "name": "NUC_SYSTICK_XTALHI", "value": "n", "user_value": null, "dep": "n", "prompt": "High speed XTAL clock", "cond": "y"}, {"type": 3, "name": "NUC_SYSTICK_XTALLO", "value": "n", "user_value": null, "dep": "n", "prompt": "Low speed XTAL clock", "cond": "y", "selects": [{"symbol": "NUC_XTALLO", "cond": "y"}]}, {"type": 3, "name": "NUC_SYSTICK_XTALHId2", "value": "n", "user_value": null, "dep": "n", "prompt": "High speed XTAL clock/2", "cond": "y"}, {"type": 3, "name": "NUC_SYSTICK_HCLKd2", "value": "n", "user_value": null, "dep": "n", "prompt": "HCLK/2", "cond": "y"}, {"type": 3, "name": "NUC_SYSTICK_INTHId2", "value": "n", "user_value": null, "dep": "n", "prompt": "Internal high speed clock/2", "cond": "y", "selects": [{"symbol": "NUC_INTHI", "cond": "y"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "NUC UART clock source", "cond": "(NUC_UART0 || NUC_UART1 || NUC_UART2) && ARCH_CHIP_NUC1XX && ARCH_ARM", "defaults": [{"name": "NUC_UARTCLK_INTHI", "default": "n", "cond": "(NUC_UART0 || NUC_UART1 || NUC_UART2) && ARCH_CHIP_NUC1XX && ARCH_ARM"}], "children": [{"type": 3, "name": "NUC_UARTCLK_XTALHI", "value": "n", "user_value": null, "dep": "n", "prompt": "External 4-24MHz high speed crystal", "cond": "y"}, {"type": 3, "name": "NUC_UARTCLK_PLL", "value": "n", "user_value": null, "dep": "n", "prompt": "PLL output", "cond": "y"}, {"type": 3, "name": "NUC_UARTCLK_INTHI", "value": "n", "user_value": null, "dep": "n", "prompt": "Internal 22.1184 high speed clock", "cond": "y", "selects": [{"symbol": "NUC_INTHI", "cond": "y"}]}]}, {"type": 6, "dep": "n", "prompt": "SAMA5 Configuration Options", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"type": 3, "name": "SAMA5_HAVE_AESB", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_ICM", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_RXLP", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_UART0", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_ATSAMA5D31 && y) || (ARCH_CHIP_ATSAMA5D35 && y) || (ARCH_CHIP_ATSAMA5D36 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_UART1", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_ATSAMA5D31 && y) || (ARCH_CHIP_ATSAMA5D35 && y) || (ARCH_CHIP_ATSAMA5D36 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_UART2", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_UART3", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_UART4", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_USART0", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMA5D3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_USART1", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMA5D3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_USART2", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMA5D3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_USART3", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMA5D3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_USART4", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_FLEXCOM0", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_FLEXCOM1", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_FLEXCOM2", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_FLEXCOM3", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_FLEXCOM4", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_CAN0", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_ATSAMA5D22 && y) || (ARCH_CHIP_ATSAMA5D23 && y) || (ARCH_CHIP_ATSAMA5D27 && y) || (ARCH_CHIP_ATSAMA5D28 && y) || (ARCH_CHIP_ATSAMA5D34 && y) || (ARCH_CHIP_ATSAMA5D35 && y) || (ARCH_CHIP_ATSAMA5D36 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_CAN1", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_ATSAMA5D27 && y) || (ARCH_CHIP_ATSAMA5D28 && y) || (ARCH_CHIP_ATSAMA5D34 && y) || (ARCH_CHIP_ATSAMA5D35 && y) || (ARCH_CHIP_ATSAMA5D36 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_DMA", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_SAMA5D3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_DDR32", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_ATSAMA5D24 && y) || (ARCH_CHIP_ATSAMA5D26 && y) || (ARCH_CHIP_ATSAMA5D27 && y) || (ARCH_CHIP_ATSAMA5D28 && y) || (ARCH_CHIP_ATSAMA5D42 && y) || (ARCH_CHIP_ATSAMA5D44 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_XDMA", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_LCDC", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_ATSAMA5D31 && y) || (ARCH_CHIP_ATSAMA5D33 && y) || (ARCH_CHIP_ATSAMA5D34 && y) || (ARCH_CHIP_ATSAMA5D36 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_GMAC", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_ATSAMA5D33 && y) || (ARCH_CHIP_ATSAMA5D34 && y) || (ARCH_CHIP_ATSAMA5D35 && y) || (ARCH_CHIP_ATSAMA5D36 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_EMACA", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_ATSAMA5D31 && y) || (ARCH_CHIP_ATSAMA5D35 && y) || (ARCH_CHIP_ATSAMA5D36 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_EMACB", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_EMAC1", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_HSMCI2", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_ATSAMA5D31 && y) || (ARCH_CHIP_ATSAMA5D34 && y) || (ARCH_CHIP_ATSAMA5D35 && y) || (ARCH_CHIP_ATSAMA5D36 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_PIOE", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMA5D3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_SAIC", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_SBM", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_SFC", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_SPI2", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_TC", "value": "n", "user_value": null, "rev_dep": "(SAMA5_TC0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_TC1 && SAMA5_HAVE_TC1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_TC2 && SAMA5_HAVE_TC2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_TC1", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_ATSAMA5D35 && y) || (ARCH_CHIP_ATSAMA5D36 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_TC2", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_TWI3", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_VDEC", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_ATSAMA5D43 && y) || (ARCH_CHIP_ATSAMA5D44 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_FLEXCOM", "value": "n", "user_value": null, "rev_dep": "(SAMA5_FLEXCOM0 && SAMA5_HAVE_FLEXCOM0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_FLEXCOM1 && SAMA5_HAVE_FLEXCOM1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_FLEXCOM2 && SAMA5_HAVE_FLEXCOM2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_FLEXCOM3 && SAMA5_HAVE_FLEXCOM3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_FLEXCOM4 && SAMA5_HAVE_FLEXCOM4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_FLEXCOM_USART", "value": "n", "user_value": null, "rev_dep": "(SAMA5_FLEXCOM0_USART && y) || (SAMA5_FLEXCOM1_USART && y) || (SAMA5_FLEXCOM2_USART && y) || (SAMA5_FLEXCOM3_USART && y) || (SAMA5_FLEXCOM4_USART && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_FLEXCOM_SPI", "value": "n", "user_value": null, "rev_dep": "(SAMA5_FLEXCOM0_SPI && y) || (SAMA5_FLEXCOM1_SPI && y) || (SAMA5_FLEXCOM2_SPI && y) || (SAMA5_FLEXCOM3_SPI && y) || (SAMA5_FLEXCOM4_SPI && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_FLEXCOM_TWI", "value": "n", "user_value": null, "rev_dep": "(SAMA5_FLEXCOM0_SPI && y) || (SAMA5_FLEXCOM1_SPI && y) || (SAMA5_FLEXCOM2_SPI && y) || (SAMA5_FLEXCOM3_SPI && y) || (SAMA5_FLEXCOM4_SPI && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CHIP_SAMA5D2", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_ATSAMA5D21 && y) || (ARCH_CHIP_ATSAMA5D22 && y) || (ARCH_CHIP_ATSAMA5D23 && y) || (ARCH_CHIP_ATSAMA5D24 && y) || (ARCH_CHIP_ATSAMA5D26 && y) || (ARCH_CHIP_ATSAMA5D27 && y) || (ARCH_CHIP_ATSAMA5D28 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "ARMV7A_HAVE_L2CC_PL310", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_AESB", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "ARCH_NAND_HWECC", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_EMACB", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_ICM", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_LCDC", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_RXLP", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_UART0", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_UART1", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_UART2", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_UART3", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_UART4", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_FLEXCOM0", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_FLEXCOM1", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_FLEXCOM2", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_FLEXCOM3", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_FLEXCOM4", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_QSPI", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_XDMA", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_SAIC", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_SFC", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_SPI2", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_TC1", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_TRUSTZONE", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CHIP_SAMA5D3", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_ATSAMA5D31 && y) || (ARCH_CHIP_ATSAMA5D33 && y) || (ARCH_CHIP_ATSAMA5D34 && y) || (ARCH_CHIP_ATSAMA5D35 && y) || (ARCH_CHIP_ATSAMA5D36 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_HAVE_DMA", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_PIOE", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_USART0", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_USART1", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_USART2", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_USART3", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CHIP_SAMA5D4", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_ATSAMA5D41 && y) || (ARCH_CHIP_ATSAMA5D42 && y) || (ARCH_CHIP_ATSAMA5D43 && y) || (ARCH_CHIP_ATSAMA5D44 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "ARMV7A_HAVE_L2CC_PL310", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "ARCH_NAND_HWECC", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_AESB", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_EMACB", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_EMAC1", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_ICM", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_LCDC", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_UART0", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_UART1", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_USART0", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_USART1", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_USART2", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_USART3", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_USART4", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_XDMA", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_PIOE", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_SAIC", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_SBM", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_SFC", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_SPI2", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_TC1", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_TC2", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_TRUSTZONE", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "SAMA5_HAVE_TWI3", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Atmel AT91SAMA5 Chip Selection", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "ARCH_CHIP_ATSAMA5D33", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_ATSAMA5D21", "value": "n", "user_value": null, "dep": "n", "prompt": "Atmel ATSAMA5D21", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMA5D2", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAMA5D22", "value": "n", "user_value": null, "dep": "n", "prompt": "Atmel ATSAMA5D22", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMA5D2", "cond": "y"}, {"symbol": "SAMA5_HAVE_CAN0", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAMA5D23", "value": "n", "user_value": null, "dep": "n", "prompt": "Atmel ATSAMA5D23", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMA5D2", "cond": "y"}, {"symbol": "SAMA5_HAVE_CAN0", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAMA5D24", "value": "n", "user_value": null, "dep": "n", "prompt": "Atmel ATSAMA5D24", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMA5D2", "cond": "y"}, {"symbol": "SAMA5_HAVE_DDR32", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAMA5D26", "value": "n", "user_value": null, "dep": "n", "prompt": "Atmel ATSAMA5D26", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMA5D2", "cond": "y"}, {"symbol": "SAMA5_HAVE_DDR32", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAMA5D27", "value": "n", "user_value": null, "dep": "n", "prompt": "Atmel ATSAMA5D27", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMA5D2", "cond": "y"}, {"symbol": "SAMA5_HAVE_CAN0", "cond": "y"}, {"symbol": "SAMA5_HAVE_CAN1", "cond": "y"}, {"symbol": "SAMA5_HAVE_DDR32", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAMA5D28", "value": "n", "user_value": null, "dep": "n", "prompt": "Atmel ATSAMA5D28", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMA5D2", "cond": "y"}, {"symbol": "SAMA5_HAVE_CAN0", "cond": "y"}, {"symbol": "SAMA5_HAVE_CAN1", "cond": "y"}, {"symbol": "SAMA5_HAVE_DDR32", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAMA5D31", "value": "n", "user_value": null, "dep": "n", "prompt": "Atmel ATSAMA5D31", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMA5D3", "cond": "y"}, {"symbol": "SAMA5_HAVE_EMACA", "cond": "y"}, {"symbol": "SAMA5_HAVE_HSMCI2", "cond": "y"}, {"symbol": "SAMA5_HAVE_LCDC", "cond": "y"}, {"symbol": "SAMA5_HAVE_UART0", "cond": "y"}, {"symbol": "SAMA5_HAVE_UART1", "cond": "y"}, {"symbol": "ARCH_NAND_HWECC", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAMA5D33", "value": "n", "user_value": null, "dep": "n", "prompt": "Atmel ATSAMA5D33", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMA5D3", "cond": "y"}, {"symbol": "SAMA5_HAVE_GMAC", "cond": "y"}, {"symbol": "SAMA5_HAVE_LCDC", "cond": "y"}, {"symbol": "ARCH_NAND_HWECC", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAMA5D34", "value": "n", "user_value": null, "dep": "n", "prompt": "Atmel ATSAMA5D34", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMA5D3", "cond": "y"}, {"symbol": "SAMA5_HAVE_GMAC", "cond": "y"}, {"symbol": "SAMA5_HAVE_HSMCI2", "cond": "y"}, {"symbol": "SAMA5_HAVE_LCDC", "cond": "y"}, {"symbol": "SAMA5_HAVE_CAN0", "cond": "y"}, {"symbol": "SAMA5_HAVE_CAN1", "cond": "y"}, {"symbol": "ARCH_NAND_HWECC", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAMA5D35", "value": "n", "user_value": null, "dep": "n", "prompt": "Atmel ATSAMA5D35", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMA5D3", "cond": "y"}, {"symbol": "SAMA5_HAVE_EMACA", "cond": "y"}, {"symbol": "SAMA5_HAVE_GMAC", "cond": "y"}, {"symbol": "SAMA5_HAVE_HSMCI2", "cond": "y"}, {"symbol": "SAMA5_HAVE_UART0", "cond": "y"}, {"symbol": "SAMA5_HAVE_UART1", "cond": "y"}, {"symbol": "SAMA5_HAVE_CAN0", "cond": "y"}, {"symbol": "SAMA5_HAVE_CAN1", "cond": "y"}, {"symbol": "SAMA5_HAVE_TC1", "cond": "y"}, {"symbol": "ARCH_NAND_HWECC", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAMA5D36", "value": "n", "user_value": null, "dep": "n", "prompt": "Atmel ATSAMA5D356", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMA5D3", "cond": "y"}, {"symbol": "SAMA5_HAVE_EMACA", "cond": "y"}, {"symbol": "SAMA5_HAVE_GMAC", "cond": "y"}, {"symbol": "SAMA5_HAVE_HSMCI2", "cond": "y"}, {"symbol": "SAMA5_HAVE_LCDC", "cond": "y"}, {"symbol": "SAMA5_HAVE_UART0", "cond": "y"}, {"symbol": "SAMA5_HAVE_UART1", "cond": "y"}, {"symbol": "SAMA5_HAVE_CAN0", "cond": "y"}, {"symbol": "SAMA5_HAVE_CAN1", "cond": "y"}, {"symbol": "SAMA5_HAVE_TC1", "cond": "y"}, {"symbol": "ARCH_NAND_HWECC", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAMA5D41", "value": "n", "user_value": null, "dep": "n", "prompt": "Atmel ATSAMA5D41", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMA5D4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAMA5D42", "value": "n", "user_value": null, "dep": "n", "prompt": "Atmel ATSAMA5D42", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMA5D4", "cond": "y"}, {"symbol": "SAMA5_HAVE_DDR32", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAMA5D43", "value": "n", "user_value": null, "dep": "n", "prompt": "Atmel ATSAMA5D43", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMA5D4", "cond": "y"}, {"symbol": "SAMA5_HAVE_VDEC", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAMA5D44", "value": "n", "user_value": null, "dep": "n", "prompt": "Atmel ATSAMA5D44", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMA5D4", "cond": "y"}, {"symbol": "SAMA5_HAVE_DDR32", "cond": "y"}, {"symbol": "SAMA5_HAVE_VDEC", "cond": "y"}]}]}, {"type": 31, "dep": "n", "prompt": "SAMA5 Peripheral Support", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 3, "name": "SAMA5_AES", "value": "n", "user_value": null, "dep": "n", "prompt": "Advanced Encryption Standard (AES)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TDES", "value": "n", "user_value": null, "dep": "n", "prompt": "Triple Data Encryption Standard (TDES)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_AESB", "value": "n", "user_value": null, "dep": "n", "prompt": "Advanced Encryption Bridge (AESB)", "cond": "SAMA5_HAVE_AESB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_AESB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_DBGU", "value": "n", "user_value": null, "dep": "n", "prompt": "Debug Unit (DBGU)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "OTHER_UART_SERIALDRIVER", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_PIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Periodic Interval Timer (PIT)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_WDT", "value": "n", "user_value": null, "dep": "n", "prompt": "Watchdog timer (WDT)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "WATCHDOG", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_RTC", "value": "n", "user_value": null, "dep": "n", "prompt": "Real time clock calendar (RTC)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "RTC", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "RTC_DATETIME", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_ICM", "value": "n", "user_value": null, "dep": "n", "prompt": "Integrity Check Monitor (ICM)", "cond": "SAMA5_HAVE_ICM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_ICM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HSMC", "value": "n", "user_value": null, "dep": "n", "prompt": "Static Memory Controller (HSMC)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_SMD", "value": "n", "user_value": null, "dep": "n", "prompt": "SMD Soft Modem (SMD)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_SAIC", "value": "n", "user_value": null, "dep": "n", "prompt": "Secure Advanced Interrupt Controller (SAIC)", "cond": "SAMA5_HAVE_SAIC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_SAIC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "ARMV7A_DECODEFIQ", "cond": "SAMA5_HAVE_SAIC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_RXLP", "value": "n", "user_value": null, "dep": "n", "prompt": "Low power asynchronous receiver", "cond": "SAMA5_HAVE_RXLP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMA5_HAVE_RXLP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_UART0", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 0", "cond": "SAMA5_HAVE_UART0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMA5_HAVE_UART0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "UART0_SERIALDRIVER", "cond": "SAMA5_HAVE_UART0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "SAMA5_HAVE_UART0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 1", "cond": "SAMA5_HAVE_UART1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_UART1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "SAMA5_HAVE_UART1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "SAMA5_HAVE_UART1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_UART2", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 2", "cond": "SAMA5_HAVE_UART2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_UART2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "UART2_SERIALDRIVER", "cond": "SAMA5_HAVE_UART2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "SAMA5_HAVE_UART2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_UART3", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 3", "cond": "SAMA5_HAVE_UART3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_UART3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "UART3_SERIALDRIVER", "cond": "SAMA5_HAVE_UART3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "SAMA5_HAVE_UART3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_UART4", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 4", "cond": "SAMA5_HAVE_UART4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_UART4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "SAMA5_HAVE_UART4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "SAMA5_HAVE_UART4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_USART0", "value": "n", "user_value": null, "dep": "n", "prompt": "USART 0", "cond": "SAMA5_HAVE_USART0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_USART0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "USART0_SERIALDRIVER", "cond": "SAMA5_HAVE_USART0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "SAMA5_HAVE_USART0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_USART1", "value": "n", "user_value": null, "dep": "n", "prompt": "USART 1", "cond": "SAMA5_HAVE_USART1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_USART1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "USART1_SERIALDRIVER", "cond": "SAMA5_HAVE_USART1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "SAMA5_HAVE_USART1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_USART2", "value": "n", "user_value": null, "dep": "n", "prompt": "USART 2", "cond": "SAMA5_HAVE_USART2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_USART2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "USART2_SERIALDRIVER", "cond": "SAMA5_HAVE_USART2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "SAMA5_HAVE_USART2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_USART3", "value": "n", "user_value": null, "dep": "n", "prompt": "USART 3", "cond": "SAMA5_HAVE_USART3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_USART3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "USART3_SERIALDRIVER", "cond": "SAMA5_HAVE_USART3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "SAMA5_HAVE_USART3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_USART4", "value": "n", "user_value": null, "dep": "n", "prompt": "USART 4", "cond": "SAMA5_HAVE_USART4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_USART4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "USART4_SERIALDRIVER", "cond": "SAMA5_HAVE_USART4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "SAMA5_HAVE_USART4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_FLEXCOM0", "value": "n", "user_value": null, "dep": "n", "prompt": "FLEXCOM 0", "cond": "SAMA5_HAVE_FLEXCOM0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_FLEXCOM0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_FLEXCOM", "cond": "SAMA5_HAVE_FLEXCOM0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_FLEXCOM1", "value": "n", "user_value": null, "dep": "n", "prompt": "FLEXCOM 1", "cond": "SAMA5_HAVE_FLEXCOM1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_FLEXCOM1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_FLEXCOM", "cond": "SAMA5_HAVE_FLEXCOM1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_FLEXCOM2", "value": "n", "user_value": null, "dep": "n", "prompt": "FLEXCOM 2", "cond": "SAMA5_HAVE_FLEXCOM2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_FLEXCOM2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_FLEXCOM", "cond": "SAMA5_HAVE_FLEXCOM2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_FLEXCOM3", "value": "n", "user_value": null, "dep": "n", "prompt": "FLEXCOM 3", "cond": "SAMA5_HAVE_FLEXCOM3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_FLEXCOM3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_FLEXCOM", "cond": "SAMA5_HAVE_FLEXCOM3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_FLEXCOM4", "value": "n", "user_value": null, "dep": "n", "prompt": "FLEXCOM 4", "cond": "SAMA5_HAVE_FLEXCOM4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_FLEXCOM4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_FLEXCOM", "cond": "SAMA5_HAVE_FLEXCOM4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TWI0", "value": "n", "user_value": null, "dep": "n", "prompt": "Two-Wire Interface 0 (TWI0)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TWI1", "value": "n", "user_value": null, "dep": "n", "prompt": "Two-Wire Interface 1 (TWI1)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TWI2", "value": "n", "user_value": null, "dep": "n", "prompt": "Two-Wire Interface 2 (TWI2)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TWI3", "value": "n", "user_value": null, "dep": "n", "prompt": "Two-Wire Interface 3 (TWI3)", "cond": "SAMA5_HAVE_TWI3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_TWI3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HSMCI0", "value": "n", "user_value": null, "dep": "n", "prompt": "High Speed Multimedia Card Interface 0 (HSMCI0)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SDIO", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HSMCI1", "value": "n", "user_value": null, "dep": "n", "prompt": "High Speed Multimedia Card Interface 1 (HSMCI1)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SDIO", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HSMCI2", "value": "n", "user_value": null, "dep": "n", "prompt": "High Speed Multimedia Card Interface 2 (HSMCI2)", "cond": "SAMA5_HAVE_HSMCI2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_HSMCI2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SDIO", "cond": "SAMA5_HAVE_HSMCI2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_SBM", "value": "n", "user_value": null, "dep": "n", "prompt": "Secure Box Module (SBM)", "cond": "SAMA5_HAVE_SBM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_SBM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_SFC", "value": "n", "user_value": null, "dep": "n", "prompt": "Secure Fuse Controller (SFC)", "cond": "SAMA5_HAVE_SFC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_SFC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_SPI0", "value": "n", "user_value": null, "dep": "n", "prompt": "Serial Peripheral Interface 0 (SPI0)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_SPI1", "value": "n", "user_value": null, "dep": "n", "prompt": "Serial Peripheral Interface 1 (SPI1)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_SPI2", "value": "n", "user_value": null, "dep": "n", "prompt": "Serial Peripheral Interface 2 (SPI2)", "cond": "SAMA5_HAVE_SPI2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_SPI2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC0", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer Counter 0 (ch. 0, 1, 2) (TC0)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_HAVE_TC", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC1", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer Counter 1 (ch. 3, 4, 5) (TC1)", "cond": "SAMA5_HAVE_TC1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_TC1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_HAVE_TC", "cond": "SAMA5_HAVE_TC1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC2", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer Counter 2 (ch. 6, 7, 8) (TC2)", "cond": "SAMA5_HAVE_TC2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_TC2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_HAVE_TC", "cond": "SAMA5_HAVE_TC2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "Pulse Width Modulation Controller (PWM)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "PWM", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "Touch Screen / ADC Controller (ADC)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "ANALOG", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "ADC", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_DMAC0", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA Controller 0 (DMAC0)", "cond": "SAMA5_HAVE_DMA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_DMA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_DMA", "cond": "SAMA5_HAVE_DMA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_DMAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA Controller 1 (DMAC1)", "cond": "SAMA5_HAVE_DMA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_DMA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_DMA", "cond": "SAMA5_HAVE_DMA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_XDMAC0", "value": "n", "user_value": null, "dep": "n", "prompt": "XDMA Controller (XDMAC0, always secure)", "cond": "SAMA5_HAVE_XDMA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_XDMA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_DMA", "cond": "SAMA5_HAVE_XDMA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_XDMAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "XDMA Controller (XDMAC1, never secure)", "cond": "SAMA5_HAVE_XDMA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_XDMA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_DMA", "cond": "SAMA5_HAVE_XDMA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_UHPHS", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Host High Speed (UHPHS)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_UDPHS", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Device High Speed (UDPHS)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_GMAC", "value": "n", "user_value": null, "dep": "n", "prompt": "Gigabit Ethernet MAC (GMAC)", "cond": "SAMA5_HAVE_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "NETDEVICES", "cond": "SAMA5_HAVE_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_PHY", "cond": "SAMA5_HAVE_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_EMACA", "value": "n", "user_value": null, "dep": "n", "prompt": "10/100MBps Ethernet MAC (EMAC)", "cond": "SAMA5_HAVE_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "NETDEVICES", "cond": "SAMA5_HAVE_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_PHY", "cond": "SAMA5_HAVE_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_EMACB", "value": "n", "user_value": null, "rev_dep": "(SAMA5_EMAC0 && SAMA5_HAVE_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_EMAC1 && SAMA5_HAVE_EMACB && SAMA5_HAVE_EMAC1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_EMAC0", "value": "n", "user_value": null, "dep": "n", "prompt": "10/100MBps Ethernet MAC (EMAC0)", "cond": "SAMA5_HAVE_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_EMACB", "cond": "SAMA5_HAVE_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "NETDEVICES", "cond": "SAMA5_HAVE_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_PHY", "cond": "SAMA5_HAVE_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_EMAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "10/100MBps Ethernet MAC (EMAC1)", "cond": "SAMA5_HAVE_EMACB && SAMA5_HAVE_EMAC1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_EMACB && SAMA5_HAVE_EMAC1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_EMACB", "cond": "SAMA5_HAVE_EMACB && SAMA5_HAVE_EMAC1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "NETDEVICES", "cond": "SAMA5_HAVE_EMACB && SAMA5_HAVE_EMAC1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_PHY", "cond": "SAMA5_HAVE_EMACB && SAMA5_HAVE_EMAC1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_LCDC", "value": "n", "user_value": null, "dep": "n", "prompt": "LCD Controller (LCDC)", "cond": "SAMA5_HAVE_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_ISI", "value": "n", "user_value": null, "dep": "n", "prompt": "Image Sensor Interface (ISI)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_SSC0", "value": "n", "user_value": null, "dep": "n", "prompt": "Synchronous Serial Controller 0 (SSC0)", "cond": "(SAMA5_DMAC0 || SAMA5_XDMAC0 || SAMA5_XDMAC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(SAMA5_DMAC0 || SAMA5_XDMAC0 || SAMA5_XDMAC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "I2S", "cond": "(SAMA5_DMAC0 || SAMA5_XDMAC0 || SAMA5_XDMAC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "AUDIO", "cond": "(SAMA5_DMAC0 || SAMA5_XDMAC0 || SAMA5_XDMAC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_SSC1", "value": "n", "user_value": null, "dep": "n", "prompt": "Synchronous Serial Controller 1 (SSC1)", "cond": "(SAMA5_DMAC1 || SAMA5_XDMAC0 || SAMA5_XDMAC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(SAMA5_DMAC1 || SAMA5_XDMAC0 || SAMA5_XDMAC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "I2S", "cond": "(SAMA5_DMAC1 || SAMA5_XDMAC0 || SAMA5_XDMAC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "AUDIO", "cond": "(SAMA5_DMAC1 || SAMA5_XDMAC0 || SAMA5_XDMAC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_CAN0", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN controller 0 (CAN0)", "cond": "SAMA5_HAVE_CAN0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_CAN0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "CAN", "cond": "SAMA5_HAVE_CAN0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_CAN1", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN controller 1 (CAN1)", "cond": "SAMA5_HAVE_CAN1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_CAN1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "CAN", "cond": "SAMA5_HAVE_CAN1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_SHA", "value": "n", "user_value": null, "dep": "n", "prompt": "Secure Hash Algorithm (SHA)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TRNG", "value": "n", "user_value": null, "dep": "n", "prompt": "True Random Number Generator (TRNG)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_RNG", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_ARM", "value": "n", "user_value": null, "dep": "n", "prompt": "Performance Monitor Unit (ARM)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_FUSE", "value": "n", "user_value": null, "dep": "n", "prompt": "Fuse Controller (FUSE)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_MPDDRC", "value": "n", "user_value": null, "dep": "n", "prompt": "MPDDR controller (MPDDRC)", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_VDEC", "value": "n", "user_value": null, "dep": "n", "prompt": "Video decoder (VDEC)", "cond": "SAMA5_HAVE_VDEC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_VDEC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}]}, {"type": 3, "name": "SAMA5_PIO_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "PIO pin interrupts", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "Enable support for interrupting PIO pins", "children": [{"type": 3, "name": "SAMA5_PIOA_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "PIOA interrupts", "cond": "SAMA5_PIO_IRQ && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_PIO_IRQ && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_PIOB_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "PIOB interrupts", "cond": "SAMA5_PIO_IRQ && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_PIO_IRQ && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_PIOC_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "PIOC interrupts", "cond": "SAMA5_PIO_IRQ && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_PIO_IRQ && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_PIOD_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "PIOD interrupts", "cond": "SAMA5_PIO_IRQ && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_PIO_IRQ && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_PIOE_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "PIOE interrupts", "cond": "SAMA5_HAVE_PIOE && SAMA5_PIO_IRQ && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_PIOE && SAMA5_PIO_IRQ && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}]}, {"type": 31, "dep": "n", "prompt": "Flexcom Configuration", "cond": "SAMA5_FLEXCOM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "FLEXCOM0 Configuration", "cond": "SAMA5_FLEXCOM0 && SAMA5_FLEXCOM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_FLEXCOM0_USART", "default": "n", "cond": "SAMA5_FLEXCOM0 && SAMA5_FLEXCOM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_FLEXCOM0_USART", "value": "n", "user_value": null, "dep": "n", "prompt": "USART", "cond": "y", "selects": [{"symbol": "SAMA5_FLEXCOM_USART", "cond": "y"}, {"symbol": "USART0_SERIALDRIVER", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}]}, {"type": 3, "name": "SAMA5_FLEXCOM0_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "y", "selects": [{"symbol": "SAMA5_FLEXCOM_SPI", "cond": "y"}]}, {"type": 3, "name": "SAMA5_FLEXCOM0_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "TWI", "cond": "y", "selects": [{"symbol": "SAMA5_FLEXCOM_TWI", "cond": "y"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "FLEXCOM1 Configuration", "cond": "SAMA5_FLEXCOM1 && SAMA5_FLEXCOM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_FLEXCOM1_USART", "default": "n", "cond": "SAMA5_FLEXCOM1 && SAMA5_FLEXCOM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_FLEXCOM1_USART", "value": "n", "user_value": null, "dep": "n", "prompt": "USART", "cond": "y", "selects": [{"symbol": "SAMA5_FLEXCOM_USART", "cond": "y"}, {"symbol": "USART1_SERIALDRIVER", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}]}, {"type": 3, "name": "SAMA5_FLEXCOM1_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "y", "selects": [{"symbol": "SAMA5_FLEXCOM_SPI", "cond": "y"}]}, {"type": 3, "name": "SAMA5_FLEXCOM1_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "TWI", "cond": "y", "selects": [{"symbol": "SAMA5_FLEXCOM_TWI", "cond": "y"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "FLEXCOM2 Configuration", "cond": "SAMA5_FLEXCOM2 && SAMA5_FLEXCOM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_FLEXCOM2_USART", "default": "n", "cond": "SAMA5_FLEXCOM2 && SAMA5_FLEXCOM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_FLEXCOM2_USART", "value": "n", "user_value": null, "dep": "n", "prompt": "USART", "cond": "y", "selects": [{"symbol": "SAMA5_FLEXCOM_USART", "cond": "y"}, {"symbol": "USART2_SERIALDRIVER", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}]}, {"type": 3, "name": "SAMA5_FLEXCOM2_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "y", "selects": [{"symbol": "SAMA5_FLEXCOM_SPI", "cond": "y"}]}, {"type": 3, "name": "SAMA5_FLEXCOM2_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "TWI", "cond": "y", "selects": [{"symbol": "SAMA5_FLEXCOM_TWI", "cond": "y"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "FLEXCOM3 Configuration", "cond": "SAMA5_FLEXCOM3 && SAMA5_FLEXCOM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_FLEXCOM3_USART", "default": "n", "cond": "SAMA5_FLEXCOM3 && SAMA5_FLEXCOM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_FLEXCOM3_USART", "value": "n", "user_value": null, "dep": "n", "prompt": "USART", "cond": "y", "selects": [{"symbol": "SAMA5_FLEXCOM_USART", "cond": "y"}]}, {"type": 3, "name": "SAMA5_FLEXCOM3_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "y", "selects": [{"symbol": "SAMA5_FLEXCOM_SPI", "cond": "y"}, {"symbol": "USART3_SERIALDRIVER", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}]}, {"type": 3, "name": "SAMA5_FLEXCOM3_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "TWI", "cond": "y", "selects": [{"symbol": "SAMA5_FLEXCOM_TWI", "cond": "y"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "FLEXCOM4 Configuration", "cond": "SAMA5_FLEXCOM4 && SAMA5_FLEXCOM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_FLEXCOM4_USART", "default": "n", "cond": "SAMA5_FLEXCOM4 && SAMA5_FLEXCOM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_FLEXCOM4_USART", "value": "n", "user_value": null, "dep": "n", "prompt": "USART", "cond": "y", "selects": [{"symbol": "SAMA5_FLEXCOM_USART", "cond": "y"}, {"symbol": "USART4_SERIALDRIVER", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}]}, {"type": 3, "name": "SAMA5_FLEXCOM4_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "y", "selects": [{"symbol": "SAMA5_FLEXCOM_SPI", "cond": "y"}]}, {"type": 3, "name": "SAMA5_FLEXCOM4_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "TWI", "cond": "y", "selects": [{"symbol": "SAMA5_FLEXCOM_TWI", "cond": "y"}]}]}]}, {"type": 31, "dep": "n", "prompt": "DBGU Configuration", "cond": "SAMA5_DBGU && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 3, "name": "SAMA5_DBGU_CONSOLE", "value": "n", "user_value": null, "dep": "n", "prompt": "DBGU serial console", "cond": "SAMA5_DBGU && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "Select to use the DBGU as the serial console."}, {"type": 27, "name": "SAMA5_DBGU_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "SAMA5_DBGU && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "256", "default": "256", "cond": "SAMA5_DBGU && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "SAMA5_DBGU_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "SAMA5_DBGU && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "256", "default": "256", "cond": "SAMA5_DBGU && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 3, "name": "SAMA5_DBGU_NOCONFIG", "value": "n", "user_value": null, "dep": "n", "prompt": "Suppress DBGU configuration", "cond": "SAMA5_BOOT_SDRAM && SAMA5_DBGU_CONSOLE && SAMA5_DBGU && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_BOOT_SDRAM && SAMA5_DBGU_CONSOLE && SAMA5_DBGU && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "The DBGU is often used by bootloaders to provide the bootloader\ninterface.  If the DBGU is also used as the NuttX console, then it\nwould be best to avoid reconfiguring the DBGU so that the user\nexperience is seamless going from the bootloader to the NuttX\nconsole."}, {"type": 27, "name": "SAMA5_DBGU_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "!SAMA5_DBGU_NOCONFIG && SAMA5_DBGU && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "115200", "default": "115200", "cond": "!SAMA5_DBGU_NOCONFIG && SAMA5_DBGU && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "The configured BAUD of the UART."}, {"type": 27, "name": "SAMA5_DBGU_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "!SAMA5_DBGU_NOCONFIG && SAMA5_DBGU && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!SAMA5_DBGU_NOCONFIG && SAMA5_DBGU && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "2", "cond": "!SAMA5_DBGU_NOCONFIG && SAMA5_DBGU && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "0=no parity, 1=odd parity, 2=even parity"}]}, {"type": 31, "dep": "n", "prompt": "LCDC Configuration", "cond": "SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 3, "name": "SAMA5_LCDC_BACKLIGHT", "value": "n", "user_value": null, "dep": "n", "prompt": "Backlight support", "cond": "SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 24, "name": "SAMA5_LCDC_DEFBACKLIGHT", "value": "", "user_value": null, "dep": "n", "prompt": "Default backlight level", "cond": "SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0xf0", "default": "0xf0", "cond": "SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 24, "name": "SAMA5_LCDC_BACKCOLOR", "value": "", "user_value": null, "dep": "n", "prompt": "Background color", "cond": "SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0x0", "default": "0x0", "cond": "SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 24, "name": "SAMA5_LCDC_FB_VBASE", "value": "", "user_value": null, "dep": "n", "prompt": "Framebuffer memory start address (virtual)", "cond": "SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "If you are using the LCDC, then you must provide the virtual\naddress of the start of the framebuffer.  This address must be\naligned to a 1MB bounder (i.e., the last five \"digits\" of the\nhexadecimal address must be zero)."}, {"type": 24, "name": "SAMA5_LCDC_FB_PBASE", "value": "", "user_value": null, "dep": "n", "prompt": "Framebuffer memory start address (virtual)", "cond": "SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "If you are using the LCDC, then you must provide the physical\naddress of the start of the framebuffer.  This address must be\naligned to a 1MB bounder (i.e., the last five \"digits\" of the\nhexadecimal address must be zero)."}, {"type": 27, "name": "SAMA5_LCDC_FB_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Framebuffer memory size (bytes)", "cond": "SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 6, "dep": "n", "prompt": "Base layer configuration", "cond": "SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Base layer rotation", "cond": "SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_LCDC_BASE_ROT0", "default": "n", "cond": "SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_LCDC_BASE_ROT0", "value": "n", "user_value": null, "dep": "n", "prompt": "No rotation", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_BASE_ROT90", "value": "n", "user_value": null, "dep": "n", "prompt": "90 degrees", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_BASE_ROT180", "value": "n", "user_value": null, "dep": "n", "prompt": "180 degrees", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_BASE_ROT270", "value": "n", "user_value": null, "dep": "n", "prompt": "270 degrees", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Base layer color format", "cond": "SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_LCDC_BASE_RGB565", "default": "n", "cond": "SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_LCDC_BASE_RGB444", "value": "n", "user_value": null, "dep": "n", "prompt": "12 bpp RGB 444", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_BASE_ARGB4444", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp ARGB 4444", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_BASE_RGBA4444", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp RGBA 4444", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_BASE_RGB565", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp RGB 565", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_BASE_TRGB1555", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp TRGB 1555", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_BASE_RGB666", "value": "n", "user_value": null, "dep": "n", "prompt": "18 bpp RGB 666", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_BASE_RGB666P", "value": "n", "user_value": null, "dep": "n", "prompt": "18 bpp RGB 666 packed", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_BASE_TRGB1666", "value": "n", "user_value": null, "dep": "n", "prompt": "19 bpp TRGB 1666", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_BASE_TRGBP", "value": "n", "user_value": null, "dep": "n", "prompt": "19 bpp TRGB 1666 packed", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_BASE_RGB888", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bpp RGB 888", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_BASE_RGB888P", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bpp RGB 888 packed", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_BASE_TRGB1888", "value": "n", "user_value": null, "dep": "n", "prompt": "25 bpp TRGB 1888", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_BASE_ARGB8888", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bpp ARGB 8888", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_BASE_RGBA8888", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bpp RGBA 8888", "cond": "y"}]}, {"type": 3, "name": "SAMA5_LCDC_OVR1", "value": "n", "user_value": null, "menuconfig": true, "dep": "n", "prompt": "Enable overlay 1 window", "cond": "EXPERIMENTAL && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 27, "name": "SAMA5_LCDC_OVR1_MAXHEIGHT", "value": "", "user_value": null, "dep": "n", "prompt": "Overlay 1 height (rows)", "cond": "SAMA5_LCDC_OVR1 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "480", "default": "480", "cond": "SAMA5_LCDC_OVR1 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 27, "name": "SAMA5_LCDC_OVR1_MAXWIDTH", "value": "", "user_value": null, "dep": "n", "prompt": "Overlay 1 width (pixels)", "cond": "SAMA5_LCDC_OVR1 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "800", "default": "800", "cond": "SAMA5_LCDC_OVR1 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_LCDC_OVR1_BOTTOMUP", "value": "n", "user_value": null, "dep": "n", "prompt": "Raster bottom-up", "cond": "SAMA5_LCDC_OVR1 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_LCDC_OVR1 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_LCDC_OVR1_RIGHTLEFT", "value": "n", "user_value": null, "dep": "n", "prompt": "Raster right-to-left", "cond": "SAMA5_LCDC_OVR1 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_LCDC_OVR1 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Overlay 1 rotation", "cond": "SAMA5_LCDC_OVR1 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_LCDC_OVR1_ROT0", "default": "n", "cond": "SAMA5_LCDC_OVR1 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_LCDC_OVR1_ROT0", "value": "n", "user_value": null, "dep": "n", "prompt": "No rotation", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR1_ROT90", "value": "n", "user_value": null, "dep": "n", "prompt": "90 degrees", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR1_ROT180", "value": "n", "user_value": null, "dep": "n", "prompt": "180 degrees", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR1_ROT270", "value": "n", "user_value": null, "dep": "n", "prompt": "270 degrees", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Overlay 1 color format", "cond": "SAMA5_LCDC_OVR1 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_LCDC_OVR1_RGB565", "default": "n", "cond": "SAMA5_LCDC_OVR1 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_LCDC_OVR1_RGB444", "value": "n", "user_value": null, "dep": "n", "prompt": "12 bpp RGB 444", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR1_ARGB4444", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp ARGB 4444", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR1_RGBA4444", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp RGBA 4444", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR1_RGB565", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp RGB 565", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR1_TRGB1555", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp TRGB 1555", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR1_RGB666", "value": "n", "user_value": null, "dep": "n", "prompt": "18 bpp RGB 666", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR1_RGB666P", "value": "n", "user_value": null, "dep": "n", "prompt": "18 bpp RGB 666 packed", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR1_TRGB1666", "value": "n", "user_value": null, "dep": "n", "prompt": "19 bpp TRGB 1666", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR1_TRGBP", "value": "n", "user_value": null, "dep": "n", "prompt": "19 bpp TRGB 1666 packed", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR1_RGB888", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bpp RGB 888", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR1_RGB888P", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bpp RGB 888 packed", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR1_TRGB1888", "value": "n", "user_value": null, "dep": "n", "prompt": "25 bpp TRGB 1888", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR1_ARGB8888", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bpp ARGB 8888", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR1_RGBA8888", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bpp RGBA 8888", "cond": "y"}]}]}, {"type": 3, "name": "SAMA5_LCDC_OVR2", "value": "n", "user_value": null, "menuconfig": true, "dep": "n", "prompt": "Enable overlay 2 window", "cond": "EXPERIMENTAL && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 27, "name": "SAMA5_LCDC_OVR2_MAXHEIGHT", "value": "", "user_value": null, "dep": "n", "prompt": "Overlay 2 height (rows)", "cond": "SAMA5_LCDC_OVR2 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "480", "default": "480", "cond": "SAMA5_LCDC_OVR2 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 27, "name": "SAMA5_LCDC_OVR2_MAXWIDTH", "value": "", "user_value": null, "dep": "n", "prompt": "Overlay 2 width (pixels)", "cond": "SAMA5_LCDC_OVR2 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "800", "default": "800", "cond": "SAMA5_LCDC_OVR2 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_LCDC_OVR2_BOTTOMUP", "value": "n", "user_value": null, "dep": "n", "prompt": "Raster bottom-up", "cond": "SAMA5_LCDC_OVR2 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_LCDC_OVR2 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_LCDC_OVR2_RIGHTLEFT", "value": "n", "user_value": null, "dep": "n", "prompt": "Raster right-to-left", "cond": "SAMA5_LCDC_OVR2 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_LCDC_OVR2 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Overlay 2 rotation", "cond": "SAMA5_LCDC_OVR2 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_LCDC_OVR2_ROT0", "default": "n", "cond": "SAMA5_LCDC_OVR2 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_LCDC_OVR2_ROT0", "value": "n", "user_value": null, "dep": "n", "prompt": "No rotation", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR2_ROT90", "value": "n", "user_value": null, "dep": "n", "prompt": "90 degrees", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR2_ROT180", "value": "n", "user_value": null, "dep": "n", "prompt": "180 degrees", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR2_ROT270", "value": "n", "user_value": null, "dep": "n", "prompt": "270 degrees", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Overlay 2 layer color format", "cond": "SAMA5_LCDC_OVR2 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_LCDC_OVR2_RGB565", "default": "n", "cond": "SAMA5_LCDC_OVR2 && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_LCDC_OVR2_RGB444", "value": "n", "user_value": null, "dep": "n", "prompt": "12 bpp RGB 444", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR2_ARGB4444", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp ARGB 4444", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR2_RGBA4444", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp RGBA 4444", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR2_RGB565", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp RGB 565", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR2_TRGB1555", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp TRGB 1555", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR2_RGB666", "value": "n", "user_value": null, "dep": "n", "prompt": "18 bpp RGB 666", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR2_RGB666P", "value": "n", "user_value": null, "dep": "n", "prompt": "18 bpp RGB 666 packed", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR2_TRGB1666", "value": "n", "user_value": null, "dep": "n", "prompt": "19 bpp TRGB 1666", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR2_TRGBP", "value": "n", "user_value": null, "dep": "n", "prompt": "19 bpp TRGB 1666 packed", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR2_RGB888", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bpp RGB 888", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR2_RGB888P", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bpp RGB 888 packed", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR2_TRGB1888", "value": "n", "user_value": null, "dep": "n", "prompt": "25 bpp TRGB 1888", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR2_ARGB8888", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bpp ARGB 8888", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_OVR2_RGBA8888", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bpp RGBA 8888", "cond": "y"}]}]}, {"type": 3, "name": "SAMA5_LCDC_HEO", "value": "n", "user_value": null, "dep": "n", "prompt": "High end overlay (HEO) window", "cond": "EXPERIMENTAL && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 27, "name": "SAMA5_LCDC_HEO_MAXHEIGHT", "value": "", "user_value": null, "dep": "n", "prompt": "HEO layer height (rows)", "cond": "SAMA5_LCDC_HEO && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "480", "default": "480", "cond": "SAMA5_LCDC_HEO && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 27, "name": "SAMA5_LCDC_HEO_MAXWIDTH", "value": "", "user_value": null, "dep": "n", "prompt": "HEO layer width (pixels)", "cond": "SAMA5_LCDC_HEO && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "800", "default": "800", "cond": "SAMA5_LCDC_HEO && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_LCDC_HEO_BOTTOMUP", "value": "n", "user_value": null, "dep": "n", "prompt": "Raster bottom-up", "cond": "SAMA5_LCDC_HEO && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_LCDC_HEO && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_LCDC_HEO_RIGHTLEFT", "value": "n", "user_value": null, "dep": "n", "prompt": "Raster right-to-left", "cond": "SAMA5_LCDC_HEO && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_LCDC_HEO && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "HEO layer rotation", "cond": "SAMA5_LCDC_HEO && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_LCDC_HEO_ROT0", "default": "n", "cond": "SAMA5_LCDC_HEO && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_LCDC_HEO_ROT0", "value": "n", "user_value": null, "dep": "n", "prompt": "No rotation", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HEO_ROT90", "value": "n", "user_value": null, "dep": "n", "prompt": "90 degrees", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HEO_ROT180", "value": "n", "user_value": null, "dep": "n", "prompt": "180 degrees", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HEO_ROT270", "value": "n", "user_value": null, "dep": "n", "prompt": "270 degrees", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "HEO layer color format", "cond": "SAMA5_LCDC_HEO && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_LCDC_HEO_RGB565", "default": "n", "cond": "SAMA5_LCDC_HEO && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_LCDC_HEO_RGB444", "value": "n", "user_value": null, "dep": "n", "prompt": "12 bpp RGB 444", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HEO_ARGB4444", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp ARGB 4444", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HEO_RGBA4444", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp RGBA 4444", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HEO_RGB565", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp RGB 565", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HEO_TRGB1555", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp TRGB 1555", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HEO_RGB666", "value": "n", "user_value": null, "dep": "n", "prompt": "18 bpp RGB 666", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HEO_RGB666P", "value": "n", "user_value": null, "dep": "n", "prompt": "18 bpp RGB 666 packed", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HEO_TRGB1666", "value": "n", "user_value": null, "dep": "n", "prompt": "19 bpp TRGB 1666", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HEO_TRGBP", "value": "n", "user_value": null, "dep": "n", "prompt": "19 bpp TRGB 1666 packed", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HEO_RGB888", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bpp RGB 888", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HEO_RGB888P", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bpp RGB 888 packed", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HEO_TRGB1888", "value": "n", "user_value": null, "dep": "n", "prompt": "25 bpp TRGB 1888", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HEO_ARGB8888", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bpp ARGB 8888", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HEO_RGBA8888", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bpp RGBA 8888", "cond": "y"}]}]}, {"type": 3, "name": "SAMA5_LCDC_HCR", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable hardware cursor (HCR)", "cond": "EXPERIMENTAL && FB_HWCURSOR && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && FB_HWCURSOR && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 27, "name": "SAMA5_LCDC_HCR_MAXHEIGHT", "value": "", "user_value": null, "dep": "n", "prompt": "Hardware cursor height (rows)", "cond": "SAMA5_LCDC_HCR && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "32", "default": "32", "cond": "SAMA5_LCDC_HCR && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 27, "name": "SAMA5_LCDC_HCR_MAXWIDTH", "value": "", "user_value": null, "dep": "n", "prompt": "Hardware cursor width (pixels)", "cond": "SAMA5_LCDC_HCR && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "32", "default": "32", "cond": "SAMA5_LCDC_HCR && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Hardware cursor rotation", "cond": "SAMA5_LCDC_HCR && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_LCDC_HCR_ROT0", "default": "n", "cond": "SAMA5_LCDC_HCR && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_LCDC_HCR_ROT0", "value": "n", "user_value": null, "dep": "n", "prompt": "No rotation", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HCR_ROT90", "value": "n", "user_value": null, "dep": "n", "prompt": "90 degrees", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HCR_ROT180", "value": "n", "user_value": null, "dep": "n", "prompt": "180 degrees", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HCR_ROT270", "value": "n", "user_value": null, "dep": "n", "prompt": "270 degrees", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Hardware cursor layer color format", "cond": "SAMA5_LCDC_HCR && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_LCDC_HCR_RGB565", "default": "n", "cond": "SAMA5_LCDC_HCR && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_LCDC_HCR_RGB444", "value": "n", "user_value": null, "dep": "n", "prompt": "12 bpp RGB 444", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HCR_ARGB4444", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp ARGB 4444", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HCR_RGBA4444", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp RGBA 4444", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HCR_RGB565", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp RGB 565", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HCR_TRGB1555", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp TRGB 1555", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HCR_RGB666", "value": "n", "user_value": null, "dep": "n", "prompt": "18 bpp RGB 666", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HCR_RGB666P", "value": "n", "user_value": null, "dep": "n", "prompt": "18 bpp RGB 666 packed", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HCR_TRGB1666", "value": "n", "user_value": null, "dep": "n", "prompt": "19 bpp TRGB 1666", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HCR_TRGBP", "value": "n", "user_value": null, "dep": "n", "prompt": "19 bpp TRGB 1666 packed", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HCR_RGB888", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bpp RGB 888", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HCR_RGB888P", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bpp RGB 888 packed", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HCR_TRGB1888", "value": "n", "user_value": null, "dep": "n", "prompt": "25 bpp TRGB 1888", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HCR_ARGB8888", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bpp ARGB 8888", "cond": "y"}, {"type": 3, "name": "SAMA5_LCDC_HCR_RGBA8888", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bpp RGBA 8888", "cond": "y"}]}]}, {"type": 3, "name": "SAMA5_LCDC_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register-Level Debug", "cond": "DEBUG_LCD_INFO && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_LCD_INFO && SAMA5_LCDC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable very low-level register access debug.  Depends on CONFIG_DEBUG_LCD_INFO."}]}, {"type": 31, "dep": "n", "prompt": "GMAC device driver options", "cond": "SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 27, "name": "SAMA5_GMAC_NRXBUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of RX buffers", "cond": "SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "16", "default": "16", "cond": "SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "GMAC buffer memory is segmented into 128 byte units (not\nconfigurable).  This setting provides the number of such 128 byte\nunits used for reception.  This is also equal to the number of RX\ndescriptors that will be allocated  The selected value must be an\neven power of 2."}, {"type": 27, "name": "SAMA5_GMAC_NTXBUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of TX buffers", "cond": "SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "GMAC buffer memory is segmented into full Ethernet packets (size\nNET_BUFSIZE bytes).  This setting provides the number of such packets\nthat can be in flight.  This is also equal to the number of TX\ndescriptors that will be allocated."}, {"type": 3, "name": "SAMA5_GMAC_PREALLOCATE", "value": "n", "user_value": null, "dep": "n", "prompt": "Preallocate buffers", "cond": "SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Buffer an descriptor many may either be allocated from the memory\npool or pre-allocated to lie in .bss.  This options selected pre-\nallocated buffer memory."}, {"type": 3, "name": "SAMA5_GMAC_NBC", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable Broadcast", "cond": "SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Select to disable receipt of broadcast packets."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_GMAC_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"name": "SAMA5_GMAC_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Work queue support is required to use the Ethernet driver.  If the\nlow priority work queue is available, then it should be used by the\ndriver.", "children": [{"type": 3, "name": "SAMA5_GMAC_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "SAMA5_GMAC_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}, {"type": 27, "name": "SAMA5_GMAC_PHYADDR", "value": "", "user_value": null, "dep": "n", "prompt": "PHY address", "cond": "SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "The 5-bit address of the PHY on the board.  Default: 1"}, {"type": 3, "name": "SAMA5_GMAC_PHYINIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Board-specific PHY Initialization", "cond": "SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Some boards require specialized initialization of the PHY before it can be used.\nThis may include such things as configuring GPIOs, resetting the PHY, etc.  If\nSAMA5_GMAC_PHYINIT is defined in the configuration then the board specific logic must\nprovide sam_phyinitialize();  The SAMA5 GMAC driver will call this function\none time before it first uses the PHY."}, {"type": 3, "name": "SAMA5_GMAC_AUTONEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Use autonegotiation", "cond": "SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Use PHY autonegotiation to determine speed and mode"}, {"type": 3, "name": "SAMA5_GMAC_ETHFD", "value": "n", "user_value": null, "dep": "n", "prompt": "Full duplex", "cond": "!SAMA5_GMAC_AUTONEG && SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SAMA5_GMAC_AUTONEG && SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If SAMA5_GMAC_AUTONEG is not defined, then this may be defined to\nselect full duplex mode. Default: half-duplex"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "GMAC Speed", "cond": "!SAMA5_GMAC_AUTONEG && SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_GMAC_ETH100MBPS", "default": "n", "cond": "!SAMA5_GMAC_AUTONEG && SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If autonegotiation is not used, then you must select the fixed speed\nof the PHY", "children": [{"type": 3, "name": "SAMA5_GMAC_ETH10MBPS", "value": "n", "user_value": null, "dep": "n", "prompt": "10 Mbps", "cond": "y", "help": "If SAMA5_GMAC_AUTONEG is not defined, then this may be defined to select 10 MBps\nspeed.  Default: 100 Mbps"}, {"type": 3, "name": "SAMA5_GMAC_ETH100MBPS", "value": "n", "user_value": null, "dep": "n", "prompt": "100 Mbps", "cond": "y", "help": "If SAMA5_GMAC_AUTONEG is not defined, then this may be defined to select 100 MBps\nspeed.  Default: 100 Mbps"}, {"type": 3, "name": "SAMA5_GMAC_ETH1000MBPS", "value": "n", "user_value": null, "dep": "n", "prompt": "1000 Mbps", "cond": "y", "help": "If SAMA5_GMAC_AUTONEG is not defined, then this may be defined to select 1000 MBps\nspeed.  Default: 100 Mbps"}]}, {"type": 3, "name": "SAMA5_GMAC_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register-Level Debug", "cond": "DEBUG_NET_INFO && SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_NET_INFO && SAMA5_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable very low-level register access debug.  Depends on CONFIG_DEBUG_NET_INFO."}]}, {"type": 31, "dep": "n", "prompt": "EMAC device driver options", "cond": "SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 27, "name": "SAMA5_EMAC_NRXBUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of RX buffers", "cond": "SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "16", "default": "16", "cond": "SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "EMAC buffer memory is segmented into 128 byte units (not\nconfigurable).  This setting provides the number of such 128 byte\nunits used for reception.  This is also equal to the number of RX\ndescriptors that will be allocated  The selected value must be an\neven power of 2."}, {"type": 27, "name": "SAMA5_EMAC_NTXBUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of TX buffers", "cond": "SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "EMAC buffer memory is segmented into full Ethernet packets (size\nNET_BUFSIZE bytes).  This setting provides the number of such packets\nthat can be in flight.  This is also equal to the number of TX\ndescriptors that will be allocated."}, {"type": 27, "name": "SAMA5_EMAC_PHYADDR", "value": "", "user_value": null, "dep": "n", "prompt": "PHY address", "cond": "SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "The 5-bit address of the PHY on the board.  Default: 1"}, {"type": 3, "name": "SAMA5_EMAC_PHYINIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Board-specific PHY Initialization", "cond": "SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Some boards require specialized initialization of the PHY before it can be used.\nThis may include such things as configuring GPIOs, resetting the PHY, etc.  If\nSAMA5_EMAC_PHYINIT is defined in the configuration then the board specific logic must\nprovide sam_phyinitialize();  The SAMA5 EMAC driver will call this function\none time before it first uses the PHY."}, {"type": 3, "name": "SAMA5_EMAC_MII", "value": "n", "user_value": null, "dep": "n", "prompt": "Use MII interface", "cond": "SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Support Ethernet MII interface (vs RMII)."}, {"type": 3, "name": "SAMA5_EMAC_RMII", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "!SAMA5_EMAC_MII && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"name": "n", "default": "n", "cond": "SAMA5_EMAC_MII && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_EMAC_AUTONEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Use autonegotiation", "cond": "SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Use PHY autonegotiation to determine speed and mode"}, {"type": 3, "name": "SAMA5_EMAC_ETHFD", "value": "n", "user_value": null, "dep": "n", "prompt": "Full duplex", "cond": "!SAMA5_EMAC_AUTONEG && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SAMA5_EMAC_AUTONEG && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If SAMA5_EMAC_AUTONEG is not defined, then this may be defined to select full duplex\nmode. Default: half-duplex"}, {"type": 3, "name": "SAMA5_EMAC_ETH100MBPS", "value": "n", "user_value": null, "dep": "n", "prompt": "100 Mbps", "cond": "!SAMA5_EMAC_AUTONEG && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SAMA5_EMAC_AUTONEG && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If SAMA5_EMAC_AUTONEG is not defined, then this may be defined to select 100 MBps\nspeed.  Default: 10 Mbps"}, {"type": 27, "name": "SAMA5_EMAC_PHYSR", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Status Register Address (decimal)", "cond": "SAMA5_EMAC_AUTONEG && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC_AUTONEG is defined.  The PHY status register\naddress may diff from PHY to PHY.  This configuration sets the address of\nthe PHY status register."}, {"type": 3, "name": "SAMA5_EMAC_PHYSR_ALTCONFIG", "value": "n", "user_value": null, "dep": "n", "prompt": "PHY Status Alternate Bit Layout", "cond": "SAMA5_EMAC_AUTONEG && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_EMAC_AUTONEG && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Different PHYs present speed and mode information in different ways.  Some\nwill present separate information for speed and mode (this is the default).\nThose PHYs, for example, may provide a 10/100 Mbps indication and a separate\nfull/half duplex indication. This options selects an alternative representation\nwhere speed and mode information are combined.  This might mean, for example,\nseparate bits for 10HD, 100HD, 10FD and 100FD."}, {"type": 24, "name": "SAMA5_EMAC_PHYSR_ALTMODE", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Mode Mask", "cond": "SAMA5_EMAC_PHYSR_ALTCONFIG && SAMA5_EMAC_AUTONEG && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC_AUTONEG is defined.  This provide bit mask\nfor isolating the speed and full/half duplex mode bits."}, {"type": 24, "name": "SAMA5_EMAC_PHYSR_10HD", "value": "", "user_value": null, "dep": "n", "prompt": "10MBase-T Half Duplex Value", "cond": "SAMA5_EMAC_PHYSR_ALTCONFIG && SAMA5_EMAC_AUTONEG && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 10Mbps, half duplex setting."}, {"type": 24, "name": "SAMA5_EMAC_PHYSR_100HD", "value": "", "user_value": null, "dep": "n", "prompt": "100Base-T Half Duplex Value", "cond": "SAMA5_EMAC_PHYSR_ALTCONFIG && SAMA5_EMAC_AUTONEG && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 100Mbps, half duplex setting."}, {"type": 24, "name": "SAMA5_EMAC_PHYSR_10FD", "value": "", "user_value": null, "dep": "n", "prompt": "10Base-T Full Duplex Value", "cond": "SAMA5_EMAC_PHYSR_ALTCONFIG && SAMA5_EMAC_AUTONEG && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 10Mbps, full duplex setting."}, {"type": 24, "name": "SAMA5_EMAC_PHYSR_100FD", "value": "", "user_value": null, "dep": "n", "prompt": "100Base-T Full Duplex Value", "cond": "SAMA5_EMAC_PHYSR_ALTCONFIG && SAMA5_EMAC_AUTONEG && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 100Mbps, full duplex setting."}, {"type": 24, "name": "SAMA5_EMAC_PHYSR_SPEED", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Speed Mask", "cond": "!SAMA5_EMAC_PHYSR_ALTCONFIG && SAMA5_EMAC_AUTONEG && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC_AUTONEG is defined.  This provides bit mask\nfor isolating the 10 or 100MBps speed indication."}, {"type": 24, "name": "SAMA5_EMAC_PHYSR_100MBPS", "value": "", "user_value": null, "dep": "n", "prompt": "PHY 100Mbps Speed Value", "cond": "!SAMA5_EMAC_PHYSR_ALTCONFIG && SAMA5_EMAC_AUTONEG && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC_AUTONEG is defined.  This provides the value\nof the speed bit(s) indicating 100MBps speed."}, {"type": 24, "name": "SAMA5_EMAC_PHYSR_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Mode Mask", "cond": "!SAMA5_EMAC_PHYSR_ALTCONFIG && SAMA5_EMAC_AUTONEG && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC_AUTONEG is defined.  This provide bit mask\nfor isolating the full or half duplex mode bits."}, {"type": 24, "name": "SAMA5_EMAC_PHYSR_FULLDUPLEX", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Full Duplex Mode Value", "cond": "!SAMA5_EMAC_PHYSR_ALTCONFIG && SAMA5_EMAC_AUTONEG && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC_AUTONEG is defined.  This provides the\nvalue of the mode bits indicating full duplex mode."}, {"type": 3, "name": "SAMA5_EMACA_PREALLOCATE", "value": "n", "user_value": null, "dep": "n", "prompt": "Preallocate buffers", "cond": "SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Buffer an descriptor many may either be allocated from the memory\npool or pre-allocated to lie in .bss.  This options selected pre-\nallocated buffer memory."}, {"type": 3, "name": "SAMA5_EMACA_NBC", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable Broadcast", "cond": "SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Select to disable receipt of broadcast packets."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_EMACA_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"name": "SAMA5_EMACA_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Work queue support is required to use the Ethernet driver.  If the\nlow priority work queue is available, then it should be used by the\ndriver.", "children": [{"type": 3, "name": "SAMA5_EMACA_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "SAMA5_EMACA_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}, {"type": 3, "name": "SAMA5_EMACA_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register-Level Debug", "cond": "DEBUG_NET_FEATURES && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_NET_FEATURES && SAMA5_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable very low-level register access debug.  Depends on CONFIG_DEBUG_NET_FEATURES."}]}, {"type": 31, "dep": "n", "prompt": "EMAC device driver options", "cond": "SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 31, "dep": "n", "prompt": "EMAC0 device driver options", "cond": "SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 27, "name": "SAMA5_EMAC0_NRXBUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of RX buffers", "cond": "SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "16", "default": "16", "cond": "SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "EMAC buffer memory is segmented into 128 byte units (not\nconfigurable).  This setting provides the number of such 128 byte\nunits used for reception.  This is also equal to the number of RX\ndescriptors that will be allocated  The selected value must be an\neven power of 2."}, {"type": 27, "name": "SAMA5_EMAC0_NTXBUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of TX buffers", "cond": "SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "EMAC buffer memory is segmented into full Ethernet packets (size\nNET_BUFSIZE bytes).  This setting provides the number of such packets\nthat can be in flight.  This is also equal to the number of TX\ndescriptors that will be allocated."}, {"type": 27, "name": "SAMA5_EMAC0_PHYADDR", "value": "", "user_value": null, "dep": "n", "prompt": "PHY address", "cond": "SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "The 5-bit address of the PHY on the board.  Default: 1"}, {"type": 3, "name": "SAMA5_EMAC0_PHYINIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Board-specific PHY Initialization", "cond": "SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Some boards require specialized initialization of the PHY before it can be used.\nThis may include such things as configuring GPIOs, resetting the PHY, etc.  If\nSAMA5_EMAC0_PHYINIT is defined in the configuration then the board specific logic must\nprovide sam_phyinitialize();  The SAMA5 EMAC driver will call this function\none time before it first uses the PHY."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "PHY interface", "cond": "SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_EMAC0_MII", "default": "n", "cond": "SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_EMAC0_MII", "value": "n", "user_value": null, "dep": "n", "prompt": "MII", "cond": "y", "help": "Support Ethernet MII interface (vs RMII)."}, {"type": 3, "name": "SAMA5_EMAC0_RMII", "value": "n", "user_value": null, "dep": "n", "prompt": "RMII", "cond": "!ARCH_CHIP_SAM4E && y", "help": "Support Ethernet RMII interface (vs MII)."}]}, {"type": 3, "name": "SAMA5_EMAC0_CLAUSE45", "value": "n", "user_value": null, "dep": "n", "prompt": "Clause 45 MII", "cond": "SAMA5_EMAC0_MII && SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "MDIO was originally defined in Clause 22 of IEEE RFC802.3. In the\noriginal specification, a single MDIO interface is able to access up\nto 32 registers in 32 different PHY devices.  To meet the needs the\nexpanding needs of 10-Gigabit Ethernet devices, Clause 45 of the\n802.3ae specification provided the following additions to MDIO:\n\n- Ability to access 65,536 registers in 32 different devices on\n  32 different ports\n- Additional OP-code and ST-code for Indirect Address register\n  access for 10 Gigabit Ethernet\n- End-to-end fault signaling\n- Multiple loopback points\n- Low voltage electrical specification\n\nBy default, Clause 22 PHYs will be supported unless this option is\nselected."}, {"type": 3, "name": "SAMA5_EMAC0_AUTONEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Use autonegotiation", "cond": "SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Use PHY autonegotiation to determine speed and mode"}, {"type": 3, "name": "SAMA5_EMAC0_ETHFD", "value": "n", "user_value": null, "dep": "n", "prompt": "Full duplex", "cond": "!SAMA5_EMAC0_AUTONEG && SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SAMA5_EMAC0_AUTONEG && SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If SAMA5_EMAC0_AUTONEG is not defined, then this may be defined to select full duplex\nmode. Default: half-duplex"}, {"type": 3, "name": "SAMA5_EMAC0_ETH100MBPS", "value": "n", "user_value": null, "dep": "n", "prompt": "100 Mbps", "cond": "!SAMA5_EMAC0_AUTONEG && SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SAMA5_EMAC0_AUTONEG && SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If SAMA5_EMAC0_AUTONEG is not defined, then this may be defined to select 100 MBps\nspeed.  Default: 10 Mbps"}, {"type": 27, "name": "SAMA5_EMAC0_PHYSR", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Status Register Address (decimal)", "cond": "SAMA5_EMAC0_AUTONEG && SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC0_AUTONEG is defined.  The PHY status register\naddress may diff from PHY to PHY.  This configuration sets the address of\nthe PHY status register."}, {"type": 3, "name": "SAMA5_EMAC0_PHYSR_ALTCONFIG", "value": "n", "user_value": null, "dep": "n", "prompt": "PHY Status Alternate Bit Layout", "cond": "SAMA5_EMAC0_AUTONEG && SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_EMAC0_AUTONEG && SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Different PHYs present speed and mode information in different ways.  Some\nwill present separate information for speed and mode (this is the default).\nThose PHYs, for example, may provide a 10/100 Mbps indication and a separate\nfull/half duplex indication. This options selects an alternative representation\nwhere speed and mode information are combined.  This might mean, for example,\nseparate bits for 10HD, 100HD, 10FD and 100FD."}, {"type": 24, "name": "SAMA5_EMAC0_PHYSR_ALTMODE", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Mode Mask", "cond": "SAMA5_EMAC0_PHYSR_ALTCONFIG && SAMA5_EMAC0_AUTONEG && SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC0_AUTONEG is defined.  This provide bit mask\nfor isolating the speed and full/half duplex mode bits."}, {"type": 24, "name": "SAMA5_EMAC0_PHYSR_10HD", "value": "", "user_value": null, "dep": "n", "prompt": "10MBase-T Half Duplex Value", "cond": "SAMA5_EMAC0_PHYSR_ALTCONFIG && SAMA5_EMAC0_AUTONEG && SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC0_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 10Mbps, half duplex setting."}, {"type": 24, "name": "SAMA5_EMAC0_PHYSR_100HD", "value": "", "user_value": null, "dep": "n", "prompt": "100Base-T Half Duplex Value", "cond": "SAMA5_EMAC0_PHYSR_ALTCONFIG && SAMA5_EMAC0_AUTONEG && SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC0_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 100Mbps, half duplex setting."}, {"type": 24, "name": "SAMA5_EMAC0_PHYSR_10FD", "value": "", "user_value": null, "dep": "n", "prompt": "10Base-T Full Duplex Value", "cond": "SAMA5_EMAC0_PHYSR_ALTCONFIG && SAMA5_EMAC0_AUTONEG && SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC0_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 10Mbps, full duplex setting."}, {"type": 24, "name": "SAMA5_EMAC0_PHYSR_100FD", "value": "", "user_value": null, "dep": "n", "prompt": "100Base-T Full Duplex Value", "cond": "SAMA5_EMAC0_PHYSR_ALTCONFIG && SAMA5_EMAC0_AUTONEG && SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC0_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 100Mbps, full duplex setting."}, {"type": 24, "name": "SAMA5_EMAC0_PHYSR_SPEED", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Speed Mask", "cond": "!SAMA5_EMAC0_PHYSR_ALTCONFIG && SAMA5_EMAC0_AUTONEG && SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC0_AUTONEG is defined.  This provides bit mask\nfor isolating the 10 or 100MBps speed indication."}, {"type": 24, "name": "SAMA5_EMAC0_PHYSR_100MBPS", "value": "", "user_value": null, "dep": "n", "prompt": "PHY 100Mbps Speed Value", "cond": "!SAMA5_EMAC0_PHYSR_ALTCONFIG && SAMA5_EMAC0_AUTONEG && SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC0_AUTONEG is defined.  This provides the value\nof the speed bit(s) indicating 100MBps speed."}, {"type": 24, "name": "SAMA5_EMAC0_PHYSR_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Mode Mask", "cond": "!SAMA5_EMAC0_PHYSR_ALTCONFIG && SAMA5_EMAC0_AUTONEG && SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC0_AUTONEG is defined.  This provides the\nbit mask for isolating the full or half duplex mode bits."}, {"type": 24, "name": "SAMA5_EMAC0_PHYSR_FULLDUPLEX", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Full Duplex Mode Value", "cond": "!SAMA5_EMAC0_PHYSR_ALTCONFIG && SAMA5_EMAC0_AUTONEG && SAMA5_EMAC0 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC0_AUTONEG is defined.  This provides the\nvalue of the mode bits indicating full duplex mode."}]}, {"type": 31, "dep": "n", "prompt": "EMAC1 device driver options", "cond": "SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 27, "name": "SAMA5_EMAC1_NRXBUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of RX buffers", "cond": "SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "16", "default": "16", "cond": "SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "EMAC buffer memory is segmented into 128 byte units (not\nconfigurable).  This setting provides the number of such 128 byte\nunits used for reception.  This is also equal to the number of RX\ndescriptors that will be allocated  The selected value must be an\neven power of 2."}, {"type": 27, "name": "SAMA5_EMAC1_NTXBUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of TX buffers", "cond": "SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "EMAC buffer memory is segmented into full Ethernet packets (size\nNET_BUFSIZE bytes).  This setting provides the number of such packets\nthat can be in flight.  This is also equal to the number of TX\ndescriptors that will be allocated."}, {"type": 27, "name": "SAMA5_EMAC1_PHYADDR", "value": "", "user_value": null, "dep": "n", "prompt": "PHY address", "cond": "SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "The 5-bit address of the PHY on the board.  Default: 1"}, {"type": 3, "name": "SAMA5_EMAC1_PHYINIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Board-specific PHY Initialization", "cond": "SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Some boards require specialized initialization of the PHY before it can be used.\nThis may include such things as configuring GPIOs, resetting the PHY, etc.  If\nSAMA5_EMAC1_PHYINIT is defined in the configuration then the board specific logic must\nprovide sam_phyinitialize();  The SAMA5 EMAC driver will call this function\none time before it first uses the PHY."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "PHY interface", "cond": "SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_EMAC1_MII", "default": "n", "cond": "SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_EMAC1_MII", "value": "n", "user_value": null, "dep": "n", "prompt": "MII", "cond": "y", "help": "Support Ethernet MII interface (vs RMII)."}, {"type": 3, "name": "SAMA5_EMAC1_RMII", "value": "n", "user_value": null, "dep": "n", "prompt": "RMII", "cond": "!ARCH_CHIP_SAM4E && y", "help": "Support Ethernet RMII interface (vs MII)."}]}, {"type": 3, "name": "SAMA5_EMAC1_CLAUSE45", "value": "n", "user_value": null, "dep": "n", "prompt": "Clause 45 MII", "cond": "SAMA5_EMAC1_MII && SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "MDIO was originally defined in Clause 22 of IEEE RFC802.3. In the\noriginal specification, a single MDIO interface is able to access up\nto 32 registers in 32 different PHY devices.  To meet the needs the\nexpanding needs of 10-Gigabit Ethernet devices, Clause 45 of the\n802.3ae specification provided the following additions to MDIO:\n\n- Ability to access 65,536 registers in 32 different devices on\n  32 different ports\n- Additional OP-code and ST-code for Indirect Address register\n  access for 10 Gigabit Ethernet\n- End-to-end fault signaling\n- Multiple loopback points\n- Low voltage electrical specification\n\nBy default, Clause 22 PHYs will be supported unless this option is\nselected."}, {"type": 3, "name": "SAMA5_EMAC1_AUTONEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Use autonegotiation", "cond": "SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Use PHY autonegotiation to determine speed and mode"}, {"type": 3, "name": "SAMA5_EMAC1_ETHFD", "value": "n", "user_value": null, "dep": "n", "prompt": "Full duplex", "cond": "!SAMA5_EMAC1_AUTONEG && SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SAMA5_EMAC1_AUTONEG && SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If SAMA5_EMAC1_AUTONEG is not defined, then this may be defined to select full duplex\nmode. Default: half-duplex"}, {"type": 3, "name": "SAMA5_EMAC1_ETH100MBPS", "value": "n", "user_value": null, "dep": "n", "prompt": "100 Mbps", "cond": "!SAMA5_EMAC1_AUTONEG && SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SAMA5_EMAC1_AUTONEG && SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If SAMA5_EMAC1_AUTONEG is not defined, then this may be defined to select 100 MBps\nspeed.  Default: 10 Mbps"}, {"type": 27, "name": "SAMA5_EMAC1_PHYSR", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Status Register Address (decimal)", "cond": "SAMA5_EMAC1_AUTONEG && SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC1_AUTONEG is defined.  The PHY status register\naddress may diff from PHY to PHY.  This configuration sets the address of\nthe PHY status register."}, {"type": 3, "name": "SAMA5_EMAC1_PHYSR_ALTCONFIG", "value": "n", "user_value": null, "dep": "n", "prompt": "PHY Status Alternate Bit Layout", "cond": "SAMA5_EMAC1_AUTONEG && SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_EMAC1_AUTONEG && SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Different PHYs present speed and mode information in different ways.  Some\nwill present separate information for speed and mode (this is the default).\nThose PHYs, for example, may provide a 10/100 Mbps indication and a separate\nfull/half duplex indication. This options selects an alternative representation\nwhere speed and mode information are combined.  This might mean, for example,\nseparate bits for 10HD, 100HD, 10FD and 100FD."}, {"type": 24, "name": "SAMA5_EMAC1_PHYSR_ALTMODE", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Mode Mask", "cond": "SAMA5_EMAC1_PHYSR_ALTCONFIG && SAMA5_EMAC1_AUTONEG && SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC1_AUTONEG is defined.  This provide bit mask\nfor isolating the speed and full/half duplex mode bits."}, {"type": 24, "name": "SAMA5_EMAC1_PHYSR_10HD", "value": "", "user_value": null, "dep": "n", "prompt": "10MBase-T Half Duplex Value", "cond": "SAMA5_EMAC1_PHYSR_ALTCONFIG && SAMA5_EMAC1_AUTONEG && SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC1_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 10Mbps, half duplex setting."}, {"type": 24, "name": "SAMA5_EMAC1_PHYSR_100HD", "value": "", "user_value": null, "dep": "n", "prompt": "100Base-T Half Duplex Value", "cond": "SAMA5_EMAC1_PHYSR_ALTCONFIG && SAMA5_EMAC1_AUTONEG && SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC1_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 100Mbps, half duplex setting."}, {"type": 24, "name": "SAMA5_EMAC1_PHYSR_10FD", "value": "", "user_value": null, "dep": "n", "prompt": "10Base-T Full Duplex Value", "cond": "SAMA5_EMAC1_PHYSR_ALTCONFIG && SAMA5_EMAC1_AUTONEG && SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC1_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 10Mbps, full duplex setting."}, {"type": 24, "name": "SAMA5_EMAC1_PHYSR_100FD", "value": "", "user_value": null, "dep": "n", "prompt": "100Base-T Full Duplex Value", "cond": "SAMA5_EMAC1_PHYSR_ALTCONFIG && SAMA5_EMAC1_AUTONEG && SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC1_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 100Mbps, full duplex setting."}, {"type": 24, "name": "SAMA5_EMAC1_PHYSR_SPEED", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Speed Mask", "cond": "!SAMA5_EMAC1_PHYSR_ALTCONFIG && SAMA5_EMAC1_AUTONEG && SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC1_AUTONEG is defined.  This provides bit mask\nfor isolating the 10 or 100MBps speed indication."}, {"type": 24, "name": "SAMA5_EMAC1_PHYSR_100MBPS", "value": "", "user_value": null, "dep": "n", "prompt": "PHY 100Mbps Speed Value", "cond": "!SAMA5_EMAC1_PHYSR_ALTCONFIG && SAMA5_EMAC1_AUTONEG && SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC1_AUTONEG is defined.  This provides the value\nof the speed bit(s) indicating 100MBps speed."}, {"type": 24, "name": "SAMA5_EMAC1_PHYSR_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Mode Mask", "cond": "!SAMA5_EMAC1_PHYSR_ALTCONFIG && SAMA5_EMAC1_AUTONEG && SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC1_AUTONEG is defined.  This provide bit mask\nfor isolating the full or half duplex mode bits."}, {"type": 24, "name": "SAMA5_EMAC1_PHYSR_FULLDUPLEX", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Full Duplex Mode Value", "cond": "!SAMA5_EMAC1_PHYSR_ALTCONFIG && SAMA5_EMAC1_AUTONEG && SAMA5_EMAC1 && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This must be provided if SAMA5_EMAC1_AUTONEG is defined.  This provides the\nvalue of the mode bits indicating full duplex mode."}]}, {"type": 3, "name": "SAMA5_EMACB_PREALLOCATE", "value": "n", "user_value": null, "dep": "n", "prompt": "Preallocate buffers", "cond": "SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Buffer an descriptor many may either be allocated from the memory\npool or pre-allocated to lie in .bss.  This options selected pre-\nallocated buffer memory."}, {"type": 3, "name": "SAMA5_EMACB_NBC", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable Broadcast", "cond": "SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Select to disable receipt of broadcast packets."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_EMACB_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"name": "SAMA5_EMACB_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Work queue support is required to use the Ethernet driver.  If the\nlow priority work queue is available, then it should be used by the\ndriver.", "children": [{"type": 3, "name": "SAMA5_EMACB_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "SAMA5_EMACB_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}, {"type": 3, "name": "SAMA5_EMACB_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Force EMAC0/1 DEBUG", "cond": "DEBUG_FEATURES && !DEBUG_NET && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && !DEBUG_NET && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "This option will force debug output from EMAC driver even without\nnetwork debug output enabled.  This is not normally something\nthat would want to do but is convenient if you are debugging the\ndriver and do not want to get overloaded with other\nnetwork-related debug output."}, {"type": 3, "name": "SAMA5_EMACB_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register-Level Debug", "cond": "DEBUG_NET_INFO && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_NET_INFO && SAMA5_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable very low-level register access debug.  Depends on CONFIG_DEBUG_NET_INFO."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Which device is eth0", "cond": "(SAMA5_EMACA || SAMA5_EMAC0 || SAMA5_EMAC1 || SAMA5_GMAC) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_GMAC_ISETH0", "default": "n", "cond": "SAMA5_GMAC && (SAMA5_EMACA || SAMA5_EMAC0 || SAMA5_EMAC1 || SAMA5_GMAC) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"name": "SAMA5_EMAC_ISETH0", "default": "n", "cond": "SAMA5_EMACA && !SAMA5_GMAC && (SAMA5_EMACA || SAMA5_EMAC0 || SAMA5_EMAC1 || SAMA5_GMAC) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"name": "SAMA5_EMAC0_ISETH0", "default": "n", "cond": "SAMA5_EMAC0 && !SAM_EMAC && !SAMA5_GMAC && (SAMA5_EMACA || SAMA5_EMAC0 || SAMA5_EMAC1 || SAMA5_GMAC) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"name": "SAMA5_EMAC1_ISETH0", "default": "n", "cond": "SAMA5_EMAC1 && !SAM_EMAC && !SAMA5_EMAC0 && !SAMA5_GMAC && (SAMA5_EMACA || SAMA5_EMAC0 || SAMA5_EMAC1 || SAMA5_GMAC) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_EMAC_ISETH0", "value": "n", "user_value": null, "dep": "n", "prompt": "EMAC is eth0", "cond": "SAMA5_EMACA && y"}, {"type": 3, "name": "SAMA5_EMAC0_ISETH0", "value": "n", "user_value": null, "dep": "n", "prompt": "EMAC0 is eth0", "cond": "SAMA5_EMAC0 && y"}, {"type": 3, "name": "SAMA5_EMAC1_ISETH0", "value": "n", "user_value": null, "dep": "n", "prompt": "EMAC1 is eth0", "cond": "SAMA5_EMAC1 && y"}, {"type": 3, "name": "SAMA5_GMAC_ISETH0", "value": "n", "user_value": null, "dep": "n", "prompt": "GMAC is ETH0", "cond": "SAMA5_GMAC && y"}]}, {"type": 31, "dep": "n", "prompt": "CAN device driver options", "cond": "(SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 27, "name": "SAMA5_CAN0_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "CAN0 BAUD", "cond": "SAMA5_CAN0 && SAMA5_CAN0 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "250000", "default": "250000", "cond": "SAMA5_CAN0 && SAMA5_CAN0 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "CAN0 BAUD rate.  Required if SAMA5_CAN0 is defined."}, {"type": 27, "name": "SAMA5_CAN0_NRECVMB", "value": "", "user_value": null, "dep": "n", "prompt": "Number of receive mailboxes", "cond": "SAMA5_CAN0 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_CAN0 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "3", "cond": "SAMA5_CAN0 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "The SAMA5 CAN0 peripheral supports 8 mailboxes that can be used for\nsending and receiving messages.  Up the three of these can be set\naside statically for message reception.  The remainder can be\nconfigured dynamically to send CAN messages.  Multiple receive\nmailboxes might needed to either (1) receive bursts of messages, or\n(2) to support multiple groups of messages filtered on message ID.\n\nNOTE:  The maximum of 3 is a completely arbitrary design decision\nand can certainly be changed if you need more."}, {"type": 24, "name": "SAMA5_CAN0_ADDR0", "value": "", "user_value": null, "dep": "n", "prompt": "Mailbox 0 address", "cond": "SAMA5_CAN0 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This setting defines the address for receive mailbox 0.  If CAN_EXTID\nis defined, this should be a 29-bit extended CAN address; otherwise\nit should be an 11-bit standard CAN address."}, {"type": 24, "name": "SAMA5_CAN0_MASK0", "value": "", "user_value": null, "dep": "n", "prompt": "Mailbox 0 address mask", "cond": "SAMA5_CAN0 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0x7fff", "default": "0x7fff", "cond": "!CAN_EXTID && SAMA5_CAN0 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"name": "0x1fffffff", "default": "0x1fffffff", "cond": "CAN_EXTID && SAMA5_CAN0 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "This setting defines the address mask for receive mailbox 0.  And\naddress matching SAMA5_CAN0_ADDR0 under this mask are accepted.  The\ndefault, all ones, forces an exact match.  A value of zero will accept\nany address.\n\nIf CAN_EXTID is defined, this should be a 29-bit extended CAN address\nmask; otherwise it should be an 11-bit standard CAN address."}, {"type": 24, "name": "SAMA5_CAN0_ADDR1", "value": "", "user_value": null, "dep": "n", "prompt": "Mailbox 1 address", "cond": "SAMA5_CAN0 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This setting defines the address for receive mailbox 1.  If CAN_EXTID\nis defined, this should be a 29-bit extended CAN address; otherwise\nit should be an 11-bit standard CAN address.\n\nThis setting is ignored if SAMA5_CAN0_NRECVMB is less than 2."}, {"type": 24, "name": "SAMA5_CAN0_MASK1", "value": "", "user_value": null, "dep": "n", "prompt": "Mailbox 1 address mask", "cond": "SAMA5_CAN0 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0x7fff", "default": "0x7fff", "cond": "!CAN_EXTID && SAMA5_CAN0 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"name": "0x1fffffff", "default": "0x1fffffff", "cond": "CAN_EXTID && SAMA5_CAN0 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "This setting defines the address mask for receive mailbox 1.  And\naddress matching SAMA5_CAN0_ADDR1 under this mask are accepted.  The\ndefault, all ones, forces an exact match.  A value of zero will accept\nany address.\n\nIf CAN_EXTID is defined, this should be a 29-bit extended CAN address\nmask; otherwise it should be an 11-bit standard CAN address.\n\nThis setting is ignored if SAMA5_CAN0_NRECVMB is less than 2."}, {"type": 24, "name": "SAMA5_CAN0_ADDR2", "value": "", "user_value": null, "dep": "n", "prompt": "Mailbox 2 address", "cond": "SAMA5_CAN0 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This setting defines the address for receive mailbox 2.  If CAN_EXTID\nis defined, this should be a 29-bit extended CAN address; otherwise\nit should be an 11-bit standard CAN address.\n\nThis setting is ignored if SAMA5_CAN0_NRECVMB is less than 3."}, {"type": 24, "name": "SAMA5_CAN0_MASK2", "value": "", "user_value": null, "dep": "n", "prompt": "Mailbox 1 address mask", "cond": "SAMA5_CAN0 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0x7fff", "default": "0x7fff", "cond": "!CAN_EXTID && SAMA5_CAN0 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"name": "0x1fffffff", "default": "0x1fffffff", "cond": "CAN_EXTID && SAMA5_CAN0 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "This setting defines the address mask for receive mailbox 2.  And\naddress matching SAMA5_CAN0_ADDR2 under this mask are accepted.  The\ndefault, all ones, forces an exact match.  A value of zero will accept\nany address.\n\nIf CAN_EXTID is defined, this should be a 29-bit extended CAN address\nmask; otherwise it should be an 11-bit standard CAN address.\n\nThis setting is ignored if SAMA5_CAN0_NRECVMB is less than 2."}, {"type": 27, "name": "SAMA5_CAN1_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "CAN1 BAUD", "cond": "SAMA5_CAN1 && SAMA5_CAN1 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "250000", "default": "250000", "cond": "SAMA5_CAN1 && SAMA5_CAN1 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "CAN1 BAUD rate.  Required if SAMA5_CAN1 is defined."}, {"type": 27, "name": "SAMA5_CAN1_NRECVMB", "value": "", "user_value": null, "dep": "n", "prompt": "Number of receive mailboxes", "cond": "SAMA5_CAN1 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_CAN1 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "3", "cond": "SAMA5_CAN1 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "The SAMA5 CAN1 peripheral supports 8 mailboxes that can be used for\nsending and receiving messages.  Up the three of these can be set\naside statically for message reception.  The remainder can be\nconfigured dynamically to send CAN messages.  Multiple receive\nmailboxes might needed to either (1) receive bursts of messages, or\n(2) to support multiple groups of messages filtered on message ID.\n\nNOTE:  The maximum of 3 is a completely arbitrary design decision\nand can certainly be changed if you need more."}, {"type": 24, "name": "SAMA5_CAN1_ADDR0", "value": "", "user_value": null, "dep": "n", "prompt": "Mailbox 0 address", "cond": "SAMA5_CAN1 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This setting defines the address for receive mailbox 0.  If CAN_EXTID\nis defined, this should be a 29-bit extended CAN address; otherwise\nit should be an 11-bit standard CAN address."}, {"type": 24, "name": "SAMA5_CAN1_MASK0", "value": "", "user_value": null, "dep": "n", "prompt": "Mailbox 0 address mask", "cond": "SAMA5_CAN1 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0x7fff", "default": "0x7fff", "cond": "!CAN_EXTID && SAMA5_CAN1 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"name": "0x1fffffff", "default": "0x1fffffff", "cond": "CAN_EXTID && SAMA5_CAN1 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "This setting defines the address mask for receive mailbox 0.  And\naddress matching SAMA5_CAN1_ADDR0 under this mask are accepted.  The\ndefault, all ones, forces an exact match.  A value of zero will accept\nany address.\n\nIf CAN_EXTID is defined, this should be a 29-bit extended CAN address\nmask; otherwise it should be an 11-bit standard CAN address."}, {"type": 24, "name": "SAMA5_CAN1_ADDR1", "value": "", "user_value": null, "dep": "n", "prompt": "Mailbox 1 address", "cond": "SAMA5_CAN1 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This setting defines the address for receive mailbox 1.  If CAN_EXTID\nis defined, this should be a 29-bit extended CAN address; otherwise\nit should be an 11-bit standard CAN address.\n\nThis setting is ignored if SAMA5_CAN0_NRECVMB is less than 2."}, {"type": 24, "name": "SAMA5_CAN1_MASK1", "value": "", "user_value": null, "dep": "n", "prompt": "Mailbox 1 address mask", "cond": "SAMA5_CAN1 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0x7fff", "default": "0x7fff", "cond": "!CAN_EXTID && SAMA5_CAN1 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"name": "0x1fffffff", "default": "0x1fffffff", "cond": "CAN_EXTID && SAMA5_CAN1 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "This setting defines the address mask for receive mailbox 1.  And\naddress matching SAMA5_CAN1_ADDR1 under this mask are accepted.  The\ndefault, all ones, forces an exact match.  A value of zero will accept\nany address.\n\nIf CAN_EXTID is defined, this should be a 29-bit extended CAN address\nmask; otherwise it should be an 11-bit standard CAN address.\n\nThis setting is ignored if SAMA5_CAN1_NRECVMB is less than 2."}, {"type": 24, "name": "SAMA5_CAN1_ADDR2", "value": "", "user_value": null, "dep": "n", "prompt": "Mailbox 2 address", "cond": "SAMA5_CAN1 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "help": "This setting defines the address for receive mailbox 2.  If CAN_EXTID\nis defined, this should be a 29-bit extended CAN address; otherwise\nit should be an 11-bit standard CAN address.\n\nThis setting is ignored if SAMA5_CAN1_NRECVMB is less than 3."}, {"type": 24, "name": "SAMA5_CAN1_MASK2", "value": "", "user_value": null, "dep": "n", "prompt": "Mailbox 2 address mask", "cond": "SAMA5_CAN1 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0x7fff", "default": "0x7fff", "cond": "!CAN_EXTID && SAMA5_CAN1 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"name": "0x1fffffff", "default": "0x1fffffff", "cond": "CAN_EXTID && SAMA5_CAN1 && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "This setting defines the address mask for receive mailbox 2.  And\naddress matching SAMA5_CAN1_ADDR2 under this mask are accepted.  The\ndefault, all ones, forces an exact match.  A value of zero will accept\nany address.\n\nIf CAN_EXTID is defined, this should be a 29-bit extended CAN address\nmask; otherwise it should be an 11-bit standard CAN address.\n\nThis setting is ignored if SAMA5_CAN1_NRECVMB is less than 3."}, {"type": 3, "name": "SAMA5_CAN_AUTOBAUD", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable auto-baud", "cond": "EXPERIMENTAL && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable the SAMA5 auto-baud feature.  NOTE:  This feature is not yet\nfully implemented."}, {"type": 3, "name": "SAMA5_CAN_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN Register level debug", "cond": "DEBUG_CAN_INFO && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_CAN_INFO && (SAMA5_CAN0 || SAMA5_CAN1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Output detailed register-level CAN device debug information.\nRequires also CONFIG_DEBUG_CAN_INFO."}]}, {"type": 31, "dep": "n", "prompt": "SPI device driver options", "cond": "(SAMA5_SPI0 || SAMA5_SPI1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 3, "name": "SAMA5_SPI_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI DMA", "cond": "((SAMA5_DMAC0 && SAMA5_SPI0) || (SAMA5_DMAC1 && SAMA5_SPI1)) && (SAMA5_SPI0 || SAMA5_SPI1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "((SAMA5_DMAC0 && SAMA5_SPI0) || (SAMA5_DMAC1 && SAMA5_SPI1)) && (SAMA5_SPI0 || SAMA5_SPI1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Use DMA to improve SPI transfer performance.", "children": [{"type": 27, "name": "SAMA5_SPI_DMATHRESHOLD", "value": "", "user_value": null, "dep": "n", "prompt": "SPI DMA threshold", "cond": "SAMA5_SPI_DMA && (SAMA5_SPI0 || SAMA5_SPI1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "SAMA5_SPI_DMA && (SAMA5_SPI0 || SAMA5_SPI1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "When SPI DMA is enabled, small DMA transfers will still be performed\nby polling logic.  But we need a threshold value to determine what\nis small.  That value is provided by SAMA5_SPI_DMATHRESHOLD."}, {"type": 3, "name": "SAMA5_SPI_DMADEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI DMA transfer debug", "cond": "SAMA5_SPI_DMA && DEBUG_FEATURES && DEBUG_DMA && (SAMA5_SPI0 || SAMA5_SPI1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_SPI_DMA && DEBUG_FEATURES && DEBUG_DMA && (SAMA5_SPI0 || SAMA5_SPI1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable special debug instrumentation analyze SPI DMA data transfers.\nThis logic is as non-invasive as possible:  It samples DMA\nregisters at key points in the data transfer and then dumps all of\nthe registers at the end of the transfer."}]}, {"type": 3, "name": "SAMA5_SPI_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI Register level debug", "cond": "DEBUG_SPI_INFO && (SAMA5_SPI0 || SAMA5_SPI1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_SPI_INFO && (SAMA5_SPI0 || SAMA5_SPI1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Output detailed register-level SPI device debug information.\nRequires also CONFIG_DEBUG_SPI_INFO."}]}, {"type": 31, "dep": "n", "prompt": "TWI device driver options", "cond": "(SAMA5_TWI0 || SAMA5_TWI1 || SAMA5_TWI2 || SAMA5_TWI3) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 27, "name": "SAMA5_TWI0_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "TWI0 Frequency", "cond": "SAMA5_TWI0 && (SAMA5_TWI0 || SAMA5_TWI1 || SAMA5_TWI2 || SAMA5_TWI3) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "100000", "default": "100000", "cond": "SAMA5_TWI0 && (SAMA5_TWI0 || SAMA5_TWI1 || SAMA5_TWI2 || SAMA5_TWI3) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 27, "name": "SAMA5_TWI1_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "TWI1 Frequency", "cond": "SAMA5_TWI1 && (SAMA5_TWI0 || SAMA5_TWI1 || SAMA5_TWI2 || SAMA5_TWI3) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "100000", "default": "100000", "cond": "SAMA5_TWI1 && (SAMA5_TWI0 || SAMA5_TWI1 || SAMA5_TWI2 || SAMA5_TWI3) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 27, "name": "SAMA5_TWI2_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "TWI2 Frequency", "cond": "SAMA5_TWI2 && (SAMA5_TWI0 || SAMA5_TWI1 || SAMA5_TWI2 || SAMA5_TWI3) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "100000", "default": "100000", "cond": "SAMA5_TWI2 && (SAMA5_TWI0 || SAMA5_TWI1 || SAMA5_TWI2 || SAMA5_TWI3) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 27, "name": "SAMA5_TWI3_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "TWI3 Frequency", "cond": "SAMA5_TWI3 && (SAMA5_TWI0 || SAMA5_TWI1 || SAMA5_TWI2 || SAMA5_TWI3) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "100000", "default": "100000", "cond": "SAMA5_TWI3 && (SAMA5_TWI0 || SAMA5_TWI1 || SAMA5_TWI2 || SAMA5_TWI3) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TWI_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "TWI register level debug", "cond": "DEBUG_I2C_INFO && (SAMA5_TWI0 || SAMA5_TWI1 || SAMA5_TWI2 || SAMA5_TWI3) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_I2C_INFO && (SAMA5_TWI0 || SAMA5_TWI1 || SAMA5_TWI2 || SAMA5_TWI3) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Output detailed register-level TWI device debug information.\nVery invasive! Requires also CONFIG_DEBUG_I2C_INFO."}]}, {"type": 31, "dep": "n", "prompt": "SSC Configuration", "cond": "(SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 27, "name": "SAMA5_SSC_MAXINFLIGHT", "value": "", "user_value": null, "dep": "n", "prompt": "SSC queue size", "cond": "(SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "16", "default": "16", "cond": "(SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "This is the total number of transfers, both RX and TX, that can be\nenqueue before the caller is required to wait.  This setting\ndetermines the number certain queue data structures that will be\npre-allocated."}, {"type": 6, "dep": "n", "prompt": "SSC0 Configuration", "cond": "SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"type": 27, "name": "SAMA5_SSC0_DATALEN", "value": "", "user_value": null, "dep": "n", "prompt": "Data width (bits)", "cond": "SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "16", "default": "16", "cond": "SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Data width in bits.  This is a default value and may be change\nvia the I2S interface"}, {"type": 3, "name": "SAMA5_SSC0_RX", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable I2C receiver", "cond": "SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable I2S receipt logic", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Receiver clock source", "cond": "SAMA5_SSC0_RX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_SSC0_RX_MCKDIV", "default": "n", "cond": "SAMA5_SSC0_RX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_SSC0_RX_RKINPUT", "value": "n", "user_value": null, "dep": "n", "prompt": "RK input", "cond": "y", "help": "The SSC receiver clock is an external clock provided on the RK input\npin.  Sample rate determined by the external clock frequency."}, {"type": 3, "name": "SAMA5_SSC0_RX_TXCLK", "value": "n", "user_value": null, "dep": "n", "prompt": "Transmitter Clock", "cond": "y", "help": "The SSC receiver clock is transmitter clock.  RX sample rate is the same\nas the TX sample rate."}, {"type": 3, "name": "SAMA5_SSC0_RX_MCKDIV", "value": "n", "user_value": null, "dep": "n", "prompt": "MCK/2", "cond": "y", "help": "The SSC receiver clock is the MCK/2 divided by a up to 4095.  Desired\nsample rate must be provided below."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Receiver output clock", "cond": "!SAMA5_SSC0_RX_RKINPUT && SAMA5_SSC0_RX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_SSC0_RX_RKOUTPUT_NONE", "default": "n", "cond": "!SAMA5_SSC0_RX_RKINPUT && SAMA5_SSC0_RX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_SSC0_RX_RKOUTPUT_NONE", "value": "n", "user_value": null, "dep": "n", "prompt": "None", "cond": "y"}, {"type": 3, "name": "SAMA5_SSC0_RX_RKOUTPUT_CONT", "value": "n", "user_value": null, "dep": "n", "prompt": "Continuous", "cond": "y"}, {"type": 3, "name": "SAMA5_SSC0_RX_RKOUTPUT_XFR", "value": "n", "user_value": null, "dep": "n", "prompt": "Only during transfers", "cond": "y"}]}, {"type": 27, "name": "SAMA5_SSC0_RX_FSLEN", "value": "", "user_value": null, "dep": "n", "prompt": "Receive Frame Sync Length", "cond": "SAMA5_SSC0_RX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_SSC0_RX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "255", "cond": "SAMA5_SSC0_RX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "This setting determines the pulse length of the Receive Frame Sync\nsignal in units of receive clock periods."}, {"type": 27, "name": "SAMA5_SSC0_RX_STTDLY", "value": "", "user_value": null, "dep": "n", "prompt": "Receive Start Delay Length", "cond": "SAMA5_SSC0_RX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_SSC0_RX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "255", "cond": "SAMA5_SSC0_RX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "This setting determines the pulse length to the start of data in\nreceive clock periods.  It must be greater than or equal to the RX\nframe synch length.  Zero means no start delay."}]}, {"type": 3, "name": "SAMA5_SSC0_TX", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable I2C transmitter", "cond": "SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable I2S transmission logic", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Transmitter clock source", "cond": "SAMA5_SSC0_TX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_SSC0_TX_MCKDIV", "default": "n", "cond": "SAMA5_SSC0_TX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_SSC0_TX_TKINPUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TK input", "cond": "y", "help": "The SSC transmitter clock is an external clock provided on the TK input\npin.  Sample rate determined by the external clock frequency."}, {"type": 3, "name": "SAMA5_SSC0_TX_RXCLK", "value": "n", "user_value": null, "dep": "n", "prompt": "Receiver Clock", "cond": "y", "help": "The SSC transmitter clock is receiver clock.  TX sample rate is the same\nas the RX sample rate."}, {"type": 3, "name": "SAMA5_SSC0_TX_MCKDIV", "value": "n", "user_value": null, "dep": "n", "prompt": "MCK/2", "cond": "y", "help": "The SSC transmitter clock is the MCK/2 divided by a up to 4095.  Desired\nsample rate must be provided below."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Transmitter output clock", "cond": "!SAMA5_SSC0_TX_TKINPUT && SAMA5_SSC0_TX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_SSC0_TX_TKOUTPUT_NONE", "default": "n", "cond": "!SAMA5_SSC0_TX_TKINPUT && SAMA5_SSC0_TX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_SSC0_TX_TKOUTPUT_NONE", "value": "n", "user_value": null, "dep": "n", "prompt": "None", "cond": "y"}, {"type": 3, "name": "SAMA5_SSC0_TX_TKOUTPUT_CONT", "value": "n", "user_value": null, "dep": "n", "prompt": "Continuous", "cond": "y"}, {"type": 3, "name": "SAMA5_SSC0_TX_TKOUTPUT_XFR", "value": "n", "user_value": null, "dep": "n", "prompt": "Only during transfers", "cond": "y"}]}, {"type": 27, "name": "SAMA5_SSC0_TX_FSLEN", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit Frame Sync Length", "cond": "SAMA5_SSC0_TX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_SSC0_TX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "255", "cond": "SAMA5_SSC0_TX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "This setting define the length of the Transmit Frame Sync signal in\nunits of transmit clock periods.  A value of zero disables this\nfeature.  In that case the TD line is driven with the default value\nduring the Transmit Frame Sync signal."}, {"type": 27, "name": "SAMA5_SSC0_TX_STTDLY", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit Start Delay Length", "cond": "SAMA5_SSC0_TX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_SSC0_TX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "255", "cond": "SAMA5_SSC0_TX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "This setting determines the pulse length to the start of data in\ntransmit clock periods.  It must be greater than or equal to the RX\nframe synch length.  Zero means no start delay."}]}, {"type": 27, "name": "SAMA5_SSC0_MCKDIV_SAMPLERATE", "value": "", "user_value": null, "dep": "n", "prompt": "Sample rate", "cond": "(SAMA5_SSC0_RX_MCKDIV || SAMA5_SSC0_TX_MCKDIV) && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "48000", "default": "48000", "cond": "(SAMA5_SSC0_RX_MCKDIV || SAMA5_SSC0_TX_MCKDIV) && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If the either the receiver or transmitter clock is provided by MCK/2 divided\ndown, then the sample rate must be provided.  The bit rate will be the product\nof the sample rate and the data width.  The SSC driver will determine the best\ndivider to obtain that bit rate (up to 4095).  If the bit rate can be realized\nby dividing down the MCK/2, a compile time error will occur."}, {"type": 3, "name": "SAMA5_SSC0_LOOPBACK", "value": "n", "user_value": null, "dep": "n", "prompt": "Loopback mode", "cond": "SAMA5_SSC0_TX && SAMA5_SSC0_RX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_SSC0_TX && SAMA5_SSC0_RX && SAMA5_SSC0 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If both the receiver and transmitter are enabled, then the SSC can\nbe configured in loopback mode.  This setting selects SSC loopback\nand will cause the LOOP bit to be set in the SSC_RFMR register. In\nthis case, RD is connected to TD, RF is connected to TF and RK is\nconnected to TK."}, {"type": 6, "dep": "n", "prompt": "SSC1 Configuration", "cond": "SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"type": 27, "name": "SAMA5_SSC1_DATALEN", "value": "", "user_value": null, "dep": "n", "prompt": "Data width (bits)", "cond": "SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "16", "default": "16", "cond": "SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Data width in bits.  This is a default value and may be change\nvia the I2S interface"}, {"type": 3, "name": "SAMA5_SSC1_RX", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable I2C receiver", "cond": "SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable I2S receipt logic", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Receiver clock source", "cond": "SAMA5_SSC1_RX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_SSC1_RX_MCKDIV", "default": "n", "cond": "SAMA5_SSC1_RX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_SSC1_RX_RKINPUT", "value": "n", "user_value": null, "dep": "n", "prompt": "RK input", "cond": "y", "help": "The SSC receiver clock is an external clock provided on the RK input\npin.  Sample rate determined by the external clock frequency."}, {"type": 3, "name": "SAMA5_SSC1_RX_TXCLK", "value": "n", "user_value": null, "dep": "n", "prompt": "Transmitter Clock", "cond": "y", "help": "The SSC receiver clock is transmitter clock.  RX sample rate is the same\nas the TX sample rate."}, {"type": 3, "name": "SAMA5_SSC1_RX_MCKDIV", "value": "n", "user_value": null, "dep": "n", "prompt": "MCK/2", "cond": "y", "help": "The SSC receiver clock is the MCK/2 divided by a up to 4095.  Desired\nsample rate must be provided below."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Receiver output clock", "cond": "!SAMA5_SSC1_RX_RKINPUT && SAMA5_SSC1_RX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_SSC1_RX_RKOUTPUT_NONE", "default": "n", "cond": "!SAMA5_SSC1_RX_RKINPUT && SAMA5_SSC1_RX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_SSC1_RX_RKOUTPUT_NONE", "value": "n", "user_value": null, "dep": "n", "prompt": "None", "cond": "y"}, {"type": 3, "name": "SAMA5_SSC1_RX_RKOUTPUT_CONT", "value": "n", "user_value": null, "dep": "n", "prompt": "Continuous", "cond": "y"}, {"type": 3, "name": "SAMA5_SSC1_RX_RKOUTPUT_XFR", "value": "n", "user_value": null, "dep": "n", "prompt": "Only during transfers", "cond": "y"}]}, {"type": 27, "name": "SAMA5_SSC1_RX_FSLEN", "value": "", "user_value": null, "dep": "n", "prompt": "Receive Frame Sync Length", "cond": "SAMA5_SSC1_RX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_SSC1_RX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "255", "cond": "SAMA5_SSC1_RX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "This setting determines the pulse length of the Receive Frame Sync\nsignal in units of receive clock periods."}, {"type": 27, "name": "SAMA5_SSC1_RX_STTDLY", "value": "", "user_value": null, "dep": "n", "prompt": "Receive Start Delay Length", "cond": "SAMA5_SSC1_RX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_SSC1_RX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "255", "cond": "SAMA5_SSC1_RX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "This setting determines the pulse length to the start of data of\nreceive clock periods.  It must be greater than or equal to the RX\nframe synch length.  Zero means no start delay."}]}, {"type": 3, "name": "SAMA5_SSC1_TX", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable I2C transmitter", "cond": "SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable I2S transmission logic", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Transmitter clock source", "cond": "SAMA5_SSC1_TX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_SSC1_TX_MCKDIV", "default": "n", "cond": "SAMA5_SSC1_TX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_SSC1_TX_TKINPUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TK input", "cond": "y", "help": "The SSC transmitter clock is an external clock provided on the TK input\npin.  Sample rate determined by the external clock frequency."}, {"type": 3, "name": "SAMA5_SSC1_TX_RXCLK", "value": "n", "user_value": null, "dep": "n", "prompt": "Receiver Clock", "cond": "y", "help": "The SSC transmitter clock is receiver clock.  TX sample rate is the same\nas the RX sample rate."}, {"type": 3, "name": "SAMA5_SSC1_TX_MCKDIV", "value": "n", "user_value": null, "dep": "n", "prompt": "MCK/2", "cond": "y", "help": "The SSC transmitter clock is the MCK/2 divided by a up to 4095.  Desired\nsample rate must be provided below."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Transmitter output clock", "cond": "!SAMA5_SSC1_TX_TKINPUT && SAMA5_SSC1_TX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_SSC1_TX_TKOUTPUT_NONE", "default": "n", "cond": "!SAMA5_SSC1_TX_TKINPUT && SAMA5_SSC1_TX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_SSC1_TX_TKOUTPUT_NONE", "value": "n", "user_value": null, "dep": "n", "prompt": "None", "cond": "y"}, {"type": 3, "name": "SAMA5_SSC1_TX_TKOUTPUT_CONT", "value": "n", "user_value": null, "dep": "n", "prompt": "Continuous", "cond": "y"}, {"type": 3, "name": "SAMA5_SSC1_TX_TKOUTPUT_XFR", "value": "n", "user_value": null, "dep": "n", "prompt": "Only during transfers", "cond": "y"}]}, {"type": 27, "name": "SAMA5_SSC1_TX_FSLEN", "value": "", "user_value": null, "dep": "n", "prompt": "Receive Frame Sync Length", "cond": "SAMA5_SSC1_TX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_SSC1_TX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "255", "cond": "SAMA5_SSC1_TX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "This setting define the length of the Transmit Frame Sync signal in\nunits of transmit clock periods.  A value of zero disables this\nfeature.  In that case the TD line is driven with the default value\nduring the Transmit Frame Sync signal."}, {"type": 27, "name": "SAMA5_SSC1_TX_STTDLY", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit Start Delay Length", "cond": "SAMA5_SSC1_TX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_SSC1_TX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "255", "cond": "SAMA5_SSC1_TX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "This setting determines the pulse length to the start of data in\ntransmit clock periods.  It must be greater than or equal to the RX\nframe synch length.  Zero means no start delay."}]}, {"type": 27, "name": "SAMA5_SSC1_MCKDIV_SAMPLERATE", "value": "", "user_value": null, "dep": "n", "prompt": "Sample rate", "cond": "(SAMA5_SSC1_RX_MCKDIV || SAMA5_SSC1_TX_MCKDIV) && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "48000", "default": "48000", "cond": "(SAMA5_SSC1_RX_MCKDIV || SAMA5_SSC1_TX_MCKDIV) && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If the either the receiver or transmitter clock is provided by MCK/2 divided\ndown, then the sample rate must be provided.  The bit rate will be the product\nof the sample rate and the data width.  The SSC driver will determine the best\ndivider to obtain that bit rate (up to 4095).  If the bit rate can be realized\nby dividing down the MCK/2, a compile time error will occur."}, {"type": 3, "name": "SAMA5_SSC1_LOOPBACK", "value": "n", "user_value": null, "dep": "n", "prompt": "Loopback mode", "cond": "SAMA5_SSC1_TX && SAMA5_SSC1_RX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_SSC1_TX && SAMA5_SSC1_RX && SAMA5_SSC1 && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If both the receiver and transmitter are enabled, then the SSC can\nbe configured in loopback mode.  This setting selects SSC loopback\nand will cause the LOOP bit to be set in the SSC_RFMR register. In\nthis case, RD is connected to TD, RF is connected to TF and RK is\nconnected to TK."}, {"type": 3, "name": "SAMA5_SSC_DMADEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "SSC DMA transfer debug", "cond": "DEBUG_FEATURES && DEBUG_DMA && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && DEBUG_DMA && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable special debug instrumentation analyze SSC DMA data transfers.\nThis logic is as non-invasive as possible:  It samples DMA\nregisters at key points in the data transfer and then dumps all of\nthe registers at the end of the transfer."}, {"type": 3, "name": "SAMA5_SSC_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "SSC Register level debug", "cond": "DEBUG_I2S_INFO && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_I2S_INFO && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Output detailed register-level SSC device debug information.\nVery invasive! Requires also CONFIG_DEBUG_I2S_INFO."}, {"type": 3, "name": "SAMA5_SSC_QDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "SSC Queue debug", "cond": "DEBUG_I2S && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_I2S && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable instrumentation to debug audio buffer queue logic."}, {"type": 3, "name": "SAMA5_SSC_DUMPBUFFERS", "value": "n", "user_value": null, "dep": "n", "prompt": "Dump Buffers", "cond": "DEBUG_I2S && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_I2S && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable instrumentation to dump TX and RX buffers."}]}, {"type": 31, "dep": "n", "prompt": "HSMCI device driver options", "cond": "(SAMA5_HSMCI0 || SAMA5_HSMCI1 || SAMA5_HSMCI2) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "HSMCI0 XDMAC Selection", "cond": "SAMA5_HSMCI0 && (SAMA5_XDMAC0 || SAMA5_XDMAC1) && (SAMA5_HSMCI0 || SAMA5_HSMCI1 || SAMA5_HSMCI2) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_HSMCI0_XDMAC0", "default": "n", "cond": "SAMA5_XDMAC0 && SAMA5_HSMCI0 && (SAMA5_XDMAC0 || SAMA5_XDMAC1) && (SAMA5_HSMCI0 || SAMA5_HSMCI1 || SAMA5_HSMCI2) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"name": "SAMA5_HSMCI0_XDMAC1", "default": "n", "cond": "!SAMA5_XDMAC0 && SAMA5_XDMAC1 && SAMA5_HSMCI0 && (SAMA5_XDMAC0 || SAMA5_XDMAC1) && (SAMA5_HSMCI0 || SAMA5_HSMCI1 || SAMA5_HSMCI2) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_HSMCI0_XDMAC0", "value": "n", "user_value": null, "dep": "n", "prompt": "XDMAC0 (always secure)", "cond": "SAMA5_XDMAC0 && y"}, {"type": 3, "name": "SAMA5_HSMCI0_XDMAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "XDMAC1 (never secure)", "cond": "SAMA5_XDMAC1 && y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "HSMCI1 XDMAC Selection", "cond": "SAMA5_HSMCI1 && (SAMA5_XDMAC0 || SAMA5_XDMAC1) && (SAMA5_HSMCI0 || SAMA5_HSMCI1 || SAMA5_HSMCI2) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_HSMCI1_XDMAC0", "default": "n", "cond": "SAMA5_XDMAC0 && SAMA5_HSMCI1 && (SAMA5_XDMAC0 || SAMA5_XDMAC1) && (SAMA5_HSMCI0 || SAMA5_HSMCI1 || SAMA5_HSMCI2) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"name": "SAMA5_HSMCI1_XDMAC1", "default": "n", "cond": "!SAMA5_XDMAC0 && SAMA5_XDMAC1 && SAMA5_HSMCI1 && (SAMA5_XDMAC0 || SAMA5_XDMAC1) && (SAMA5_HSMCI0 || SAMA5_HSMCI1 || SAMA5_HSMCI2) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_HSMCI1_XDMAC0", "value": "n", "user_value": null, "dep": "n", "prompt": "XDMAC0 (always secure)", "cond": "SAMA5_XDMAC0 && y"}, {"type": 3, "name": "SAMA5_HSMCI1_XDMAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "XDMAC1 (never secure)", "cond": "SAMA5_XDMAC1 && y"}]}, {"type": 3, "name": "SAMA5_HSMCI_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "Support DMA data transfers", "cond": "(SAMA5_HSMCI0 || SAMA5_HSMCI1 || SAMA5_HSMCI2) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "(SAMA5_HSMCI0 || SAMA5_HSMCI1 || SAMA5_HSMCI2) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SDIO_DMA", "cond": "(SAMA5_HSMCI0 || SAMA5_HSMCI1 || SAMA5_HSMCI2) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Support DMA data transfers.\nEnable SD card DMA data transfers.  This is marginally optional.\nFor most usages, SD accesses will cause data overruns if used without\nDMA."}, {"type": 3, "name": "SAMA5_HSMCI_RDPROOF", "value": "n", "user_value": null, "dep": "n", "prompt": "Read Proof Enable", "cond": "(SAMA5_HSMCI0 || SAMA5_HSMCI1 || SAMA5_HSMCI2) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(SAMA5_HSMCI0 || SAMA5_HSMCI1 || SAMA5_HSMCI2) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enabling Read Proof allows to stop the HSMCI Clock during read\naccess if the internal FIFO is full. This will guarantee data\nintegrity, not bandwidth."}, {"type": 3, "name": "SAMA5_HSMCI_WRPROOF", "value": "n", "user_value": null, "dep": "n", "prompt": "Write Proof Enable", "cond": "(SAMA5_HSMCI0 || SAMA5_HSMCI1 || SAMA5_HSMCI2) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(SAMA5_HSMCI0 || SAMA5_HSMCI1 || SAMA5_HSMCI2) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enabling Write Proof allows to stop the HSMCI Clock during write\naccess if the internal FIFO is full. This will guarantee data\nintegrity, not bandwidth."}, {"type": 3, "name": "SAMA5_HSMCI_XFRDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "HSMCI transfer debug", "cond": "DEBUG_FS_INFO && (SAMA5_HSMCI0 || SAMA5_HSMCI1 || SAMA5_HSMCI2) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FS_INFO && (SAMA5_HSMCI0 || SAMA5_HSMCI1 || SAMA5_HSMCI2) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable special debug instrumentation analyze HSMCI data transfers.\nThis logic is as non-invasive as possible:  It samples HSMCI\nregisters at key points in the data transfer and then dumps all of\nthe registers at the end of the transfer.  If DEBUG_DMA is also\nenabled, then DMA register will be collected as well.  Requires also\nDEBUG_FS and CONFIG_DEBUG_INFO."}, {"type": 3, "name": "SAMA5_HSMCI_CMDDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "HSMCI command debug", "cond": "DEBUG_FS_INFO && (SAMA5_HSMCI0 || SAMA5_HSMCI1 || SAMA5_HSMCI2) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FS_INFO && (SAMA5_HSMCI0 || SAMA5_HSMCI1 || SAMA5_HSMCI2) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable special debug instrumentation analyze HSMCI commands. This\nlogic is as non-invasive as possible:  It samples HSMCI registers at\nkey points in the data transfer and then dumps all of the registers\nat the end of the transfer.  If DEBUG_DMA is also enabled, then DMA\nregister will be collected as well.  Requires also DEBUG_FS and\nCONFIG_DEBUG_INFO."}, {"type": 3, "name": "SAMA5_HSMCI_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "HSMCI Register level debug", "cond": "DEBUG_MEMCARD_INFO && (SAMA5_HSMCI0 || SAMA5_HSMCI1 || SAMA5_HSMCI2) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_MEMCARD_INFO && (SAMA5_HSMCI0 || SAMA5_HSMCI1 || SAMA5_HSMCI2) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Output detailed register-level HSCMI device debug information.\nVery invasive! Requires also CONFIG_DEBUG_MEMCARD_INFO."}]}, {"type": 31, "dep": "n", "prompt": "USB High Speed Device Controller driver (DCD) options", "cond": "SAMA5_UDPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 3, "name": "SAMA5_UDPHS_SCATTERGATHER", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && SAMA5_UDPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Scatter gather DMA is not yet supported"}, {"type": 27, "name": "SAMA5_UDPHS_NDTDS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of UDPHS DMA transfer descriptors", "cond": "SAMA5_UDPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "SAMA5_UDPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "DMA transfer descriptors are allocated in a pool at boot time.  This\nsetting provides the number of DMA transfer descriptors to be\nallocated."}, {"type": 3, "name": "SAMA5_UDPHS_PREALLOCATE", "value": "n", "user_value": null, "dep": "n", "prompt": "Pre-allocate DMA transfer descriptors", "cond": "SAMA5_UDPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMA5_UDPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If this option is selected then DMA transfer descriptors will be\npre-allocated in .bss.  Otherwise, the descriptors will be allocated\nat start-up time with kmm_malloc().  This might be important if a larger\nmemory pool is available after startup."}, {"type": 3, "name": "SAMA5_UDPHS_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable low-level UDPHS register debug", "cond": "DEBUG_USB_INFO && SAMA5_UDPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_USB_INFO && SAMA5_UDPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}]}, {"type": 31, "dep": "n", "prompt": "USB High Speed Host Controller driver (HCD) options", "cond": "SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 3, "name": "SAMA5_OHCI", "value": "n", "user_value": null, "dep": "n", "prompt": "Full/low speed OHCI support", "cond": "SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "USBHOST", "cond": "SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "USBHOST_HAVE_ASYNCH", "cond": "SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Build support for the SAMA5 USB full speed Open Host Controller\nInterface (OHCI).", "children": [{"type": 27, "name": "SAMA5_OHCI_NEDS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of endpoint descriptors", "cond": "SAMA5_OHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "6", "default": "6", "cond": "SAMA5_OHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 27, "name": "SAMA5_OHCI_NTDS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of transfer descriptors", "cond": "SAMA5_OHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "9", "default": "9", "cond": "SAMA5_OHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 27, "name": "SAMA5_OHCI_TDBUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of transfer descriptor buffers", "cond": "SAMA5_OHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "6", "default": "6", "cond": "SAMA5_OHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 27, "name": "SAMA5_OHCI_TDBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Size of one transfer descriptor buffer", "cond": "SAMA5_OHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "128", "default": "128", "cond": "SAMA5_OHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "The size of one transfer descriptor (TD) buffer in bytes.  The TD\nbuffer size must be an even number of 32-bit words"}, {"type": 3, "name": "SAMA5_OHCI_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable low-level OHCI register debug", "cond": "DEBUG_USB_INFO && SAMA5_OHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_USB_INFO && SAMA5_OHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}]}, {"type": 3, "name": "SAMA5_EHCI", "value": "n", "user_value": null, "dep": "n", "prompt": "High speed EHCI support", "cond": "SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "USBHOST", "cond": "SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"symbol": "USBHOST_HAVE_ASYNCH", "cond": "SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Build support for the SAMA5 USB high speed Enhanced Host Controller\nInterface (EHCI).  If low/full speed is needed too, then you must\nalso enable the OHCI controller.", "children": [{"type": 27, "name": "SAMA5_EHCI_NQHS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of Queue Head (QH) structures", "cond": "SAMA5_EHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "SAMA5_EHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Configurable number of Queue Head (QH) structures.  The default is\none per Root hub port plus one for EP0 (4)."}, {"type": 27, "name": "SAMA5_EHCI_NQTDS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of Queue Element Transfer Descriptor (qTDs)", "cond": "SAMA5_EHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "6", "default": "6", "cond": "SAMA5_EHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Configurable number of Queue Element Transfer Descriptor (qTDs).\nThe default is one per root hub plus three from EP0 (6)."}, {"type": 27, "name": "SAMA5_EHCI_BUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Size of one request/descriptor buffer", "cond": "SAMA5_EHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "128", "default": "128", "cond": "SAMA5_EHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "The size of one request/descriptor buffer in bytes.  The TD buffe\nsize must be an even number of 32-bit words and must be large enough\nto hangle the largest transfer via a SETUP request."}, {"type": 3, "name": "SAMA5_EHCI_PREALLOCATE", "value": "n", "user_value": null, "dep": "n", "prompt": "Preallocate descriptor pool", "cond": "SAMA5_EHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMA5_EHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Select this option to pre-allocate EHCI queue and descriptor\nstructure pools in .bss.  Otherwise, these pools will be\ndynamically allocated using kmm_memalign()."}, {"type": 3, "name": "SAMA5_EHCI_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable low-level EHCI register debug", "cond": "DEBUG_USB_INFO && SAMA5_EHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_USB_INFO && SAMA5_EHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}]}, {"type": 3, "name": "SAMA5_UHPHS_RHPORT1", "value": "n", "user_value": null, "dep": "n", "prompt": "Use Port A", "cond": "!SAMA5_UDPHS && (SAMA5_OHCI || SAMA5_EHCI) && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "!SAMA5_UDPHS && (SAMA5_OHCI || SAMA5_EHCI) && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_UHPHS_RHPORT2", "value": "n", "user_value": null, "dep": "n", "prompt": "Use Port B", "cond": "(SAMA5_OHCI || SAMA5_EHCI) && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "(SAMA5_OHCI || SAMA5_EHCI) && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_UHPHS_RHPORT3", "value": "n", "user_value": null, "dep": "n", "prompt": "Use Port C", "cond": "(SAMA5_OHCI || SAMA5_EHCI) && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "(SAMA5_OHCI || SAMA5_EHCI) && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}]}, {"type": 31, "dep": "n", "prompt": "ADC configuration", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 3, "name": "SAMA5_ADC_HAVE_CHAN", "value": "n", "user_value": null, "rev_dep": "(SAMA5_ADC_CHAN0 && !SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_ADC_CHAN1 && !SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_ADC_CHAN2 && !SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_ADC_CHAN3 && !SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_ADC_CHAN4 && (!SAMA5_TSD || !SAMA5_TSD_5WIRE) && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_ADC_CHAN5 && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_ADC_CHAN6 && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_ADC_CHAN7 && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_ADC_CHAN8 && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_ADC_CHAN9 && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_ADC_CHAN10 && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_ADC_CHAN11 && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 31, "dep": "n", "prompt": "ADC Channel selection", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 3, "name": "SAMA5_ADC_CHAN0", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 0", "cond": "!SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_ADC_HAVE_CHAN", "cond": "!SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable ADC sampling on ADC channel 0"}, {"type": 3, "name": "SAMA5_ADC_CHAN1", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 1", "cond": "!SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_ADC_HAVE_CHAN", "cond": "!SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable ADC sampling on ADC channel 1"}, {"type": 3, "name": "SAMA5_ADC_CHAN2", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 2", "cond": "!SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_ADC_HAVE_CHAN", "cond": "!SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable ADC sampling on ADC channel 2"}, {"type": 3, "name": "SAMA5_ADC_CHAN3", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 3", "cond": "!SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_ADC_HAVE_CHAN", "cond": "!SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable ADC sampling on ADC channel 3"}, {"type": 3, "name": "SAMA5_ADC_CHAN4", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 4", "cond": "(!SAMA5_TSD || !SAMA5_TSD_5WIRE) && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(!SAMA5_TSD || !SAMA5_TSD_5WIRE) && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_ADC_HAVE_CHAN", "cond": "(!SAMA5_TSD || !SAMA5_TSD_5WIRE) && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable ADC sampling on ADC channel 4"}, {"type": 3, "name": "SAMA5_ADC_CHAN5", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 5", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_ADC_HAVE_CHAN", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable ADC sampling on ADC channel 5"}, {"type": 3, "name": "SAMA5_ADC_CHAN6", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 6", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_ADC_HAVE_CHAN", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable ADC sampling on ADC channel 6"}, {"type": 3, "name": "SAMA5_ADC_CHAN7", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 7", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_ADC_HAVE_CHAN", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable ADC sampling on ADC channel 7"}, {"type": 3, "name": "SAMA5_ADC_CHAN8", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 8", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_ADC_HAVE_CHAN", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable ADC sampling on ADC channel 8"}, {"type": 3, "name": "SAMA5_ADC_CHAN9", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 9", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_ADC_HAVE_CHAN", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable ADC sampling on ADC channel 9"}, {"type": 3, "name": "SAMA5_ADC_CHAN10", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 10", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_ADC_HAVE_CHAN", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable ADC sampling on ADC channel 10"}, {"type": 3, "name": "SAMA5_ADC_CHAN11", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 11", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "SAMA5_ADC_HAVE_CHAN", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable ADC sampling on ADC channel 11"}]}, {"type": 3, "name": "SAMA5_ADC_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA Support", "cond": "SAMA5_DMAC1 && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_DMAC1 && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable DMA transfers of converted data.  This option is only\nuseful if you have numerous DMA channels enabled.  The end result\nis that there will be one DMA interrupt per conversion sequence vs.\none interrupt per conversion.", "children": [{"type": 27, "name": "SAMA5_ADC_DMASAMPLES", "value": "", "user_value": null, "dep": "n", "prompt": "Number of DMA samples", "cond": "SAMA5_ADC_DMA && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "SAMA5_ADC_DMA && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If DMA is enabled, then this will specify the number of sample to\ncollect before the DMA completes.  This is actually the number of\ntriggers; the number of collected samples will be this value times\nthe number of channels that are enabled.  You should also enable the\nsequencer if you are DMAing multiple channels.\n\nA value of \"1\" would DMA one set of samples.  That is not advised.\nIn that case the processing and data transfer overhead would be\ngreater than if DMA were disabled.  A value of 2 or more should be\nselected.\n\nThe DMA logic uses ping-pong buffers, so the total buffering\nrequirement will be\n\n        2 Buffers * Number_of_ADC_Channels * SAMA5_ADC_DMASAMPLES * sizeof(uint16_t)\n\nSo, for example, if you had 8 ADC channels and 8 triggers per DMA\ntransfer, then the total DMA buffering requirment would be:\n\n        2 * 8 * 8 * 2 = 256 bytes."}]}, {"type": 3, "name": "SAMA5_ADC_AUTOCALIB", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC auto-calibration", "cond": "SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Perform ADC auto-calibration during the ADC initialization sequence"}, {"type": 3, "name": "SAMA5_ADC_SEQUENCER", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC sequencer", "cond": "SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable the sequencer to perform ADC conversions.  Recommended if you\nenable several ADC channels."}, {"type": 3, "name": "SAMA5_ADC_ANARCH", "value": "n", "user_value": null, "dep": "n", "prompt": "Analog changes", "cond": "SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "This option allows you to select different gain, offset, and single\nvs. differential modes for each channel.", "children": [{"type": 31, "dep": "n", "prompt": "Channel gain", "cond": "SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 27, "name": "SAMA5_ADC_GAIN0", "value": "", "user_value": null, "dep": "n", "prompt": "Channel 0 gain", "cond": "SAMA5_ADC_CHAN0 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_ADC_CHAN0 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "3", "cond": "SAMA5_ADC_CHAN0 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Valid gain settings are {0, 1, 2, 3} which may be interpreted as\neither {1, 1, 2, 4} if the channel is configured for single ended\nmode or as {0.5, 1, 2, 2} if the channel is configured for\ndifferential mode."}, {"type": 27, "name": "SAMA5_ADC_GAIN1", "value": "", "user_value": null, "dep": "n", "prompt": "Channel 1 gain", "cond": "SAMA5_ADC_CHAN1 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_ADC_CHAN1 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "3", "cond": "SAMA5_ADC_CHAN1 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Valid gain settings are {0, 1, 2, 3} which may be interpreted as\neither {1, 1, 2, 4} if the channel is configured for single ended\nmode or as {0.5, 1, 2, 2} if the channel is configured for\ndifferential mode."}, {"type": 27, "name": "SAMA5_ADC_GAIN2", "value": "", "user_value": null, "dep": "n", "prompt": "Channel 2 gain", "cond": "SAMA5_ADC_CHAN2 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_ADC_CHAN2 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "3", "cond": "SAMA5_ADC_CHAN2 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Valid gain settings are {0, 1, 2, 3} which may be interpreted as\neither {1, 1, 2, 4} if the channel is configured for single ended\nmode or as {0.5, 1, 2, 2} if the channel is configured for\ndifferential mode."}, {"type": 27, "name": "SAMA5_ADC_GAIN3", "value": "", "user_value": null, "dep": "n", "prompt": "Channel 3 gain", "cond": "SAMA5_ADC_CHAN3 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_ADC_CHAN3 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "3", "cond": "SAMA5_ADC_CHAN3 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Valid gain settings are {0, 1, 2, 3} which may be interpreted as\neither {1, 1, 2, 4} if the channel is configured for single ended\nmode or as {0.5, 1, 2, 2} if the channel is configured for\ndifferential mode."}, {"type": 27, "name": "SAMA5_ADC_GAIN4", "value": "", "user_value": null, "dep": "n", "prompt": "Channel 4 gain", "cond": "SAMA5_ADC_CHAN4 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_ADC_CHAN4 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "3", "cond": "SAMA5_ADC_CHAN4 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Valid gain settings are {0, 1, 2, 3} which may be interpreted as\neither {1, 1, 2, 4} if the channel is configured for single ended\nmode or as {0.5, 1, 2, 2} if the channel is configured for\ndifferential mode."}, {"type": 27, "name": "SAMA5_ADC_GAIN5", "value": "", "user_value": null, "dep": "n", "prompt": "Channel 5 gain", "cond": "SAMA5_ADC_CHAN5 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_ADC_CHAN5 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "3", "cond": "SAMA5_ADC_CHAN5 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Valid gain settings are {0, 1, 2, 3} which may be interpreted as\neither {1, 1, 2, 4} if the channel is configured for single ended\nmode or as {0.5, 1, 2, 2} if the channel is configured for\ndifferential mode."}, {"type": 27, "name": "SAMA5_ADC_GAIN6", "value": "", "user_value": null, "dep": "n", "prompt": "Channel 6 gain", "cond": "SAMA5_ADC_CHAN6 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_ADC_CHAN6 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "3", "cond": "SAMA5_ADC_CHAN6 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Valid gain settings are {0, 1, 2, 3} which may be interpreted as\neither {1, 1, 2, 4} if the channel is configured for single ended\nmode or as {0.5, 1, 2, 2} if the channel is configured for\ndifferential mode."}, {"type": 27, "name": "SAMA5_ADC_GAIN7", "value": "", "user_value": null, "dep": "n", "prompt": "Channel 7 gain", "cond": "SAMA5_ADC_CHAN7 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_ADC_CHAN7 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "3", "cond": "SAMA5_ADC_CHAN7 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Valid gain settings are {0, 1, 2, 3} which may be interpreted as\neither {1, 1, 2, 4} if the channel is configured for single ended\nmode or as {0.5, 1, 2, 2} if the channel is configured for\ndifferential mode."}, {"type": 27, "name": "SAMA5_ADC_GAIN8", "value": "", "user_value": null, "dep": "n", "prompt": "Channel 8 gain", "cond": "SAMA5_ADC_CHAN8 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_ADC_CHAN8 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "3", "cond": "SAMA5_ADC_CHAN8 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Valid gain settings are {0, 1, 2, 3} which may be interpreted as\neither {1, 1, 2, 4} if the channel is configured for single ended\nmode or as {0.5, 1, 2, 2} if the channel is configured for\ndifferential mode."}, {"type": 27, "name": "SAMA5_ADC_GAIN9", "value": "", "user_value": null, "dep": "n", "prompt": "Channel 9 gain", "cond": "SAMA5_ADC_CHAN9 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_ADC_CHAN9 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "3", "cond": "SAMA5_ADC_CHAN9 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Valid gain settings are {0, 1, 2, 3} which may be interpreted as\neither {1, 1, 2, 4} if the channel is configured for single ended\nmode or as {0.5, 1, 2, 2} if the channel is configured for\ndifferential mode."}, {"type": 27, "name": "SAMA5_ADC_GAIN10", "value": "", "user_value": null, "dep": "n", "prompt": "Channel 10 gain", "cond": "SAMA5_ADC_CHAN10 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_ADC_CHAN10 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "3", "cond": "SAMA5_ADC_CHAN10 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Valid gain settings are {0, 1, 2, 3} which may be interpreted as\neither {1, 1, 2, 4} if the channel is configured for single ended\nmode or as {0.5, 1, 2, 2} if the channel is configured for\ndifferential mode."}, {"type": 27, "name": "SAMA5_ADC_GAIN11", "value": "", "user_value": null, "dep": "n", "prompt": "Channel 11 gain", "cond": "SAMA5_ADC_CHAN11 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_ADC_CHAN11 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "3", "cond": "SAMA5_ADC_CHAN11 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Valid gain settings are {0, 1, 2, 3} which may be interpreted as\neither {1, 1, 2, 4} if the channel is configured for single ended\nmode or as {0.5, 1, 2, 2} if the channel is configured for\ndifferential mode."}]}, {"type": 31, "dep": "n", "prompt": "Channel offsets", "cond": "SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 3, "name": "SAMA5_ADC_OFFSET0", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 0 offset", "cond": "SAMA5_ADC_CHAN0 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN0 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Center the channel 0 analog signal on Vrefin/2 before the gain\nscaling."}, {"type": 3, "name": "SAMA5_ADC_OFFSET1", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 1 offset", "cond": "SAMA5_ADC_CHAN1 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN1 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Center the channel 1 analog signal on Vrefin/2 before the gain\nscaling."}, {"type": 3, "name": "SAMA5_ADC_OFFSET2", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 2 offset", "cond": "SAMA5_ADC_CHAN2 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN2 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Center the channel 2 analog signal on Vrefin/2 before the gain\nscaling."}, {"type": 3, "name": "SAMA5_ADC_OFFSET3", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 3 offset", "cond": "SAMA5_ADC_CHAN3 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN3 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Center the channel 3 analog signal on Vrefin/2 before the gain\nscaling."}, {"type": 3, "name": "SAMA5_ADC_OFFSET4", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 4 offset", "cond": "SAMA5_ADC_CHAN4 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN4 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Center the channel 4 analog signal on Vrefin/2 before the gain\nscaling."}, {"type": 3, "name": "SAMA5_ADC_OFFSET5", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 5 offset", "cond": "SAMA5_ADC_CHAN5 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN5 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Center the channel 5 analog signal on Vrefin/2 before the gain\nscaling."}, {"type": 3, "name": "SAMA5_ADC_OFFSET6", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 6 offset", "cond": "SAMA5_ADC_CHAN6 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN6 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Center the channel 6 analog signal on Vrefin/2 before the gain\nscaling."}, {"type": 3, "name": "SAMA5_ADC_OFFSET7", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 7 offset", "cond": "SAMA5_ADC_CHAN7 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN7 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Center the channel 7 analog signal on Vrefin/2 before the gain\nscaling."}, {"type": 3, "name": "SAMA5_ADC_OFFSET8", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 8 offset", "cond": "SAMA5_ADC_CHAN8 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN8 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Center the channel 8 analog signal on Vrefin/2 before the gain\nscaling."}, {"type": 3, "name": "SAMA5_ADC_OFFSET9", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 9 offset", "cond": "SAMA5_ADC_CHAN9 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN9 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Center the channel 9 analog signal on Vrefin/2 before the gain\nscaling."}, {"type": 3, "name": "SAMA5_ADC_OFFSET10", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 10 offset", "cond": "SAMA5_ADC_CHAN10 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN10 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Center the channel 10 analog signal on Vrefin/2 before the gain\nscaling."}, {"type": 3, "name": "SAMA5_ADC_OFFSET11", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 11 offset", "cond": "SAMA5_ADC_CHAN11 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN11 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Center the channel 11 analog signal on Vrefin/2 before the gain\nscaling."}]}, {"type": 31, "dep": "n", "prompt": "Channel differential mode", "cond": "SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 3, "name": "SAMA5_ADC_DIFFMODE0", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 0 differential mode", "cond": "SAMA5_ADC_CHAN0 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN0 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Selects differential (vs. single-ended mode) for ADC channel 0"}, {"type": 3, "name": "SAMA5_ADC_DIFFMODE1", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 1 differential mode", "cond": "SAMA5_ADC_CHAN1 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN1 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Selects differential (vs. single-ended mode) for ADC channel 1"}, {"type": 3, "name": "SAMA5_ADC_DIFFMODE2", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 2 differential mode", "cond": "SAMA5_ADC_CHAN2 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN2 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Selects differential (vs. single-ended mode) for ADC channel 2"}, {"type": 3, "name": "SAMA5_ADC_DIFFMODE3", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 3 differential mode", "cond": "SAMA5_ADC_CHAN3 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN3 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Selects differential (vs. single-ended mode) for ADC channel 3"}, {"type": 3, "name": "SAMA5_ADC_DIFFMODE4", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 4 differential mode", "cond": "SAMA5_ADC_CHAN4 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN4 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Selects differential (vs. single-ended mode) for ADC channel 4"}, {"type": 3, "name": "SAMA5_ADC_DIFFMODE5", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 5 differential mode", "cond": "SAMA5_ADC_CHAN5 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN5 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Selects differential (vs. single-ended mode) for ADC channel 5"}, {"type": 3, "name": "SAMA5_ADC_DIFFMODE6", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 6 differential mode", "cond": "SAMA5_ADC_CHAN6 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN6 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Selects differential (vs. single-ended mode) for ADC channel 6"}, {"type": 3, "name": "SAMA5_ADC_DIFFMODE7", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 7 differential mode", "cond": "SAMA5_ADC_CHAN7 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN7 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Selects differential (vs. single-ended mode) for ADC channel 7"}, {"type": 3, "name": "SAMA5_ADC_DIFFMODE8", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 8 differential mode", "cond": "SAMA5_ADC_CHAN8 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN8 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Selects differential (vs. single-ended mode) for ADC channel 8"}, {"type": 3, "name": "SAMA5_ADC_DIFFMODE9", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 9 differential mode", "cond": "SAMA5_ADC_CHAN9 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN9 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Selects differential (vs. single-ended mode) for ADC channel 9"}, {"type": 3, "name": "SAMA5_ADC_DIFFMODE10", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 10 differential mode", "cond": "SAMA5_ADC_CHAN10 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN10 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Selects differential (vs. single-ended mode) for ADC channel 10"}, {"type": 3, "name": "SAMA5_ADC_DIFFMODE11", "value": "n", "user_value": null, "dep": "n", "prompt": "Channel 11 differential mode", "cond": "SAMA5_ADC_CHAN11 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC_CHAN11 && SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Selects differential (vs. single-ended mode) for ADC channel 11"}]}]}, {"type": 27, "name": "SAMA5_ADC_GAIN", "value": "", "user_value": null, "dep": "n", "prompt": "Analog gain", "cond": "SAMA5_ADC_CHAN0 && !SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_ADC_CHAN0 && !SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "3", "cond": "SAMA5_ADC_CHAN0 && !SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Valid gain settings are {0, 1, 2, 3} which may be interpreted as\neither {1, 1, 2, 4} if the channels are configured for single ended\nmode or as {0.5, 1, 2, 2} if the channels are configured for\ndifferential mode."}, {"type": 3, "name": "SAMA5_ADC_OFFSET", "value": "n", "user_value": null, "dep": "n", "prompt": "Offset", "cond": "!SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Center the analog signal on Vrefin/2 before the gain scaling."}, {"type": 3, "name": "SAMA5_ADC_DIFFMODE", "value": "n", "user_value": null, "dep": "n", "prompt": "Differential mode", "cond": "!SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SAMA5_ADC_ANARCH && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Selects differential (vs. single-ended mode)"}, {"type": 31, "dep": "n", "prompt": "ADC Trigger Selection", "cond": "SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "ADC trigger mode", "cond": "SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_ADC_SWTRIG", "default": "n", "cond": "SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Select the event that will trigger the A-to-D conversion sequence.", "children": [{"type": 3, "name": "SAMA5_ADC_SWTRIG", "value": "n", "user_value": null, "dep": "n", "prompt": "Software trigger", "cond": "y", "help": "A-to-D Conversion is initiated only by sofware via an ioctl()"}, {"type": 3, "name": "SAMA5_ADC_ADTRG", "value": "n", "user_value": null, "dep": "n", "prompt": "External trigger via the ADTRG pin", "cond": "y", "help": "A-to-D Conversion is initiated an event on the ADTRG pin."}, {"type": 3, "name": "SAMA5_ADC_TIOATRIG", "value": "n", "user_value": null, "dep": "n", "prompt": "TC0 output A trigger", "cond": "SAMA5_TC0 && y", "help": "A-to-D Conversion is initiated the A output from one of\nTimer/Counter 0 channels."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "ADTRG edge", "cond": "SAMA5_ADC_ADTRG && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_ADC_ADTRG_BOTH", "default": "n", "cond": "SAMA5_ADC_ADTRG && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_ADC_ADTRG_RISING", "value": "n", "user_value": null, "dep": "n", "prompt": "Rising edge", "cond": "y", "help": "Trigger A-to-D conversion on the rising edge of the ADTRG signal."}, {"type": 3, "name": "SAMA5_ADC_ADTRG_FALLING", "value": "n", "user_value": null, "dep": "n", "prompt": "Falling edge", "cond": "y", "help": "Trigger A-to-D conversion on the falling edge of the ADTRG signal."}, {"type": 3, "name": "SAMA5_ADC_ADTRG_BOTH", "value": "n", "user_value": null, "dep": "n", "prompt": "Both edges", "cond": "y", "help": "Trigger A-to-D conversion on both edges of the ADTRG signal"}]}, {"type": 27, "name": "SAMA5_ADC_TIOAFREQ", "value": "", "user_value": null, "dep": "n", "prompt": "ADC sampling frequency", "cond": "SAMA5_ADC_TIOATRIG && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_ADC_TIOATRIG && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "This setting provides the rate at which the timer will driver ADC\nsampling."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "TC0 channel", "cond": "SAMA5_ADC_TIOATRIG && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_ADC_TIOA0TRIG", "default": "n", "cond": "SAMA5_ADC_TIOATRIG && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_ADC_TIOA0TRIG", "value": "n", "user_value": null, "dep": "n", "prompt": "TC0 Channel 0 Output A", "cond": "y", "selects": [{"symbol": "SAMA5_TC0_TIOA0", "cond": "y"}], "help": "A-to-D conversion is triggered by the TC0 channel 0 output A signal.\nThis output must be enabled independently in the Timer/Counter\ndriver configuration for this to work."}, {"type": 3, "name": "SAMA5_ADC_TIOA1TRIG", "value": "n", "user_value": null, "dep": "n", "prompt": "TC0 Channel 1 Output A", "cond": "y", "selects": [{"symbol": "SAMA5_TC0_TIOA1", "cond": "y"}], "help": "A-to-D conversion is triggered by the TC0 channel 1 output A signal.\nThis output must be enabled independently in the Timer/Counter\ndriver configuration for this to work."}, {"type": 3, "name": "SAMA5_ADC_TIOA2TRIG", "value": "n", "user_value": null, "dep": "n", "prompt": "TC0 Channel 2 Output A", "cond": "y", "selects": [{"symbol": "SAMA5_TC0_TIOA2", "cond": "y"}], "help": "A-to-D conversion is triggered by the TC0 channel 2 output A signal.\nThis output must be enabled independently in the Timer/Counter\ndriver configuration for this to work."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "TIOAx edge", "cond": "SAMA5_ADC_TIOATRIG && SAMA5_ADC_TIOATRIG && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_ADC_TIOA_BOTH", "default": "n", "cond": "SAMA5_ADC_TIOATRIG && SAMA5_ADC_TIOATRIG && SAMA5_ADC_HAVE_CHAN && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_ADC_TIOA_RISING", "value": "n", "user_value": null, "dep": "n", "prompt": "Rising edge", "cond": "y", "help": "Trigger A-to-D conversion on the rising edge of the TIOAx signal."}, {"type": 3, "name": "SAMA5_ADC_TIOA_FALLING", "value": "n", "user_value": null, "dep": "n", "prompt": "Falling edge", "cond": "y", "help": "Trigger A-to-D conversion on the falling edge of the TIOAx signal."}, {"type": 3, "name": "SAMA5_ADC_TIOA_BOTH", "value": "n", "user_value": null, "dep": "n", "prompt": "Both edges", "cond": "y", "help": "Trigger A-to-D conversion on both edges of the TIOAx signal"}]}]}, {"type": 3, "name": "SAMA5_ADC_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable register-level ADC/touchscreen debug", "cond": "DEBUG_ANALOG_INFO && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_ANALOG_INFO && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable very low register-level debug output."}]}, {"type": 31, "dep": "n", "prompt": "Touchscreen configuration", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 3, "name": "SAMA5_TSD", "value": "n", "user_value": null, "dep": "n", "prompt": "Touchscreen support", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "INPUT", "cond": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Configure the ADC to support a touchscreen", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Touchscreen interface", "cond": "SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_TSD_4WIRE", "default": "n", "cond": "SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Select the type of physical interface to the touchscreen", "children": [{"type": 3, "name": "SAMA5_TSD_4WIRE", "value": "n", "user_value": null, "dep": "n", "prompt": "4-wire interface (with pressure)", "cond": "y"}, {"type": 3, "name": "SAMA5_TSD_4WIRENPM", "value": "n", "user_value": null, "dep": "n", "prompt": "4-wire interface (without pressure)", "cond": "y"}, {"type": 3, "name": "SAMA5_TSD_5WIRE", "value": "n", "user_value": null, "dep": "n", "prompt": "5-wire interface", "cond": "y"}]}, {"type": 3, "name": "SAMA5_TSD_SWAPXY", "value": "n", "user_value": null, "dep": "n", "prompt": "Swap X/Y", "cond": "SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Reverse the meaning of X and Y to handle different LCD orientations."}, {"type": 27, "name": "SAMA5_TSD_THRESHX", "value": "", "user_value": null, "dep": "n", "prompt": "X threshold", "cond": "SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "12", "default": "12", "cond": "SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "New touch positions will only be reported when the X or Y data\nchanges by these thresholds. This trades reduces data rate for some\nloss in dragging accuracy.  For 12-bit values so the raw ranges are\n0-4095. So for example, if your display is 320x240, then THRESHX=13\nand THRESHY=17 would correspond to one pixel.  Default: 12"}, {"type": 27, "name": "SAMA5_TSD_THRESHY", "value": "", "user_value": null, "dep": "n", "prompt": "Y threshold", "cond": "SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "12", "default": "12", "cond": "SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "New touch positions will only be reported when the X or Y data\nchanges by these thresholds. This trades reduces data rate for some\nloss in dragging accuracy.  For 12-bit values so the raw ranges are\n0-4095. So for example, if your display is 320x240, then THRESHX=13\nand THRESHY=17 would correspond to one pixel.  Default: 12"}, {"type": 27, "name": "SAMA_TSD_RXP", "value": "", "user_value": null, "dep": "n", "prompt": "X-panel resistance", "cond": "SAMA5_TSD_4WIRE && SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "6", "default": "6", "cond": "SAMA5_TSD_4WIRE && SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "The method to measure the pressure (Rp) applied to the touchscreen is\nbased on the known resistance of the X-Panel resistance (Rxp)."}, {"type": 27, "name": "SAMA5_TSD_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number poll waiters", "cond": "!DISABLE_POLL && SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "!DISABLE_POLL && SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Maximum number of threads that can be waiting on poll()"}]}]}, {"type": 31, "dep": "n", "prompt": "Timer/counter Configuration", "cond": "SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 3, "name": "SAMA5_TC0_CLK0", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC0 channel 0 clock input pin", "cond": "SAMA5_TC0 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC0 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC0_TIOA0", "value": "n", "user_value": null, "rev_dep": "SAMA5_ADC_TIOA0TRIG && y", "dep": "n", "prompt": "Enable TC0 channel 0 output A", "cond": "SAMA5_TC0 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC0 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC0_TIOB0", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC0 channel 0 output B", "cond": "SAMA5_TC0 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC0 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC0_CLK1", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC0 channel 1 clock input pin", "cond": "SAMA5_TC0 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC0 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC0_TIOA1", "value": "n", "user_value": null, "rev_dep": "SAMA5_ADC_TIOA1TRIG && y", "dep": "n", "prompt": "Enable TC0 channel 1 output A", "cond": "SAMA5_TC0 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC0 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC0_TIOB1", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC0 channel 1 output B", "cond": "SAMA5_TC0 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC0 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC0_CLK2", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC0 channel 2 clock input pin", "cond": "SAMA5_TC0 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC0 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC0_TIOA2", "value": "n", "user_value": null, "rev_dep": "SAMA5_ADC_TIOA2TRIG && y", "dep": "n", "prompt": "Enable TC0 channel 2 output A", "cond": "SAMA5_TC0 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC0 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC0_TIOB2", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC0 channel 2 output B", "cond": "SAMA5_TC0 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC0 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC1_CLK3", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC1 channel 3 clock input pin", "cond": "SAMA5_TC1 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC1 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC1_TIOA3", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC1 channel 3 output A", "cond": "SAMA5_TC1 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC1 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC1_TIOB3", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC1 channel 3 output B", "cond": "SAMA5_TC1 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC1 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC1_CLK4", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC1 channel 4 clock input pin", "cond": "SAMA5_TC1 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC1 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC1_TIOA4", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC1 channel 4 output A", "cond": "SAMA5_TC1 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC1 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC1_TIOB4", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC1 channel 4 output B", "cond": "SAMA5_TC1 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC1 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC1_CLK5", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC1 channel 5 clock input pin", "cond": "SAMA5_TC1 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC1 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC1_TIOA5", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC1 channel 5 output A", "cond": "SAMA5_TC1 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC1 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC1_TIOB5", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC1 channel 5 output B", "cond": "SAMA5_TC1 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC1 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC2_CLK6", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC2 channel 6 clock input pin", "cond": "SAMA5_TC2 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC2 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC2_TIOA6", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC2 channel 6 output A", "cond": "SAMA5_TC2 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC2 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC2_TIOB6", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC2 channel 6 output B", "cond": "SAMA5_TC2 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC2 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC2_CLK7", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC2 channel 7 clock input pin", "cond": "SAMA5_TC2 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC2 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC2_TIOA7", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC2 channel 7 output A", "cond": "SAMA5_TC2 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC2 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC2_TIOB7", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC2 channel 7 output B", "cond": "SAMA5_TC2 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC2 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC2_CLK8", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC2 channel 8 clock input pin", "cond": "SAMA5_TC2 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC2 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC2_TIOA8", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC2 channel 8 output A", "cond": "SAMA5_TC2 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC2 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_TC2_TIOB8", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC2 channel 8 output B", "cond": "SAMA5_TC2 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_TC2 && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_ONESHOT", "value": "n", "user_value": null, "dep": "n", "prompt": "TC one-shot wrapper", "cond": "SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SCHED_TICKLESS && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"name": "y", "default": "y", "cond": "SCHED_TICKLESS && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable a wrapper around the low level timer/counter functions to\nsupport one-shot timer."}, {"type": 3, "name": "SAMA5_FREERUN", "value": "n", "user_value": null, "dep": "n", "prompt": "TC free-running wrapper", "cond": "SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SCHED_TICKLESS && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"name": "y", "default": "y", "cond": "SCHED_TICKLESS && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable a wrapper around the low level timer/counter functions to\nsupport a free-running timer."}, {"type": 27, "name": "SAMA5_TICKLESS_ONESHOT", "value": "", "user_value": null, "dep": "n", "prompt": "Tickless one-shot timer channel", "cond": "SCHED_TICKLESS && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SCHED_TICKLESS && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "8", "cond": "SCHED_TICKLESS && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If the Tickless OS feature is enabled, the one clock must be\nassigned to provided the one-shot timer needed by the OS."}, {"type": 27, "name": "SAMA5_TICKLESS_FREERUN", "value": "", "user_value": null, "dep": "n", "prompt": "Tickless free-running timer channel", "cond": "SCHED_TICKLESS && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SCHED_TICKLESS && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "8", "cond": "SCHED_TICKLESS && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If the Tickless OS feature is enabled, the one clock must be\nassigned to provided the free-running timer needed by the OS."}, {"type": 3, "name": "SAMA5_TC_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "TC debug", "cond": "DEBUG_FEATURES && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Output high level Timer/Counter device debug information.\nRequires also CONFIG_DEBUG_FEATURES.  If this option AND CONFIG_DEBUG_INFO are\nenabled, then the system will be overwhelmed the timer debug\noutput.  If CONFIG_DEBUG_INFO is disabled, then debug output will\nonly indicate if/when timer-related errors occur.  This\nlatter mode is completely usable."}, {"type": 3, "name": "SAMA5_TC_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "TC register level debug", "cond": "DEBUG_TIMER_INFO && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_TIMER_INFO && SAMA5_HAVE_TC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Output detailed register-level Timer/Counter device debug\ninformation. Very invasive! Requires also CONFIG_DEBUG_TIMER_INFO."}]}, {"type": 31, "dep": "n", "prompt": "PWM configuration", "cond": "SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 3, "name": "SAMA5_PWM_CLKA", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable PWM CLKA", "cond": "SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable the PWM CLKA source.", "children": [{"type": 27, "name": "SAMA5_PWM_CLKA_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "CLKA frequency", "cond": "SAMA5_PWM_CLKA && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1000", "default": "1000", "cond": "SAMA5_PWM_CLKA && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If the CLKA source is enabled, then you must also provide the\nfrequency of the CLKA.  This frequency will be derived from from MCK\nusing a prescaler and divider.  Therefore, a wide range of\nfrequencies are possible."}]}, {"type": 3, "name": "SAMA5_PWM_CLKB", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable PWM CLKB", "cond": "SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable the PWM CLKB source.", "children": [{"type": 27, "name": "SAMA5_PWM_CLKB_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "CLKB frequency", "cond": "SAMA5_PWM_CLKB && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1000", "default": "1000", "cond": "SAMA5_PWM_CLKB && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If the CLKB source is enabled, then you must also provide the\nfrequency of the CLKB.  This frequency will be derived from from MCK\nusing a prescaler and divider.  Therefore, a wide range of\nfrequencies are possible."}]}, {"type": 3, "name": "SAMA5_PWM_CHAN0", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable PWM channel 0", "cond": "SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "PWM channel 0 clock source", "cond": "SAMA5_PWM_CHAN0 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_PWM_CHAN0_MCK", "default": "n", "cond": "SAMA5_PWM_CHAN0 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_PWM_CHAN0_MCK", "value": "n", "user_value": null, "dep": "n", "prompt": "MCK (divided)", "cond": "y"}, {"type": 3, "name": "SAMA5_PWM_CHAN0_CLKA", "value": "n", "user_value": null, "dep": "n", "prompt": "CLKA", "cond": "SAMA5_PWM_CLKA && y"}, {"type": 3, "name": "SAMA5_PWM_CHAN0_CLKB", "value": "n", "user_value": null, "dep": "n", "prompt": "CLKB", "cond": "SAMA5_PWM_CLKB && y"}]}, {"type": 27, "name": "SAMA5_PWM_CHAN0_MCKDIV", "value": "", "user_value": null, "dep": "n", "prompt": "MCK divider", "cond": "SAMA5_PWM_CHAN0_MCK && SAMA5_PWM_CHAN0 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_PWM_CHAN0_MCK && SAMA5_PWM_CHAN0 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If source clock for the PWM channel is the MCK, then you must also\nspecify the MCK divider to use with the MCK.  The only valid options\nare 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, and 1024.  Other\nselections will cause compile time errors."}, {"type": 3, "name": "SAMA5_PWM_CHAN0_OUTPUTH", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure OUTPUT H pin", "cond": "SAMA5_PWM_CHAN0 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMA5_PWM_CHAN0 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_PWM_CHAN0_OUTPUTL", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure OUTPUT L pin", "cond": "SAMA5_PWM_CHAN0 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_PWM_CHAN0 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_PWM_CHAN0_FAULTINPUT", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure Fault Input pin", "cond": "SAMA5_PWM_CHAN0 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_PWM_CHAN0 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}]}, {"type": 3, "name": "SAMA5_PWM_CHAN1", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable PWM channel 1", "cond": "SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "PWM channel 1 clock source", "cond": "SAMA5_PWM_CHAN1 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_PWM_CHAN1_MCK", "default": "n", "cond": "SAMA5_PWM_CHAN1 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_PWM_CHAN1_MCK", "value": "n", "user_value": null, "dep": "n", "prompt": "MCK (divided)", "cond": "y"}, {"type": 3, "name": "SAMA5_PWM_CHAN1_CLKA", "value": "n", "user_value": null, "dep": "n", "prompt": "CLKA", "cond": "SAMA5_PWM_CLKA && y"}, {"type": 3, "name": "SAMA5_PWM_CHAN1_CLKB", "value": "n", "user_value": null, "dep": "n", "prompt": "CLKB", "cond": "SAMA5_PWM_CLKB && y"}]}, {"type": 27, "name": "SAMA5_PWM_CHAN1_MCKDIV", "value": "", "user_value": null, "dep": "n", "prompt": "MCK divider", "cond": "SAMA5_PWM_CHAN1_MCK && SAMA5_PWM_CHAN1 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_PWM_CHAN1_MCK && SAMA5_PWM_CHAN1 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If source clock for the PWM channel is the MCK, then you must also\nspecify the MCK divider to use with the MCK.  The only valid options\nare 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, and 1024.  Other\nselections will cause compile time errors."}, {"type": 3, "name": "SAMA5_PWM_CHAN1_OUTPUTH", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure OUTPUT H pin", "cond": "SAMA5_PWM_CHAN1 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMA5_PWM_CHAN1 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_PWM_CHAN1_OUTPUTL", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure OUTPUT L pin", "cond": "SAMA5_PWM_CHAN1 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_PWM_CHAN1 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_PWM_CHAN1_FAULTINPUT", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure Fault Input pin", "cond": "SAMA5_PWM_CHAN1 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_PWM_CHAN1 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}]}, {"type": 3, "name": "SAMA5_PWM_CHAN2", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable PWM channel 2", "cond": "SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "PWM channel 2 clock source", "cond": "SAMA5_PWM_CHAN2 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_PWM_CHAN2_MCK", "default": "n", "cond": "SAMA5_PWM_CHAN2 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_PWM_CHAN2_MCK", "value": "n", "user_value": null, "dep": "n", "prompt": "MCK (divided)", "cond": "y"}, {"type": 3, "name": "SAMA5_PWM_CHAN2_CLKA", "value": "n", "user_value": null, "dep": "n", "prompt": "CLKA", "cond": "SAMA5_PWM_CLKA && y"}, {"type": 3, "name": "SAMA5_PWM_CHAN2_CLKB", "value": "n", "user_value": null, "dep": "n", "prompt": "CLKB", "cond": "SAMA5_PWM_CLKB && y"}]}, {"type": 27, "name": "SAMA5_PWM_CHAN2_MCKDIV", "value": "", "user_value": null, "dep": "n", "prompt": "MCK divider", "cond": "SAMA5_PWM_CHAN2_MCK && SAMA5_PWM_CHAN2 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_PWM_CHAN2_MCK && SAMA5_PWM_CHAN2 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If source clock for the PWM channel is the MCK, then you must also\nspecify the MCK divider to use with the MCK.  The only valid options\nare 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, and 1024.  Other\nselections will cause compile time errors."}, {"type": 3, "name": "SAMA5_PWM_CHAN2_OUTPUTH", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure OUTPUT H pin", "cond": "SAMA5_PWM_CHAN2 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMA5_PWM_CHAN2 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_PWM_CHAN2_OUTPUTL", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure OUTPUT L pin", "cond": "SAMA5_PWM_CHAN2 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_PWM_CHAN2 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_PWM_CHAN2_FAULTINPUT", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure Fault Input pin", "cond": "SAMA5_PWM_CHAN2 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_PWM_CHAN2 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}]}, {"type": 3, "name": "SAMA5_PWM_CHAN3", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable PWM channel 3", "cond": "SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "PWM channel 3 clock source", "cond": "SAMA5_PWM_CHAN3 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_PWM_CHAN3_MCK", "default": "n", "cond": "SAMA5_PWM_CHAN3 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_PWM_CHAN3_MCK", "value": "n", "user_value": null, "dep": "n", "prompt": "MCK (divided)", "cond": "y"}, {"type": 3, "name": "SAMA5_PWM_CHAN3_CLKA", "value": "n", "user_value": null, "dep": "n", "prompt": "CLKA", "cond": "SAMA5_PWM_CLKA && y"}, {"type": 3, "name": "SAMA5_PWM_CHAN3_CLKB", "value": "n", "user_value": null, "dep": "n", "prompt": "CLKB", "cond": "SAMA5_PWM_CLKB && y"}]}, {"type": 27, "name": "SAMA5_PWM_CHAN3_MCKDIV", "value": "", "user_value": null, "dep": "n", "prompt": "MCK divider", "cond": "SAMA5_PWM_CHAN3_MCK && SAMA5_PWM_CHAN3 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMA5_PWM_CHAN3_MCK && SAMA5_PWM_CHAN3 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "If source clock for the PWM channel is the MCK, then you must also\nspecify the MCK divider to use with the MCK.  The only valid options\nare 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, and 1024.  Other\nselections will cause compile time errors."}, {"type": 3, "name": "SAMA5_PWM_CHAN3_OUTPUTH", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure OUTPUT H pin", "cond": "SAMA5_PWM_CHAN3 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMA5_PWM_CHAN3 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_PWM_CHAN3_OUTPUTL", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure OUTPUT L pin", "cond": "SAMA5_PWM_CHAN3 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_PWM_CHAN3 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_PWM_CHAN3_FAULTINPUT", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure Fault Input pin", "cond": "SAMA5_PWM_CHAN3 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_PWM_CHAN3 && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}]}, {"type": 3, "name": "SAMA5_PWM_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable register-level PWM debug", "cond": "DEBUG_PWM_INFO && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_PWM_INFO && SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable very low register-level debug output."}]}, {"type": 31, "dep": "n", "prompt": "Watchdog Configuration", "cond": "SAMA5_WDT && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 3, "name": "SAMA5_WDT_INTERRUPT", "value": "n", "user_value": null, "dep": "n", "prompt": "Interrupt on timeout", "cond": "SAMA5_WDT && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_WDT && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "The normal behavior is to reset everything when a watchdog timeout\noccurs.  An alternative behavior is to simply interrupt when the\ntimeout occurs.  This setting enables that alternative behavior."}, {"type": 3, "name": "SAMA5_WDT_DEBUGHALT", "value": "n", "user_value": null, "dep": "n", "prompt": "Halt on DEBUG", "cond": "SAMA5_WDT && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "DEBUG_FEATURES && SAMA5_WDT && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}, {"name": "n", "default": "n", "cond": "!DEBUG_FEATURES && SAMA5_WDT && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Halt the watchdog timer in the debug state"}, {"type": 3, "name": "SAMA5_WDT_IDLEHALT", "value": "n", "user_value": null, "dep": "n", "prompt": "Halt in IDLE", "cond": "SAMA5_WDT && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMA5_WDT && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Halt the watchdog timer in the IDLE state"}, {"type": 3, "name": "SAMA5_WDT_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register level debug", "cond": "DEBUG_WATCHDOG_INFO && SAMA5_WDT && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WATCHDOG_INFO && SAMA5_WDT && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable low-level register debug output"}]}, {"type": 31, "dep": "n", "prompt": "External Memory Configuration", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 3, "name": "SAMA5_DDRCS", "value": "n", "user_value": null, "dep": "n", "prompt": "External DDR-SDRAM Memory", "cond": "SAMA5_MPDDRC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_MPDDRC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SDRAM", "cond": "SAMA5_MPDDRC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Build in support for DDR-SDRAM memory resources.", "children": [{"type": 27, "name": "SAMA5_DDRCS_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "DDR-SDRAM Memory size", "cond": "SAMA5_DDRCS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_DDRCS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Mapped size of the DDR-SDRAM memory region."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "DDR-SDRAM Memory Type", "cond": "SAMA5_DDRCS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_DDRCS_LPDDR1", "default": "n", "cond": "SAMA5_DDRCS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Select the type of DDR-SDRAM memory present", "children": [{"type": 3, "name": "SAMA5_DDRCS_LPDDR1", "value": "n", "user_value": null, "dep": "n", "prompt": "Low-power DDR1-SDRAM (LPDDR1)", "cond": "y"}, {"type": 3, "name": "SAMA5_DDRCS_LPDDR2", "value": "n", "user_value": null, "dep": "n", "prompt": "Low-power DDR2-SDRAM-S4 (LPDDR2)", "cond": "y"}]}]}, {"type": 3, "name": "SAMA5_EBICS0", "value": "n", "user_value": null, "dep": "n", "prompt": "External CS0 Memory", "cond": "SAMA5_HSMC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HSMC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Build in support for memory resources in the chip select 0 (CS0)\nmemory region.", "children": [{"type": 27, "name": "SAMA5_EBICS0_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "CS0 Memory size", "cond": "SAMA5_EBICS0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_EBICS0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Mapped size of the memory region at CS0."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "CS0 Memory Type", "cond": "SAMA5_EBICS0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_EBICS0_NOR", "default": "n", "cond": "SAMA5_EBICS0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Select the type of memory present on CS0", "children": [{"type": 3, "name": "SAMA5_EBICS0_SRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "SRAM", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS0_PSRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "PSRAM", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS0_PROM", "value": "n", "user_value": null, "dep": "n", "prompt": "PROM", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS0_EEPROM", "value": "n", "user_value": null, "dep": "n", "prompt": "EEPROM", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS0_EPROM", "value": "n", "user_value": null, "dep": "n", "prompt": "EPROM", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS0_LCD", "value": "n", "user_value": null, "dep": "n", "prompt": "LCD", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS0_NOR", "value": "n", "user_value": null, "dep": "n", "prompt": "NOR Flash", "cond": "y"}]}]}, {"type": 3, "name": "SAMA5_EBICS1", "value": "n", "user_value": null, "dep": "n", "prompt": "External CS1 Memory", "cond": "SAMA5_HSMC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HSMC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Build in support for memory resources in the chip select 1 (CS1)\nmemory region.", "children": [{"type": 27, "name": "SAMA5_EBICS1_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "CS1 Memory size", "cond": "SAMA5_EBICS1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_EBICS1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Mapped size of the memory region at CS1."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "CS1 Memory Type", "cond": "SAMA5_EBICS1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_EBICS1_NOR", "default": "n", "cond": "SAMA5_EBICS1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Select the type of memory present on CS1", "children": [{"type": 3, "name": "SAMA5_EBICS1_SRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "SRAM", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS1_PSRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "PSRAM", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS1_PROM", "value": "n", "user_value": null, "dep": "n", "prompt": "PROM", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS1_EEPROM", "value": "n", "user_value": null, "dep": "n", "prompt": "EEPROM", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS1_EPROM", "value": "n", "user_value": null, "dep": "n", "prompt": "EPROM", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS1_LCD", "value": "n", "user_value": null, "dep": "n", "prompt": "LCD", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS1_NOR", "value": "n", "user_value": null, "dep": "n", "prompt": "NOR Flash", "cond": "y"}]}]}, {"type": 3, "name": "SAMA5_EBICS2", "value": "n", "user_value": null, "dep": "n", "prompt": "External CS2 Memory", "cond": "SAMA5_HSMC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HSMC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Build in support for memory resources in the chip select 2 (CS2)\nmemory region.", "children": [{"type": 27, "name": "SAMA5_EBICS2_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "CS2 Memory size", "cond": "SAMA5_EBICS2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_EBICS2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Mapped size of the memory region at CS2."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "CS2 Memory Type", "cond": "SAMA5_EBICS2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_EBICS2_NOR", "default": "n", "cond": "SAMA5_EBICS2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Select the type of memory present on CS2", "children": [{"type": 3, "name": "SAMA5_EBICS2_SRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "SRAM", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS2_PSRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "PSRAM", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS2_PROM", "value": "n", "user_value": null, "dep": "n", "prompt": "PROM", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS2_EEPROM", "value": "n", "user_value": null, "dep": "n", "prompt": "EEPROM", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS2_EPROM", "value": "n", "user_value": null, "dep": "n", "prompt": "EPROM", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS2_LCD", "value": "n", "user_value": null, "dep": "n", "prompt": "LCD", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS2_NOR", "value": "n", "user_value": null, "dep": "n", "prompt": "NOR Flash", "cond": "y"}]}]}, {"type": 3, "name": "SAMA5_EBICS3", "value": "n", "user_value": null, "dep": "n", "prompt": "External CS3 Memory", "cond": "SAMA5_HSMC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HSMC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Build in support for memory resources in the chip select 3 (CS3)\nmemory region.", "children": [{"type": 27, "name": "SAMA5_EBICS3_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "CS3 Memory size", "cond": "SAMA5_EBICS3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_EBICS3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Mapped size of the memory region at CS3."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "CS3 Memory Type", "cond": "SAMA5_EBICS3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_EBICS3_NOR", "default": "n", "cond": "SAMA5_EBICS3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Select the type of memory present on CS3", "children": [{"type": 3, "name": "SAMA5_EBICS3_SRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "SRAM", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS3_PSRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "PSRAM", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS3_PROM", "value": "n", "user_value": null, "dep": "n", "prompt": "PROM", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS3_EEPROM", "value": "n", "user_value": null, "dep": "n", "prompt": "EEPROM", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS3_EPROM", "value": "n", "user_value": null, "dep": "n", "prompt": "EPROM", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS3_LCD", "value": "n", "user_value": null, "dep": "n", "prompt": "LCD", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS3_NOR", "value": "n", "user_value": null, "dep": "n", "prompt": "NOR Flash", "cond": "y"}, {"type": 3, "name": "SAMA5_EBICS3_NAND", "value": "n", "user_value": null, "dep": "n", "prompt": "NAND Flash", "cond": "y", "selects": [{"symbol": "MTD", "cond": "y"}, {"symbol": "MTD_NAND", "cond": "y"}, {"symbol": "SAMA5_HAVE_NAND", "cond": "y"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "NAND ECC type", "cond": "SAMA5_EBICS3_NAND && SAMA5_EBICS3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_EBICS3_ECCNONE", "default": "n", "cond": "SAMA5_EBICS3_NAND && SAMA5_EBICS3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMA5_EBICS3_ECCNONE", "value": "n", "user_value": null, "dep": "n", "prompt": "No ECC", "cond": "y", "help": "Only raw transfers to/from NAND are supported"}, {"type": 3, "name": "SAMA5_EBICS3_SWECC", "value": "n", "user_value": null, "dep": "n", "prompt": "Software ECC", "cond": "MTD_NAND_SWECC && y", "help": "ECC is performed by higher level software logic"}, {"type": 3, "name": "SAMA5_EBICS3_PMECC", "value": "n", "user_value": null, "dep": "n", "prompt": "NAND H/W PMECC Support", "cond": "MTD_NAND_HWECC && y", "selects": [{"symbol": "SAMA5_HAVE_PMECC", "cond": "MTD_NAND_HWECC && y"}], "help": "Enable hardware assisted support for ECC calculations"}, {"type": 3, "name": "SAMA5_EBICS3_CHIPECC", "value": "n", "user_value": null, "dep": "n", "prompt": "Embedded chip ECC", "cond": "MTD_NAND_EMBEDDEDECC && y", "help": "Some NAND devices have internal, embedded ECC function."}]}]}, {"type": 3, "name": "SAMA5_HAVE_NAND", "value": "n", "user_value": null, "rev_dep": "SAMA5_EBICS3_NAND && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_HAVE_PMECC", "value": "n", "user_value": null, "rev_dep": "SAMA5_EBICS3_PMECC && MTD_NAND_HWECC && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}]}, {"type": 3, "name": "SAMA5_NAND_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "NAND DMA Transfers", "cond": "SAMA5_DMAC0 && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMA5_DMAC0 && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Use memory-to-memory DMA to perform NAND data transfers.  NOTE that\nDMAC0 must be selected (DMAC1 cannot access NFC SRAM).", "children": [{"type": 27, "name": "SAMA5_NAND_DMA_THRESHOLD", "value": "", "user_value": null, "dep": "n", "prompt": "DMA threshold", "cond": "SAMA5_NAND_DMA && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "784", "default": "784", "cond": "SAMA5_NAND_DMA && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Defines a threshold value for performing memory-to-memory DMA.\n\nIf memory-to-memory DMAs are used, then two context switches will\noccur:  (1) when the NAND logic waits for the DMA to complete, and\n(2) again when the DMA completes and the NAND logic is re-awakened.\nEach context switch will required saving and restoring a set of\nregisters defining the task state.  Those register include the PSR,\n16 general purpose registers, and 32 floating point registers or\nabout 196 bytes per task state.  That is then 392*2 bytes per\ncontext and 784 bytes for both.  Plus there is processing overhead.\nSo certainly, there is no reason to use a memory-to-memory DMA\ntransfer for much smaller blocks of data."}]}, {"type": 3, "name": "SAMA5_NAND_READYBUSY", "value": "n", "user_value": null, "dep": "n", "prompt": "NAND Ready/Busy", "cond": "SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Board logic supports and interface to detect NAND Busy/Ready signal.\nIf defined, the board must provide:\n\n        bool board_nand_busy(int cs);"}, {"type": 3, "name": "SAMA5_NAND_CE", "value": "n", "user_value": null, "dep": "n", "prompt": "NAND Chip Enable", "cond": "SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Board logic supports and interface to control the NAND Chip Enable signal.\nIf defined, the board must provide:\n\n        void board_nand_ce(int cs, bool enable);"}, {"type": 27, "name": "MTD_NAND_MAX_PMECCSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Max H/W ECC size", "cond": "SAMA5_HAVE_PMECC && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "200", "default": "200", "cond": "SAMA5_HAVE_PMECC && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Maximum HW ECC size"}, {"type": 3, "name": "SAMA5_PMECC_TRIMPAGE", "value": "n", "user_value": null, "dep": "n", "prompt": "Trim page support", "cond": "SAMA5_HAVE_PMECC && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_PMECC && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Support page trimming.  This behavior was found to fix both UBI and\nJFFS2 images written to cleanly erased NAND partitions.  NOTE:\nNothing in the code base now uses these trim pages.  Option support\nis provided in case it becomes necessary in the future."}, {"type": 3, "name": "SAMA5_PMECC_EMBEDDEDALGO", "value": "n", "user_value": null, "dep": "n", "prompt": "ROM ECC detection/correction", "cond": "SAMA5_HAVE_PMECC && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMA5_HAVE_PMECC && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "The SAMA5D3 ROM code embeds the software used in the process of ECC\ndetection/correction: function pmecc_correctionalgo(). If this\noption is selected, the ROM code will be used.  If not, then the an\nimplementation pmecc_correctionalgo() will be built into the NuttX\nimage.", "children": [{"type": 24, "name": "SAMA5_PMECC_EMBEDDEDALGO_ADDR", "value": "", "user_value": null, "dep": "n", "prompt": "Address of ROM ECC detection/correction", "cond": "SAMA5_PMECC_EMBEDDEDALGO && SAMA5_HAVE_PMECC && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0x00104510", "default": "0x00104510", "cond": "SAMA5_PMECC_EMBEDDEDALGO && SAMA5_HAVE_PMECC && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "The ROM code embeds the software used in the process of ECC\ndetection/correction at this address.  Don't change this address\nunless you know what you are doing."}]}, {"type": 3, "name": "SAMA5_PMECC_GALOIS_ROMTABLES", "value": "n", "user_value": null, "dep": "n", "prompt": "ROM Galois Tables", "cond": "SAMA5_HAVE_PMECC && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMA5_HAVE_PMECC && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Support the PMECC algorithm using Galois tables in ROM.", "children": [{"type": 24, "name": "SAMA5_PMECC_GALOIS_TABLE512_ROMADDR", "value": "", "user_value": null, "dep": "n", "prompt": "Address of Galois Table 512", "cond": "SAMA5_PMECC_GALOIS_ROMTABLES && SAMA5_HAVE_PMECC && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0x00110000", "default": "0x00110000", "cond": "SAMA5_PMECC_GALOIS_ROMTABLES && SAMA5_HAVE_PMECC && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Address of Galois Field Table 512 mapping in ROM.  Don't change this\naddress unless you know what you are doing."}, {"type": 24, "name": "SAMA5_PMECC_GALOIS_TABLE1024_ROMADDR", "value": "", "user_value": null, "dep": "n", "prompt": "Address of Galois Table 1024", "cond": "SAMA5_PMECC_GALOIS_ROMTABLES && SAMA5_HAVE_PMECC && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0x00118000", "default": "0x00118000", "cond": "SAMA5_PMECC_GALOIS_ROMTABLES && SAMA5_HAVE_PMECC && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Address of Galois Field Table 1024 mapping in ROM.  Don't change this\naddress unless you know what you are doing."}]}, {"type": 3, "name": "SAMA5_PMECC_GALOIS_CUSTOM", "value": "n", "user_value": null, "dep": "n", "prompt": "Custom Galois Tables", "cond": "SAMA5_HAVE_PMECC && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HAVE_PMECC && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Build in support to build Galois tables on-the-fly.  No current used\nby any NuttX logic."}, {"type": 3, "name": "SAMA5_NAND_DMADEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "NAND DMA transfer debug", "cond": "SAMA5_NAND_DMA && DEBUG_FEATURES && DEBUG_DMA && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_NAND_DMA && DEBUG_FEATURES && DEBUG_DMA && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable special debug instrumentation analyze NAND DMA data transfers.\nThis logic is as non-invasive as possible:  It samples DMA\nregisters at key points in the data transfer and then dumps all of\nthe registers at the end of the transfer."}, {"type": 3, "name": "SAMA5_NAND_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register-Level NAND Debug", "cond": "DEBUG_FS_INFO && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FS_INFO && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Enable very low-level register access debug.  Depends on CONFIG_DEBUG_FS_INFO."}, {"type": 3, "name": "SAMA5_NAND_DUMP", "value": "n", "user_value": null, "dep": "n", "prompt": "NAND data dump", "cond": "DEBUG_FEATURES && DEBUG_FS && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && DEBUG_FS && SAMA5_HAVE_NAND && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Dump the contents of all data read and written to FLAH.  Depends on\nCONFIG_DEBUG_FEATURES and DEBUG_FS."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SAMA5 Boot Configuration", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "SAMA5_BOOT_ISRAM", "default": "n", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "The startup code needs to know if the code is running from internal SRAM,\nexternal SRAM, or CS0-3 in order to initialize properly.  Note that the\nboot device is not specified for cases where the code is copied into\ninternal SRAM; those cases are all covered by SAMA5_BOOT_ISRAM.", "children": [{"type": 3, "name": "SAMA5_BOOT_ISRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "Running from internal SRAM", "cond": "y"}, {"type": 3, "name": "SAMA5_BOOT_SDRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "Running from external SDRAM", "cond": "y"}, {"type": 3, "name": "SAMA5_BOOT_CS0FLASH", "value": "n", "user_value": null, "dep": "n", "prompt": "Running in external FLASH CS0", "cond": "SAMA5_EBICS0_NOR && y", "selects": [{"symbol": "ARCH_HAVE_RAMFUNCS", "cond": "SAMA5_EBICS0_NOR && y"}]}, {"type": 3, "name": "SAMA5_BOOT_CS0SRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "Running in external FLASH CS0", "cond": "(SAMA5_EBICS0_SRAM || SAMA5_EBICS0_PSRAM) && y"}, {"type": 3, "name": "SAMA5_BOOT_CS1FLASH", "value": "n", "user_value": null, "dep": "n", "prompt": "Running in external FLASH CS1", "cond": "SAMA5_EBICS1_NOR && y"}, {"type": 3, "name": "SAMA5_BOOT_CS1SRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "Running in external FLASH CS1", "cond": "(SAMA5_EBICS1_SRAM || SAMA5_EBICS1_PSRAM) && y"}, {"type": 3, "name": "SAMA5_BOOT_CS2FLASH", "value": "n", "user_value": null, "dep": "n", "prompt": "Running in external FLASH CS2", "cond": "SAMA5_EBICS2_NOR && y"}, {"type": 3, "name": "SAMA5_BOOT_CS2SRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "Running in external FLASH CS2", "cond": "(SAMA5_EBICS2_SRAM || SAMA5_EBICS2_PSRAM) && y"}, {"type": 3, "name": "SAMA5_BOOT_CS2FLASH", "value": "n", "user_value": null, "dep": "n", "prompt": "Running in external FLASH CS3", "cond": "SAMA5_EBICS3_NOR && y"}, {"type": 3, "name": "SAMA5_BOOT_CS3SRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "Running in external FLASH CS3", "cond": "(SAMA5_EBICS3_SRAM || SAMA5_EBICS3_PSRAM) && y"}]}, {"type": 31, "dep": "n", "prompt": "Heap Configuration", "cond": "ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "children": [{"type": 3, "name": "SAMA5_ISRAM_HEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Include ISRAM in heap", "cond": "!SAMA5_BOOT_ISRAM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "!SAMA5_BOOT_ISRAM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Include the internal SRAM memory in the heap.\n\nNOTE:  MM_REGIONS must also be set to indicate the total number of\nmemory regions to be added to the heap.\n\n*** DO NOT SELECT THIS OPTION IF YOU ARE EXECUTING FROM INTERNAL SRAM!! **\nIn this case, the remaining ISRAM will automatically be added to the\nheap (using RAM_END).\n\n*** RAMFUNCS WARNING **\nIf you execute from NOR FLASH, RAM functions will be enabled.  The\nRAM functions will be positioned in SRAM in the same location as the\nISRAM heap and, as a result, those RAM functions will be destroyed\nafter the heap is initialized.  That is not a problem now since\nthese RAM functions are only used in the early boot phase.  If,\nhowever, you should wish to preserve the RAM functions, then you\nshould also disable SAMA5_ISRAM_HEAP so that the RAM functions are\npreserved beyond the boot phase."}, {"type": 3, "name": "SAMA5_DDRCS_HEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Include DDR-SDRAM in heap", "cond": "SAMA5_DDRCS && !SAMA5_BOOT_SDRAM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMA5_DDRCS && !SAMA5_BOOT_SDRAM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Include a portion of DDR-SDRAM memory in the heap.\n\nNOTE:  MM_REGIONS must also be set to indicate the total number of\nmemory regions to be added to the heap.\n\n*** DO NOT SELECT THIS OPTION IF YOU ARE EXECUTING FROM SDRAM!!**\nIn this case, the remaining SDRAM will automatically be added to the\nheap.", "children": [{"type": 27, "name": "SAMA5_DDRCS_HEAP_OFFSET", "value": "", "user_value": null, "dep": "n", "prompt": "DDR-SDRAM heap offset", "cond": "SAMA5_DDRCS_HEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_DDRCS_HEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Preserve this number of bytes at the beginning of SDRAM.  The\nportion of DRAM beginning at this offset from the DDRCS base will\nbe added to the heap.\n\nNOTE:  If you are using a page cache in DRAM (via SAMA5_DDRCS_PGHEAP),\nthen the memory regions defined by SAMA5_DDRCS_HEAP_OFFSET and\nSAMA5_DDRCS_HEAP_SIZE must not overlap the memory region defined by\nSAMA5_DDRCS_PGHEAP_OFFSET and SAMA5_DDRCS_PGHEAP_SIZE."}, {"type": 27, "name": "SAMA5_DDRCS_HEAP_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "DDR-SDRAM heap size", "cond": "SAMA5_DDRCS_HEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_DDRCS_HEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Add the region of DDR-SDRAM beginning at SAMA5_DDRCS_HEAP_OFFSET\nand of size SAMA5_DDRCS_HEAP_SIZE to the heap.\n\nNOTE:  If you are using a page cache in DRAM (via SAMA5_DDRCS_PGHEAP),\nthen the memory regions defined by SAMA5_DDRCS_HEAP_OFFSET and\nSAMA5_DDRCS_HEAP_SIZE must not overlap the memory region defined by\nSAMA5_DDRCS_PGHEAP_OFFSET and SAMA5_DDRCS_PGHEAP_SIZE."}]}, {"type": 3, "name": "SAMA5_DDRCS_RESERVE", "value": "n", "user_value": null, "dep": "n", "prompt": "Reserve DDR-SDRAM", "cond": "SAMA5_BOOT_SDRAM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_BOOT_SDRAM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "This option is available only we are executing out of SDRAM.  In\nthis case, by default, all of DRAM available from the end of the\nprogram through the end of DRAM (RAM_START + RAM_END) is\nautomatically added to the heap.  However, there are certain cases\nwhere you may want to reserve a block of DRAM for other purposes\nsuch a large DMA buffer or an LCD framebuffer or a page cache.  In\nthose cases, you can select this option to specify the end of the\nDRAM memory to add to the heap; DRAM after this address will not\nbe part of the heap and so will be available for other purposes.\n\nNOTE:  There is way to reserve memory before the start of the\nprogram in DRAM using this mechanism.  That configuration is\npossible, but not using this configuration setting.", "children": [{"type": 24, "name": "SAMA5_DDRCS_HEAP_END", "value": "", "user_value": null, "dep": "n", "prompt": "DDR-SDRAM heap end", "cond": "SAMA5_DDRCS_RESERVE && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0x30000000", "default": "0x30000000", "cond": "SAMA5_DDRCS_RESERVE && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Add the region of DDR-SDRAM beginning at the first available byte\nafter the memory used by the DRAM probably through this virtual\naddress (minus one).  This will reserve the memory starting at\nthis address through RAM_SIZE + RAM_END for other purposes.\n\nNOTE:  If you are using a page cache in DRAM (via SAMA5_DDRCS_PGHEAP),\nthen the memory regions below by SAMA5_DDRCS_HEAP_END must not\noverlap the memory region defined by SAMA5_DDRCS_PGHEAP_OFFSET and\nSAMA5_DDRCS_PGHEAP_SIZE."}]}, {"type": 3, "name": "SAMA5_DDRCS_PGHEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Include DDR-SDRAM in page cache", "cond": "(SAMA5_DDRCS || SAMA5_BOOT_SDRAM) && ARCH_ADDRENV && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "(SAMA5_DDRCS || SAMA5_BOOT_SDRAM) && ARCH_ADDRENV && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Include a portion of DDR-SDRAM memory in the page cache.", "children": [{"type": 24, "name": "SAMA5_DDRCS_PGHEAP_OFFSET", "value": "", "user_value": null, "dep": "n", "prompt": "DDR-SDRAM heap offset", "cond": "SAMA5_DDRCS_PGHEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0x0", "default": "0x0", "cond": "SAMA5_DDRCS_PGHEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Preserve this number of bytes at the beginning of SDRAM.  The\nportion of DRAM beginning at this offset from the DDRCS base will\nbe added to the heap.\n\nIf you are executing from DRAM, then you must have already reserved\nthis region with SAMA5_DDRCS_RESERVE, setting SAMA5_DDRCS_HEAP_END\nso that this page cache region defined by SAMA5_DDRCS_PGHEAP_OFFSET\nand SAMA5_DDRCS_PGHEAP_SIZE does not overlap the region of DRAM\nthat is added to the heap.  If you are not executing from DRAM, then\nyou must have excluding this page cache region from the heap ether\nby (1) not selecting SAMA5_DDRCS_HEAP, or (2) selecting\nSAMA5_DDRCS_HEAP_OFFSET and SAMA5_DDRCS_HEAP_SIZE so that the page\ncache region does not overlapy the region of DRAM that is added to\nthe heap."}, {"type": 27, "name": "SAMA5_DDRCS_PGHEAP_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "DDR-SDRAM heap size", "cond": "SAMA5_DDRCS_PGHEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_DDRCS_PGHEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Add the region of DDR-SDRAM beginning at SAMA5_DDRCS_PGHEAP_OFFSET\nand of size SAMA5_DDRCS_PGHEAP_SIZE to the heap.\n\nIf you are executing from DRAM, then you must have already reserved\nthis region with SAMA5_DDRCS_RESERVE, setting SAMA5_DDRCS_HEAP_END\nso that this page cache region defined by SAMA5_DDRCS_PGHEAP_OFFSET\nand SAMA5_DDRCS_PGHEAP_SIZE does not overlap the region of DRAM\nthat is added to the heap.  If you are not executing from DRAM, then\nyou must have excluding this page cache region from the heap ether\nby (1) not selecting SAMA5_DDRCS_HEAP, or (2) selecting\nSAMA5_DDRCS_HEAP_OFFSET and SAMA5_DDRCS_HEAP_SIZE so that the page\ncache region does not overlapy the region of DRAM that is added to\nthe heap."}]}, {"type": 3, "name": "SAMA5_EBICS0_HEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Include EBICS0 SRAM/PSRAM in heap", "cond": "(SAMA5_EBICS0_SRAM || SAMA5_EBICS0_PSRAM) && !SAMA5_BOOT_CS0SRAM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "(SAMA5_EBICS0_SRAM || SAMA5_EBICS0_PSRAM) && !SAMA5_BOOT_CS0SRAM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Include the CS0 SRAM/PSREAM memory in the heap.\n\nNOTE:  MM_REGIONS must also be set to indicate the total number of\nmemory regions to be added to the heap.\n\n*** DO NOT SELECT THIS OPTION IF YOU ARE EXECUTING FROM CS0 SRAM!!**\nIn this case, the remaining SRAM will automatically be added to the\nheap (using RAM_END).", "children": [{"type": 27, "name": "SAMA5_EBICS0_HEAP_OFFSET", "value": "", "user_value": null, "dep": "n", "prompt": "EBICS0 RAM offset", "cond": "SAMA5_EBICS0_HEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_EBICS0_HEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Preserve this number of bytes at the beginning of RAM.  The\nportion of RAM beginning at this offset from the EBICS0 base will\nbe added to the heap."}, {"type": 27, "name": "SAMA5_EBICS0_HEAP_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "EBICS0 RAM size", "cond": "SAMA5_EBICS0_HEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_EBICS0_HEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Add the region of RAM beginning at SAMA5_EBICS0_HEAP_OFFSET\nand of size SAMA5_EBICS0_HEAP_SIZE to the heap."}]}, {"type": 3, "name": "SAMA5_EBICS1_HEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Include EBICS1 SRAM/PSRAM in heap", "cond": "(SAMA5_EBICS1_SRAM || SAMA5_EBICS1_PSRAM) && !SAMA5_BOOT_CS1SRAM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "(SAMA5_EBICS1_SRAM || SAMA5_EBICS1_PSRAM) && !SAMA5_BOOT_CS1SRAM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Include the CS1 SRAM/PSREAM memory in the heap.\n\nNOTE:  MM_REGIONS must also be set to indicate the total number of\nmemory regions to be added to the heap.\n\n*** DO NOT SELECT THIS OPTION IF YOU ARE EXECUTING FROM CS1 SRAM!!**\nIn this case, the remaining SRAM will automatically be added to the\nheap (using RAM_END).", "children": [{"type": 27, "name": "SAMA5_EBICS1_HEAP_OFFSET", "value": "", "user_value": null, "dep": "n", "prompt": "EBICS1 RAM offset", "cond": "SAMA5_EBICS1_HEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_EBICS1_HEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Preserve this number of bytes at the beginning of RAM.  The\nportion of DRAM beginning at this offset from the EBICS1 base will\nbe added to the heap."}, {"type": 27, "name": "SAMA5_EBICS1_HEAP_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "EBICS1 RAM size", "cond": "SAMA5_EBICS1_HEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_EBICS1_HEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Add the region of RAM beginning at SAMA5_EBICS1_HEAP_OFFSET\nand of size SAMA5_EBICS1_HEAP_SIZE to the heap."}]}, {"type": 3, "name": "SAMA5_EBICS2_HEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Include EBICS2 SRAM/PSRAM in heap", "cond": "(SAMA5_EBICS2_SRAM || SAMA5_EBICS2_PSRAM) && !SAMA5_BOOT_CS2SRAM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "(SAMA5_EBICS2_SRAM || SAMA5_EBICS2_PSRAM) && !SAMA5_BOOT_CS2SRAM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Include the CS2 SRAM/PSREAM memory in the heap.\n\nNOTE:  MM_REGIONS must also be set to indicate the total number of\nmemory regions to be added to the heap.\n\n*** DO NOT SELECT THIS OPTION IF YOU ARE EXECUTING FROM CS2 SRAM!!**\nIn this case, the remaining SRAM will automatically be added to the\nheap (using RAM_END).", "children": [{"type": 27, "name": "SAMA5_EBICS2_HEAP_OFFSET", "value": "", "user_value": null, "dep": "n", "prompt": "EBICS2 RAM offset", "cond": "SAMA5_EBICS2_HEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_EBICS2_HEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Preserve this number of bytes at the beginning of RAM.  The\nportion of DRAM beginning at this offset from the EBICS2 base will\nbe added to the heap."}, {"type": 27, "name": "SAMA5_EBICS2_HEAP_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "EBICS2 RAM size", "cond": "SAMA5_EBICS2_HEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_EBICS2_HEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Add the region of RAM beginning at SAMA5_EBICS2_HEAP_OFFSET\nand of size SAMA5_EBICS2_HEAP_SIZE to the heap."}]}, {"type": 3, "name": "SAMA5_EBICS3_HEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Include EBICS3 SRAM/PSRAM in heap", "cond": "(SAMA5_EBICS3_SRAM || SAMA5_EBICS3_PSRAM) && !SAMA5_BOOT_CS3SRAM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "(SAMA5_EBICS3_SRAM || SAMA5_EBICS3_PSRAM) && !SAMA5_BOOT_CS3SRAM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Include the CS3 SRAM/PSREAM memory in the heap.\n\n*** DO NOT SELECT THIS OPTION IF YOU ARE EXECUTING FROM CS3 SRAM!!**\nIn this case, the remaining SRAM will automatically be added to the\nheap (using RAM_END).", "children": [{"type": 27, "name": "SAMA5_EBICS3_HEAP_OFFSET", "value": "", "user_value": null, "dep": "n", "prompt": "EBICS3 RAM offset", "cond": "SAMA5_EBICS3_HEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_EBICS3_HEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Preserve this number of bytes at the beginning of RAM.  The\nportion of DRAM beginning at this offset from the EBICS3 base will\nbe added to the heap."}, {"type": 27, "name": "SAMA5_EBICS3_HEAP_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "EBICS3 RAM size", "cond": "SAMA5_EBICS3_HEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_EBICS3_HEAP && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM"}], "help": "Add the region of RAM beginning at SAMA5_EBICS3_HEAP_OFFSET\nand of size SAMA5_EBICS3_HEAP_SIZE to the heap."}]}]}, {"type": 6, "dep": "n", "prompt": "Atmel SAMD/L Configuration Options", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Atmel SAMD/L Chip Selection", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "ARCH_CHIP_SAMD20J18", "default": "n", "cond": "ARCH_CHIP_SAMD && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}, {"name": "ARCH_CHIP_SAMD21J18", "default": "ARCH_CHIP_SAMD21J18", "cond": "ARCH_CHIP_SAML && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_SAMD20E14", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD20E14", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD20", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD20E", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 16KB SRAM 2KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD20E15", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD20E15", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD20", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD20E", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 32KB SRAM 4KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD20E16", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD20E16", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD20", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD20E", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 64KB SRAM 8KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD20E17", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD20E17", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD20", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD20E", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 128KB SRAM 16KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD20E18", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD20E18", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD20", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD20E", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 256KB SRAM 32KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD20G14", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD20G14", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD20", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD20G", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 16KB SRAM 2KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD20G15", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD20G15", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD20", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD20G", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 32KB SRAM 4KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD20G16", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD20G16", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD20", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD20G", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 64KB SRAM 8KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD20G17", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD20G17", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD20", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD20G", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 128KB SRAM 16KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD20G18", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD20G18", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD20", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD20G", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 256KB SRAM 32KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD20J14", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD20J14", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD20", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD20J", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 16KB SRAM 2KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD20J15", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD20J15", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD20", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD20J", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 32KB SRAM 4KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD20J16", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD20J16", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD20", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD20J", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 64KB SRAM 8KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD20J17", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD20J17", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD20", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD20J", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 128KB SRAM 16KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD20J18", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD20J18", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD20", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD20J", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 256KB SRAM 32KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD21E15A", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD21E15A", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD21", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD21E", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 32KB SRAM 4KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD21E15B", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD21E15B", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD21", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD21E", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 32KB SRAM 4KB RWW FLASH 1KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD21E16A", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD21E16A", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD21", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD21E", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 64KB SRAM 8KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD21E16B", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD21E16B", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD21", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD21E", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 64KB SRAM 8KB RWW FLASH 2KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD21E17A", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD21E17A", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD21", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD21E", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 128KB SRAM 16KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD21E18A", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD21E18A", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD21", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD21E", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 256KB SRAM 32KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD21G15A", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD21G15A", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD21", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD21G", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 32KB SRAM 4KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD21G15B", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD21G15B", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD21", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD21G", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 32KB SRAM 4KB RWW FLASH 1KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD21G16A", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD21G16A", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD21", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD21G", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 64KB SRAM 8KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD21G16B", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD21G16B", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD21", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD21E", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 64KB SRAM 8KB RWW FLASH 2KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD21G17A", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD21G17A", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD21", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD21G", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 128KB SRAM 16KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD21G18A", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD21G18A", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD21", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD21G", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 256KB SRAM 32KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD21J15A", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD21J15A", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD21", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD21J", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 32KB SRAM 4KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD21J15B", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD21J15B", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD21", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD21J", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 32KB SRAM 4KB RWW FLASH 1KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD21J16A", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD21J16A", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD21", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD21J", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 64KB SRAM 8KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD21J16B", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD21J16B", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD21", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD21J", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 64KB SRAM 8KB RWW FLASH 2KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD21J17A", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD21J17A", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD21", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD21E", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 128KB SRAM 16KB"}, {"type": 3, "name": "ARCH_CHIP_SAMD21J18A", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMD21J18A", "cond": "ARCH_CHIP_SAMD && y", "selects": [{"symbol": "ARCH_FAMILY_SAMD21", "cond": "ARCH_CHIP_SAMD && y"}, {"symbol": "ARCH_FAMILY_SAMD21J", "cond": "ARCH_CHIP_SAMD && y"}], "help": "Flash 256KB SRAM 32KB"}, {"type": 3, "name": "ARCH_CHIP_SAML21E15", "value": "n", "user_value": null, "dep": "n", "prompt": "SAML21E15", "cond": "ARCH_CHIP_SAML && y", "selects": [{"symbol": "ARCH_FAMILY_SAML21", "cond": "ARCH_CHIP_SAML && y"}, {"symbol": "ARCH_FAMILY_SAML21E", "cond": "ARCH_CHIP_SAML && y"}], "help": "Flash 32KB SRAM 4KB"}, {"type": 3, "name": "ARCH_CHIP_SAML21E16", "value": "n", "user_value": null, "dep": "n", "prompt": "SAML21E16", "cond": "ARCH_CHIP_SAML && y", "selects": [{"symbol": "ARCH_FAMILY_SAML21", "cond": "ARCH_CHIP_SAML && y"}, {"symbol": "ARCH_FAMILY_SAML21E", "cond": "ARCH_CHIP_SAML && y"}], "help": "Flash 64KB SRAM 8KB"}, {"type": 3, "name": "ARCH_CHIP_SAML21E17", "value": "n", "user_value": null, "dep": "n", "prompt": "SAML21E17", "cond": "ARCH_CHIP_SAML && y", "selects": [{"symbol": "ARCH_FAMILY_SAML21", "cond": "ARCH_CHIP_SAML && y"}, {"symbol": "ARCH_FAMILY_SAML21E", "cond": "ARCH_CHIP_SAML && y"}], "help": "Flash 128KB SRAM 16KB"}, {"type": 3, "name": "ARCH_CHIP_SAML21E18", "value": "n", "user_value": null, "dep": "n", "prompt": "SAML21E18", "cond": "ARCH_CHIP_SAML && y", "selects": [{"symbol": "ARCH_FAMILY_SAML21", "cond": "ARCH_CHIP_SAML && y"}, {"symbol": "ARCH_FAMILY_SAML21E", "cond": "ARCH_CHIP_SAML && y"}], "help": "Flash 256KB SRAM 32KB"}, {"type": 3, "name": "ARCH_CHIP_SAML21G16", "value": "n", "user_value": null, "dep": "n", "prompt": "SAML21G16", "cond": "ARCH_CHIP_SAML && y", "selects": [{"symbol": "ARCH_FAMILY_SAML21", "cond": "ARCH_CHIP_SAML && y"}, {"symbol": "ARCH_FAMILY_SAML21G", "cond": "ARCH_CHIP_SAML && y"}], "help": "Flash 64KB SRAM 4KB"}, {"type": 3, "name": "ARCH_CHIP_SAML21G17", "value": "n", "user_value": null, "dep": "n", "prompt": "SAML21G17", "cond": "ARCH_CHIP_SAML && y", "selects": [{"symbol": "ARCH_FAMILY_SAML21", "cond": "ARCH_CHIP_SAML && y"}, {"symbol": "ARCH_FAMILY_SAML21G", "cond": "ARCH_CHIP_SAML && y"}], "help": "Flash 128KB SRAM 16KB"}, {"type": 3, "name": "ARCH_CHIP_SAML21G18", "value": "n", "user_value": null, "dep": "n", "prompt": "SAML21G18", "cond": "ARCH_CHIP_SAML && y", "selects": [{"symbol": "ARCH_FAMILY_SAML21", "cond": "ARCH_CHIP_SAML && y"}, {"symbol": "ARCH_FAMILY_SAML21G", "cond": "ARCH_CHIP_SAML && y"}], "help": "Flash 256KB SRAM 32KB"}, {"type": 3, "name": "ARCH_CHIP_SAML21J16", "value": "n", "user_value": null, "dep": "n", "prompt": "SAML21J16", "cond": "ARCH_CHIP_SAML && y", "selects": [{"symbol": "ARCH_FAMILY_SAML21", "cond": "ARCH_CHIP_SAML && y"}, {"symbol": "ARCH_FAMILY_SAML21J", "cond": "ARCH_CHIP_SAML && y"}], "help": "Flash 64KB SRAM 4KB"}, {"type": 3, "name": "ARCH_CHIP_SAML21J17", "value": "n", "user_value": null, "dep": "n", "prompt": "SAML21J17", "cond": "ARCH_CHIP_SAML && y", "selects": [{"symbol": "ARCH_FAMILY_SAML21", "cond": "ARCH_CHIP_SAML && y"}, {"symbol": "ARCH_FAMILY_SAML21J", "cond": "ARCH_CHIP_SAML && y"}], "help": "Flash 128KB SRAM 16KB"}, {"type": 3, "name": "ARCH_CHIP_SAML21J18", "value": "n", "user_value": null, "dep": "n", "prompt": "SAML21J18", "cond": "ARCH_CHIP_SAML && y", "selects": [{"symbol": "ARCH_FAMILY_SAML21", "cond": "ARCH_CHIP_SAML && y"}, {"symbol": "ARCH_FAMILY_SAML21J", "cond": "ARCH_CHIP_SAML && y"}], "help": "Flash 256KB SRAM 32KB"}]}, {"type": 3, "name": "ARCH_FAMILY_SAMD20", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMD20E14 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20E15 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20E16 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20E17 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20E18 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20G14 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20G15 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20G16 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20G17 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20G18 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20J14 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20J15 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20J16 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20J17 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20J18 && ARCH_CHIP_SAMD && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "selects": [{"symbol": "SAMDL_HAVE_TC2", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}, {"symbol": "SAMDL_HAVE_TC3", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}, {"symbol": "SAMDL_HAVE_TC5", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_SAMD20E", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMD20E14 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20E15 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20E16 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20E17 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20E18 && ARCH_CHIP_SAMD && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_SAMD20G", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMD20G14 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20G15 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20G16 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20G17 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20G18 && ARCH_CHIP_SAMD && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "selects": [{"symbol": "SAMDL_HAVE_SERCOM4", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}, {"symbol": "SAMDL_HAVE_SERCOM5", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_SAMD20J", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMD20J14 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20J15 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20J16 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20J17 && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD20J18 && ARCH_CHIP_SAMD && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "selects": [{"symbol": "SAMDL_HAVE_SERCOM4", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}, {"symbol": "SAMDL_HAVE_SERCOM5", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}, {"symbol": "SAMDL_HAVE_TC6", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}, {"symbol": "SAMDL_HAVE_TC7", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_SAMD21", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMD21E15A && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21E15B && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21E16A && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21E16B && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21E17A && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21E18A && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21G15A && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21G15B && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21G16A && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21G16B && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21G17A && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21G18A && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21J15A && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21J15B && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21J16A && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21J16B && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21J17A && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21J18A && ARCH_CHIP_SAMD && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "selects": [{"symbol": "SAMDL_HAVE_DMAC", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}, {"symbol": "SAMDL_HAVE_USB", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_SAMD21E", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMD21E15A && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21E15B && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21E16A && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21E16B && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21E17A && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21E18A && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21G16B && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21J17A && ARCH_CHIP_SAMD && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_SAMD21G", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMD21G15A && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21G15B && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21G16A && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21G17A && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21G18A && ARCH_CHIP_SAMD && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "selects": [{"symbol": "SAMDL_HAVE_SERCOM4", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}, {"symbol": "SAMDL_HAVE_SERCOM5", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_SAMD21J", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMD21J15A && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21J15B && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21J16A && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21J16B && ARCH_CHIP_SAMD && y) || (ARCH_CHIP_SAMD21J18A && ARCH_CHIP_SAMD && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "selects": [{"symbol": "SAMDL_HAVE_SERCOM4", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}, {"symbol": "SAMDL_HAVE_SERCOM5", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}, {"symbol": "SAMDL_HAVE_TC2", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}, {"symbol": "SAMDL_HAVE_TC3", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}, {"symbol": "SAMDL_HAVE_TC5", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_SAML21", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAML21E15 && ARCH_CHIP_SAML && y) || (ARCH_CHIP_SAML21E16 && ARCH_CHIP_SAML && y) || (ARCH_CHIP_SAML21E17 && ARCH_CHIP_SAML && y) || (ARCH_CHIP_SAML21E18 && ARCH_CHIP_SAML && y) || (ARCH_CHIP_SAML21G16 && ARCH_CHIP_SAML && y) || (ARCH_CHIP_SAML21G17 && ARCH_CHIP_SAML && y) || (ARCH_CHIP_SAML21G18 && ARCH_CHIP_SAML && y) || (ARCH_CHIP_SAML21J16 && ARCH_CHIP_SAML && y) || (ARCH_CHIP_SAML21J17 && ARCH_CHIP_SAML && y) || (ARCH_CHIP_SAML21J18 && ARCH_CHIP_SAML && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "selects": [{"symbol": "SAMDL_HAVE_DMAC", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}, {"symbol": "SAMDL_HAVE_USB", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_SAML21E", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAML21E15 && ARCH_CHIP_SAML && y) || (ARCH_CHIP_SAML21E16 && ARCH_CHIP_SAML && y) || (ARCH_CHIP_SAML21E17 && ARCH_CHIP_SAML && y) || (ARCH_CHIP_SAML21E18 && ARCH_CHIP_SAML && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_SAML21G", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAML21G16 && ARCH_CHIP_SAML && y) || (ARCH_CHIP_SAML21G17 && ARCH_CHIP_SAML && y) || (ARCH_CHIP_SAML21G18 && ARCH_CHIP_SAML && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "selects": [{"symbol": "SAMDL_HAVE_SERCOM4", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}, {"symbol": "SAMDL_HAVE_SERCOM5", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_FAMILY_SAML21J", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAML21J16 && ARCH_CHIP_SAML && y) || (ARCH_CHIP_SAML21J17 && ARCH_CHIP_SAML && y) || (ARCH_CHIP_SAML21J18 && ARCH_CHIP_SAML && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "selects": [{"symbol": "SAMDL_HAVE_SERCOM4", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}, {"symbol": "SAMDL_HAVE_SERCOM5", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}, {"symbol": "SAMDL_HAVE_TC2", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}, {"symbol": "SAMDL_HAVE_TC3", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}, {"symbol": "SAMDL_HAVE_TC5", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 31, "dep": "n", "prompt": "SAMD/L Peripheral Support", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "children": [{"type": 3, "name": "SAMDL_HAVE_DMAC", "value": "n", "user_value": null, "rev_dep": "(ARCH_FAMILY_SAMD21 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM) || (ARCH_FAMILY_SAML21 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_HAVE_SERCOM4", "value": "n", "user_value": null, "rev_dep": "(ARCH_FAMILY_SAMD20G && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM) || (ARCH_FAMILY_SAMD20J && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM) || (ARCH_FAMILY_SAMD21G && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM) || (ARCH_FAMILY_SAMD21J && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM) || (ARCH_FAMILY_SAML21G && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM) || (ARCH_FAMILY_SAML21J && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_HAVE_SERCOM5", "value": "n", "user_value": null, "rev_dep": "(ARCH_FAMILY_SAMD20G && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM) || (ARCH_FAMILY_SAMD20J && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM) || (ARCH_FAMILY_SAMD21G && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM) || (ARCH_FAMILY_SAMD21J && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM) || (ARCH_FAMILY_SAML21G && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM) || (ARCH_FAMILY_SAML21J && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_HAVE_TC5", "value": "n", "user_value": null, "rev_dep": "(ARCH_FAMILY_SAMD20 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM) || (ARCH_FAMILY_SAMD21J && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM) || (ARCH_FAMILY_SAML21J && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_HAVE_TC2", "value": "n", "user_value": null, "rev_dep": "(ARCH_FAMILY_SAMD20 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM) || (ARCH_FAMILY_SAMD21J && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM) || (ARCH_FAMILY_SAML21J && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_HAVE_TC3", "value": "n", "user_value": null, "rev_dep": "(ARCH_FAMILY_SAMD20 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM) || (ARCH_FAMILY_SAMD21J && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM) || (ARCH_FAMILY_SAML21J && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_HAVE_TC6", "value": "n", "user_value": null, "rev_dep": "ARCH_FAMILY_SAMD20J && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_HAVE_TC7", "value": "n", "user_value": null, "rev_dep": "ARCH_FAMILY_SAMD20J && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_HAVE_USB", "value": "n", "user_value": null, "rev_dep": "(ARCH_FAMILY_SAMD21 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM) || (ARCH_FAMILY_SAML21 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_AC", "value": "n", "user_value": null, "dep": "n", "prompt": "Analog Comparator", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "Analog-to-Digital Converter", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "Digital-to-Analog Converter", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_DMAC", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA Controller", "cond": "SAMDL_HAVE_DMAC && EXPERIMENTAL && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMDL_HAVE_DMAC && EXPERIMENTAL && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "selects": [{"symbol": "ARCH_DMA", "cond": "SAMDL_HAVE_DMAC && EXPERIMENTAL && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_EVSYS", "value": "n", "user_value": null, "dep": "n", "prompt": "Event System", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_NVMCTRL", "value": "n", "user_value": null, "dep": "n", "prompt": "Non-Volatile Memory Controller", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_PTC", "value": "n", "user_value": null, "dep": "n", "prompt": "Peripheral Touch Controller", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_RTC", "value": "n", "user_value": null, "dep": "n", "prompt": "Real Time Counter", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_SERCOM0", "value": "n", "user_value": null, "dep": "n", "prompt": "Serial Communication Interface 0", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_SERCOM1", "value": "n", "user_value": null, "dep": "n", "prompt": "Serial Communication Interface 1", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_SERCOM2", "value": "n", "user_value": null, "dep": "n", "prompt": "Serial Communication Interface 2", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_SERCOM3", "value": "n", "user_value": null, "dep": "n", "prompt": "Serial Communication Interface 3", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_SERCOM4", "value": "n", "user_value": null, "dep": "n", "prompt": "Serial Communication Interface 4", "cond": "SAMDL_HAVE_SERCOM4 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMDL_HAVE_SERCOM4 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_SERCOM5", "value": "n", "user_value": null, "dep": "n", "prompt": "Serial Communication Interface 5", "cond": "SAMDL_HAVE_SERCOM5 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMDL_HAVE_SERCOM5 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_TC0", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer/Counter 0", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_TC1", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer/Counter 1", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_TC2", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer/Counter 2", "cond": "SAMDL_HAVE_TC2 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMDL_HAVE_TC2 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_TC3", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer/Counter 3", "cond": "SAMDL_HAVE_TC3 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMDL_HAVE_TC3 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_TC4", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer/Counter 4", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_TC5", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer/Counter 5", "cond": "SAMDL_HAVE_TC5 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMDL_HAVE_TC5 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_TC6", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer/Counter 6", "cond": "SAMDL_HAVE_TC6 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMDL_HAVE_TC6 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_TC7", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer/Counter 7", "cond": "SAMDL_HAVE_TC7 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMDL_HAVE_TC7 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_USB", "value": "n", "user_value": null, "dep": "n", "prompt": "USB", "cond": "SAMDL_HAVE_USB && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMDL_HAVE_USB && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_WDT", "value": "n", "user_value": null, "dep": "n", "prompt": "Watchdog Timer", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SERCOM0 mode", "cond": "SAMDL_SERCOM0 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "SAMDL_SERCOM0_ISUSART", "default": "n", "cond": "SAMDL_SERCOM0 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMDL_SERCOM0_ISI2C", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C", "cond": "y", "selects": [{"symbol": "I2C", "cond": "y"}, {"symbol": "SAMDL_HAVE_I2C", "cond": "y"}]}, {"type": 3, "name": "SAMDL_SERCOM0_ISSPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "y", "selects": [{"symbol": "SAMDL_HAVE_SPI", "cond": "y"}]}, {"type": 3, "name": "SAMDL_SERCOM0_ISUSART", "value": "n", "user_value": null, "dep": "n", "prompt": "USART", "cond": "y", "selects": [{"symbol": "USART0_SERIALDRIVER", "cond": "y"}]}]}, {"type": 27, "name": "SAMDL_DMAC_NDESC", "value": "", "user_value": null, "dep": "n", "prompt": "Number of additional DMA Descriptors", "cond": "SAMDL_DMAC && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMDL_DMAC && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "help": "This provides the number of additional DMA descriptors that can be\nuse to support multi-linked DMA transfers.  A minimum of 16\ndescriptors will always be allocated (16 for the base descriptor which\noverlap the writeback descriptors).  If this value is set to zero,\nthen only single block DMA transfers can be supported.\n\nEach additional DMA descriptor will require 16-bytes for LPRAM\nmemory."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SERCOM1 mode", "cond": "SAMDL_SERCOM1 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "SAMDL_SERCOM1_ISUSART", "default": "n", "cond": "SAMDL_SERCOM1 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMDL_SERCOM1_ISI2C", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C", "cond": "y", "selects": [{"symbol": "I2C", "cond": "y"}, {"symbol": "SAMDL_HAVE_I2C", "cond": "y"}]}, {"type": 3, "name": "SAMDL_SERCOM1_ISSPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "y", "selects": [{"symbol": "SAMDL_HAVE_SPI", "cond": "y"}]}, {"type": 3, "name": "SAMDL_SERCOM1_ISUSART", "value": "n", "user_value": null, "dep": "n", "prompt": "USART", "cond": "y", "selects": [{"symbol": "USART1_SERIALDRIVER", "cond": "y"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SERCOM2 mode", "cond": "SAMDL_SERCOM2 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "SAMDL_SERCOM2_ISUSART", "default": "n", "cond": "SAMDL_SERCOM2 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMDL_SERCOM2_ISI2C", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C", "cond": "y", "selects": [{"symbol": "I2C", "cond": "y"}, {"symbol": "SAMDL_HAVE_I2C", "cond": "y"}]}, {"type": 3, "name": "SAMDL_SERCOM2_ISSPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "y", "selects": [{"symbol": "SAMDL_HAVE_SPI", "cond": "y"}]}, {"type": 3, "name": "SAMDL_SERCOM2_ISUSART", "value": "n", "user_value": null, "dep": "n", "prompt": "USART", "cond": "y", "selects": [{"symbol": "USART2_SERIALDRIVER", "cond": "y"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SERCOM3 mode", "cond": "SAMDL_SERCOM3 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "SAMDL_SERCOM3_ISUSART", "default": "n", "cond": "SAMDL_SERCOM3 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMDL_SERCOM3_ISI2C", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C", "cond": "y", "selects": [{"symbol": "I2C", "cond": "y"}, {"symbol": "SAMDL_HAVE_I2C", "cond": "y"}]}, {"type": 3, "name": "SAMDL_SERCOM3_ISSPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "y", "selects": [{"symbol": "SAMDL_HAVE_SPI", "cond": "y"}]}, {"type": 3, "name": "SAMDL_SERCOM3_ISUSART", "value": "n", "user_value": null, "dep": "n", "prompt": "USART", "cond": "y", "selects": [{"symbol": "USART3_SERIALDRIVER", "cond": "y"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SERCOM4 mode", "cond": "SAMDL_SERCOM4 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "SAMDL_SERCOM4_ISUSART", "default": "n", "cond": "SAMDL_SERCOM4 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMDL_SERCOM4_ISI2C", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C", "cond": "y", "selects": [{"symbol": "I2C", "cond": "y"}, {"symbol": "SAMDL_HAVE_I2C", "cond": "y"}]}, {"type": 3, "name": "SAMDL_SERCOM4_ISSPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "y", "selects": [{"symbol": "SAMDL_HAVE_SPI", "cond": "y"}]}, {"type": 3, "name": "SAMDL_SERCOM4_ISUSART", "value": "n", "user_value": null, "dep": "n", "prompt": "USART", "cond": "y", "selects": [{"symbol": "USART4_SERIALDRIVER", "cond": "y"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SERCOM5 mode", "cond": "SAMDL_SERCOM5 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "SAMDL_SERCOM5_ISUSART", "default": "n", "cond": "SAMDL_SERCOM5 && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMDL_SERCOM5_ISI2C", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C", "cond": "y", "selects": [{"symbol": "I2C", "cond": "y"}, {"symbol": "SAMDL_HAVE_I2C", "cond": "y"}]}, {"type": 3, "name": "SAMDL_SERCOM5_ISSPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "y", "selects": [{"symbol": "SAMDL_HAVE_SPI", "cond": "y"}]}, {"type": 3, "name": "SAMDL_SERCOM5_ISUSART", "value": "n", "user_value": null, "dep": "n", "prompt": "USART", "cond": "y", "selects": [{"symbol": "USART5_SERIALDRIVER", "cond": "y"}]}]}, {"type": 3, "name": "SAMDL_HAVE_SPI", "value": "n", "user_value": null, "rev_dep": "(SAMDL_SERCOM0_ISSPI && y) || (SAMDL_SERCOM1_ISSPI && y) || (SAMDL_SERCOM2_ISSPI && y) || (SAMDL_SERCOM3_ISSPI && y) || (SAMDL_SERCOM4_ISSPI && y) || (SAMDL_SERCOM5_ISSPI && y)", "dep": "n", "selects": [{"symbol": "SPI", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_SPI_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI register-Level Debug", "cond": "DEBUG_SPI_INFO && SAMDL_HAVE_SPI && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_SPI_INFO && SAMDL_HAVE_SPI && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "help": "Enable very low-level register access debug.  Depends on DEBUG_SPI."}, {"type": 3, "name": "SAMDL_HAVE_I2C", "value": "n", "user_value": null, "rev_dep": "(SAMDL_SERCOM0_ISI2C && y) || (SAMDL_SERCOM1_ISI2C && y) || (SAMDL_SERCOM2_ISI2C && y) || (SAMDL_SERCOM3_ISI2C && y) || (SAMDL_SERCOM4_ISI2C && y) || (SAMDL_SERCOM5_ISI2C && y)", "dep": "n", "selects": [{"symbol": "I2C", "cond": "(ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}]}, {"type": 3, "name": "SAMDL_I2C_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C register-Level Debug", "cond": "DEBUG_I2C_INFO && SAMDL_HAVE_I2C && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_I2C_INFO && SAMDL_HAVE_I2C && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "help": "Enable very low-level register access debug.  Depends on DEBUG_I2C."}, {"type": 3, "name": "SAMDL_USB_ENABLE_PPEP", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Ping-Pong Endpoints", "cond": "SAMDL_HAVE_USB && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMDL_HAVE_USB && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "help": "To maximize throughput, an endpoint can be configured for ping-pong\noperation.  When this is done the input and output endpoint with the same\naddress are used in the same direction.  The CPU or DMA Controller can\nthen read/write one data buffer while the USB module writes/reads from\nthe other buffer.  This gives double buffered communication."}, {"type": 3, "name": "SAMDL_USB_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "USB register-Level Debug", "cond": "DEBUG_USB_INFO && SAMDL_HAVE_USB && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_USB_INFO && SAMDL_HAVE_USB && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM"}], "help": "Enable very low-level register access debug.  Depends on\nCONFIG_DEBUG_USB_INFO."}, {"type": 6, "dep": "n", "prompt": "AT91SAM3/4 Configuration Options", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "AT91SAM3/4 Chip Selection", "cond": "ARCH_CHIP_SAM34 && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "ARCH_CHIP_ATSAM3U4E", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_CHIP_SAM34 && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_ATSAM3U4E", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM3U4E", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM3U", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM3U4C", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM3U4C", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM3U", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM3U2E", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM3U2E", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM3U", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM3U2C", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM3U2C", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM3U", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM3U1E", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM3U1E", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM3U", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM3U1C", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM3U1C", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM3U", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM3X8E", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAMSAM3X8E", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM3X", "cond": "y"}, {"symbol": "ARCH_HAVE_EXTNOR", "cond": "y"}, {"symbol": "ARCH_HAVE_EXTNAND", "cond": "y"}, {"symbol": "ARCH_HAVE_EXTSRAM0", "cond": "y"}, {"symbol": "ARCH_HAVE_EXTSRAM1", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM3X8C", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM3X8C", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM3X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM3X4E", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM3X4E", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM3X", "cond": "y"}, {"symbol": "ARCH_HAVE_EXTNOR", "cond": "y"}, {"symbol": "ARCH_HAVE_EXTNAND", "cond": "y"}, {"symbol": "ARCH_HAVE_EXTSRAM0", "cond": "y"}, {"symbol": "ARCH_HAVE_EXTSRAM1", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM3X4C", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM3X4C", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM3X", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM3A8C", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM3A8C", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM3A", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM3A4C", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM3A4C", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM3A", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4CMP16B", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4CMP16B", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4CM", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4LC2C", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4LC2C", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4L", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4LC2B", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4LC2B", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4L", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4LC2A", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4LC2A", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4L", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4LC4C", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4LC4C", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4L", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4LC4B", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4LC4B", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4L", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4LC4A", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4LC4A", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4L", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4LS2C", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4LS2C", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4L", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4LS2B", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4LS2B", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4L", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4LS2A", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4LS2A", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4L", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4LS4C", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4LS4C", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4L", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4LS4B", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4LS4B", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4L", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4LS4A", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4LS4A", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4L", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4SD32C", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4SD32C", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4S", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4SD32B", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4SD32B", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4S", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4SD16C", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4SD16C", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4S", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4SD16B", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4SD16B", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4S", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4SA16C", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4SA16C", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4S", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4SA16B", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4SA16B", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4S", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4S16C", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4S16C", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4S", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4S16B", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4S16B", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4S", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4S8C", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4S8C", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4S", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4S8B", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4S8B", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4S", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4S4C", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4S4C", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4S", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4E16E", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4E16E", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4E", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4E16C", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4E16C", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4E", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4E8E", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4E8E", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4E", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_ATSAM4E8C", "value": "n", "user_value": null, "dep": "n", "prompt": "ATSAM4E8C", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "ARCH_CHIP_SAM4E", "cond": "y"}]}]}, {"type": 3, "name": "ARCH_CHIP_SAM3U", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_ATSAM3U4E && y) || (ARCH_CHIP_ATSAM3U4C && y) || (ARCH_CHIP_ATSAM3U2E && y) || (ARCH_CHIP_ATSAM3U2C && y) || (ARCH_CHIP_ATSAM3U1E && y) || (ARCH_CHIP_ATSAM3U1C && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_EXTNOR", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_EXTNAND", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_EXTSRAM0", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_EXTSRAM1", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CHIP_SAM3X", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_ATSAM3X8E && y) || (ARCH_CHIP_ATSAM3X8C && y) || (ARCH_CHIP_ATSAM3X4E && y) || (ARCH_CHIP_ATSAM3X4C && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "SAM34_HAVE_GPIOD_IRQ", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "SAM34_HAVE_GPIOE_IRQ", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "SAM34_HAVE_GPIOF_IRQ", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CHIP_SAM3A", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_ATSAM3A8C && y) || (ARCH_CHIP_ATSAM3A4C && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "SAM34_HAVE_GPIOD_IRQ", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "SAM34_HAVE_GPIOE_IRQ", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "SAM34_HAVE_GPIOF_IRQ", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CHIP_SAM4CM", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_ATSAM4CMP16B && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_MULTICPU", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_TICKLESS", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CHIP_SAM4L", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_ATSAM4LC2C && y) || (ARCH_CHIP_ATSAM4LC2B && y) || (ARCH_CHIP_ATSAM4LC2A && y) || (ARCH_CHIP_ATSAM4LC4C && y) || (ARCH_CHIP_ATSAM4LC4B && y) || (ARCH_CHIP_ATSAM4LC4A && y) || (ARCH_CHIP_ATSAM4LS2C && y) || (ARCH_CHIP_ATSAM4LS2B && y) || (ARCH_CHIP_ATSAM4LS2A && y) || (ARCH_CHIP_ATSAM4LS4C && y) || (ARCH_CHIP_ATSAM4LS4B && y) || (ARCH_CHIP_ATSAM4LS4A && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_RAMFUNCS", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CHIP_SAM4E", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_ATSAM4E16E && y) || (ARCH_CHIP_ATSAM4E16C && y) || (ARCH_CHIP_ATSAM4E8E && y) || (ARCH_CHIP_ATSAM4E8C && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_EXTNOR", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_EXTNAND", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_EXTSRAM0", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_EXTSRAM1", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "SAM34_HAVE_GPIOD_IRQ", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "SAM34_HAVE_GPIOE_IRQ", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "SAM34_HAVE_GPIOF_IRQ", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CHIP_SAM4S", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_ATSAM4SD32C && y) || (ARCH_CHIP_ATSAM4SD32B && y) || (ARCH_CHIP_ATSAM4SD16C && y) || (ARCH_CHIP_ATSAM4SD16B && y) || (ARCH_CHIP_ATSAM4SA16C && y) || (ARCH_CHIP_ATSAM4SA16B && y) || (ARCH_CHIP_ATSAM4S16C && y) || (ARCH_CHIP_ATSAM4S16B && y) || (ARCH_CHIP_ATSAM4S8C && y) || (ARCH_CHIP_ATSAM4S8B && y) || (ARCH_CHIP_ATSAM4S4C && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_EXTNOR", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_EXTNAND", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_EXTSRAM0", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_EXTSRAM1", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 31, "dep": "n", "prompt": "AT91SAM3/4 Peripheral Support", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM", "children": [{"type": 3, "name": "SAM34_ABDACB", "value": "n", "user_value": null, "dep": "n", "prompt": "Audio Bitstream DAC (ABDAC)", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_ACC", "value": "n", "user_value": null, "dep": "n", "prompt": "Analog Comparator (ACC/ACMP)", "cond": "(ARCH_CHIP_SAM4L || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM4L || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "10-bit ADC Controller (ADC)", "cond": "ARCH_CHIP_SAM3U && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM3U && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_ADC12B", "value": "n", "user_value": null, "dep": "n", "prompt": "12-bit ADC Controller (ADC12)", "cond": "!ARCH_CHIP_SAM4E && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!ARCH_CHIP_SAM4E && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_AES", "value": "n", "user_value": null, "dep": "n", "prompt": "Advanced Encryption Standard (AES)", "cond": "(ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_AESA", "value": "n", "user_value": null, "dep": "n", "prompt": "Advanced Encryption Standard (AESA)", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_AFEC0", "value": "n", "user_value": null, "dep": "n", "prompt": "Analog Front End 0 (AFEC0)", "cond": "ARCH_CHIP_SAM4E && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4E && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_AFEC1", "value": "n", "user_value": null, "dep": "n", "prompt": "Analog Front End 1 (AFEC1)", "cond": "ARCH_CHIP_SAM4E && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4E && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_APBA", "value": "n", "user_value": null, "dep": "n", "prompt": "APBA bridge (APBA)", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_AST", "value": "n", "user_value": null, "dep": "n", "prompt": "Asynchronous Timer (AST)", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_CAN0", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN0", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_CAN1", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN1", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_CATB", "value": "n", "user_value": null, "dep": "n", "prompt": "Capacitive Touch Module B (CATB)", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_CHIPID", "value": "n", "user_value": null, "dep": "n", "prompt": "Chip ID", "cond": "(ARCH_CHIP_SAM4L || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM4L || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_CMCC", "value": "n", "user_value": null, "dep": "n", "prompt": "Cortex M Cache Controller (CMCC)", "cond": "ARCH_CHIP_SAM4E && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4E && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_CRCCU", "value": "n", "user_value": null, "dep": "n", "prompt": "CRC Calculation Unit (CRCCU)", "cond": "(ARCH_CHIP_SAM4L || ARCH_CHIP_SAM4S) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM4L || ARCH_CHIP_SAM4S) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_DACC", "value": "n", "user_value": null, "dep": "n", "prompt": "Digital To Analog Converter (DACC)", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4L || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4L || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_EIC", "value": "n", "user_value": null, "dep": "n", "prompt": "External Interrupt Controller (EIC)", "cond": "(ARCH_CHIP_SAM4L || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM4L || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_DMAC0", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA controller (DMAC0)", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_DMA", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_DMAC1", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_EMAC", "value": "n", "user_value": null, "dep": "n", "prompt": "Ethernet MAC (EMAC)", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "NETDEVICES", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_PHY", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_FREQM", "value": "n", "user_value": null, "dep": "n", "prompt": "Frequency Meter (FREQM)", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_GLOC", "value": "n", "user_value": null, "dep": "n", "prompt": "GLOC", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_HMATRIX", "value": "n", "user_value": null, "dep": "n", "prompt": "HMATRIX", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_HRAMC1", "value": "n", "user_value": null, "dep": "n", "prompt": "HRAMC1 (picoCache RAM)", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_HSMCI", "value": "n", "user_value": null, "dep": "n", "prompt": "High Speed Multimedia Card Interface (HSMCI)", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SDIO", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "MMCSD", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_IISC", "value": "n", "user_value": null, "dep": "n", "prompt": "Inter-IC Sound (I2S) Controller", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_SLCDC", "value": "n", "user_value": null, "dep": "n", "prompt": "Segment LCD Controller (SLCDC)", "cond": "ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_LCDCA", "value": "n", "user_value": null, "dep": "n", "prompt": "LCD Controller A (LCDCA)", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_NAND", "value": "n", "user_value": null, "dep": "n", "prompt": "NAND support", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_OCD", "value": "n", "user_value": null, "dep": "n", "prompt": "On-chip DEBUG (OCD)", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "DEBUG_SYMBOLS && ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}, {"name": "n", "default": "n", "cond": "!DEBUG_SYMBOLS && ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_PARC", "value": "n", "user_value": null, "dep": "n", "prompt": "Parallel Capture (PARC)", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_PDCA", "value": "n", "user_value": null, "dep": "n", "prompt": "Peripheral DMA controller (PDC)", "cond": "(ARCH_CHIP_SAM4L || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM4L || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_DMA", "cond": "(ARCH_CHIP_SAM4L || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_PEVC", "value": "n", "user_value": null, "dep": "n", "prompt": "Peripheral Event Controller", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM_PICOCACHE", "value": "n", "user_value": null, "dep": "n", "prompt": "PicoCACHE", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_PICOUART", "value": "n", "user_value": null, "dep": "n", "prompt": "PicoUART", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "UART_SERIALDRIVER", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "Pulse Width Modulation (PWM) Controller", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_RTC", "value": "n", "user_value": null, "dep": "n", "prompt": "Real Time Clock (RTC)", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_RTT", "value": "n", "user_value": null, "dep": "n", "prompt": "Real Time Timer (RTT)", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_SDRAMC", "value": "n", "user_value": null, "dep": "n", "prompt": "SDRAM Controller (SDRAMC)", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_SMC", "value": "n", "user_value": null, "dep": "n", "prompt": "Static Memory Controller (SMC)", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_SPI0", "value": "n", "user_value": null, "dep": "n", "prompt": "Serial Peripheral Interface 0 (SPI0)", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_SPI1", "value": "n", "user_value": null, "dep": "n", "prompt": "Serial Peripheral Interface 1 (SPI1)", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_SSC", "value": "n", "user_value": null, "dep": "n", "prompt": "Synchronous Serial Controller (SSC)", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC0", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer/Counter 0 (TC0)", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "SAM34_TC", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC1", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer/Counter 1 (TC1)", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "SAM34_TC", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC2", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer/Counter 2 (TC2)", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "SAM34_TC", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC3", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer/Counter 3 (TC3)", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "SAM34_TC", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC4", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer/Counter 4 (TC4)", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "SAM34_TC", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC5", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer/Counter 5 (TC5)", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "SAM34_TC", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC6", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer/Counter 6 (TC6)", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "SAM34_TC", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC7", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer/Counter 7 (TC7)", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "SAM34_TC", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC8", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer/Counter 8 (TC8)", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "SAM34_TC", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TRNG", "value": "n", "user_value": null, "dep": "n", "prompt": "True Random Number Generator (TRNG)", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4L) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4L) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_RNG", "cond": "(ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4L) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TWI", "value": "n", "user_value": null, "rev_dep": "(SAM34_TWIM0 && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_TWIS0 && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_TWIM1 && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_TWIS1 && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_TWIM2 && ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_TWIM3 && ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TWIM", "value": "n", "user_value": null, "rev_dep": "(SAM34_TWIM0 && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_TWIM1 && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_TWIM2 && ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_TWIM3 && ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TWIS", "value": "n", "user_value": null, "rev_dep": "(SAM34_TWIS0 && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_TWIS1 && ARCH_CHIP_SAM34 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TWIM0", "value": "n", "user_value": null, "dep": "n", "prompt": "Two-wire Master Interface 0 (TWIM0)", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "SAM34_TWI", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "SAM34_TWIM", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TWIS0", "value": "n", "user_value": null, "dep": "n", "prompt": "Two-wire Slave Interface 0 (TWIS0)", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "SAM34_TWI", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "SAM34_TWIS", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TWIM1", "value": "n", "user_value": null, "dep": "n", "prompt": "Two-wire Master Interface 1 (TWIM1)", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "SAM34_TWI", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "SAM34_TWIM", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TWIS1", "value": "n", "user_value": null, "dep": "n", "prompt": "Two-wire Slave Interface 1 (TWIS1)", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "SAM34_TWI", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "SAM34_TWIS", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TWIM2", "value": "n", "user_value": null, "dep": "n", "prompt": "Two-wire Master Interface 2 (TWIM2)", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "SAM34_TWI", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "SAM34_TWIM", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TWIM3", "value": "n", "user_value": null, "dep": "n", "prompt": "Two-wire Master Interface 3 (TWIM3)", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "SAM34_TWI", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "SAM34_TWIM", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_UART0", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 0", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "UART0_SERIALDRIVER", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 1", "cond": "(ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "(ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "(ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAM34_UART1_OPTICAL", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 1 is optical", "cond": "SAM34_UART1 && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_UART1 && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}]}, {"type": 3, "name": "SAM34_UDP", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Device Full Speed (UDP)", "cond": "(ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_USBDEV_STALLQUEUE", "cond": "(ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_UDPHS", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Device High Speed (UDPHS)", "cond": "ARCH_CHIP_SAM3U && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM3U && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_UOTGHS", "value": "n", "user_value": null, "dep": "n", "prompt": "USB OTG High Speed (UOTGHS)", "cond": "(ARCH_CHIP_SAM3A || ARCH_CHIP_SAM3X) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3A || ARCH_CHIP_SAM3X) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_USBC", "value": "n", "user_value": null, "dep": "n", "prompt": "USB 2.0 Interface (USBC)", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_USART0", "value": "n", "user_value": null, "dep": "n", "prompt": "USART 0", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "USART0_SERIALDRIVER", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_USART1", "value": "n", "user_value": null, "dep": "n", "prompt": "USART 1", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "USART1_SERIALDRIVER", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_USART2", "value": "n", "user_value": null, "dep": "n", "prompt": "USART 2", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4L) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4L) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "USART2_SERIALDRIVER", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4L) && ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4L) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_USART3", "value": "n", "user_value": null, "dep": "n", "prompt": "USART 3", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4L) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4L) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "USART3_SERIALDRIVER", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4L) && ARCH_CHIP_SAM34 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "(ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4L) && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_WDT", "value": "n", "user_value": null, "dep": "n", "prompt": "Watchdog Timer (WDT)", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}]}, {"type": 31, "dep": "n", "prompt": "AT91SAM3/4 Clock Configuration", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "children": [{"type": 3, "name": "SAM34_RESET_PERIPHCLKS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable all peripheral clocks on reset", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "By default, only a few necessary peripheral clocks are enabled at\nreset. If this setting is enabled, then all clocking will be enabled\nto all of the selected peripherals on reset."}, {"type": 3, "name": "SAM34_OSC0", "value": "n", "user_value": null, "dep": "n", "prompt": "External oscillator 0", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Oscillator 0 might be automatically selected for several reasons:\nOscillator 0 might be the system clock or the source clock for\neither PLL0 or DFPLL.  It might also be needed if OSC0 is the source\nclock for GCLK9.  By selecting SAM34_OSC0, you can also force the\nclock to be enabled at boot time for other uses."}, {"type": 3, "name": "SAM34_OSC32K", "value": "n", "user_value": null, "dep": "n", "prompt": "32.768KHz external oscillator", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "The 32K oscillator might be automatically selected for several\nreasons: The 32K oscillator may be the source clock for DFPLL0 or\nthe source clock for GLK9 that might be used to driver PLL0.  By\nselecting SAM34_OSC32K, you can also force the clock to be enabled\nat boot time.  OSC32 may needed by other devices as well (AST, WDT,\nPICUART, RTC)."}, {"type": 3, "name": "SAM34_RC80M", "value": "n", "user_value": null, "dep": "n", "prompt": "80MHz RC oscillator", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "The 80MHz RC oscillator might be automatically selected for several\nreasons: This might be the system clock or the source clock for the\nDFPLL or it could be the source for GCLK9 that drives PLL0. By\nselecting SAM34_RC80M, you can also force the clock to be enabled at\nboot time for other uses."}, {"type": 3, "name": "SAM34_RCFAST", "value": "n", "user_value": null, "dep": "n", "prompt": "Fast RC oscillator", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "The fast RC oscillator might be automatically selected for several\nreasons: The 12/8/4 fast RC oscillator may be used as the system\nclock or as the source for GLCK9 that drives PLL0. If not then, it\nmay be enabled by setting the SAM34_RCFASTxM configuration variable.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Fast RC Oscillator Speed", "cond": "SAM34_RCFAST && ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "SAM34_RCFAST8M", "default": "n", "cond": "SAM34_RCFAST && ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAM34_RCFAST12M", "value": "n", "user_value": null, "dep": "n", "prompt": "12MHz", "cond": "y"}, {"type": 3, "name": "SAM34_RCFAST8M", "value": "n", "user_value": null, "dep": "n", "prompt": "8MHz", "cond": "y"}, {"type": 3, "name": "SAM34_RCFAST4M", "value": "n", "user_value": null, "dep": "n", "prompt": "4MHz", "cond": "y"}]}]}, {"type": 3, "name": "SAM34_RC1M", "value": "n", "user_value": null, "dep": "n", "prompt": "1MHz RC oscillator", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "The 1MHz RC oscillator might be automatically selected for several\nreasons: The 1MHz RC oscillator may be used as the system block or\nmay be the source clock for GLCK9 that drives PLL0.  By selecting\nSAM34_RC1M, you can also force the clock to be enabled at boot time\nfor other purposes."}, {"type": 3, "name": "SAM34_RC32K", "value": "n", "user_value": null, "dep": "n", "prompt": "32KHz RC oscillator", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "The 32KHz RC oscillator might be automatically selected for several\nreasons: The 32KHz RC oscillator may be used as the input to DFLL0\nor as the input to GCLK9 that drives PLL0. By selecting SAM34_RC32K,\nyou can also force the clock to be enabled at boot time for other\npurposes."}]}, {"type": 31, "dep": "n", "prompt": "AT91SAM3/4 External Memory Configuration", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM", "children": [{"type": 3, "name": "ARCH_HAVE_EXTNAND", "value": "n", "user_value": null, "rev_dep": "(LPC17_EMC && ARCH_FAMILY_LPC178X && ARCH_CHIP_LPC17XX && ARCH_ARM) || (ARCH_CHIP_LPC3130 && y) || (ARCH_CHIP_LPC3131 && y) || (ARCH_CHIP_LPC3152 && y) || (ARCH_CHIP_LPC3154 && y) || (ARCH_CHIP_ATSAM3X8E && y) || (ARCH_CHIP_ATSAM3X4E && y) || (ARCH_CHIP_SAM3U && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4E && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4S && ARCH_CHIP_SAM34 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "ARCH_HAVE_EXTNOR", "value": "n", "user_value": null, "rev_dep": "(LPC17_EMC && ARCH_FAMILY_LPC178X && ARCH_CHIP_LPC17XX && ARCH_ARM) || (ARCH_CHIP_ATSAM3X8E && y) || (ARCH_CHIP_ATSAM3X4E && y) || (ARCH_CHIP_SAM3U && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4E && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4S && ARCH_CHIP_SAM34 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "ARCH_HAVE_EXTDRAM", "value": "n", "user_value": null, "rev_dep": "(LPC17_EMC && ARCH_FAMILY_LPC178X && ARCH_CHIP_LPC17XX && ARCH_ARM) || (ARCH_CHIP_LPC3130 && y) || (ARCH_CHIP_LPC3131 && y) || (ARCH_CHIP_LPC3152 && y) || (ARCH_CHIP_LPC3154 && y)", "dep": "n"}, {"type": 3, "name": "ARCH_HAVE_EXTSRAM0", "value": "n", "user_value": null, "rev_dep": "(LPC17_EMC && ARCH_FAMILY_LPC178X && ARCH_CHIP_LPC17XX && ARCH_ARM) || (ARCH_CHIP_LPC3130 && y) || (ARCH_CHIP_LPC3131 && y) || (ARCH_CHIP_LPC3152 && y) || (ARCH_CHIP_LPC3154 && y) || (ARCH_CHIP_ATSAM3X8E && y) || (ARCH_CHIP_ATSAM3X4E && y) || (ARCH_CHIP_SAM3U && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4E && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4S && ARCH_CHIP_SAM34 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "ARCH_HAVE_EXTSRAM1", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_LPC3130 && y) || (ARCH_CHIP_LPC3131 && y) || (ARCH_CHIP_LPC3152 && y) || (ARCH_CHIP_LPC3154 && y) || (ARCH_CHIP_ATSAM3X8E && y) || (ARCH_CHIP_ATSAM3X4E && y) || (ARCH_CHIP_SAM3U && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4E && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4S && ARCH_CHIP_SAM34 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "SAM34_EXTNAND", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure external NAND", "cond": "ARCH_HAVE_EXTNAND && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_EXTNAND && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Configure external NAND memory and, if applicable, map then external\nNAND into the memory map.", "children": [{"type": 27, "name": "SAM34_EXTNANDSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "External NAND size", "cond": "SAM34_EXTNAND && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAM34_EXTNAND && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Size of the external NAND in bytes."}]}, {"type": 3, "name": "SAM34_EXTNOR", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure external NOR memory", "cond": "ARCH_HAVE_EXTNOR && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_EXTNOR && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Configure external NOR memory and, if applicable, map then external\nNOR into the memory map.", "children": [{"type": 27, "name": "SAM34_EXTNORSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "External NOR size", "cond": "SAM34_EXTNOR && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAM34_EXTNOR && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Size of the external NOR in bytes."}]}, {"type": 3, "name": "SAM34_EXTDRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure external DRAM", "cond": "ARCH_HAVE_EXTDRAM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_EXTDRAM && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SDRAM", "cond": "ARCH_HAVE_EXTDRAM && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Configure external DRAM memory and, if applicable, map then external\nDRAM into the memory map.", "children": [{"type": 27, "name": "SAM34_EXTDRAMSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "External SDRAM size", "cond": "SAM34_EXTDRAM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAM34_EXTDRAM && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Size of the external SDRAM in bytes."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SDRAM Width Selection", "cond": "SAM34_EXTDRAM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "SAM34_SDRAM_16BIT", "default": "n", "cond": "SAM34_EXTDRAM && ARCH_CHIP_SAM34 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAM34_SDRAM_8BIT", "value": "n", "user_value": null, "dep": "n", "prompt": "8-bit", "cond": "y"}, {"type": 3, "name": "SAM34_SDRAM_16BIT", "value": "n", "user_value": null, "dep": "n", "prompt": "16-bit", "cond": "y"}, {"type": 3, "name": "SAM34_SDRAM_32BIT", "value": "n", "user_value": null, "dep": "n", "prompt": "32-bit", "cond": "y"}]}, {"type": 3, "name": "SAM34_EXTDRAMHEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Add external SDRAM to the heap", "cond": "SAM34_EXTDRAM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAM34_EXTDRAM && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Add the external SDRAM into the heap."}]}, {"type": 3, "name": "SAM34_EXTSRAM0", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure external SRAM (Bank 0)", "cond": "ARCH_HAVE_EXTSRAM0 && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_EXTSRAM0 && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Configure external SRAM Bank 0 memory and, if applicable, map then\nexternal SRAM Bank 0 into the memory map.", "children": [{"type": 27, "name": "SAM34_EXTSRAM0SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "External SRAM size", "cond": "SAM34_EXTSRAM0 && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAM34_EXTSRAM0 && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Size of the external SRAM Bank 0 in bytes."}, {"type": 3, "name": "SAM34_EXTSRAM0HEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Add external SRAM (Bank 0) to the heap", "cond": "SAM34_EXTSRAM0 && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAM34_EXTSRAM0 && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Add external SRAM Bank 0 into the heap."}]}, {"type": 3, "name": "SAM34_EXTSRAM1", "value": "n", "user_value": null, "dep": "n", "prompt": "Configure external SRAM (Bank 1)", "cond": "ARCH_HAVE_EXTSRAM1 && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_EXTSRAM1 && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Configure external SRAM Bank 1 memory and, if applicable, map then\nexternal SRAM Bank 1 into the memory map.", "children": [{"type": 27, "name": "SAM34_EXTSRAM1SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "External SRAM1 size", "cond": "SAM34_EXTSRAM1 && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAM34_EXTSRAM1 && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Size of the external SRAM Bank 1 in bytes."}, {"type": 3, "name": "SAM34_EXTSRAM1HEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Add external SRAM (Bank 1) to the heap", "cond": "SAM34_EXTSRAM1 && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAM34_EXTSRAM1 && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Add external SRAM Bank 1 into the heap."}]}]}, {"type": 31, "dep": "n", "prompt": "AT91SAM3/4 GPIO Interrupt Configuration", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM", "children": [{"type": 3, "name": "SAM34_HAVE_GPIOD_IRQ", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAM3X && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM3A && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4E && ARCH_CHIP_SAM34 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_HAVE_GPIOE_IRQ", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAM3X && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM3A && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4E && ARCH_CHIP_SAM34 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_HAVE_GPIOF_IRQ", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAM3X && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM3A && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_SAM4E && ARCH_CHIP_SAM34 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_GPIO_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIO pin interrupts", "cond": "!ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM", "help": "Enable support for interrupting GPIO pins", "children": [{"type": 3, "name": "SAM34_GPIOA_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIOA interrupts", "cond": "SAM34_GPIO_IRQ && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_GPIO_IRQ && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_GPIOB_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIOB interrupts", "cond": "SAM34_GPIO_IRQ && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_GPIO_IRQ && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_GPIOC_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIOC interrupts", "cond": "SAM34_GPIO_IRQ && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_GPIO_IRQ && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_GPIOD_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIOD interrupts", "cond": "SAM34_HAVE_GPIOD_IRQ && SAM34_GPIO_IRQ && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_HAVE_GPIOD_IRQ && SAM34_GPIO_IRQ && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_GPIOE_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIOE interrupts", "cond": "SAM34_HAVE_GPIOE_IRQ && SAM34_GPIO_IRQ && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_HAVE_GPIOE_IRQ && SAM34_GPIO_IRQ && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_GPIOF_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIOF interrupts", "cond": "SAM34_HAVE_GPIOF_IRQ && SAM34_GPIO_IRQ && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_HAVE_GPIOF_IRQ && SAM34_GPIO_IRQ && ARCH_CHIP_SAM34 && ARCH_ARM"}]}]}]}, {"type": 31, "dep": "n", "prompt": "AT91SAM3/4 Timer/Counter Configuration", "cond": "SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "children": [{"type": 3, "name": "SAM34_TC0_CLK", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC channel 0 clock input pin", "cond": "SAM34_TC0 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_TC0 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC0_TIOA", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC channel 0 output A", "cond": "SAM34_TC0 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_TC0 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC0_TIOB", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC channel 0 output B", "cond": "SAM34_TC0 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_TC0 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC1_CLK", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC channel 1 clock input pin", "cond": "SAM34_TC1 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_TC1 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC1_TIOA", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC channel 1 output A", "cond": "SAM34_TC1 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_TC1 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC1_TIOB", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC channel 1 output B", "cond": "SAM34_TC1 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_TC1 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC2_CLK", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC channel 2 clock input pin", "cond": "SAM34_TC2 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_TC2 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC2_TIOA2", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC channel 2 output A", "cond": "SAM34_TC2 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_TC2 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC2_TIOB2", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC channel 2 output B", "cond": "SAM34_TC2 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_TC2 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC3_CLK", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC channel 3 clock input pin", "cond": "SAM34_TC3 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_TC3 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC3_TIOA", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC channel 3 output A", "cond": "SAM34_TC3 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_TC3 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC3_TIOB", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC channel 3 output B", "cond": "SAM34_TC3 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_TC3 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC4_CLK", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC channel 4 clock input pin", "cond": "SAM34_TC4 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_TC4 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC4_TIOA", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC channel 4 output A", "cond": "SAM34_TC4 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_TC4 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC4_TIOB", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC channel 4 output B", "cond": "SAM34_TC4 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_TC4 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC5_CLK", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC channel 5 clock input pin", "cond": "SAM34_TC5 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_TC5 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC5_TIOA", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC channel 5 output A", "cond": "SAM34_TC5 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_TC5 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TC5_TIOB", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC channel 5 output B", "cond": "SAM34_TC5 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_TC5 && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_ONESHOT", "value": "n", "user_value": null, "dep": "n", "prompt": "TC one-shot wrapper", "cond": "SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SCHED_TICKLESS && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}, {"name": "y", "default": "y", "cond": "SCHED_TICKLESS && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Enable a wrapper around the low level timer/counter functions to\nsupport one-shot timer."}, {"type": 3, "name": "SAM34_FREERUN", "value": "n", "user_value": null, "dep": "n", "prompt": "TC free-running wrapper", "cond": "SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SCHED_TICKLESS && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}, {"name": "y", "default": "y", "cond": "SCHED_TICKLESS && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Enable a wrapper around the low level timer/counter functions to\nsupport a free-running timer."}, {"type": 27, "name": "SAM34_TICKLESS_ONESHOT", "value": "", "user_value": null, "dep": "n", "prompt": "Tickless one-shot timer channel", "cond": "SCHED_TICKLESS && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SCHED_TICKLESS && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "8", "cond": "SCHED_TICKLESS && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "If the Tickless OS feature is enabled, the one clock must be\nassigned to provided the one-shot timer needed by the OS."}, {"type": 27, "name": "SAM34_TICKLESS_FREERUN", "value": "", "user_value": null, "dep": "n", "prompt": "Tickless free-running timer channel", "cond": "SCHED_TICKLESS && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SCHED_TICKLESS && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "8", "cond": "SCHED_TICKLESS && SAM34_TC && ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "If the Tickless OS feature is enabled, the one clock must be\nassigned to provided the free-running timer needed by the OS."}]}, {"type": 31, "dep": "n", "prompt": "AT91SAM3/4 SPI device driver options", "cond": "(SAM34_SPI0 || SAM34_SPI1) && ARCH_CHIP_SAM34 && ARCH_ARM", "children": [{"type": 3, "name": "SAM34_SPI_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI DMA", "cond": "((SAM34_DMAC0 && SAM34_SPI0) || (SAM34_DMAC1 && SAM34_SPI1)) && (SAM34_SPI0 || SAM34_SPI1) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "((SAM34_DMAC0 && SAM34_SPI0) || (SAM34_DMAC1 && SAM34_SPI1)) && (SAM34_SPI0 || SAM34_SPI1) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Use DMA to improve SPI transfer performance.", "children": [{"type": 27, "name": "SAM34_SPI_DMATHRESHOLD", "value": "", "user_value": null, "dep": "n", "prompt": "SPI DMA threshold", "cond": "SAM34_SPI_DMA && (SAM34_SPI0 || SAM34_SPI1) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "SAM34_SPI_DMA && (SAM34_SPI0 || SAM34_SPI1) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "When SPI DMA is enabled, small DMA transfers will still be performed\nby polling logic.  But we need a threshold value to determine what\nis small.  That value is provided by SAM34_SPI_DMATHRESHOLD."}, {"type": 3, "name": "SAM34_SPI_DMADEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI DMA transfer debug", "cond": "SAM34_SPI_DMA && DEBUG_FEATURES && DEBUG_DMA && (SAM34_SPI0 || SAM34_SPI1) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_SPI_DMA && DEBUG_FEATURES && DEBUG_DMA && (SAM34_SPI0 || SAM34_SPI1) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Enable special debug instrumentation analyze SPI DMA data transfers.\nThis logic is as non-invasive as possible:  It samples DMA\nregisters at key points in the data transfer and then dumps all of\nthe registers at the end of the transfer."}]}, {"type": 3, "name": "SAM34_SPI_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI Register level debug", "cond": "DEBUG_SPI_INFO && (SAM34_SPI0 || SAM34_SPI1) && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_SPI_INFO && (SAM34_SPI0 || SAM34_SPI1) && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Output detailed register-level SPI device debug information.\nRequires also CONFIG_SPI_INFO."}]}, {"type": 31, "dep": "n", "prompt": "AT91SAM3/4 TWI master device driver options", "cond": "SAM34_TWIM && ARCH_CHIP_SAM34 && ARCH_ARM", "children": [{"type": 27, "name": "SAM34_TWIM0_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "TWI0 Frequency", "cond": "SAM34_TWIM0 && SAM34_TWIM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "100000", "default": "100000", "cond": "SAM34_TWIM0 && SAM34_TWIM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 27, "name": "SAM34_TWIM1_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "TWI1 Frequency", "cond": "SAM34_TWIM1 && SAM34_TWIM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "100000", "default": "100000", "cond": "SAM34_TWIM1 && SAM34_TWIM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 27, "name": "SAM34_TWIM2_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "TWI2 Frequency", "cond": "SAM34_TWIM2 && SAM34_TWIM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "100000", "default": "100000", "cond": "SAM34_TWIM2 && SAM34_TWIM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 27, "name": "SAM34_TWIM3_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "TWI3 Frequency", "cond": "SAM34_TWIM3 && SAM34_TWIM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "100000", "default": "100000", "cond": "SAM34_TWIM3 && SAM34_TWIM && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 3, "name": "SAM34_TWI_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "TWI register level debug", "cond": "DEBUG_I2C_INFO && SAM34_TWIM && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_I2C_INFO && SAM34_TWIM && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Output detailed register-level TWI device debug information.\nVery invasive! Requires also CONFIG_DEBUG_I2C_INFO."}]}, {"type": 31, "dep": "n", "prompt": "AT91SAM3/4 EMAC device driver options", "cond": "SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "children": [{"type": 27, "name": "SAM34_EMAC_NRXBUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of RX buffers", "cond": "SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "16", "default": "16", "cond": "SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "EMAC buffer memory is segmented into 128 byte units (not\nconfigurable).  This setting provides the number of such 128 byte\nunits used for reception.  This is also equal to the number of RX\ndescriptors that will be allocated  The selected value must be an\neven power of 2."}, {"type": 27, "name": "SAM34_EMAC_NTXBUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of TX buffers", "cond": "SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "EMAC buffer memory is segmented into full Ethernet packets (size\nNET_BUFSIZE bytes).  This setting provides the number of such packets\nthat can be in flight.  This is also equal to the number of TX\ndescriptors that will be allocated."}, {"type": 3, "name": "SAM34_EMAC_PREALLOCATE", "value": "n", "user_value": null, "dep": "n", "prompt": "Preallocate buffers", "cond": "SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Buffer an descriptor many may either be allocated from the memory\npool or pre-allocated to lie in .bss.  This options selected pre-\nallocated buffer memory."}, {"type": 3, "name": "SAM34_EMAC_NBC", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable Broadcast", "cond": "SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Select to disable receipt of broadcast packets."}, {"type": 27, "name": "SAM34_EMAC_PHYADDR", "value": "", "user_value": null, "dep": "n", "prompt": "PHY address", "cond": "SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "The 5-bit address of the PHY on the board.  Default: 1"}, {"type": 3, "name": "SAM34_EMAC_PHYINIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Board-specific PHY Initialization", "cond": "SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Some boards require specialized initialization of the PHY before it can be used.\nThis may include such things as configuring GPIOs, resetting the PHY, etc.  If\nSAM34_EMAC_PHYINIT is defined in the configuration then the board specific logic must\nprovide sam_phyinitialize();  The SAM34 EMAC driver will call this function\none time before it first uses the PHY."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "PHY interface", "cond": "SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "SAM34_EMAC_MII", "default": "n", "cond": "SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAM34_EMAC_MII", "value": "n", "user_value": null, "dep": "n", "prompt": "MII", "cond": "y", "help": "Support Ethernet MII interface (vs RMII)."}, {"type": 3, "name": "SAM34_EMAC_RMII", "value": "n", "user_value": null, "dep": "n", "prompt": "RMII", "cond": "!ARCH_CHIP_SAM4E && y", "help": "Support Ethernet RMII interface (vs MII)."}]}, {"type": 3, "name": "SAM34_EMAC_CLAUSE45", "value": "n", "user_value": null, "dep": "n", "prompt": "Clause 45 MII", "cond": "SAM34_EMAC_MII && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "help": "MDIO was originally defined in Clause 22 of IEEE RFC802.3. In the\noriginal specification, a single MDIO interface is able to access up\nto 32 registers in 32 different PHY devices.  To meet the needs the\nexpanding needs of 10-Gigabit Ethernet devices, Clause 45 of the\n802.3ae specification provided the following additions to MDIO:\n\n- Ability to access 65,536 registers in 32 different devices on\n  32 different ports\n- Additional OP-code and ST-code for Indirect Address register\n  access for 10 Gigabit Ethernet\n- End-to-end fault signaling\n- Multiple loopback points\n- Low voltage electrical specification\n\nBy default, Clause 22 PHYs will be supported unless this option is\nselected."}, {"type": 3, "name": "SAM34_EMAC_AUTONEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Use autonegotiation", "cond": "SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Use PHY autonegotiation to determine speed and mode"}, {"type": 3, "name": "SAM34_EMAC_ETHFD", "value": "n", "user_value": null, "dep": "n", "prompt": "Full duplex", "cond": "!SAM34_EMAC_AUTONEG && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SAM34_EMAC_AUTONEG && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "If SAM34_EMAC_AUTONEG is not defined, then this may be defined to select full duplex\nmode. Default: half-duplex"}, {"type": 3, "name": "SAM34_EMAC_ETH100MBPS", "value": "n", "user_value": null, "dep": "n", "prompt": "100 Mbps", "cond": "!SAM34_EMAC_AUTONEG && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SAM34_EMAC_AUTONEG && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "If SAM34_EMAC_AUTONEG is not defined, then this may be defined to select 100 MBps\nspeed.  Default: 10 Mbps"}, {"type": 27, "name": "SAM34_EMAC_PHYSR", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Status Register Address (decimal)", "cond": "SAM34_EMAC_AUTONEG && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "help": "This must be provided if SAM34_EMAC_AUTONEG is defined.  The PHY status register\naddress may diff from PHY to PHY.  This configuration sets the address of\nthe PHY status register."}, {"type": 3, "name": "SAM34_EMAC_PHYSR_ALTCONFIG", "value": "n", "user_value": null, "dep": "n", "prompt": "PHY Status Alternate Bit Layout", "cond": "SAM34_EMAC_AUTONEG && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_EMAC_AUTONEG && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Different PHYs present speed and mode information in different ways.  Some\nwill present separate information for speed and mode (this is the default).\nThose PHYs, for example, may provide a 10/100 Mbps indication and a separate\nfull/half duplex indication. This options selects an alternative representation\nwhere speed and mode information are combined.  This might mean, for example,\nseparate bits for 10HD, 100HD, 10FD and 100FD."}, {"type": 24, "name": "SAM34_EMAC_PHYSR_SPEED", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Speed Mask", "cond": "SAM34_EMAC_AUTONEG && !SAM34_EMAC_PHYSR_ALTCONFIG && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "help": "This must be provided if SAM34_EMAC_AUTONEG is defined.  This provides bit mask\nfor isolating the 10 or 100MBps speed indication."}, {"type": 24, "name": "SAM34_EMAC_PHYSR_100MBPS", "value": "", "user_value": null, "dep": "n", "prompt": "PHY 100Mbps Speed Value", "cond": "SAM34_EMAC_AUTONEG && !SAM34_EMAC_PHYSR_ALTCONFIG && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "help": "This must be provided if SAM34_EMAC_AUTONEG is defined.  This provides the value\nof the speed bit(s) indicating 100MBps speed."}, {"type": 24, "name": "SAM34_EMAC_PHYSR_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Mode Mask", "cond": "SAM34_EMAC_AUTONEG && !SAM34_EMAC_PHYSR_ALTCONFIG && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "help": "This must be provided if SAM34_EMAC_AUTONEG is defined.  This provide bit mask\nfor isolating the full or half duplex mode bits."}, {"type": 24, "name": "SAM34_EMAC_PHYSR_FULLDUPLEX", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Full Duplex Mode Value", "cond": "SAM34_EMAC_AUTONEG && !SAM34_EMAC_PHYSR_ALTCONFIG && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "help": "This must be provided if SAM34_EMAC_AUTONEG is defined.  This provides the\nvalue of the mode bits indicating full duplex mode."}, {"type": 24, "name": "SAM34_EMAC_PHYSR_ALTMODE", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Mode Mask", "cond": "SAM34_EMAC_AUTONEG && SAM34_EMAC_PHYSR_ALTCONFIG && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "help": "This must be provided if SAM34_EMAC_AUTONEG is defined.  This provide bit mask\nfor isolating the speed and full/half duplex mode bits."}, {"type": 24, "name": "SAM34_EMAC_PHYSR_10HD", "value": "", "user_value": null, "dep": "n", "prompt": "10MBase-T Half Duplex Value", "cond": "SAM34_EMAC_AUTONEG && SAM34_EMAC_PHYSR_ALTCONFIG && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "help": "This must be provided if SAM34_EMAC_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 10Mbps, half duplex setting."}, {"type": 24, "name": "SAM34_EMAC_PHYSR_100HD", "value": "", "user_value": null, "dep": "n", "prompt": "100Base-T Half Duplex Value", "cond": "SAM34_EMAC_AUTONEG && SAM34_EMAC_PHYSR_ALTCONFIG && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "help": "This must be provided if SAM34_EMAC_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 100Mbps, half duplex setting."}, {"type": 24, "name": "SAM34_EMAC_PHYSR_10FD", "value": "", "user_value": null, "dep": "n", "prompt": "10Base-T Full Duplex Value", "cond": "SAM34_EMAC_AUTONEG && SAM34_EMAC_PHYSR_ALTCONFIG && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "help": "This must be provided if SAM34_EMAC_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 10Mbps, full duplex setting."}, {"type": 24, "name": "SAM34_EMAC_PHYSR_100FD", "value": "", "user_value": null, "dep": "n", "prompt": "100Base-T Full Duplex Value", "cond": "SAM34_EMAC_AUTONEG && SAM34_EMAC_PHYSR_ALTCONFIG && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "help": "This must be provided if SAM34_EMAC_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 100Mbps, full duplex setting."}, {"type": 3, "name": "SAM34_EMAC_ISETH0", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "SAM34_EMAC_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM"}, {"name": "SAM34_EMAC_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Work queue support is required to use the Ethernet driver.  If the\nlow priority work queue is available, then it should be used by the\ndriver.", "children": [{"type": 3, "name": "SAM34_EMAC_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "SAM34_EMAC_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}, {"type": 3, "name": "SAM34_EMAC_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register-Level Debug", "cond": "DEBUG_NET_INFO && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_NET_INFO && SAM34_EMAC && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Enable very low-level register access debug.  Depends on CONFIG_DEBUG_NET_INFO."}]}, {"type": 31, "dep": "n", "prompt": "AT91SAM3/4 HSMCI device driver options", "cond": "SAM34_HSMCI && ARCH_CHIP_SAM34 && ARCH_ARM", "children": [{"type": 3, "name": "SAM34_HSMCI_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "Support DMA data transfers", "cond": "SAM34_HSMCI && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAM34_HSMCI && ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "SDIO_DMA", "cond": "SAM34_HSMCI && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Support DMA data transfers.\nEnable SD card DMA data transfers.  This is marginally optional.\nFor most usages, SD accesses will cause data overruns if used without\nDMA."}, {"type": 3, "name": "SAM34_HSMCI_RDPROOF", "value": "n", "user_value": null, "dep": "n", "prompt": "Read Proof Enable", "cond": "SAM34_HSMCI && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_HSMCI && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Enabling Read Proof allows to stop the HSMCI Clock during read\naccess if the internal FIFO is full. This will guarantee data\nintegrity, not bandwidth."}, {"type": 3, "name": "SAM34_HSMCI_WRPROOF", "value": "n", "user_value": null, "dep": "n", "prompt": "Write Proof Enable", "cond": "SAM34_HSMCI && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_HSMCI && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Enabling Write Proof allows to stop the HSMCI Clock during write\naccess if the internal FIFO is full. This will guarantee data\nintegrity, not bandwidth."}, {"type": 3, "name": "SAM34_HSMCI_XFRDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "HSMCI transfer debug", "cond": "DEBUG_FS_INFO && SAM34_HSMCI && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FS_INFO && SAM34_HSMCI && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Enable special debug instrumentation analyze HSMCI data transfers.\nThis logic is as non-invasive as possible:  It samples HSMCI\nregisters at key points in the data transfer and then dumps all of\nthe registers at the end of the transfer.  If DEBUG_DMA is also\nenabled, then DMA register will be collected as well.  Requires also\nDEBUG_FS and CONFIG_DEBUG_INFO."}, {"type": 3, "name": "SAM34_HSMCI_CMDDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "HSMCI command debug", "cond": "DEBUG_FS_INFO && SAM34_HSMCI && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FS_INFO && SAM34_HSMCI && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Enable special debug instrumentation analyze HSMCI commands. This\nlogic is as non-invasive as possible:  It samples HSMCI registers at\nkey points in the data transfer and then dumps all of the registers\nat the end of the transfer.  If DEBUG_DMA is also enabled, then DMA\nregister will be collected as well.  Requires also DEBUG_FS and\nCONFIG_DEBUG_INFO."}]}, {"type": 31, "dep": "n", "prompt": "AT91SAM3/4 USB Full Speed Device Controller driver (DCD) options", "cond": "SAM34_UDP && ARCH_CHIP_SAM34 && ARCH_ARM", "children": [{"type": 3, "name": "SAM34_UDP_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable low-level UDP register debug", "cond": "DEBUG_USB_INFO && SAM34_UDP && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_USB_INFO && SAM34_UDP && ARCH_CHIP_SAM34 && ARCH_ARM"}]}]}, {"type": 3, "name": "SAM34_TC", "value": "n", "user_value": null, "rev_dep": "(SAM34_TC0 && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_TC1 && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_TC2 && (ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_TC3 && (ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_TC4 && (ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_TC5 && (ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_TC6 && (ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_TC7 && (ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_TC8 && (ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_EXTCLK", "cond": "ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 31, "dep": "n", "prompt": "AT91SAM3/4 Timer/Counter options", "cond": "SAM34_TC && ARCH_CHIP_SAM34 && ARCH_ARM", "children": [{"type": 3, "name": "SAM34_TC_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable low-level timer/counter register debug", "cond": "DEBUG_TIMER_INFO && SAM34_TC && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_TIMER_INFO && SAM34_TC && ARCH_CHIP_SAM34 && ARCH_ARM"}]}]}, {"type": 31, "dep": "n", "prompt": "AT91SAM3/4 Watchdog Configuration", "cond": "SAM34_WDT && ARCH_CHIP_SAM34 && ARCH_ARM", "children": [{"type": 3, "name": "WDT_ENABLED_ON_RESET", "value": "n", "user_value": null, "dep": "n", "prompt": "Watchdog Enabled on reset", "cond": "SAM34_WDT && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_WDT && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "The WDT can be enabled at reset. This is controlled by the WDTAUTO\nfuse. The WDT will be set in basic mode, RCSYS is set as source for\nCLK_CNT, and PSEL will be set to a value giving Tpsel above 100 ms\n(SAM4L)\n\nThis setting informs that start-up logic that the watchdog is\nenabled.", "children": [{"type": 3, "name": "WDT_DISABLE_ON_RESET", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable watchdog on reset", "cond": "WDT_ENABLED_ON_RESET && SAM34_WDT && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "WDT_ENABLED_ON_RESET && SAM34_WDT && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "If the WDT can be enabled at reset then this setting may be used to\nconfigure and disable the watchdog timer very early in the boot\nsequence."}]}, {"type": 27, "name": "WDT_TIMEOUT", "value": "", "user_value": null, "dep": "n", "prompt": "Watchdog Timeout (ms)", "cond": "!WDT_DISABLE_ON_RESET && SAM34_WDT && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "5000", "default": "5000", "cond": "!WDT_DISABLE_ON_RESET && SAM34_WDT && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Watchdog timeout value in milliseconds."}, {"type": 27, "name": "WDT_MINTIME", "value": "", "user_value": null, "dep": "n", "prompt": "Watchdog Minimum Time (ms)", "cond": "!WDT_DISABLE_ON_RESET && SAM34_WDT && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "2500", "default": "2500", "cond": "!WDT_DISABLE_ON_RESET && SAM34_WDT && ARCH_CHIP_SAM34 && ARCH_ARM"}], "help": "Minimum watchdog kick interval"}, {"type": 3, "name": "WDT_THREAD", "value": "n", "user_value": null, "menuconfig": true, "dep": "n", "prompt": "Watchdog Kicker Thread", "cond": "!WDT_DISABLE_ON_RESET && SAM34_WDT && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "!WDT_DISABLE_ON_RESET && SAM34_WDT && ARCH_CHIP_SAM34 && ARCH_ARM"}], "children": [{"type": 47, "name": "WDT_THREAD_NAME", "value": "", "user_value": null, "dep": "n", "prompt": "Watchdog Thread Name", "cond": "WDT_THREAD && SAM34_WDT && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "wdog", "default": "wdog", "cond": "WDT_THREAD && SAM34_WDT && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 27, "name": "WDT_THREAD_INTERVAL", "value": "", "user_value": null, "dep": "n", "prompt": "Watchdog Thread Interval (ms)", "cond": "WDT_THREAD && SAM34_WDT && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "2500", "default": "2500", "cond": "WDT_THREAD && SAM34_WDT && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 27, "name": "WDT_THREAD_PRIORITY", "value": "", "user_value": null, "dep": "n", "prompt": "Watchdog Thread Priority", "cond": "WDT_THREAD && SAM34_WDT && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "200", "default": "200", "cond": "WDT_THREAD && SAM34_WDT && ARCH_CHIP_SAM34 && ARCH_ARM"}]}, {"type": 27, "name": "WDT_THREAD_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Watchdog Thread Stacksize", "cond": "WDT_THREAD && SAM34_WDT && ARCH_CHIP_SAM34 && ARCH_ARM", "defaults": [{"name": "1024", "default": "1024", "cond": "WDT_THREAD && SAM34_WDT && ARCH_CHIP_SAM34 && ARCH_ARM"}]}]}]}, {"type": 6, "dep": "n", "prompt": "SAMV7 Configuration Options", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Atmel SAMV7 Chip Selection", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "ARCH_CHIP_SAMV71Q21", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_SAME70Q19", "value": "n", "user_value": null, "dep": "n", "prompt": "SAME70Q19", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAME70Q", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_SAME70Q20", "value": "n", "user_value": null, "dep": "n", "prompt": "SAME70Q20", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAME70Q", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_SAME70Q21", "value": "n", "user_value": null, "dep": "n", "prompt": "SAME70Q21", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAME70Q", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_SAME70N19", "value": "n", "user_value": null, "dep": "n", "prompt": "SAME70N19", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAME70N", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_SAME70N20", "value": "n", "user_value": null, "dep": "n", "prompt": "SAME70N20", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAME70N", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_SAME70N21", "value": "n", "user_value": null, "dep": "n", "prompt": "SAME70N21", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAME70N", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_SAME70J19", "value": "n", "user_value": null, "dep": "n", "prompt": "SAME70J10", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAME70J", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_SAME70J20", "value": "n", "user_value": null, "dep": "n", "prompt": "SAME70J20", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAME70J", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_SAME70J21", "value": "n", "user_value": null, "dep": "n", "prompt": "SAME70J21", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAME70J", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_SAMV71Q19", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMV71Q19", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMV71Q", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_SAMV71Q20", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMV71Q20", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMV71Q", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_SAMV71Q21", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMV71Q21", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMV71Q", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_SAMV71N19", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMV71N19", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMV71N", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_SAMV71N20", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMV71N20", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMV71N", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_SAMV71N21", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMV71N21", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMV71N", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_SAMV71J19", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMV71J19", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMV71J", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_SAMV71J20", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMV71J20", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMV71J", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_SAMV71J21", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMV71J21", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_SAMV71J", "cond": "y"}]}]}, {"type": 3, "name": "ARCH_CHIP_SAME70", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAME70Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAME70N && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAME70J && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_DPFPU", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ICACHE", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DCACHE", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ITCM", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DTCM", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CHIP_SAME70Q", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAME70Q19 && y) || (ARCH_CHIP_SAME70Q20 && y) || (ARCH_CHIP_SAME70Q21 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_CHIP_SAME70", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_MCAN1", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_DAC1", "cond": "!SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_EBI", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_HSMCI0", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_SDRAMC", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_SPI0", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_SPI1", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_TWIHS2", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_USBHS", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_USART0", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_USART1", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_USART2", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CHIP_SAME70N", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAME70N19 && y) || (ARCH_CHIP_SAME70N20 && y) || (ARCH_CHIP_SAME70N21 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_CHIP_SAME70", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_MCAN1", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_DAC1", "cond": "!SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_HSMCI0", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_SPI0", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_TWIHS2", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_USBHS", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_USART0", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_USART1", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_USART2", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CHIP_SAME70J", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAME70J19 && y) || (ARCH_CHIP_SAME70J20 && y) || (ARCH_CHIP_SAME70J21 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_CHIP_SAME70", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_QSPI_IS_SPI", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_USBFS", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_ISI8", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CHIP_SAMV71", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMV71Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71N && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71J && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_DPFPU", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ICACHE", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DCACHE", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ITCM", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DTCM", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_MEDIALB", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CHIP_SAMV71Q", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMV71Q19 && y) || (ARCH_CHIP_SAMV71Q20 && y) || (ARCH_CHIP_SAMV71Q21 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_CHIP_SAMV71", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_MCAN1", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_DAC1", "cond": "!SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_EBI", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_HSMCI0", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_SDRAMC", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_SPI0", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_SPI1", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_TWIHS2", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_USBHS", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_USART0", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_USART1", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_USART2", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CHIP_SAMV71N", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMV71N19 && y) || (ARCH_CHIP_SAMV71N20 && y) || (ARCH_CHIP_SAMV71N21 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_CHIP_SAMV71", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_MCAN1", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_DAC1", "cond": "!SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_HSMCI0", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_SPI0", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_TWIHS2", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_USBHS", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_USART0", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_USART1", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_USART2", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "ARCH_CHIP_SAMV71J", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAMV71J19 && y) || (ARCH_CHIP_SAMV71J20 && y) || (ARCH_CHIP_SAMV71J21 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_CHIP_SAMV71", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_QSPI_IS_SPI", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_USBFS", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_HAVE_ISI8", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_MCAN", "value": "n", "user_value": null, "rev_dep": "(SAMV7_MCAN0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (SAMV7_MCAN1 && SAMV7_HAVE_MCAN1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_HAVE_MCAN1", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAME70Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAME70N && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71N && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_DAC", "value": "n", "user_value": null, "rev_dep": "(SAMV7_DAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (SAMV7_DAC1 && SAMV7_HAVE_DAC1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_HAVE_DAC1", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAME70Q && !SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAME70N && !SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71Q && !SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71N && !SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_HAVE_EBI", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAME70Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_EMAC", "value": "n", "user_value": null, "rev_dep": "SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "ARMV7M_DCACHE_WRITETHROUGH", "cond": "ARMV7M_DCACHE && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_NETDEV_STATISTICS", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "NOTE that write-through caching is automatically selected.  This is\nto work around issues with the RX and TX descriptors with are 8-bytes\nin size.  But the D-Cache cache line size is 32-bytes.  That means\nthat you cannot reload, clean or invalidate a descriptor without also\neffecting three neighboring descriptors.  Setting write through mode\neliminates the need for cleaning.  If only reloading and invalidating\nare done, then there is no problem."}, {"type": 3, "name": "SAMV7_HSMCI", "value": "n", "user_value": null, "rev_dep": "SAMV7_HSMCI0 && SAMV7_HAVE_HSMCI0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_HAVE_HSMCI0", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAME70Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAME70N && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71N && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_HAVE_ISI8", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAME70J && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71J && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_HAVE_MEDIALB", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_SAMV71 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_HAVE_SDRAMC", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAME70Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_HAVE_SPI0", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAME70Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAME70N && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71N && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_HAVE_SPI1", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAME70Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_QSPI_IS_SPI", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAME70J && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71J && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_SSC", "value": "n", "user_value": null, "rev_dep": "SAMV7_SSC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_HAVE_TC", "value": "n", "user_value": null, "rev_dep": "(SAMV7_TC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (SAMV7_TC1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (SAMV7_TC2 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (SAMV7_TC3 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_HAVE_TWIHS2", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAME70Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAME70N && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71N && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_HAVE_USBFS", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAME70J && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71J && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_HAVE_USBHS", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAME70Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAME70N && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71N && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_HAVE_USART0", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAME70Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAME70N && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71N && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_HAVE_USART1", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAME70Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAME70N && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71N && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_HAVE_USART2", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_SAME70Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAME70N && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71Q && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (ARCH_CHIP_SAMV71N && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_SPI", "value": "n", "user_value": null, "rev_dep": "(SAMV7_SPI0 && SAMV7_HAVE_SPI0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (SAMV7_SPI1 && SAMV7_HAVE_SPI1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_SPI_MASTER", "value": "n", "user_value": null, "rev_dep": "(SAMV7_SPI0_MASTER && y) || (SAMV7_SPI1_MASTER && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_SPI_SLAVE", "value": "n", "user_value": null, "rev_dep": "(SAMV7_SPI0_SLAVE && EXPERIMENTAL && y) || (SAMV7_SPI1_SLAVE && EXPERIMENTAL && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 31, "dep": "n", "prompt": "SAMV7 Peripheral Selection", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "children": [{"type": 3, "name": "SAMV7_ACC", "value": "n", "user_value": null, "dep": "n", "prompt": "Analog Comparator (ACC)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "12-bit ADC Controller (ADC)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_AFEC0", "value": "n", "user_value": null, "dep": "n", "prompt": "Analog Front End 0 (AFEC0)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_AFEC1", "value": "n", "user_value": null, "dep": "n", "prompt": "Analog Front End 1 (AFEC1)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_MCAN0", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN controller 0 (MCAN0)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "CAN", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_CAN_ERRORS", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "CAN_TXREADY", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_MCAN", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_MCAN1", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN controller 1 (MCAN1)", "cond": "SAMV7_HAVE_MCAN1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_HAVE_MCAN1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "CAN", "cond": "SAMV7_HAVE_MCAN1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_CAN_ERRORS", "cond": "SAMV7_HAVE_MCAN1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "CAN_TXREADY", "cond": "SAMV7_HAVE_MCAN1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SAMV7_MCAN", "cond": "SAMV7_HAVE_MCAN1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_DAC0", "value": "n", "user_value": null, "dep": "n", "prompt": "Digital To Analog Converter 0 (DAC0)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "SAMV7_DAC", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "Digital To Analog Converter 1 (DAC1)", "cond": "SAMV7_HAVE_DAC1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_HAVE_DAC1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "SAMV7_DAC", "cond": "SAMV7_HAVE_DAC1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_EBI", "value": "n", "user_value": null, "dep": "n", "prompt": "External Bus Interface (EBI)", "cond": "SAMV7_HAVE_EBI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_HAVE_EBI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_EMAC0", "value": "n", "user_value": null, "dep": "n", "prompt": "Ethernet MAC (GMAC)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "SAMV7_EMAC", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "NETDEVICES", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_PHY", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_XDMAC", "value": "n", "user_value": null, "dep": "n", "prompt": "Central DMA (XDMA)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_DMA", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_HSMCI0", "value": "n", "user_value": null, "dep": "n", "prompt": "High Speed Multimedia Card Interface (HSMCI)", "cond": "SAMV7_HAVE_HSMCI0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_HAVE_HSMCI0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "SAMV7_HSMCI", "cond": "SAMV7_HAVE_HSMCI0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SDIO", "cond": "SAMV7_HAVE_HSMCI0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "MMCSD", "cond": "SAMV7_HAVE_HSMCI0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_ISI", "value": "n", "user_value": null, "dep": "n", "prompt": "Image Sensor Interface (ISI)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_MLB", "value": "n", "user_value": null, "dep": "n", "prompt": "Media LB Interface", "cond": "SAMV7_HAVE_MEDIALB && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_HAVE_MEDIALB && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_PWM0", "value": "n", "user_value": null, "dep": "n", "prompt": "Pulse Width Modulation Controller 0 (PWM0)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_PWM1", "value": "n", "user_value": null, "dep": "n", "prompt": "Pulse Width Modulation Controller 0 (PWM1)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_QSPI", "value": "n", "user_value": null, "dep": "n", "prompt": "Quad SPI (QSPI)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_USE_MPU", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARM_MPU", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_RTC", "value": "n", "user_value": null, "dep": "n", "prompt": "Real Time Clock (RTC)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_RTT", "value": "n", "user_value": null, "dep": "n", "prompt": "Real Time Timer (RTT)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_SDRAMC", "value": "n", "user_value": null, "dep": "n", "prompt": "SDRAM Controller (SDRAMC)", "cond": "SAMV7_HAVE_SDRAMC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_HAVE_SDRAMC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_SMC", "value": "n", "user_value": null, "dep": "n", "prompt": "Static Memory Controller (SMC)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_SPI0", "value": "n", "user_value": null, "dep": "n", "prompt": "Serial Peripheral Interface 0 (SPI0)", "cond": "SAMV7_HAVE_SPI0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_HAVE_SPI0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "SAMV7_SPI", "cond": "SAMV7_HAVE_SPI0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SPI", "cond": "SAMV7_HAVE_SPI0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_SPI1", "value": "n", "user_value": null, "dep": "n", "prompt": "Serial Peripheral Interface 1 (SPI1)", "cond": "SAMV7_HAVE_SPI1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_HAVE_SPI1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "SAMV7_SPI", "cond": "SAMV7_HAVE_SPI1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "SPI", "cond": "SAMV7_HAVE_SPI1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_SSC0", "value": "n", "user_value": null, "dep": "n", "prompt": "Synchronous Serial Controller (SSC)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "SAMV7_SSC", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC0", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer Counter 0 (ch. 0, 1, 2) (TC0)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "SAMV7_HAVE_TC", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC1", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer Counter 1 (ch. 3, 4, 5) (TC1)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "SAMV7_HAVE_TC", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC2", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer Counter 2 (ch. 6, 7, 8) (TC2)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "SAMV7_HAVE_TC", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC3", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer Counter 3 (ch. 9, 10, 11) (TC2)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "SAMV7_HAVE_TC", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TRNG", "value": "n", "user_value": null, "dep": "n", "prompt": "True Random Number Generator (TRNG)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_RNG", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TWIHS0", "value": "n", "user_value": null, "dep": "n", "prompt": "Two-wire Interface 0 (TWIHS0)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TWIHS1", "value": "n", "user_value": null, "dep": "n", "prompt": "Two-wire Interface 1 (TWIHS1)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TWIHS2", "value": "n", "user_value": null, "dep": "n", "prompt": "Two-wire Interface 2 (TWIHS2)", "cond": "SAMV7_HAVE_TWIHS2 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_HAVE_TWIHS2 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_UART0", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 0", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "UART0_SERIALDRIVER", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 1", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_UART2", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 2", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "UART2_SERIALDRIVER", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_UART3", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 3", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "UART3_SERIALDRIVER", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_UART4", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 4", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "UART4_SERIALDRIVER", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_USBDEVFS", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Device Full Speed (USBFS)", "cond": "SAMV7_HAVE_USBFS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_HAVE_USBFS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "USBDEV", "cond": "SAMV7_HAVE_USBFS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_USBDEVHS", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Device High Speed (USBHS)", "cond": "SAMV7_HAVE_USBHS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_HAVE_USBHS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "USBDEV", "cond": "SAMV7_HAVE_USBHS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_USBHOSTFS", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Host Full Speed (USBFS)", "cond": "SAMV7_HAVE_USBFS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_HAVE_USBFS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "USBHOST", "cond": "SAMV7_HAVE_USBFS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_USBHOSTHS", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Host High Speed (USBHS)", "cond": "SAMV7_HAVE_USBHS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_HAVE_USBHS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "USBHOST", "cond": "SAMV7_HAVE_USBHS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_USART0", "value": "n", "user_value": null, "dep": "n", "prompt": "USART 0", "cond": "SAMV7_HAVE_USART0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_HAVE_USART0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "USART0_SERIALDRIVER", "cond": "SAMV7_HAVE_USART0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "SAMV7_HAVE_USART0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_USART1", "value": "n", "user_value": null, "dep": "n", "prompt": "USART 1", "cond": "SAMV7_HAVE_USART1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_HAVE_USART1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "USART1_SERIALDRIVER", "cond": "SAMV7_HAVE_USART1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "SAMV7_HAVE_USART1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_USART2", "value": "n", "user_value": null, "dep": "n", "prompt": "USART 2", "cond": "SAMV7_HAVE_USART2 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_HAVE_USART2 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "USART2_SERIALDRIVER", "cond": "SAMV7_HAVE_USART2 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "SAMV7_HAVE_USART2 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_WDT", "value": "n", "user_value": null, "dep": "n", "prompt": "Watchdog Timer (WDT)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "WATCHDOG", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_RSWDT", "value": "n", "user_value": null, "dep": "n", "prompt": "Reinforced Safety Watchdog Timer (RSWDT)", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "WATCHDOG", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "JTAG IO Configuration", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_JTAG_FULL_ENABLE", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "JTAG Enable settings (by default the IO for JTAG-DP and SW-DP are\nenabled)", "children": [{"type": 3, "name": "SAMV7_JTAG_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable all JTAG IO", "cond": "y", "help": "JTAG Enable settings (by default the IO for JTAG-DP and SW-DP are\nenabled)\n\nWhen JTAG is disabled PB4-BP7 is assigned as a GPIO and can be\nconfigured for use as GPIO or a Peripheral"}, {"type": 3, "name": "SAMV7_JTAG_FULL_ENABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable full JTAG IO to use JTAG-DP + SW-DP", "cond": "y", "help": "The JTAG IO is configured for both JTAG-DP + SW-DP\"\n\nPB4 is TDI\nPB5 is TDO/TRACESWO\nPB6 is TMS/SWDIO\nPB7 is TCK/SWCLK"}, {"type": 3, "name": "SAMV7_JTAG_FULL_SW_ENABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Set JTAG-DP IO disabled and Full SW-DP IO enabled", "cond": "y", "help": "JTAG  IO is configured for SW-DP with Trace\"\n\nPB5 is TDO/TRACESWO\nPB6 is TMS/SWDIO\nPB7 is TCK/SWCLK"}, {"type": 3, "name": "SAMV7_JTAG_SW_ENABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Set JTAG-DP IO disabled and SW-DP IO enabled", "cond": "y", "help": "JTAG  IO is configured for SW-DP without Trace \"\n\nPB6 is TMS/SWDIO\nPB7 is TCK/SWCLK"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "ERASE Pin Configuration", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_ERASE_ENABLE", "default": "n", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "ERASE Pin Enable settings (by default ERASE pin is enabled)", "children": [{"type": 3, "name": "SAMV7_ERASE_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable ERASE Pin", "cond": "y", "help": "ERASE Pin Enable settings (by default ERASE pin is enabled)\n\nWhen the ERASE pin is disabled PB12 is assigned as a GPIO and can be\nconfigured for use as GPIO or a Peripheral.\n\nN.B. a low level must be ensured at startup to prevent Flash erase before\nthe user application sets PB12 into PIO mode,"}, {"type": 3, "name": "SAMV7_ERASE_ENABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable ERASE Pin", "cond": "y", "help": "The ERASE pin is configured to reinitialize the Flash content."}]}, {"type": 3, "name": "SAMV7_SYSTEMRESET", "value": "n", "user_value": null, "menuconfig": true, "dep": "n", "prompt": "Enable System Reset", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "selects": [{"symbol": "ARCH_HAVE_RESET", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enable up_systemreset", "children": [{"type": 27, "name": "SAMV7_EXTRESET_ERST", "value": "", "user_value": null, "dep": "n", "prompt": "Drive External nRST duration", "cond": "SAMV7_SYSTEMRESET && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMV7_SYSTEMRESET && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "16", "cond": "SAMV7_SYSTEMRESET && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Define if the external reset (nRST) will be generated in up_systemreset\nand for how long:\n\n- A value of 0 will not drive the external reset\n- A value of 1-6 will drive the external reset for 2^SAMV7_EXTRESET_ERST\n  slow clock cycles."}]}, {"type": 3, "name": "SAMV7_GPIO_IRQ", "value": "n", "user_value": null, "menuconfig": true, "dep": "n", "prompt": "GPIO pin interrupts", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "help": "Enable support for interrupting GPIO pins", "children": [{"type": 3, "name": "SAMV7_GPIOA_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIOA interrupts", "cond": "SAMV7_GPIO_IRQ && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_GPIO_IRQ && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_GPIOB_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIOB interrupts", "cond": "SAMV7_GPIO_IRQ && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_GPIO_IRQ && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_GPIOC_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIOC interrupts", "cond": "SAMV7_GPIO_IRQ && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_GPIO_IRQ && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_GPIOD_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIOD interrupts", "cond": "SAMV7_GPIO_IRQ && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_GPIO_IRQ && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_GPIOE_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIOE interrupts", "cond": "SAMV7_GPIO_IRQ && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_GPIO_IRQ && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}]}, {"type": 31, "dep": "n", "prompt": "Watchdog Configuration", "cond": "(SAMV7_WDT || SAMV7_RSWDT) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "children": [{"type": 6, "dep": "n", "prompt": "Watchdog Configuration", "cond": "SAMV7_WDT && (SAMV7_WDT || SAMV7_RSWDT) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"type": 3, "name": "SAMV7_WDT_INTERRUPT", "value": "n", "user_value": null, "dep": "n", "prompt": "Interrupt on timeout", "cond": "SAMV7_WDT && (SAMV7_WDT || SAMV7_RSWDT) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_WDT && (SAMV7_WDT || SAMV7_RSWDT) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The normal behavior is to reset everything when a watchdog timeout\noccurs.  An alternative behavior is to simply interrupt when the\ntimeout occurs.  This setting enables that alternative behavior."}, {"type": 3, "name": "SAMV7_WDT_DEBUGHALT", "value": "n", "user_value": null, "dep": "n", "prompt": "Halt on DEBUG", "cond": "SAMV7_WDT && (SAMV7_WDT || SAMV7_RSWDT) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "DEBUG_FEATURES && SAMV7_WDT && (SAMV7_WDT || SAMV7_RSWDT) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"name": "n", "default": "n", "cond": "!DEBUG_FEATURES && SAMV7_WDT && (SAMV7_WDT || SAMV7_RSWDT) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Halt the watchdog timer in the debug state"}, {"type": 3, "name": "SAMV7_WDT_IDLEHALT", "value": "n", "user_value": null, "dep": "n", "prompt": "Halt in IDLE", "cond": "SAMV7_WDT && (SAMV7_WDT || SAMV7_RSWDT) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMV7_WDT && (SAMV7_WDT || SAMV7_RSWDT) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Halt the watchdog timer in the IDLE state"}, {"type": 3, "name": "SAMV7_WDT_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register level debug", "cond": "DEBUG_WATCHDOG_INFO && SAMV7_WDT && (SAMV7_WDT || SAMV7_RSWDT) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WATCHDOG_INFO && SAMV7_WDT && (SAMV7_WDT || SAMV7_RSWDT) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enable low-level register debug output"}, {"type": 6, "dep": "n", "prompt": "Reinforced Safety Watchdog Configuration", "cond": "SAMV7_RSWDT && (SAMV7_WDT || SAMV7_RSWDT) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"type": 3, "name": "SAMV7_RSWDT_INTERRUPT", "value": "n", "user_value": null, "dep": "n", "prompt": "Interrupt on timeout", "cond": "SAMV7_RSWDT && (SAMV7_WDT || SAMV7_RSWDT) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_RSWDT && (SAMV7_WDT || SAMV7_RSWDT) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The normal behavior is to reset everything when a watchdog timeout\noccurs.  An alternative behavior is to simply interrupt when the\ntimeout occurs.  This setting enables that alternative behavior."}, {"type": 3, "name": "SAMV7_RSWDT_DEBUGHALT", "value": "n", "user_value": null, "dep": "n", "prompt": "Halt on DEBUG", "cond": "SAMV7_RSWDT && (SAMV7_WDT || SAMV7_RSWDT) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "DEBUG_FEATURES && SAMV7_RSWDT && (SAMV7_WDT || SAMV7_RSWDT) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"name": "n", "default": "n", "cond": "!DEBUG_FEATURES && SAMV7_RSWDT && (SAMV7_WDT || SAMV7_RSWDT) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Halt the watchdog timer in the debug state"}, {"type": 3, "name": "SAMV7_RSWDT_IDLEHALT", "value": "n", "user_value": null, "dep": "n", "prompt": "Halt in IDLE", "cond": "SAMV7_RSWDT && (SAMV7_WDT || SAMV7_RSWDT) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMV7_RSWDT && (SAMV7_WDT || SAMV7_RSWDT) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Halt the watchdog timer in the IDLE state"}, {"type": 3, "name": "SAMV7_RSWDT_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register level debug", "cond": "DEBUG_WATCHDOG_INFO && SAMV7_RSWDT && (SAMV7_WDT || SAMV7_RSWDT) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WATCHDOG_INFO && SAMV7_RSWDT && (SAMV7_WDT || SAMV7_RSWDT) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enable low-level register debug output"}]}, {"type": 3, "name": "SAMV7_PROGMEM", "value": "n", "user_value": null, "menuconfig": true, "dep": "n", "prompt": "FLASH program memory", "cond": "ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "help": "Enable support FLASH interfaces as defined in include/nuttx/progmem.h", "children": [{"type": 27, "name": "SAMV7_PROGMEM_NSECTORS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of 128KB sectors", "cond": "SAMV7_PROGMEM && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "SAMV7_PROGMEM && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "16", "cond": "SAMV7_PROGMEM && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "This is the number of 128KB FLASH sectors at the end of the program\nflash memory that will be reserved for use with by the interfaces\nprototyped in include/nuttx/progmem.h"}]}, {"type": 31, "dep": "n", "prompt": "SDRAM Configuration", "cond": "SAMV7_SDRAMC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "children": [{"type": 27, "name": "SAMV7_SDRAMSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "SDRAM size (bytes)", "cond": "SAMV7_SDRAMC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMV7_SDRAMC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "This is the usable size of the SDRAM.  This may be a value less that\nthe actual size of the SDRAM if, for some reason, you wish to\nreserve the end of SDRAM memory for some other purpose."}, {"type": 3, "name": "SAMV7_SDRAMHEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "SDRAM heap", "cond": "SAMV7_SDRAMC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMV7_SDRAMC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Add the first SAMV7_SDRAMSIZE bytes of SDRAM to the heap.  NOTE that\nthis requires also that MM_REGIONS be incremented to support another memory region."}]}, {"type": 31, "dep": "n", "prompt": "SPI Device Driver Configuration", "cond": "SAMV7_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "SPI0 Configuration", "cond": "SAMV7_SPI0 && SAMV7_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_SPI0_MASTER", "default": "n", "cond": "SAMV7_SPI0 && SAMV7_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_SPI0_MASTER", "value": "n", "user_value": null, "dep": "n", "prompt": "Master", "cond": "y", "selects": [{"symbol": "SAMV7_SPI_MASTER", "cond": "y"}], "help": "Configure SPI0 as an SPI master driver.  Default: Master"}, {"type": 3, "name": "SAMV7_SPI0_SLAVE", "value": "n", "user_value": null, "dep": "n", "prompt": "Slave", "cond": "EXPERIMENTAL && y", "selects": [{"symbol": "SAMV7_SPI_SLAVE", "cond": "EXPERIMENTAL && y"}], "help": "Configure SPI0 as an SPI slave driver.  Default: Master"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SPI1 Configuration", "cond": "SAMV7_SPI1 && SAMV7_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_SPI1_MASTER", "default": "n", "cond": "SAMV7_SPI1 && SAMV7_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_SPI1_MASTER", "value": "n", "user_value": null, "dep": "n", "prompt": "Master", "cond": "y", "selects": [{"symbol": "SAMV7_SPI_MASTER", "cond": "y"}], "help": "Configure SPI1 as an SPI master driver.  Default: Master"}, {"type": 3, "name": "SAMV7_SPI1_SLAVE", "value": "n", "user_value": null, "dep": "n", "prompt": "Slave", "cond": "EXPERIMENTAL && y", "selects": [{"symbol": "SAMV7_SPI_SLAVE", "cond": "EXPERIMENTAL && y"}], "help": "Configure SPI1 as an SPI slave driver.  Default: Master"}]}, {"type": 6, "dep": "n", "prompt": "SPI Master Configuration", "cond": "SAMV7_SPI_MASTER && SAMV7_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"type": 3, "name": "SAMV7_SPI_CS_DECODING", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI Peripheral Chip Select Decoding", "cond": "SAMV7_SPI_MASTER && SAMV7_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_SPI_MASTER && SAMV7_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Use Peripheral Chip Select Decoding on SPI Master"}, {"type": 3, "name": "SAMV7_SPI_VARSELECT", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI Variable Peripheral Select Mode", "cond": "SAMV7_SPI_MASTER && SAMV7_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_SPI_MASTER && SAMV7_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "When enabled, the spi device is working in the \"Variable Peripheral\nSelect Mode\" (VARMODE) instead of the \"Fixed Peripheral Select Mode\"\n(FIXEDMODE).\n\nIn FIXEDMODE the ChipSelect is set (once) with a call to spi_select and\nstays the same value all the time. In addition an eventually signaled\nLASTXFER has to be written to the global control register (SPI_CR).\nWithin the VARMODE, the ChipSelect can be changed with each datablock\ntransferred via spi_exchange because it is encoded by the driver\nwithin the data.\n\nThe same behavior applies for the LASTXFER bit."}, {"type": 3, "name": "SAMV7_SPI_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI DMA", "cond": "SAMV7_XDMAC && SAMV7_SPI_MASTER && SAMV7_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_XDMAC && SAMV7_SPI_MASTER && SAMV7_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Use DMA to improve SPI transfer performance.", "children": [{"type": 27, "name": "SAMV7_SPI_DMATHRESHOLD", "value": "", "user_value": null, "dep": "n", "prompt": "SPI DMA threshold", "cond": "SAMV7_SPI_DMA && SAMV7_SPI_MASTER && SAMV7_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "SAMV7_SPI_DMA && SAMV7_SPI_MASTER && SAMV7_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "When SPI DMA is enabled, small DMA transfers will still be performed\nby polling logic.  But we need a threshold value to determine what\nis small.  That value is provided by SAMV7_SPI_DMATHRESHOLD."}, {"type": 3, "name": "SAMV7_SPI_DMADEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI DMA transfer debug", "cond": "SAMV7_SPI_DMA && DEBUG_FEATURES && DEBUG_DMA && SAMV7_SPI_MASTER && SAMV7_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_SPI_DMA && DEBUG_FEATURES && DEBUG_DMA && SAMV7_SPI_MASTER && SAMV7_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enable special debug instrumentation analyze SPI DMA data transfers.\nThis logic is as non-invasive as possible:  It samples DMA\nregisters at key points in the data transfer and then dumps all of\nthe registers at the end of the transfer."}]}, {"type": 6, "dep": "n", "prompt": "SPI Slave Configuration", "cond": "SAMV7_SPI_SLAVE && SAMV7_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"type": 27, "name": "SAMV7_SPI_SLAVE_QSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Output queue size", "cond": "SAMV7_SPI_SLAVE && SAMV7_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "SAMV7_SPI_SLAVE && SAMV7_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The number of words that an be retained in the controller driver's\noutput queue."}, {"type": 3, "name": "SAMV7_SPI_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI Register level debug", "cond": "DEBUG_SPI_INFO && SAMV7_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_SPI_INFO && SAMV7_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Output detailed register-level SPI device debug information.\nRequires also CONFIG_DEBUG_SPI_INFO."}]}, {"type": 31, "dep": "n", "prompt": "QSPI Device Driver Configuration", "cond": "SAMV7_QSPI && !SAMV7_QSPI_IS_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "children": [{"type": 27, "name": "SAMV7_QSPI_DLYBS", "value": "", "user_value": null, "dep": "n", "prompt": "Delay Before QSCK (nsec)", "cond": "SAMV7_QSPI && !SAMV7_QSPI_IS_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMV7_QSPI && !SAMV7_QSPI_IS_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 27, "name": "SAMV7_QSPI_DLYBCT", "value": "", "user_value": null, "dep": "n", "prompt": "Delay Between Consecutive Transfers (nsec)", "cond": "SAMV7_QSPI && !SAMV7_QSPI_IS_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMV7_QSPI && !SAMV7_QSPI_IS_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_QSPI_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "QSPI DMA", "cond": "SAMV7_XDMAC && SAMV7_QSPI && !SAMV7_QSPI_IS_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_XDMAC && SAMV7_QSPI && !SAMV7_QSPI_IS_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Use DMA to improve SPI transfer performance.", "children": [{"type": 27, "name": "SAMV7_QSPI_DMATHRESHOLD", "value": "", "user_value": null, "dep": "n", "prompt": "QSPI DMA threshold", "cond": "SAMV7_QSPI_DMA && SAMV7_QSPI && !SAMV7_QSPI_IS_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "SAMV7_QSPI_DMA && SAMV7_QSPI && !SAMV7_QSPI_IS_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "When ASPI DMA is enabled, small DMA transfers will still be performed\nby polling logic.  But we need a threshold value to determine what\nis small.  That value is provided by SAMV7_QSPI_DMATHRESHOLD."}, {"type": 3, "name": "SAMV7_QSPI_DMADEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "QSPI DMA transfer debug", "cond": "SAMV7_QSPI_DMA && DEBUG_FEATURES && DEBUG_DMA && SAMV7_QSPI && !SAMV7_QSPI_IS_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_QSPI_DMA && DEBUG_FEATURES && DEBUG_DMA && SAMV7_QSPI && !SAMV7_QSPI_IS_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enable special debug instrumentation analyze QSPI DMA data transfers.\nThis logic is as non-invasive as possible:  It samples DMA\nregisters at key points in the data transfer and then dumps all of\nthe registers at the end of the transfer."}]}, {"type": 3, "name": "SAMV7_QSPI_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "QSPI Register level debug", "cond": "DEBUG_SPI_INFO && SAMV7_QSPI && !SAMV7_QSPI_IS_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_SPI_INFO && SAMV7_QSPI && !SAMV7_QSPI_IS_SPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Output detailed register-level QSPI device debug information.\nRequires also CONFIG_DEBUG_SPI_INFO."}]}, {"type": 31, "dep": "n", "prompt": "TWIHS device driver options", "cond": "(SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "children": [{"type": 27, "name": "SAMV7_TWIHS0_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "TWIHS0 Frequency", "cond": "SAMV7_TWIHS0 && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "100000", "default": "100000", "cond": "SAMV7_TWIHS0 && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 27, "name": "SAMV7_TWIHS0_GLITCH_FILTER", "value": "", "user_value": null, "dep": "n", "prompt": "TWIHS0 Glitch Filter Time", "cond": "SAMV7_TWIHS0 && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMV7_TWIHS0 && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "7", "cond": "SAMV7_TWIHS0 && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Apply filtering on TWIHS Inputs. Given number is the maximum pulse width\n(defined in peripheral CLKs) of spikes to be suppressed by the input filter.\nSetting this value to zero will disable glitch filtering."}, {"type": 3, "name": "SAMV7_TWIHS0_SINGLE_MASTER", "value": "n", "user_value": null, "dep": "n", "prompt": "TWIHS0 Single Master Mode", "cond": "SAMV7_TWIHS0 && I2C_RESET && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMV7_TWIHS0 && I2C_RESET && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enables a mode, where errors on the I2C-Bus (e.g. by EMC or\nstuck slaves) are automatically handled by the driver.\nIn an error-case the I2C-Bus is reset so further communication\non the bus can take place.\nThis option is default on because the TWI-Driver can't handle\nMulti-Master I2C anyways."}, {"type": 27, "name": "SAMV7_TWIHS1_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "TWIHS1 Frequency", "cond": "SAMV7_TWIHS1 && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "100000", "default": "100000", "cond": "SAMV7_TWIHS1 && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 27, "name": "SAMV7_TWIHS1_GLITCH_FILTER", "value": "", "user_value": null, "dep": "n", "prompt": "TWIHS1 Glitch Filter Time", "cond": "SAMV7_TWIHS1 && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMV7_TWIHS1 && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "7", "cond": "SAMV7_TWIHS1 && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Apply filtering on TWIHS Inputs. Given number is the maximum pulse width\n(defined in peripheral CLKs) of spikes to be suppressed by the input filter.\nSetting this value to zero will disable glitch filtering."}, {"type": 3, "name": "SAMV7_TWIHS1_SINGLE_MASTER", "value": "n", "user_value": null, "dep": "n", "prompt": "TWIHS1 Single Master Mode", "cond": "SAMV7_TWIHS1 && I2C_RESET && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMV7_TWIHS1 && I2C_RESET && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enables a mode, where errors on the I2C-Bus (e.g. by EMC or\nstuck slaves) are automatically handled by the driver.\nIn an error-case the I2C-Bus is reset so further communication\non the bus can take place.\nThis option is default on because the TWI-Driver can't handle\nMulti-Master I2C anyways."}, {"type": 27, "name": "SAMV7_TWIHS2_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "TWIHS2 Frequency", "cond": "SAMV7_TWIHS2 && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "100000", "default": "100000", "cond": "SAMV7_TWIHS2 && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 27, "name": "SAMV7_TWIHS2_GLITCH_FILTER", "value": "", "user_value": null, "dep": "n", "prompt": "TWIHS2 Glitch Filter Time", "cond": "SAMV7_TWIHS2 && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMV7_TWIHS2 && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "7", "cond": "SAMV7_TWIHS2 && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Apply filtering on TWIHS Inputs. Given number is the maximum pulse width\n(defined in peripheral CLKs) of spikes to be suppressed by the input filter.\nSetting this value to zero will disable glitch filtering."}, {"type": 3, "name": "SAMV7_TWIHS2_SINGLE_MASTER", "value": "n", "user_value": null, "dep": "n", "prompt": "TWIHS2 Single Master Mode", "cond": "SAMV7_TWIHS2 && I2C_RESET && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMV7_TWIHS2 && I2C_RESET && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enables a mode, where errors on the I2C-Bus (e.g. by EMC or\nstuck slaves) are automatically handled by the driver.\nIn an error-case the I2C-Bus is reset so further communication\non the bus can take place.\nThis option is default on because the TWI-Driver can't handle\nMulti-Master I2C anyways."}, {"type": 3, "name": "SAMV7_TWIHS_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "TWIHS register level debug", "cond": "DEBUG_I2C_INFO && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_I2C_INFO && (SAMV7_TWIHS0 || SAMV7_TWIHS1 || SAMV7_TWIHS2) && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Output detailed register-level TWIHS device debug information.\nVery invasive! Requires also CONFIG_DEBUG_I2C_INFO."}]}, {"type": 31, "dep": "n", "prompt": "SSC Configuration", "cond": "SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "children": [{"type": 27, "name": "SAMV7_SSC_MAXINFLIGHT", "value": "", "user_value": null, "dep": "n", "prompt": "SSC queue size", "cond": "SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "16", "default": "16", "cond": "SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "This is the total number of transfers, both RX and TX, that can be\nenqueue before the caller is required to wait.  This setting\ndetermines the number certain queue data structures that will be\npre-allocated."}, {"type": 6, "dep": "n", "prompt": "SSC0 Configuration", "cond": "SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"type": 27, "name": "SAMV7_SSC0_DATALEN", "value": "", "user_value": null, "dep": "n", "prompt": "Data width (bits)", "cond": "SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "16", "default": "16", "cond": "SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Data width in bits.  This is a default value and may be change\nvia the I2S interface"}, {"type": 3, "name": "SAMV7_SSC0_RX", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable I2C receiver", "cond": "SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enable I2S receipt logic", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Receiver clock source", "cond": "SAMV7_SSC0_RX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_SSC0_RX_MCKDIV", "default": "n", "cond": "SAMV7_SSC0_RX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_SSC0_RX_RKINPUT", "value": "n", "user_value": null, "dep": "n", "prompt": "RK input", "cond": "y", "help": "The SSC receiver clock is an external clock provided on the RK input\npin.  Sample rate determined by the external clock frequency."}, {"type": 3, "name": "SAMV7_SSC0_RX_TXCLK", "value": "n", "user_value": null, "dep": "n", "prompt": "Transmitter Clock", "cond": "y", "help": "The SSC receiver clock is transmitter clock.  RX sample rate is the same\nas the TX sample rate."}, {"type": 3, "name": "SAMV7_SSC0_RX_MCKDIV", "value": "n", "user_value": null, "dep": "n", "prompt": "MCK/2", "cond": "y", "help": "The SSC receiver clock is the MCK/2 divided by a up to 4095.  Desired\nsample rate must be provided below."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Receiver output clock", "cond": "!SAMV7_SSC0_RX_RKINPUT && SAMV7_SSC0_RX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_SSC0_RX_RKOUTPUT_NONE", "default": "n", "cond": "!SAMV7_SSC0_RX_RKINPUT && SAMV7_SSC0_RX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_SSC0_RX_RKOUTPUT_NONE", "value": "n", "user_value": null, "dep": "n", "prompt": "None", "cond": "y"}, {"type": 3, "name": "SAMV7_SSC0_RX_RKOUTPUT_CONT", "value": "n", "user_value": null, "dep": "n", "prompt": "Continuous", "cond": "y"}, {"type": 3, "name": "SAMV7_SSC0_RX_RKOUTPUT_XFR", "value": "n", "user_value": null, "dep": "n", "prompt": "Only during transfers", "cond": "y"}]}, {"type": 27, "name": "SAMV7_SSC0_RX_FSLEN", "value": "", "user_value": null, "dep": "n", "prompt": "Receive Frame Sync Length", "cond": "SAMV7_SSC0_RX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMV7_SSC0_RX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "255", "cond": "SAMV7_SSC0_RX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "This setting determines the pulse length of the Receive Frame Sync\nsignal in units of receive clock periods."}, {"type": 27, "name": "SAMV7_SSC0_RX_STTDLY", "value": "", "user_value": null, "dep": "n", "prompt": "Receive Start Delay Length", "cond": "SAMV7_SSC0_RX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMV7_SSC0_RX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "255", "cond": "SAMV7_SSC0_RX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "This setting determines the pulse length to the start of data in\nreceive clock periods.  It must be greater than or equal to the RX\nframe synch length.  Zero means no start delay."}]}, {"type": 3, "name": "SAMV7_SSC0_TX", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable I2C transmitter", "cond": "SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enable I2S transmission logic", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Transmitter clock source", "cond": "SAMV7_SSC0_TX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_SSC0_TX_MCKDIV", "default": "n", "cond": "SAMV7_SSC0_TX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_SSC0_TX_TKINPUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TK input", "cond": "y", "help": "The SSC transmitter clock is an external clock provided on the TK input\npin.  Sample rate determined by the external clock frequency."}, {"type": 3, "name": "SAMV7_SSC0_TX_RXCLK", "value": "n", "user_value": null, "dep": "n", "prompt": "Receiver Clock", "cond": "y", "help": "The SSC transmitter clock is receiver clock.  TX sample rate is the same\nas the RX sample rate."}, {"type": 3, "name": "SAMV7_SSC0_TX_MCKDIV", "value": "n", "user_value": null, "dep": "n", "prompt": "MCK/2", "cond": "y", "help": "The SSC transmitter clock is the MCK/2 divided by a up to 4095.  Desired\nsample rate must be provided below."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Transmitter output clock", "cond": "!SAMV7_SSC0_TX_TKINPUT && SAMV7_SSC0_TX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_SSC0_TX_TKOUTPUT_NONE", "default": "n", "cond": "!SAMV7_SSC0_TX_TKINPUT && SAMV7_SSC0_TX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_SSC0_TX_TKOUTPUT_NONE", "value": "n", "user_value": null, "dep": "n", "prompt": "None", "cond": "y"}, {"type": 3, "name": "SAMV7_SSC0_TX_TKOUTPUT_CONT", "value": "n", "user_value": null, "dep": "n", "prompt": "Continuous", "cond": "y"}, {"type": 3, "name": "SAMV7_SSC0_TX_TKOUTPUT_XFR", "value": "n", "user_value": null, "dep": "n", "prompt": "Only during transfers", "cond": "y"}]}, {"type": 27, "name": "SAMV7_SSC0_TX_FSLEN", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit Frame Sync Length", "cond": "SAMV7_SSC0_TX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMV7_SSC0_TX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "255", "cond": "SAMV7_SSC0_TX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "This setting defines the length of the Transmit Frame Sync signal in\nunits of transmit clock periods.  A value of zero disables this\nfeature.  In that case the TD line is driven with the default value\nduring the Transmit Frame Sync signal."}, {"type": 27, "name": "SAMV7_SSC0_TX_STTDLY", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit Start Delay Length", "cond": "SAMV7_SSC0_TX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMV7_SSC0_TX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "255", "cond": "SAMV7_SSC0_TX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "This setting determines the pulse length to the start of data in\ntransmit clock periods.  It must be greater than or equal to the RX\nframe synch length.  Zero means no start delay."}]}, {"type": 27, "name": "SAMV7_SSC0_MCKDIV_SAMPLERATE", "value": "", "user_value": null, "dep": "n", "prompt": "Sample rate", "cond": "(SAMV7_SSC0_RX_MCKDIV || SAMV7_SSC0_TX_MCKDIV) && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "48000", "default": "48000", "cond": "(SAMV7_SSC0_RX_MCKDIV || SAMV7_SSC0_TX_MCKDIV) && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "If the either the receiver or transmitter clock is provided by MCK/2 divided\ndown, then the sample rate must be provided.  The bit rate will be the product\nof the sample rate and the data width.  The SSC driver will determine the best\ndivider to obtain that bit rate (up to 4095).  If the bit rate can be realized\nby dividing down the MCK/2, a compile time error will occur."}, {"type": 3, "name": "SAMV7_SSC0_LOOPBACK", "value": "n", "user_value": null, "dep": "n", "prompt": "Loopback mode", "cond": "SAMV7_SSC0_TX && SAMV7_SSC0_RX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_SSC0_TX && SAMV7_SSC0_RX && SAMV7_SSC0 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "If both the receiver and transmitter are enabled, then the SSC can\nbe configured in loopback mode.  This setting selects SSC loopback\nand will cause the LOOP bit to be set in the SSC_RFMR register. In\nthis case, RD is connected to TD, RF is connected to TF and RK is\nconnected to TK."}, {"type": 6, "dep": "n", "prompt": "SSC1 Configuration", "cond": "SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"type": 27, "name": "SAMV7_SSC1_DATALEN", "value": "", "user_value": null, "dep": "n", "prompt": "Data width (bits)", "cond": "SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "16", "default": "16", "cond": "SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Data width in bits.  This is a default value and may be change\nvia the I2S interface"}, {"type": 3, "name": "SAMV7_SSC1_RX", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable I2C receiver", "cond": "SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enable I2S receipt logic", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Receiver clock source", "cond": "SAMV7_SSC1_RX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_SSC1_RX_MCKDIV", "default": "n", "cond": "SAMV7_SSC1_RX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_SSC1_RX_RKINPUT", "value": "n", "user_value": null, "dep": "n", "prompt": "RK input", "cond": "y", "help": "The SSC receiver clock is an external clock provided on the RK input\npin.  Sample rate determined by the external clock frequency."}, {"type": 3, "name": "SAMV7_SSC1_RX_TXCLK", "value": "n", "user_value": null, "dep": "n", "prompt": "Transmitter Clock", "cond": "y", "help": "The SSC receiver clock is transmitter clock.  RX sample rate is the same\nas the TX sample rate."}, {"type": 3, "name": "SAMV7_SSC1_RX_MCKDIV", "value": "n", "user_value": null, "dep": "n", "prompt": "MCK/2", "cond": "y", "help": "The SSC receiver clock is the MCK/2 divided by a up to 4095.  Desired\nsample rate must be provided below."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Receiver output clock", "cond": "!SAMV7_SSC1_RX_RKINPUT && SAMV7_SSC1_RX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_SSC1_RX_RKOUTPUT_NONE", "default": "n", "cond": "!SAMV7_SSC1_RX_RKINPUT && SAMV7_SSC1_RX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_SSC1_RX_RKOUTPUT_NONE", "value": "n", "user_value": null, "dep": "n", "prompt": "None", "cond": "y"}, {"type": 3, "name": "SAMV7_SSC1_RX_RKOUTPUT_CONT", "value": "n", "user_value": null, "dep": "n", "prompt": "Continuous", "cond": "y"}, {"type": 3, "name": "SAMV7_SSC1_RX_RKOUTPUT_XFR", "value": "n", "user_value": null, "dep": "n", "prompt": "Only during transfers", "cond": "y"}]}, {"type": 27, "name": "SAMV7_SSC1_RX_FSLEN", "value": "", "user_value": null, "dep": "n", "prompt": "Receive Frame Sync Length", "cond": "SAMV7_SSC1_RX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMV7_SSC1_RX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "255", "cond": "SAMV7_SSC1_RX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "This setting determines the pulse length of the Receive Frame Sync\nsignal in units of receive clock periods."}, {"type": 27, "name": "SAMV7_SSC1_RX_STTDLY", "value": "", "user_value": null, "dep": "n", "prompt": "Receive Start Delay Length", "cond": "SAMV7_SSC1_RX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMV7_SSC1_RX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "255", "cond": "SAMV7_SSC1_RX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "This setting determines the pulse length to the start of data of\nreceive clock periods.  It must be greater than or equal to the RX\nframe synch length.  Zero means no start delay."}]}, {"type": 3, "name": "SAMV7_SSC1_TX", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable I2C transmitter", "cond": "SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enable I2S transmission logic", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Transmitter clock source", "cond": "SAMV7_SSC1_TX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_SSC1_TX_MCKDIV", "default": "n", "cond": "SAMV7_SSC1_TX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_SSC1_TX_TKINPUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TK input", "cond": "y", "help": "The SSC transmitter clock is an external clock provided on the TK input\npin.  Sample rate determined by the external clock frequency."}, {"type": 3, "name": "SAMV7_SSC1_TX_RXCLK", "value": "n", "user_value": null, "dep": "n", "prompt": "Receiver Clock", "cond": "y", "help": "The SSC transmitter clock is receiver clock.  TX sample rate is the same\nas the RX sample rate."}, {"type": 3, "name": "SAMV7_SSC1_TX_MCKDIV", "value": "n", "user_value": null, "dep": "n", "prompt": "MCK/2", "cond": "y", "help": "The SSC transmitter clock is the MCK/2 divided by a up to 4095.  Desired\nsample rate must be provided below."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Transmitter output clock", "cond": "!SAMV7_SSC1_TX_TKINPUT && SAMV7_SSC1_TX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_SSC1_TX_TKOUTPUT_NONE", "default": "n", "cond": "!SAMV7_SSC1_TX_TKINPUT && SAMV7_SSC1_TX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_SSC1_TX_TKOUTPUT_NONE", "value": "n", "user_value": null, "dep": "n", "prompt": "None", "cond": "y"}, {"type": 3, "name": "SAMV7_SSC1_TX_TKOUTPUT_CONT", "value": "n", "user_value": null, "dep": "n", "prompt": "Continuous", "cond": "y"}, {"type": 3, "name": "SAMV7_SSC1_TX_TKOUTPUT_XFR", "value": "n", "user_value": null, "dep": "n", "prompt": "Only during transfers", "cond": "y"}]}, {"type": 27, "name": "SAMV7_SSC1_TX_FSLEN", "value": "", "user_value": null, "dep": "n", "prompt": "Receive Frame Sync Length", "cond": "SAMV7_SSC1_TX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMV7_SSC1_TX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "255", "cond": "SAMV7_SSC1_TX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "This setting defines the length of the Transmit Frame Sync signal in\nunits of transmit clock periods.  A value of zero disables this\nfeature.  In that case the TD line is driven with the default value\nduring the Transmit Frame Sync signal."}, {"type": 27, "name": "SAMV7_SSC1_TX_STTDLY", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit Start Delay Length", "cond": "SAMV7_SSC1_TX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SAMV7_SSC1_TX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "255", "cond": "SAMV7_SSC1_TX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "This setting determines the pulse length to the start of data in\ntransmit clock periods.  It must be greater than or equal to the RX\nframe synch length.  Zero means no start delay."}]}, {"type": 27, "name": "SAMV7_SSC1_MCKDIV_SAMPLERATE", "value": "", "user_value": null, "dep": "n", "prompt": "Sample rate", "cond": "(SAMV7_SSC1_RX_MCKDIV || SAMV7_SSC1_TX_MCKDIV) && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "48000", "default": "48000", "cond": "(SAMV7_SSC1_RX_MCKDIV || SAMV7_SSC1_TX_MCKDIV) && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "If the either the receiver or transmitter clock is provided by MCK/2 divided\ndown, then the sample rate must be provided.  The bit rate will be the product\nof the sample rate and the data width.  The SSC driver will determine the best\ndivider to obtain that bit rate (up to 4095).  If the bit rate can be realized\nby dividing down the MCK/2, a compile time error will occur."}, {"type": 3, "name": "SAMV7_SSC1_LOOPBACK", "value": "n", "user_value": null, "dep": "n", "prompt": "Loopback mode", "cond": "SAMV7_SSC1_TX && SAMV7_SSC1_RX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_SSC1_TX && SAMV7_SSC1_RX && SAMV7_SSC1 && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "If both the receiver and transmitter are enabled, then the SSC can\nbe configured in loopback mode.  This setting selects SSC loopback\nand will cause the LOOP bit to be set in the SSC_RFMR register. In\nthis case, RD is connected to TD, RF is connected to TF and RK is\nconnected to TK."}, {"type": 3, "name": "SAMV7_SSC_DMADEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "SSC DMA transfer debug", "cond": "DEBUG_FEATURES && DEBUG_DMA && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && DEBUG_DMA && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enable special debug instrumentation analyze SSC DMA data transfers.\nThis logic is as non-invasive as possible:  It samples DMA\nregisters at key points in the data transfer and then dumps all of\nthe registers at the end of the transfer."}, {"type": 3, "name": "SAMV7_SSC_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "SSC Register level debug", "cond": "DEBUG_I2S_INFO && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_I2S_INFO && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Output detailed register-level SSC device debug information.\nVery invasive! Requires also CONFIG_DEBUG_I2S_INFO."}, {"type": 3, "name": "SAMV7_SSC_QDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "SSC Queue debug", "cond": "DEBUG_I2S && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_I2S && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enable instrumentation to debug audio buffer queue logic."}, {"type": 3, "name": "SAMV7_SSC_DUMPBUFFERS", "value": "n", "user_value": null, "dep": "n", "prompt": "Dump Buffers", "cond": "DEBUG_I2S && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_I2S && SAMV7_SSC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enable instrumentation to dump TX and RX buffers."}]}, {"type": 31, "dep": "n", "prompt": "Timer/counter Configuration", "cond": "SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "children": [{"type": 3, "name": "SAMV7_TC0_CLK0", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC0 channel 0 clock input pin", "cond": "SAMV7_TC0 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC0 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC0_TIOA0", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC0 channel 0 output A", "cond": "SAMV7_TC0 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC0 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC0_TIOB0", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC0 channel 0 output B", "cond": "SAMV7_TC0 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC0 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC0_CLK1", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC0 channel 1 clock input pin", "cond": "SAMV7_TC0 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC0 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC0_TIOA1", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC0 channel 1 output A", "cond": "SAMV7_TC0 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC0 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC0_TIOB1", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC0 channel 1 output B", "cond": "SAMV7_TC0 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC0 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC0_CLK2", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC0 channel 2 clock input pin", "cond": "SAMV7_TC0 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC0 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC0_TIOA2", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC0 channel 2 output A", "cond": "SAMV7_TC0 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC0 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC0_TIOB2", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC0 channel 2 output B", "cond": "SAMV7_TC0 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC0 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC1_CLK3", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC1 channel 3 clock input pin", "cond": "SAMV7_TC1 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC1 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC1_TIOA3", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC1 channel 3 output A", "cond": "SAMV7_TC1 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC1 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC1_TIOB3", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC1 channel 3 output B", "cond": "SAMV7_TC1 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC1 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC1_CLK4", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC1 channel 4 clock input pin", "cond": "SAMV7_TC1 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC1 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC1_TIOA4", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC1 channel 4 output A", "cond": "SAMV7_TC1 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC1 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC1_TIOB4", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC1 channel 4 output B", "cond": "SAMV7_TC1 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC1 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC1_CLK5", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC1 channel 5 clock input pin", "cond": "SAMV7_TC1 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC1 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC1_TIOA5", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC1 channel 5 output A", "cond": "SAMV7_TC1 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC1 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC1_TIOB5", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC1 channel 5 output B", "cond": "SAMV7_TC1 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC1 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC2_CLK6", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC2 channel 6 clock input pin", "cond": "SAMV7_TC2 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC2 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC2_TIOA6", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC2 channel 6 output A", "cond": "SAMV7_TC2 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC2 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC2_TIOB6", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC2 channel 6 output B", "cond": "SAMV7_TC2 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC2 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC2_CLK7", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC2 channel 7 clock input pin", "cond": "SAMV7_TC2 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC2 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC2_TIOA7", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC2 channel 7 output A", "cond": "SAMV7_TC2 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC2 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC2_TIOB7", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC2 channel 7 output B", "cond": "SAMV7_TC2 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC2 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC2_CLK8", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC2 channel 8 clock input pin", "cond": "SAMV7_TC2 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC2 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC2_TIOA8", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC2 channel 8 output A", "cond": "SAMV7_TC2 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC2 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC2_TIOB8", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC2 channel 8 output B", "cond": "SAMV7_TC2 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC2 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC3_CLK9", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC3 channel 9 clock input pin", "cond": "SAMV7_TC3 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC3 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC3_TIOA9", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC3 channel 9 output A", "cond": "SAMV7_TC3 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC3 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC3_TIOB9", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC3 channel 9 output B", "cond": "SAMV7_TC3 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC3 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC3_CLK10", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC3 channel 10 clock input pin", "cond": "SAMV7_TC3 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC3 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC3_TIOA10", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC3 channel 10 output A", "cond": "SAMV7_TC3 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC3 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC3_TIOB10", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC3 channel 10 output B", "cond": "SAMV7_TC3 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC3 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC3_CLK11", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC3 channel 11 clock input pin", "cond": "SAMV7_TC3 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC3 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC3_TIOA11", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC3 channel 11 output A", "cond": "SAMV7_TC3 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC3 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_TC3_TIOB11", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TC3 channel 11 output B", "cond": "SAMV7_TC3 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_TC3 && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_ONESHOT", "value": "n", "user_value": null, "dep": "n", "prompt": "TC one-shot wrapper", "cond": "SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SCHED_TICKLESS && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"name": "y", "default": "y", "cond": "SCHED_TICKLESS && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enable a wrapper around the low level timer/counter functions to\nsupport one-shot timer."}, {"type": 3, "name": "SAMV7_FREERUN", "value": "n", "user_value": null, "dep": "n", "prompt": "TC free-running wrapper", "cond": "SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SCHED_TICKLESS && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"name": "y", "default": "y", "cond": "SCHED_TICKLESS && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enable a wrapper around the low level timer/counter functions to\nsupport a free-running timer."}, {"type": 27, "name": "SAMV7_TICKLESS_ONESHOT", "value": "", "user_value": null, "dep": "n", "prompt": "Tickless one-shot timer channel", "cond": "SCHED_TICKLESS && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "SCHED_TICKLESS && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "8", "cond": "SCHED_TICKLESS && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "If the Tickless OS feature is enabled, the one clock must be\nassigned to provided the one-shot timer needed by the OS."}, {"type": 27, "name": "SAMV7_TICKLESS_FREERUN", "value": "", "user_value": null, "dep": "n", "prompt": "Tickless free-running timer channel", "cond": "SCHED_TICKLESS && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SCHED_TICKLESS && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "8", "cond": "SCHED_TICKLESS && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "If the Tickless OS feature is enabled, the one clock must be\nassigned to provided the free-running timer needed by the OS."}, {"type": 3, "name": "SAMV7_TC_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "TC debug", "cond": "DEBUG_FEATURES && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Output high level Timer/Counter device debug information.\nRequires also CONFIG_DEBUG_FEATURES.  If this option AND CONFIG_DEBUG_INFO are\nenabled, then the system will be overwhelmed the timer debug\noutput.  If CONFIG_DEBUG_INFO is disabled, then debug output will\nonly indicate if/when timer-related errors occur.  This\nlatter mode is completely usable."}, {"type": 3, "name": "SAMV7_TC_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "TC register level debug", "cond": "DEBUG_TIMER_INFO && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_TIMER_INFO && SAMV7_HAVE_TC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Output detailed register-level Timer/Counter device debug\ninformation. Very invasive! Requires also CONFIG_DEBUG_TIMER_INFO."}]}, {"type": 31, "dep": "n", "prompt": "DAC device driver configuration", "cond": "SAMV7_DAC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "children": [{"type": 27, "name": "SAMV7_DAC_PRESCAL", "value": "", "user_value": null, "dep": "n", "prompt": "DAC MCK prescaler", "cond": "SAMV7_DAC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "7", "default": "7", "cond": "SAMV7_DAC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "15", "cond": "SAMV7_DAC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Define PRESCALER (Peripheral Clock to DAC Clock Ratio)\n\n 0 -> 2 periods of DAC Clock\n 1 -> 3 periods of DAC Clock\n 2 -> 4 periods of DAC Clock\n 3 -> 5 periods of DAC Clock\n 4 -> 6 periods of DAC Clock\n 5 -> 7 periods of DAC Clock\n 6 -> 8 periods of DAC Clock\n 7 -> 9 periods of DAC Clock\n 8 -> 10 periods of DAC Clock\n 9 -> 11 periods of DAC Clock\n10 -> 12 periods of DAC Clock\n11 -> 13 periods of DAC Clock\n12 -> 14 periods of DAC Clock\n13 -> 15 periods of DAC Clock\n14 -> 16 periods of DAC Clock\n15 -> 17 periods of DAC Clock"}, {"type": 3, "name": "SAMV7_DAC_TRIGGER", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC trigger mode", "cond": "SAMV7_DAC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_DAC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enable DAC trigger mode", "children": [{"type": 27, "name": "SAMV7_DAC_TRIGGER_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "DAC trigger frequency", "cond": "SAMV7_DAC_TRIGGER && SAMV7_DAC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "1000", "default": "1000", "cond": "SAMV7_DAC_TRIGGER && SAMV7_DAC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Define DAC trigger frequency"}, {"type": 27, "name": "SAMV7_DAC_TRIGGER_SELECT", "value": "", "user_value": null, "dep": "n", "prompt": "DAC trigger source", "cond": "SAMV7_DAC_TRIGGER && SAMV7_DAC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "3", "default": "3", "cond": "SAMV7_DAC_TRIGGER && SAMV7_DAC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "3", "cond": "SAMV7_DAC_TRIGGER && SAMV7_DAC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Define DAC trigger source.  Snly support for TC0, TC1, TC2 output is\ncurrently implemented:\n\n1 -> TC0\n2 -> TC1\n3 -> TC2"}]}]}, {"type": 31, "dep": "n", "prompt": "HSMCI device driver options", "cond": "SAMV7_HSMCI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "children": [{"type": 3, "name": "SAMV7_HSMCI_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "Support DMA data transfers", "cond": "SAMV7_HSMCI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMV7_HSMCI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "selects": [{"symbol": "SDIO_DMA", "cond": "SAMV7_HSMCI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Support DMA data transfers.\nEnable SD card DMA data transfers.  This is marginally optional.\nFor most usages, SD accesses will cause data overruns if used without\nDMA."}, {"type": 3, "name": "SAMV7_HSMCI_RDPROOF", "value": "n", "user_value": null, "dep": "n", "prompt": "Read Proof Enable", "cond": "SAMV7_HSMCI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_HSMCI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enabling Read Proof allows to stop the HSMCI Clock during read\naccess if the internal FIFO is full. This will guarantee data\nintegrity, not bandwidth."}, {"type": 3, "name": "SAMV7_HSMCI_WRPROOF", "value": "n", "user_value": null, "dep": "n", "prompt": "Write Proof Enable", "cond": "SAMV7_HSMCI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_HSMCI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enabling Write Proof allows to stop the HSMCI Clock during write\naccess if the internal FIFO is full. This will guarantee data\nintegrity, not bandwidth."}, {"type": 3, "name": "SAMV7_HSMCI_UNALIGNED", "value": "n", "user_value": null, "dep": "n", "prompt": "Unaligned I/O buffers", "cond": "SAMV7_HSMCI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_HSMCI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "This option enables additional logic to handle unaligned buffers for\nread and write SDIO operations.  Normally this support is not\nrequired because the HSCMI driver functions like a block driver and,\nfor example, when used with the FAT file system only transfers\naligned blocks of data.\n\nBut under certain circumstances, the FAT file system WILL read\ndirectly into the user buffer and then strict 32-bit alignment is\nrequired.  That condition is:  When the user reads from the\nbeginning of a sector and at least a whole sector is being read.\n\nThis option is not recommended.  There are better ways to handle\nthe unalaigned case:\n\n        # CONFIG_SAMV7_HSMCI_UNALIGNED is not set\n                Just return -EFAULT if unaligned\n        CONFIG_FAT_DIRECT_RETRY=y\n                If -EFAULT is returned, then try again with aligned\n                sector buffers."}, {"type": 3, "name": "SAMV7_HSMCI_XFRDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "HSMCI transfer debug", "cond": "DEBUG_FS_INFO && SAMV7_HSMCI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FS_INFO && SAMV7_HSMCI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enable special debug instrumentation analyze HSMCI data transfers.\nThis logic is as non-invasive as possible:  It samples HSMCI\nregisters at key points in the data transfer and then dumps all of\nthe registers at the end of the transfer.  If DEBUG_DMA is also\nenabled, then DMA register will be collected as well.  Requires also\nDEBUG_FS and CONFIG_DEBUG_INFO."}, {"type": 3, "name": "SAMV7_HSMCI_CMDDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "HSMCI command debug", "cond": "DEBUG_FS_INFO && SAMV7_HSMCI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FS_INFO && SAMV7_HSMCI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enable special debug instrumentation analyze HSMCI commands. This\nlogic is as non-invasive as possible:  It samples HSMCI registers at\nkey points in the data transfer and then dumps all of the registers\nat the end of the transfer.  If DEBUG_DMA is also enabled, then DMA\nregister will be collected as well.  Requires also DEBUG_FS and\nCONFIG_DEBUG_INFO."}, {"type": 3, "name": "SAMV7_HSMCI_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "HSMCI Register level debug", "cond": "DEBUG_MEMCARD_INFO && SAMV7_HSMCI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_MEMCARD_INFO && SAMV7_HSMCI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Output detailed register-level HSCMI device debug information.\nVery invasive! Requires also DEBUG_MEMCARD_INFO."}]}, {"type": 31, "dep": "n", "prompt": "EMAC device driver options", "cond": "SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "children": [{"type": 27, "name": "SAMV7_EMAC0_NRXBUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of RX buffers", "cond": "SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "16", "default": "16", "cond": "SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "EMAC buffer memory is segmented into 128 byte units (not\nconfigurable).  This setting provides the number of such 128 byte\nunits used for reception.  This is also equal to the number of RX\ndescriptors that will be allocated  The selected value must be an\neven power of 2."}, {"type": 27, "name": "SAMV7_EMAC0_NTXBUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of TX buffers", "cond": "SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "EMAC buffer memory is segmented into full Ethernet packets (size\nNET_BUFSIZE bytes).  This setting provides the number of such packets\nthat can be in flight.  This is also equal to the number of TX\ndescriptors that will be allocated."}, {"type": 27, "name": "SAMV7_EMAC0_PHYADDR", "value": "", "user_value": null, "dep": "n", "prompt": "PHY address", "cond": "SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The 5-bit address of the PHY on the board.  Default: 1"}, {"type": 3, "name": "SAMV7_EMAC0_PHYINIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Board-specific PHY Initialization", "cond": "SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Some boards require specialized initialization of the PHY before it can be used.\nThis may include such things as configuring GPIOs, resetting the PHY, etc.  If\nSAMV7_EMAC0_PHYINIT is defined in the configuration then the board specific logic must\nprovide sam_phyinitialize();  The SAMV7 EMAC driver will call this function\none time before it first uses the PHY."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "PHY interface", "cond": "SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_EMAC0_MII", "default": "n", "cond": "SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_EMAC0_MII", "value": "n", "user_value": null, "dep": "n", "prompt": "MII", "cond": "y", "help": "Support Ethernet MII interface (vs RMII)."}, {"type": 3, "name": "SAMV7_EMAC0_RMII", "value": "n", "user_value": null, "dep": "n", "prompt": "RMII", "cond": "!ARCH_CHIP_SAM4E && y", "help": "Support Ethernet RMII interface (vs MII)."}]}, {"type": 3, "name": "SAMV7_EMAC0_CLAUSE45", "value": "n", "user_value": null, "dep": "n", "prompt": "Clause 45 MII", "cond": "SAMV7_EMAC0_MII && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "help": "MDIO was originally defined in Clause 22 of IEEE RFC802.3. In the\noriginal specification, a single MDIO interface is able to access up\nto 32 registers in 32 different PHY devices.  To meet the needs the\nexpanding needs of 10-Gigabit Ethernet devices, Clause 45 of the\n802.3ae specification provided the following additions to MDIO:\n\n- Ability to access 65,536 registers in 32 different devices on\n  32 different ports\n- Additional OP-code and ST-code for Indirect Address register\n  access for 10 Gigabit Ethernet\n- End-to-end fault signaling\n- Multiple loopback points\n- Low voltage electrical specification\n\nBy default, Clause 22 PHYs will be supported unless this option is\nselected."}, {"type": 3, "name": "SAMV7_EMAC0_AUTONEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Use autonegotiation", "cond": "SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Use PHY autonegotiation to determine speed and mode"}, {"type": 3, "name": "SAMV7_EMAC0_ETHFD", "value": "n", "user_value": null, "dep": "n", "prompt": "Full duplex", "cond": "!SAMV7_EMAC0_AUTONEG && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SAMV7_EMAC0_AUTONEG && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "If SAMV7_EMAC0_AUTONEG is not defined, then this may be defined to select full duplex\nmode. Default: half-duplex"}, {"type": 3, "name": "SAMV7_EMAC0_ETH100MBPS", "value": "n", "user_value": null, "dep": "n", "prompt": "100 Mbps", "cond": "!SAMV7_EMAC0_AUTONEG && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SAMV7_EMAC0_AUTONEG && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "If SAMV7_EMAC0_AUTONEG is not defined, then this may be defined to select 100 MBps\nspeed.  Default: 10 Mbps"}, {"type": 27, "name": "SAMV7_EMAC0_PHYSR", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Status Register Address (decimal)", "cond": "SAMV7_EMAC0_AUTONEG && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "help": "This must be provided if SAMV7_EMAC0_AUTONEG is defined.  The PHY status register\naddress may diff from PHY to PHY.  This configuration sets the address of\nthe PHY status register."}, {"type": 3, "name": "SAMV7_EMAC0_PHYSR_ALTCONFIG", "value": "n", "user_value": null, "dep": "n", "prompt": "PHY Status Alternate Bit Layout", "cond": "SAMV7_EMAC0_AUTONEG && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_EMAC0_AUTONEG && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Different PHYs present speed and mode information in different ways.  Some\nwill present separate information for speed and mode (this is the default).\nThose PHYs, for example, may provide a 10/100 Mbps indication and a separate\nfull/half duplex indication. This options selects an alternative representation\nwhere speed and mode information are combined.  This might mean, for example,\nseparate bits for 10HD, 100HD, 10FD and 100FD."}, {"type": 24, "name": "SAMV7_EMAC0_PHYSR_ALTMODE", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Mode Mask", "cond": "SAMV7_EMAC0_PHYSR_ALTCONFIG && SAMV7_EMAC0_AUTONEG && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "help": "This must be provided if SAMV7_EMAC0_AUTONEG is defined.  This provide bit mask\nfor isolating the speed and full/half duplex mode bits."}, {"type": 24, "name": "SAMV7_EMAC0_PHYSR_10HD", "value": "", "user_value": null, "dep": "n", "prompt": "10MBase-T Half Duplex Value", "cond": "SAMV7_EMAC0_PHYSR_ALTCONFIG && SAMV7_EMAC0_AUTONEG && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "help": "This must be provided if SAMV7_EMAC0_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 10Mbps, half duplex setting."}, {"type": 24, "name": "SAMV7_EMAC0_PHYSR_100HD", "value": "", "user_value": null, "dep": "n", "prompt": "100Base-T Half Duplex Value", "cond": "SAMV7_EMAC0_PHYSR_ALTCONFIG && SAMV7_EMAC0_AUTONEG && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "help": "This must be provided if SAMV7_EMAC0_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 100Mbps, half duplex setting."}, {"type": 24, "name": "SAMV7_EMAC0_PHYSR_10FD", "value": "", "user_value": null, "dep": "n", "prompt": "10Base-T Full Duplex Value", "cond": "SAMV7_EMAC0_PHYSR_ALTCONFIG && SAMV7_EMAC0_AUTONEG && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "help": "This must be provided if SAMV7_EMAC0_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 10Mbps, full duplex setting."}, {"type": 24, "name": "SAMV7_EMAC0_PHYSR_100FD", "value": "", "user_value": null, "dep": "n", "prompt": "100Base-T Full Duplex Value", "cond": "SAMV7_EMAC0_PHYSR_ALTCONFIG && SAMV7_EMAC0_AUTONEG && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "help": "This must be provided if SAMV7_EMAC0_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 100Mbps, full duplex setting."}, {"type": 24, "name": "SAMV7_EMAC0_PHYSR_SPEED", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Speed Mask", "cond": "!SAMV7_EMAC0_PHYSR_ALTCONFIG && SAMV7_EMAC0_AUTONEG && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "help": "This must be provided if SAMV7_EMAC0_AUTONEG is defined.  This provides bit mask\nfor isolating the 10 or 100MBps speed indication."}, {"type": 24, "name": "SAMV7_EMAC0_PHYSR_100MBPS", "value": "", "user_value": null, "dep": "n", "prompt": "PHY 100Mbps Speed Value", "cond": "!SAMV7_EMAC0_PHYSR_ALTCONFIG && SAMV7_EMAC0_AUTONEG && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "help": "This must be provided if SAMV7_EMAC0_AUTONEG is defined.  This provides the value\nof the speed bit(s) indicating 100MBps speed."}, {"type": 24, "name": "SAMV7_EMAC0_PHYSR_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Mode Mask", "cond": "!SAMV7_EMAC0_PHYSR_ALTCONFIG && SAMV7_EMAC0_AUTONEG && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "help": "This must be provided if SAMV7_EMAC0_AUTONEG is defined.  This provides the\nbit mask for isolating the full or half duplex mode bits."}, {"type": 24, "name": "SAMV7_EMAC0_PHYSR_FULLDUPLEX", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Full Duplex Mode Value", "cond": "!SAMV7_EMAC0_PHYSR_ALTCONFIG && SAMV7_EMAC0_AUTONEG && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "help": "This must be provided if SAMV7_EMAC0_AUTONEG is defined.  This provides the\nvalue of the mode bits indicating full duplex mode."}, {"type": 3, "name": "SAMV7_EMAC0_ISETH0", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 3, "name": "SAMV7_EMAC_PREALLOCATE", "value": "n", "user_value": null, "dep": "n", "prompt": "Preallocate buffers", "cond": "SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Buffer an descriptor many may either be allocated from the memory\npool or pre-allocated to lie in .bss.  This options selected pre-\nallocated buffer memory."}, {"type": 3, "name": "SAMV7_EMAC_NBC", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable Broadcast", "cond": "SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Select to disable receipt of broadcast packets."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_EMAC_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}, {"name": "SAMV7_EMAC_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Work queue support is required to use the Ethernet driver.  If the\nlow priority work queue is available, then it should be used by the\ndriver.", "children": [{"type": 3, "name": "SAMV7_EMAC_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "SAMV7_EMAC_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}, {"type": 3, "name": "SAMV7_EMAC_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Force EMAC0/1 DEBUG", "cond": "DEBUG_FEATURES && !DEBUG_NET && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && !DEBUG_NET && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "This option will force debug output from EMAC driver even without\nnetwork debug output enabled.  This is not normally something\nthat would want to do but is convenient if you are debugging the\ndriver and do not want to get overloaded with other\nnetwork-related debug output."}, {"type": 3, "name": "SAMV7_EMAC_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register-Level Debug", "cond": "DEBUG_NET_INFO && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_NET_INFO && SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enable very low-level register access debug.  Depends on CONFIG_DEBUG_NET_INFO."}]}, {"type": 31, "dep": "n", "prompt": "USB High Speed Device Controller driver (DCD) options", "cond": "SAMV7_USBDEVHS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "children": [{"type": 3, "name": "SAMV7_USBDEVHS_LOWPOWER", "value": "n", "user_value": null, "dep": "n", "prompt": "Low-power mode", "cond": "SAMV7_USBDEVHS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_USBDEVHS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The USBHS can work in two modes:\n\n- Normal mode where High speed, Full speed and Low speed are\n  available.\n- Low-power mode where only Full speed and Low speed are available.\n\nThis options selects the low-power mode.  In order to use high speed\nmode, this option must be disabled and USBDEV_DUALSPEED must be\nenabled."}, {"type": 3, "name": "SAMV7_USBHS_SCATTERGATHER", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && SAMV7_USBDEVHS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Scatter gather DMA is not yet supported"}, {"type": 27, "name": "SAMV7_USBHS_NDTDS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of USBHS DMA transfer descriptors", "cond": "SAMV7_USBDEVHS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "SAMV7_USBDEVHS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "DMA transfer descriptors are allocated in a pool at boot time.  This\nsetting provides the number of DMA transfer descriptors to be\nallocated."}, {"type": 3, "name": "SAMV7_USBHS_PREALLOCATE", "value": "n", "user_value": null, "dep": "n", "prompt": "Pre-allocate DMA transfer descriptors", "cond": "SAMV7_USBDEVHS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "SAMV7_USBDEVHS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "If this option is selected then DMA transfer descriptors will be\npre-allocated in .bss.  Otherwise, the descriptors will be allocated\nat start-up time with kmm_malloc().  This might be important if a larger\nmemory pool is available after startup."}, {"type": 3, "name": "SAMV7_USBHS_EP7DMA_WAR", "value": "n", "user_value": null, "dep": "n", "prompt": "EP7 DMA errata workaround", "cond": "SAMV7_USBDEVHS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_USBDEVHS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Normally EP1..7 should support, but according an ERRATA in\n\"Atmel-11296D-ATARM-SAM E70-Datasheet_19-Jan-16\"  only the EP1..6\nsupport the DMA transfer.  This option suppresses DMA on EP7."}, {"type": 3, "name": "SAMV7_USBHS_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable low-level USBHS register debug", "cond": "DEBUG_USB_INFO && SAMV7_USBDEVHS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_USB_INFO && SAMV7_USBDEVHS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}]}, {"type": 3, "name": "SAMV7_MCAN_QUEUE_MODE", "value": "n", "user_value": null, "dep": "n", "prompt": "MCAN QUEUE mode (vs FIFO mode)", "cond": "SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}]}, {"type": 31, "dep": "n", "prompt": "MCAN device driver options", "cond": "SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "MCAN clock source (PCK5)", "cond": "SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_MCAN_CLKSRC_MCK", "default": "n", "cond": "SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_MCAN_CLKSRC_SLOW", "value": "n", "user_value": null, "dep": "n", "prompt": "Slow clock", "cond": "y"}, {"type": 3, "name": "SAMV7_MCAN_CLKSRC_MAIN", "value": "n", "user_value": null, "dep": "n", "prompt": "Main clock", "cond": "y"}, {"type": 3, "name": "SAMV7_MCAN_CLKSRC_PLLA", "value": "n", "user_value": null, "dep": "n", "prompt": "PLLA clock", "cond": "y"}, {"type": 3, "name": "SAMV7_MCAN_CLKSRC_UPLL", "value": "n", "user_value": null, "dep": "n", "prompt": "UPLL clock", "cond": "y"}, {"type": 3, "name": "SAMV7_MCAN_CLKSRC_MCK", "value": "n", "user_value": null, "dep": "n", "prompt": "Master clock", "cond": "y"}]}, {"type": 27, "name": "SAMV7_MCAN_CLKSRC_PRESCALER", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN clock prescaler", "cond": "SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "1024", "cond": "SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The frequency associated with time quanta is derived by dividing\ndown the input frequency. This setting provides prescaler/divider\nmust lie the range of 1 to 1024."}, {"type": 31, "dep": "n", "prompt": "MCAN0 device driver options", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "MCAN0 mode", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_MCAN0_ISO11899_1", "default": "n", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_MCAN0_ISO11899_1", "value": "n", "user_value": null, "dep": "n", "prompt": "ISO11898-1", "cond": "y", "help": "Enable ISO11898-1 mode"}, {"type": 3, "name": "SAMV7_MCAN0_FD", "value": "n", "user_value": null, "dep": "n", "prompt": "FD", "cond": "CAN_FD && y", "help": "Enable FD mode"}, {"type": 3, "name": "SAMV7_MCAN0_FD_BSW", "value": "n", "user_value": null, "dep": "n", "prompt": "FD with fast bit rate switching", "cond": "CAN_FD && y", "help": "Enable FD mode with fast bit rate switching mode."}]}, {"type": 3, "name": "SAMV7_MCAN0_LOOPBACK", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable MCAN0 loopback mode", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enable the MCAN0 local loopback mode for testing purposes."}, {"type": 27, "name": "SAMV7_MCAN0_BITRATE", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN0 bitrate", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "500000", "default": "500000", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "MCAN0 bitrate in bits per second.  Required if SAMV7_MCAN0 is defined."}, {"type": 27, "name": "SAMV7_MCAN0_PROPSEG", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN0 PropSeg", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "63", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The length of the bit time is Tquanta * (SyncSeg + PropSeg + PhaseSeg1 + PhaseSeg2)."}, {"type": 27, "name": "SAMV7_MCAN0_PHASESEG1", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN0 PhaseSeg1", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "11", "default": "11", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "63", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The length of the bit time is Tquanta * (SyncSeg + PropSeg + PhaseSeg1 + PhaseSeg2)."}, {"type": 27, "name": "SAMV7_MCAN0_PHASESEG2", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN0 PhaseSeg2", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "11", "default": "11", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "63", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The length of the bit time is Tquanta * (SyncSeg + PropSeg + PhaseSeg1 + PhaseSeg2)."}, {"type": 27, "name": "SAMV7_MCAN0_FSJW", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN0 synchronization jump width", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "5", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The duration of a synchronization jump is Tcan_clk x FSJW."}, {"type": 27, "name": "SAMV7_MCAN0_FBITRATE", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN0 fast bitrate", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "2000000", "default": "2000000", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "MCAN0 bitrate in bits per second.  Required if SAMV7_MCAN0 is\ndefined."}, {"type": 27, "name": "SAMV7_MCAN0_FPROPSEG", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN0 fast PropSeg", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "63", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The length of the bit time is Tquanta * (SyncSeg + PropSeg + PhaseSeg1 + PhaseSeg2)."}, {"type": 27, "name": "SAMV7_MCAN0_FPHASESEG1", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN0 fast PhaseSeg1", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "63", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The length of the bit time is Tquanta * (SyncSeg + PropSeg + PhaseSeg1 + PhaseSeg2)."}, {"type": 27, "name": "SAMV7_MCAN0_FPHASESEG2", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN0 fast PhaseSeg2", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "63", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The length of the bit time is Tquanta * (SyncSeg + PropSeg + PhaseSeg1 + PhaseSeg2)."}, {"type": 27, "name": "SAMV7_MCAN0_FFSJW", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN0 fast synchronization jump width", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "5", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The duration of a synchronization jump is Tcan_clk x FSJW."}, {"type": 27, "name": "SAMV7_MCAN0_NSTDFILTERS", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN0 number of standard filters", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "128", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Number of standard message ID filters."}, {"type": 27, "name": "SAMV7_MCAN0_NEXTFILTERS", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN0 number of extended filters", "cond": "CAN_EXTID && SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "CAN_EXTID && SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "64", "cond": "CAN_EXTID && SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Number of extended message ID filters."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "MCAN0 RX FIFO0 element size", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_MCAN0_RXFIFO0_8BYTES", "default": "n", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_MCAN0_RXFIFO0_8BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bytes", "cond": "y"}, {"type": 3, "name": "SAMV7_MCAN0_RXFIFO0_12BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "12 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_RXFIFO0_16BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_RXFIFO0_20BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "20 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_RXFIFO0_24BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_RXFIFO0_32BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_RXFIFO0_48BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "48 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_RXFIFO0_64BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "64 bytes", "cond": "SAMV7_MCAN0_FD && y"}]}, {"type": 27, "name": "SAMV7_MCAN0_RXFIFO0_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN0 RX FIFO0 size", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "64", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Number of receive FIFO 0 elements.  Zero disables FIFO 0."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "MCAN0 RX FIFO1 element size", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_MCAN0_RXFIFO1_8BYTES", "default": "n", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_MCAN0_RXFIFO1_8BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bytes", "cond": "y"}, {"type": 3, "name": "SAMV7_MCAN0_RXFIFO1_12BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "12 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_RXFIFO1_16BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_RXFIFO1_20BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "20 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_RXFIFO1_24BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_RXFIFO1_32BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_RXFIFO1_48BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "48 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_RXFIFO1_64BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "64 bytes", "cond": "SAMV7_MCAN0_FD && y"}]}, {"type": 27, "name": "SAMV7_MCAN0_RXFIFO1_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN0 RX FIFO1 size", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "64", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Number of receive FIFO 1 elements for MCAN0.  Zero disables FIFO 1."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "MCAN0 RX buffer element size", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_MCAN0_RXBUFFER_8BYTES", "default": "n", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_MCAN0_RXBUFFER_8BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bytes", "cond": "y"}, {"type": 3, "name": "SAMV7_MCAN0_RXBUFFER_12BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "12 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_RXBUFFER_16BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_RXBUFFER_20BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "20 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_RXBUFFER_24BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_RXBUFFER_32BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_RXBUFFER_48BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "48 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_RXBUFFER_64BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "64 bytes", "cond": "SAMV7_MCAN0_FD && y"}]}, {"type": 27, "name": "SAMV7_MCAN0_DEDICATED_RXBUFFER_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN0 dedicated RX buffer size", "cond": "EXPERIMENTAL && SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "EXPERIMENTAL && SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "64", "cond": "EXPERIMENTAL && SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Number of dedicated RX buffer elements for MCAN0.\n\nNOTE: Dedicated RX buffers are not used in the current MCAN design."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "MCAN0 TX buffer element size", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_MCAN0_TXBUFFER_8BYTES", "default": "n", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_MCAN0_TXBUFFER_8BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bytes", "cond": "y"}, {"type": 3, "name": "SAMV7_MCAN0_TXBUFFER_12BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "12 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_TXBUFFER_16BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_TXBUFFER_20BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "20 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_TXBUFFER_24BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_TXBUFFER_32BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_TXBUFFER_48BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "48 bytes", "cond": "SAMV7_MCAN0_FD && y"}, {"type": 3, "name": "SAMV7_MCAN0_TXBUFFER_64BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "64 bytes", "cond": "SAMV7_MCAN0_FD && y"}]}, {"type": 27, "name": "SAMV7_MCAN0_DEDICATED_TXBUFFER_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN0 dedicated TX buffer size", "cond": "EXPERIMENTAL && SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "EXPERIMENTAL && SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "32", "cond": "EXPERIMENTAL && SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Number of dedicated TX buffer elements for MCAN0.\n\nNOTE: Dedicated TX buffers are not used in the current MCAN design."}, {"type": 27, "name": "SAMV7_MCAN0_TXFIFOQ_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN0 TX FIFO queue size", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "32", "cond": "SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Number of dedicated TX buffer elements for MCAN0."}, {"type": 27, "name": "SAMV7_MCAN0_TXEVENTFIFO_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN0 TX event FIFO size", "cond": "EXPERIMENTAL && SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "EXPERIMENTAL && SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "32", "cond": "EXPERIMENTAL && SAMV7_MCAN0 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Number of TX event FIFO elements for MCAN0.  Zero disables TX event FIFO."}]}, {"type": 31, "dep": "n", "prompt": "MCAN1 device driver options", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "MCAN1 mode", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_MCAN1_ISO11899_1", "default": "n", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_MCAN1_ISO11899_1", "value": "n", "user_value": null, "dep": "n", "prompt": "ISO11898-1", "cond": "y", "help": "Enable ISO11898-1 mode"}, {"type": 3, "name": "SAMV7_MCAN1_FD", "value": "n", "user_value": null, "dep": "n", "prompt": "FD", "cond": "CAN_FD && y", "help": "Enable FD mode"}, {"type": 3, "name": "SAMV7_MCAN1_FD_BSW", "value": "n", "user_value": null, "dep": "n", "prompt": "FD with fast bit rate switching", "cond": "CAN_FD && y", "help": "Enable FD mode with fast bit rate switching mode."}]}, {"type": 3, "name": "SAMV7_MCAN1_LOOPBACK", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable MCAN1 loopback mode", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Enable the MCAN1 local loopback mode for testing purposes."}, {"type": 27, "name": "SAMV7_MCAN1_BITRATE", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN1 bitrate", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "500000", "default": "500000", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "MCAN1 bitrate in bits per second.  Required if SAMV7_MCAN1 is\ndefined."}, {"type": 27, "name": "SAMV7_MCAN1_PROPSEG", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN1 PropSeg", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "63", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The length of the bit time is Tquanta * (SyncSeg + PropSeg + PhaseSeg1 + PhaseSeg2)."}, {"type": 27, "name": "SAMV7_MCAN1_PHASESEG1", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN1 PhaseSeg1", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "11", "default": "11", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "63", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The length of the bit time is Tquanta * (SyncSeg + PropSeg + PhaseSeg1 + PhaseSeg2)."}, {"type": 27, "name": "SAMV7_MCAN1_PHASESEG2", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN1 PhaseSeg2", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "11", "default": "11", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "63", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The length of the bit time is Tquanta * (SyncSeg + PropSeg + PhaseSeg1 + PhaseSeg2)."}, {"type": 27, "name": "SAMV7_MCAN1_FSJW", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN1 synchronization jump width", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "5", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The duration of a synchronization jump is Tcan_clk x FSJW."}, {"type": 27, "name": "SAMV7_MCAN1_FBITRATE", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN1 fast bitrate", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "2000000", "default": "2000000", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "MCAN1 bitrate in bits per second.  Required if SAMV7_MCAN1 is\ndefined."}, {"type": 27, "name": "SAMV7_MCAN1_FPROPSEG", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN1 fast PropSeg", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "63", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The length of the bit time is Tquanta * (SyncSeg + PropSeg + PhaseSeg1 + PhaseSeg2)."}, {"type": 27, "name": "SAMV7_MCAN1_FPHASESEG1", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN1 fast PhaseSeg1", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "63", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The length of the bit time is Tquanta * (SyncSeg + PropSeg + PhaseSeg1 + PhaseSeg2)."}, {"type": 27, "name": "SAMV7_MCAN1_FPHASESEG2", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN1 fast PhaseSeg2", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "63", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The length of the bit time is Tquanta * (SyncSeg + PropSeg + PhaseSeg1 + PhaseSeg2)."}, {"type": 27, "name": "SAMV7_MCAN1_FFSJW", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN1 fast synchronization jump width", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "5", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "The duration of a synchronization jump is Tcan_clk x FSJW."}, {"type": 27, "name": "SAMV7_MCAN1_NSTDFILTERS", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN1 number of standard filters", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "128", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Number of standard message ID filters."}, {"type": 27, "name": "SAMV7_MCAN1_NEXTFILTERS", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN1 number of extended filters", "cond": "CAN_EXTID && SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "CAN_EXTID && SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "64", "cond": "CAN_EXTID && SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Number of extended message ID filters."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "MCAN1 RX FIFO0 element size", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_MCAN1_RXFIFO0_8BYTES", "default": "n", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_MCAN1_RXFIFO0_8BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bytes", "cond": "y"}, {"type": 3, "name": "SAMV7_MCAN1_RXFIFO0_12BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "12 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_RXFIFO0_16BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_RXFIFO0_20BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "20 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_RXFIFO0_24BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_RXFIFO0_32BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_RXFIFO0_48BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "48 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_RXFIFO0_64BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "64 bytes", "cond": "SAMV7_MCAN1_FD && y"}]}, {"type": 27, "name": "SAMV7_MCAN1_RXFIFO0_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN1 RX FIFO0 size", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "8", "default": "8", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "64", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Number of receive FIFO 0 elements.  Zero disables FIFO 0."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "MCAN1 RX FIFO1 element size", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_MCAN1_RXFIFO1_8BYTES", "default": "n", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_MCAN1_RXFIFO1_8BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bytes", "cond": "y"}, {"type": 3, "name": "SAMV7_MCAN1_RXFIFO1_12BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "12 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_RXFIFO1_16BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_RXFIFO1_20BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "20 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_RXFIFO1_24BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_RXFIFO1_32BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_RXFIFO1_48BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "48 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_RXFIFO1_64BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "64 bytes", "cond": "SAMV7_MCAN1_FD && y"}]}, {"type": 27, "name": "SAMV7_MCAN1_RXFIFO1_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN1 RX FIFO1 size", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "64", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Number of receive FIFO 1 elements for MCAN1.  Zero disables FIFO 1."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "MCAN1 RX buffer element size", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_MCAN1_RXBUFFER_8BYTES", "default": "n", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_MCAN1_RXBUFFER_8BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bytes", "cond": "y"}, {"type": 3, "name": "SAMV7_MCAN1_RXBUFFER_12BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "12 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_RXBUFFER_16BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_RXBUFFER_20BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "20 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_RXBUFFER_24BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_RXBUFFER_32BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_RXBUFFER_48BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "48 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_RXBUFFER_64BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "64 bytes", "cond": "SAMV7_MCAN1_FD && y"}]}, {"type": 27, "name": "SAMV7_MCAN1_DEDICATED_RXBUFFER_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN1 dedicated RX buffer size", "cond": "EXPERIMENTAL && SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "EXPERIMENTAL && SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "64", "cond": "EXPERIMENTAL && SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Number of dedicated RX buffer elements for MCAN1.\n\nNOTE: Dedicated RX buffers are not used in the current MCAN design."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "MCAN1 TX buffer element size", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "SAMV7_MCAN1_TXBUFFER_8BYTES", "default": "n", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "children": [{"type": 3, "name": "SAMV7_MCAN1_TXBUFFER_8BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bytes", "cond": "y"}, {"type": 3, "name": "SAMV7_MCAN1_TXBUFFER_12BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "12 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_TXBUFFER_16BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_TXBUFFER_20BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "20 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_TXBUFFER_24BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_TXBUFFER_32BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_TXBUFFER_48BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "48 bytes", "cond": "SAMV7_MCAN1_FD && y"}, {"type": 3, "name": "SAMV7_MCAN1_TXBUFFER_64BYTES", "value": "n", "user_value": null, "dep": "n", "prompt": "64 bytes", "cond": "SAMV7_MCAN1_FD && y"}]}, {"type": 27, "name": "SAMV7_MCAN1_TXEVENTFIFO_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN1 TX event FIFO size", "cond": "EXPERIMENTAL && SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "EXPERIMENTAL && SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "32", "cond": "EXPERIMENTAL && SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Number of TX event FIFO elements for MCAN1.  Zero disables TX event FIFO."}, {"type": 27, "name": "SAMV7_MCAN1_DEDICATED_TXBUFFER_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN1 dedicated TX buffer size", "cond": "EXPERIMENTAL && SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "EXPERIMENTAL && SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "32", "cond": "EXPERIMENTAL && SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Number of dedicated TX buffer elements for MCAN1.\n\nNOTE: Dedicated TX buffers are not used in the current MCAN design."}, {"type": 27, "name": "SAMV7_MCAN1_TXFIFOQ_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "MCAN1 TX FIFO queue", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "32", "cond": "SAMV7_MCAN1 && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Number of dedicated TX buffer elements for MCAN1."}]}, {"type": 3, "name": "SAMV7_MCAN_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN Register level debug", "cond": "DEBUG_CAN_INFO && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_CAN_INFO && SAMV7_MCAN && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM"}], "help": "Output detailed register-level CAN device debug information.\nRequires also CONFIG_DEBUG_CAN_INFO."}]}, {"type": 6, "dep": "n", "prompt": "STM32 Configuration Options", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "STM32 Chip Selection", "cond": "ARCH_CHIP_STM32 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "ARCH_CHIP_STM32F103ZE", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_STM32L151C6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L151C6", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}], "help": "STM32L 48-pin EnergyLite, 32KB FLASH, 10KB SRAM, 4KB EEPROM"}, {"type": 3, "name": "ARCH_CHIP_STM32L151C8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L151C8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}], "help": "STM32L 48-pin EnergyLite, 64KB FLASH, 10KB SRAM, 4KB EEPROM"}, {"type": 3, "name": "ARCH_CHIP_STM32L151CB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L151CB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}], "help": "STM32L 48-pin EnergyLite, 128KB FLASH, 16KB SRAM, 4KB EEPROM"}, {"type": 3, "name": "ARCH_CHIP_STM32L151R6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L151R6", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}], "help": "STM32L 64-pin EnergyLite, 32KB FLASH, 10KB SRAM, 4KB EEPROM"}, {"type": 3, "name": "ARCH_CHIP_STM32L151R8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L151R8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}], "help": "STM32L 64-pin EnergyLite, 64KB FLASH, 10KB SRAM, 4KB EEPROM"}, {"type": 3, "name": "ARCH_CHIP_STM32L151RB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L151RB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}], "help": "STM32L 64-pin EnergyLite, 128KB FLASH, 16KB SRAM, 4KB EEPROM"}, {"type": 3, "name": "ARCH_CHIP_STM32L151V6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L151V6", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}], "help": "STM32L 100-pin EnergyLite, 32KB FLASH, 10KB SRAM, 4KB EEPROM"}, {"type": 3, "name": "ARCH_CHIP_STM32L151V8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L151V8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}], "help": "STM32L 100-pin EnergyLite, 64KB FLASH, 10KB SRAM, 4KB EEPROM"}, {"type": 3, "name": "ARCH_CHIP_STM32L151VB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L151VB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}], "help": "STM32L 100-pin EnergyLite, 128KB FLASH, 16KB SRAM, 4KB EEPROM"}, {"type": 3, "name": "ARCH_CHIP_STM32L152C6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L152C6", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}], "help": "STM32L 48-pin EnergyLite, 32KB FLASH, 10KB SRAM, 4KB EEPROM with\n4x18 LCD interface"}, {"type": 3, "name": "ARCH_CHIP_STM32L152C8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L152C8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}], "help": "STM32L 48-pin EnergyLite, 64KB FLASH, 10KB SRAM, 4KB EEPROM with\n4x18 LCD interface"}, {"type": 3, "name": "ARCH_CHIP_STM32L152CB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L152CB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}], "help": "STM32L 48-pin EnergyLite, 128KB FLASH, 16KB SRAM, 4KB EEPROM with\n4x18 LCD interface"}, {"type": 3, "name": "ARCH_CHIP_STM32L152R6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L152R6", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}], "help": "STM32L 64-pin EnergyLite, 32KB FLASH, 10KB SRAM, 4KB EEPROM with\n4x32/8x28 LCD interface"}, {"type": 3, "name": "ARCH_CHIP_STM32L152R8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L152R8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}], "help": "STM32L 64-pin EnergyLite, 64KB FLASH, 10KB SRAM, 4KB EEPROM with\n4x32/8x28 LCD interface"}, {"type": 3, "name": "ARCH_CHIP_STM32L152RB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L152RB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}], "help": "STM32L 64-pin EnergyLite, 128KB FLASH, 16KB SRAM, 4KB EEPROM with\n4x32/8x28 LCD interface"}, {"type": 3, "name": "ARCH_CHIP_STM32L152V6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L152V6", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}], "help": "STM32L 100-pin EnergyLite, 32KB FLASH, 10KB SRAM, 4KB EEPROM with\n4x44/8x40 LCD interface"}, {"type": 3, "name": "ARCH_CHIP_STM32L152V8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L152V8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}], "help": "STM32L 100-pin EnergyLite, 64KB FLASH, 10KB SRAM, 4KB EEPROM with\n4x44/8x40 LCD interface"}, {"type": 3, "name": "ARCH_CHIP_STM32L152VB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L152VB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}], "help": "STM32L 100-pin EnergyLite, 128KB FLASH, 16KB SRAM, 4KB EEPROM with\n4x44/8x40 LCD interface"}, {"type": 3, "name": "ARCH_CHIP_STM32L152CC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L152CC", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}, {"symbol": "STM32_MEDIUMPLUSDENSITY", "cond": "y"}], "help": "STM32L 48-pin EnergyLite, 256KB FLASH, 32KB SRAM, 8KB EEPROM with\n4x18 LCD interface"}, {"type": 3, "name": "ARCH_CHIP_STM32L152RC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L152RC", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}, {"symbol": "STM32_MEDIUMPLUSDENSITY", "cond": "y"}], "help": "STM32L 64-pin EnergyLite, 256KB FLASH, 32KB SRAM, 8KB EEPROM with\n4x32/8x28 LCD interface"}, {"type": 3, "name": "ARCH_CHIP_STM32L152VC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L152VC", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}, {"symbol": "STM32_MEDIUMPLUSDENSITY", "cond": "y"}], "help": "STM32L 100-pin EnergyLite, 256KB FLASH, 32KB SRAM, 8KB EEPROM with\n4x44/8x40 LCD interface"}, {"type": 3, "name": "ARCH_CHIP_STM32L162ZD", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L162ZD", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}, {"symbol": "STM32_HIGHDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_AES", "cond": "y"}], "help": "STM32L 144-pin EnergyLite, 384KB FLASH, 48KB SRAM, 12KB EEPROM with\n4x44/8x40 LCD interface"}, {"type": 3, "name": "ARCH_CHIP_STM32L162VE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L162VE", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32L15XX", "cond": "y"}, {"symbol": "STM32_ENERGYLITE", "cond": "y"}, {"symbol": "STM32_HIGHDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_AES", "cond": "y"}], "help": "STM32L 100-pin EnergyLite, 512KB FLASH, 80KB SRAM, 16KB EEPROM with\n4x44/8x40 LCD interface"}, {"type": 3, "name": "ARCH_CHIP_STM32F100C8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F100C8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_VALUELINE", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F100CB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F100CB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_VALUELINE", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F100R8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F100R8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_VALUELINE", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F100RB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F100RB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_VALUELINE", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F100RC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F100RC", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_VALUELINE", "cond": "y"}, {"symbol": "STM32_HIGHDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F100RD", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F100RD", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_VALUELINE", "cond": "y"}, {"symbol": "STM32_HIGHDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F100RE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F100RE", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_VALUELINE", "cond": "y"}, {"symbol": "STM32_HIGHDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F100V8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F100V8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_VALUELINE", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F100VB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F100VB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_VALUELINE", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F100VC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F100VC", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_VALUELINE", "cond": "y"}, {"symbol": "STM32_HIGHDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F100VD", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F100VD", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_VALUELINE", "cond": "y"}, {"symbol": "STM32_HIGHDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F100VE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F100VE", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_VALUELINE", "cond": "y"}, {"symbol": "STM32_HIGHDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F102CB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F102CB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_USBACCESSLINE", "cond": "y"}, {"symbol": "STM32_MEDIUMDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F103T8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F103T8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_PERFORMANCELINE", "cond": "y"}, {"symbol": "STM32_MEDIUMDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F103TB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F103TB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_PERFORMANCELINE", "cond": "y"}, {"symbol": "STM32_MEDIUMDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F103C4", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F103C4", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_PERFORMANCELINE", "cond": "y"}, {"symbol": "STM32_LOWDENSITY", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F103C8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F103C8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_PERFORMANCELINE", "cond": "y"}, {"symbol": "STM32_MEDIUMDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F103CB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F103CB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_PERFORMANCELINE", "cond": "y"}, {"symbol": "STM32_MEDIUMDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F103R8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F103R8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_PERFORMANCELINE", "cond": "y"}, {"symbol": "STM32_MEDIUMDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F103RB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F103RB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_PERFORMANCELINE", "cond": "y"}, {"symbol": "STM32_MEDIUMDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F103RC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F103RC", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_PERFORMANCELINE", "cond": "y"}, {"symbol": "STM32_HIGHDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F103RD", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F103RD", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_PERFORMANCELINE", "cond": "y"}, {"symbol": "STM32_HIGHDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F103RE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F103RE", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_PERFORMANCELINE", "cond": "y"}, {"symbol": "STM32_HIGHDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F103RG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F103RG", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_PERFORMANCELINE", "cond": "y"}, {"symbol": "STM32_HIGHDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F103V8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F103V8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_PERFORMANCELINE", "cond": "y"}, {"symbol": "STM32_MEDIUMDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F103VB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F103VB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_PERFORMANCELINE", "cond": "y"}, {"symbol": "STM32_MEDIUMDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F103VC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F103VC", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_PERFORMANCELINE", "cond": "y"}, {"symbol": "STM32_HIGHDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F103VE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F103VE", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_PERFORMANCELINE", "cond": "y"}, {"symbol": "STM32_HIGHDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F103ZE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F103ZE", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_PERFORMANCELINE", "cond": "y"}, {"symbol": "STM32_HIGHDENSITY", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F105VB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F105VBT7", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_CONNECTIVITYLINE", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F105RB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F105RB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_CONNECTIVITYLINE", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F107VC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F107VC", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F10XX", "cond": "y"}, {"symbol": "STM32_CONNECTIVITYLINE", "cond": "y"}, {"symbol": "STM32_HAVE_DAC1", "cond": "y"}, {"symbol": "STM32_HAVE_DAC2", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F205RG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F205RG", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F20XX", "cond": "y"}, {"symbol": "STM32_STM32F205", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F207IG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F207IG", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F20XX", "cond": "y"}, {"symbol": "STM32_STM32F207", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F207ZE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F207ZE", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM3", "cond": "y"}, {"symbol": "STM32_STM32F20XX", "cond": "y"}, {"symbol": "STM32_STM32F207", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F302K6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F302K6", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F30XX", "cond": "y"}, {"symbol": "STM32_STM32F302", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "STM32_HAVE_I2C3", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F302K8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F302K8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F30XX", "cond": "y"}, {"symbol": "STM32_STM32F302", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "STM32_HAVE_I2C3", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F302CB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F302CB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F30XX", "cond": "y"}, {"symbol": "STM32_STM32F302", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "STM32_HAVE_ADC2", "cond": "y"}, {"symbol": "STM32_HAVE_USART3", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F302CC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F302CC", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F30XX", "cond": "y"}, {"symbol": "STM32_STM32F302", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "STM32_HAVE_ADC2", "cond": "y"}, {"symbol": "STM32_HAVE_USART3", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F302RB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F302RB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F30XX", "cond": "y"}, {"symbol": "STM32_STM32F302", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "STM32_HAVE_ADC2", "cond": "y"}, {"symbol": "STM32_HAVE_USART3", "cond": "y"}, {"symbol": "STM32_HAVE_UART4", "cond": "y"}, {"symbol": "STM32_HAVE_UART5", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F302RC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F302RC", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F30XX", "cond": "y"}, {"symbol": "STM32_STM32F302", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "STM32_HAVE_ADC2", "cond": "y"}, {"symbol": "STM32_HAVE_USART3", "cond": "y"}, {"symbol": "STM32_HAVE_UART4", "cond": "y"}, {"symbol": "STM32_HAVE_UART5", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F302VB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F302VB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F30XX", "cond": "y"}, {"symbol": "STM32_STM32F302", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "STM32_HAVE_ADC2", "cond": "y"}, {"symbol": "STM32_HAVE_USART3", "cond": "y"}, {"symbol": "STM32_HAVE_UART4", "cond": "y"}, {"symbol": "STM32_HAVE_UART5", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F302VC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F302VC", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F30XX", "cond": "y"}, {"symbol": "STM32_STM32F302", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "STM32_HAVE_ADC2", "cond": "y"}, {"symbol": "STM32_HAVE_USART3", "cond": "y"}, {"symbol": "STM32_HAVE_UART4", "cond": "y"}, {"symbol": "STM32_HAVE_UART5", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F303K6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F303K6", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F30XX", "cond": "y"}, {"symbol": "STM32_STM32F303", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F303K8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F303K8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F30XX", "cond": "y"}, {"symbol": "STM32_STM32F303", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F303C6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F303C6", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F30XX", "cond": "y"}, {"symbol": "STM32_STM32F303", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "STM32_HAVE_USART3", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F303C8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F303C8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F30XX", "cond": "y"}, {"symbol": "STM32_STM32F303", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "STM32_HAVE_USART3", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F303CB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F303CB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F30XX", "cond": "y"}, {"symbol": "STM32_STM32F303", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "STM32_HAVE_ADC3", "cond": "y"}, {"symbol": "STM32_HAVE_ADC4", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_SPI2", "cond": "y"}, {"symbol": "STM32_HAVE_SPI3", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}, {"symbol": "STM32_HAVE_TIM8", "cond": "y"}, {"symbol": "STM32_HAVE_USART3", "cond": "y"}, {"symbol": "STM32_HAVE_USBDEV", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F303CC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F303CC", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F30XX", "cond": "y"}, {"symbol": "STM32_STM32F303", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "STM32_HAVE_ADC3", "cond": "y"}, {"symbol": "STM32_HAVE_ADC4", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_SPI2", "cond": "y"}, {"symbol": "STM32_HAVE_SPI3", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}, {"symbol": "STM32_HAVE_TIM8", "cond": "y"}, {"symbol": "STM32_HAVE_USART3", "cond": "y"}, {"symbol": "STM32_HAVE_USBDEV", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F303RB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F303RB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F30XX", "cond": "y"}, {"symbol": "STM32_STM32F303", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "STM32_HAVE_ADC3", "cond": "y"}, {"symbol": "STM32_HAVE_ADC4", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_SPI2", "cond": "y"}, {"symbol": "STM32_HAVE_SPI3", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}, {"symbol": "STM32_HAVE_TIM8", "cond": "y"}, {"symbol": "STM32_HAVE_USART3", "cond": "y"}, {"symbol": "STM32_HAVE_UART4", "cond": "y"}, {"symbol": "STM32_HAVE_UART5", "cond": "y"}, {"symbol": "STM32_HAVE_USBDEV", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F303RC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F303RC", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F30XX", "cond": "y"}, {"symbol": "STM32_STM32F303", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "STM32_HAVE_ADC3", "cond": "y"}, {"symbol": "STM32_HAVE_ADC4", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_SPI2", "cond": "y"}, {"symbol": "STM32_HAVE_SPI3", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}, {"symbol": "STM32_HAVE_TIM8", "cond": "y"}, {"symbol": "STM32_HAVE_USART3", "cond": "y"}, {"symbol": "STM32_HAVE_UART4", "cond": "y"}, {"symbol": "STM32_HAVE_UART5", "cond": "y"}, {"symbol": "STM32_HAVE_USBDEV", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F303RD", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F303RD", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F30XX", "cond": "y"}, {"symbol": "STM32_STM32F303", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "STM32_HAVE_ADC3", "cond": "y"}, {"symbol": "STM32_HAVE_ADC4", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C3", "cond": "y"}, {"symbol": "STM32_HAVE_SPI2", "cond": "y"}, {"symbol": "STM32_HAVE_SPI3", "cond": "y"}, {"symbol": "STM32_HAVE_SPI4", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}, {"symbol": "STM32_HAVE_TIM8", "cond": "y"}, {"symbol": "STM32_HAVE_USART3", "cond": "y"}, {"symbol": "STM32_HAVE_UART4", "cond": "y"}, {"symbol": "STM32_HAVE_UART5", "cond": "y"}, {"symbol": "STM32_HAVE_USBDEV", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F303RE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F303RE", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F30XX", "cond": "y"}, {"symbol": "STM32_STM32F303", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "STM32_HAVE_ADC3", "cond": "y"}, {"symbol": "STM32_HAVE_ADC4", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_I2C3", "cond": "y"}, {"symbol": "STM32_HAVE_SPI2", "cond": "y"}, {"symbol": "STM32_HAVE_SPI3", "cond": "y"}, {"symbol": "STM32_HAVE_SPI4", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}, {"symbol": "STM32_HAVE_TIM8", "cond": "y"}, {"symbol": "STM32_HAVE_USART3", "cond": "y"}, {"symbol": "STM32_HAVE_UART4", "cond": "y"}, {"symbol": "STM32_HAVE_UART5", "cond": "y"}, {"symbol": "STM32_HAVE_USBDEV", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F303VB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F303VB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F30XX", "cond": "y"}, {"symbol": "STM32_STM32F303", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "STM32_HAVE_ADC3", "cond": "y"}, {"symbol": "STM32_HAVE_ADC4", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_SPI2", "cond": "y"}, {"symbol": "STM32_HAVE_SPI3", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}, {"symbol": "STM32_HAVE_TIM8", "cond": "y"}, {"symbol": "STM32_HAVE_USART3", "cond": "y"}, {"symbol": "STM32_HAVE_UART4", "cond": "y"}, {"symbol": "STM32_HAVE_UART5", "cond": "y"}, {"symbol": "STM32_HAVE_USBDEV", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F303VC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F303VC", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F30XX", "cond": "y"}, {"symbol": "STM32_STM32F303", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "STM32_HAVE_ADC3", "cond": "y"}, {"symbol": "STM32_HAVE_ADC4", "cond": "y"}, {"symbol": "STM32_HAVE_I2C2", "cond": "y"}, {"symbol": "STM32_HAVE_SPI2", "cond": "y"}, {"symbol": "STM32_HAVE_SPI3", "cond": "y"}, {"symbol": "STM32_HAVE_TIM4", "cond": "y"}, {"symbol": "STM32_HAVE_TIM8", "cond": "y"}, {"symbol": "STM32_HAVE_USART3", "cond": "y"}, {"symbol": "STM32_HAVE_UART4", "cond": "y"}, {"symbol": "STM32_HAVE_UART5", "cond": "y"}, {"symbol": "STM32_HAVE_USBDEV", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F334K4", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F334K4", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F33XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F334K6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F334K6", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F33XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F334K8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F334K8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F33XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F334C4", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F334C4", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F33XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F334C6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F334C6", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F33XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F334C8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F334C8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F33XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F334R4", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F334R4", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F33XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F334R6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F334R6", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F33XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F334R8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F334R8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F33XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F372C8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F372C8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F37XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F372R8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F372R8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F37XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F372V8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F372V8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F37XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F372CB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F372CB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F37XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F372RB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F372RB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F37XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F372VB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F372VB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F37XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F372CC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F372CC", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F37XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F372RC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F372RC", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F37XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F372VC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F372VC", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F37XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F373C8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F373C8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F37XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F373R8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F373R8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F37XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F373V8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F373V8", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F37XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F373CB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F373CB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F37XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F373RB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F373RB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F37XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F373VB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F373VB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F37XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F373CC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F373CC", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F37XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F373RC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F373RC", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F37XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F373VC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F373VC", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F37XX", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F401RE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F401RE", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F401", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F410RB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F410RB", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F410", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F411RE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F411RE", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F411", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F411VE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F411VE", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F411", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F405RG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F405RG", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F405", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F405VG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F405VG", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F405", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F405ZG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F405ZG", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F405", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F407VE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F407VE", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F407", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F407VG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F407VG", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F407", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F407ZE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F407ZE", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F407", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F407ZG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F407ZG", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F407", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F407IE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F407IE", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F407", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F407IG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F407IG", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F407", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F427V", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F427V", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F427", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F427Z", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F427Z", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F427", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F427I", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F427I", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F427", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F429V", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F429V", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F429", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F429Z", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F429Z", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F429", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F429I", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F429I", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F429", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F429B", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F429B", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F429", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F429N", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F429N", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F429", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F446M", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F446M", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F446", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F446R", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F446R", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F446", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F446V", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F446V", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F446", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F446Z", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F446Z", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F446", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F469A", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F469A", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F469", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F469I", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F469I", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F469", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "STM32_HAVE_ETHMAC", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F469B", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F469B", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F469", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "STM32_HAVE_ETHMAC", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F469N", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F469N", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXM4", "cond": "y"}, {"symbol": "STM32_STM32F4XXX", "cond": "y"}, {"symbol": "STM32_STM32F469", "cond": "y"}, {"symbol": "ARCH_HAVE_FPU", "cond": "y"}, {"symbol": "STM32_HAVE_ETHMAC", "cond": "y"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Override Flash Size Designator", "cond": "ARCH_CHIP_STM32 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_FLASH_CONFIG_DEFAULT", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "STM32F series parts numbering (sans the package type) ends with a number or letter\nthat designates the FLASH size.\n\n                Designator  Size in KiB\n                   4    16\n                   6    32\n                   8    64\n                   B    128\n                   C    256\n                   D    384\n                   E    512\n                   F    768\n                   G    1024\n                   I    2048\n\nThis configuration option defaults to using the configuration based on that designator\nor the default smaller size if there is no last character designator is present in the\nSTM32 Chip Selection.\n\nExamples:\n   If the STM32F407VE is chosen, the Flash configuration would be 'E', if a variant of\n   the part with a  2048 KiB Flash is released in the future one could simply select\n   the 'I' designator here.\n\n   If an STM32F42xxx or  Series parts is chosen the default Flash configuration will be 'G'\n   and can be set herein to 'I' to choose the larger FLASH part.", "children": [{"type": 3, "name": "STM32_FLASH_CONFIG_DEFAULT", "value": "n", "user_value": null, "dep": "n", "prompt": "Default", "cond": "y"}, {"type": 3, "name": "STM32_FLASH_CONFIG_4", "value": "n", "user_value": null, "dep": "n", "prompt": "4 16KiB", "cond": "y"}, {"type": 3, "name": "STM32_FLASH_CONFIG_6", "value": "n", "user_value": null, "dep": "n", "prompt": "6 32KiB", "cond": "y"}, {"type": 3, "name": "STM32_FLASH_CONFIG_8", "value": "n", "user_value": null, "dep": "n", "prompt": "8 64KiB", "cond": "y"}, {"type": 3, "name": "STM32_FLASH_CONFIG_B", "value": "n", "user_value": null, "dep": "n", "prompt": "B 128KiB", "cond": "y"}, {"type": 3, "name": "STM32_FLASH_CONFIG_C", "value": "n", "user_value": null, "dep": "n", "prompt": "C 256KiB", "cond": "y"}, {"type": 3, "name": "STM32_FLASH_CONFIG_D", "value": "n", "user_value": null, "dep": "n", "prompt": "D 384KiB", "cond": "y"}, {"type": 3, "name": "STM32_FLASH_CONFIG_E", "value": "n", "user_value": null, "dep": "n", "prompt": "E 512KiB", "cond": "y"}, {"type": 3, "name": "STM32_FLASH_CONFIG_F", "value": "n", "user_value": null, "dep": "n", "prompt": "F 768KiB", "cond": "y"}, {"type": 3, "name": "STM32_FLASH_CONFIG_G", "value": "n", "user_value": null, "dep": "n", "prompt": "G 1024KiB", "cond": "y"}, {"type": 3, "name": "STM32_FLASH_CONFIG_I", "value": "n", "user_value": null, "dep": "n", "prompt": "I 2048KiB", "cond": "y"}]}, {"type": 3, "name": "STM32_STM32L15XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32L151C6 && y) || (ARCH_CHIP_STM32L151C8 && y) || (ARCH_CHIP_STM32L151CB && y) || (ARCH_CHIP_STM32L151R6 && y) || (ARCH_CHIP_STM32L151R8 && y) || (ARCH_CHIP_STM32L151RB && y) || (ARCH_CHIP_STM32L151V6 && y) || (ARCH_CHIP_STM32L151V8 && y) || (ARCH_CHIP_STM32L151VB && y) || (ARCH_CHIP_STM32L152C6 && y) || (ARCH_CHIP_STM32L152C8 && y) || (ARCH_CHIP_STM32L152CB && y) || (ARCH_CHIP_STM32L152R6 && y) || (ARCH_CHIP_STM32L152R8 && y) || (ARCH_CHIP_STM32L152RB && y) || (ARCH_CHIP_STM32L152V6 && y) || (ARCH_CHIP_STM32L152V8 && y) || (ARCH_CHIP_STM32L152VB && y) || (ARCH_CHIP_STM32L152CC && y) || (ARCH_CHIP_STM32L152RC && y) || (ARCH_CHIP_STM32L152VC && y) || (ARCH_CHIP_STM32L162ZD && y) || (ARCH_CHIP_STM32L162VE && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_DAC1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2C2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_RTC_SUBSECONDS", "cond": "!STM32_LOWDENSITY && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_ENERGYLITE", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32L151C6 && y) || (ARCH_CHIP_STM32L151C8 && y) || (ARCH_CHIP_STM32L151CB && y) || (ARCH_CHIP_STM32L151R6 && y) || (ARCH_CHIP_STM32L151R8 && y) || (ARCH_CHIP_STM32L151RB && y) || (ARCH_CHIP_STM32L151V6 && y) || (ARCH_CHIP_STM32L151V8 && y) || (ARCH_CHIP_STM32L151VB && y) || (ARCH_CHIP_STM32L152C6 && y) || (ARCH_CHIP_STM32L152C8 && y) || (ARCH_CHIP_STM32L152CB && y) || (ARCH_CHIP_STM32L152R6 && y) || (ARCH_CHIP_STM32L152R8 && y) || (ARCH_CHIP_STM32L152RB && y) || (ARCH_CHIP_STM32L152V6 && y) || (ARCH_CHIP_STM32L152V8 && y) || (ARCH_CHIP_STM32L152VB && y) || (ARCH_CHIP_STM32L152CC && y) || (ARCH_CHIP_STM32L152RC && y) || (ARCH_CHIP_STM32L152VC && y) || (ARCH_CHIP_STM32L162ZD && y) || (ARCH_CHIP_STM32L162VE && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_USBDEV", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM7", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM9", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM10", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM11", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_STM32F10XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F100C8 && y) || (ARCH_CHIP_STM32F100CB && y) || (ARCH_CHIP_STM32F100R8 && y) || (ARCH_CHIP_STM32F100RB && y) || (ARCH_CHIP_STM32F100RC && y) || (ARCH_CHIP_STM32F100RD && y) || (ARCH_CHIP_STM32F100RE && y) || (ARCH_CHIP_STM32F100V8 && y) || (ARCH_CHIP_STM32F100VB && y) || (ARCH_CHIP_STM32F100VC && y) || (ARCH_CHIP_STM32F100VD && y) || (ARCH_CHIP_STM32F100VE && y) || (ARCH_CHIP_STM32F102CB && y) || (ARCH_CHIP_STM32F103T8 && y) || (ARCH_CHIP_STM32F103TB && y) || (ARCH_CHIP_STM32F103C4 && y) || (ARCH_CHIP_STM32F103C8 && y) || (ARCH_CHIP_STM32F103CB && y) || (ARCH_CHIP_STM32F103R8 && y) || (ARCH_CHIP_STM32F103RB && y) || (ARCH_CHIP_STM32F103RC && y) || (ARCH_CHIP_STM32F103RD && y) || (ARCH_CHIP_STM32F103RE && y) || (ARCH_CHIP_STM32F103RG && y) || (ARCH_CHIP_STM32F103V8 && y) || (ARCH_CHIP_STM32F103VB && y) || (ARCH_CHIP_STM32F103VC && y) || (ARCH_CHIP_STM32F103VE && y) || (ARCH_CHIP_STM32F103ZE && y) || (ARCH_CHIP_STM32F105VB && y) || (ARCH_CHIP_STM32F105RB && y) || (ARCH_CHIP_STM32F107VC && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_SPI2", "cond": "(STM32_HIGHDENSITY || STM32_MEDIUMDENSITY) && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI3", "cond": "(STM32_HIGHDENSITY || STM32_MEDIUMDENSITY) && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_RTC_COUNTER", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_VALUELINE", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F100C8 && y) || (ARCH_CHIP_STM32F100CB && y) || (ARCH_CHIP_STM32F100R8 && y) || (ARCH_CHIP_STM32F100RB && y) || (ARCH_CHIP_STM32F100RC && y) || (ARCH_CHIP_STM32F100RD && y) || (ARCH_CHIP_STM32F100RE && y) || (ARCH_CHIP_STM32F100V8 && y) || (ARCH_CHIP_STM32F100VB && y) || (ARCH_CHIP_STM32F100VC && y) || (ARCH_CHIP_STM32F100VD && y) || (ARCH_CHIP_STM32F100VE && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_USART3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM7", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM12", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM13", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM14", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM15", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM16", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM17", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI2", "cond": "STM32_HIGHDENSITY && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI3", "cond": "STM32_HIGHDENSITY && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_CONNECTIVITYLINE", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F105VB && y) || (ARCH_CHIP_STM32F105RB && y) || (ARCH_CHIP_STM32F107VC && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_OTGFS", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM7", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ETHMAC", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_PERFORMANCELINE", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F103T8 && y) || (ARCH_CHIP_STM32F103TB && y) || (ARCH_CHIP_STM32F103C4 && y) || (ARCH_CHIP_STM32F103C8 && y) || (ARCH_CHIP_STM32F103CB && y) || (ARCH_CHIP_STM32F103R8 && y) || (ARCH_CHIP_STM32F103RB && y) || (ARCH_CHIP_STM32F103RC && y) || (ARCH_CHIP_STM32F103RD && y) || (ARCH_CHIP_STM32F103RE && y) || (ARCH_CHIP_STM32F103RG && y) || (ARCH_CHIP_STM32F103V8 && y) || (ARCH_CHIP_STM32F103VB && y) || (ARCH_CHIP_STM32F103VC && y) || (ARCH_CHIP_STM32F103VE && y) || (ARCH_CHIP_STM32F103ZE && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_USBDEV", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM7", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM8", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_USBACCESSLINE", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_STM32F102CB && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_USBDEV", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_FSMC", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HIGHDENSITY", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32L162ZD && y) || (ARCH_CHIP_STM32L162VE && y) || (ARCH_CHIP_STM32F100RC && y) || (ARCH_CHIP_STM32F100RD && y) || (ARCH_CHIP_STM32F100RE && y) || (ARCH_CHIP_STM32F100VC && y) || (ARCH_CHIP_STM32F100VD && y) || (ARCH_CHIP_STM32F100VE && y) || (ARCH_CHIP_STM32F103RC && y) || (ARCH_CHIP_STM32F103RD && y) || (ARCH_CHIP_STM32F103RE && y) || (ARCH_CHIP_STM32F103RG && y) || (ARCH_CHIP_STM32F103VC && y) || (ARCH_CHIP_STM32F103VE && y) || (ARCH_CHIP_STM32F103ZE && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_FSMC", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM7", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM8", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_MEDIUMDENSITY", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F102CB && y) || (ARCH_CHIP_STM32F103T8 && y) || (ARCH_CHIP_STM32F103TB && y) || (ARCH_CHIP_STM32F103C8 && y) || (ARCH_CHIP_STM32F103CB && y) || (ARCH_CHIP_STM32F103R8 && y) || (ARCH_CHIP_STM32F103RB && y) || (ARCH_CHIP_STM32F103V8 && y) || (ARCH_CHIP_STM32F103VB && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_USART3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM7", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM8", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_LOWDENSITY", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_STM32F103C4 && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_USART3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM7", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM8", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN1", "cond": "!STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_STM32F20XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F205RG && y) || (ARCH_CHIP_STM32F207IG && y) || (ARCH_CHIP_STM32F207ZE && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_STM32F205", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_STM32F205RG && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_OTGFS", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_OTGHS", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM7", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM8", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM9", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM10", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM11", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM12", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM13", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM14", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2C2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2C3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_RNG", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_STM32F207", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F207IG && y) || (ARCH_CHIP_STM32F207ZE && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_OTGFS", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_FSMC", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM7", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM8", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM9", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM10", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM11", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM12", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM13", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM14", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2C2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2C3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_RNG", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ETHMAC", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_STM32F30XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F302K6 && y) || (ARCH_CHIP_STM32F302K8 && y) || (ARCH_CHIP_STM32F302CB && y) || (ARCH_CHIP_STM32F302CC && y) || (ARCH_CHIP_STM32F302RB && y) || (ARCH_CHIP_STM32F302RC && y) || (ARCH_CHIP_STM32F302VB && y) || (ARCH_CHIP_STM32F302VC && y) || (ARCH_CHIP_STM32F303K6 && y) || (ARCH_CHIP_STM32F303K8 && y) || (ARCH_CHIP_STM32F303C6 && y) || (ARCH_CHIP_STM32F303C8 && y) || (ARCH_CHIP_STM32F303CB && y) || (ARCH_CHIP_STM32F303CC && y) || (ARCH_CHIP_STM32F303RB && y) || (ARCH_CHIP_STM32F303RC && y) || (ARCH_CHIP_STM32F303RD && y) || (ARCH_CHIP_STM32F303RE && y) || (ARCH_CHIP_STM32F303VB && y) || (ARCH_CHIP_STM32F303VC && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_CAN1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM15", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM16", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM17", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_STM32F302", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F302K6 && y) || (ARCH_CHIP_STM32F302K8 && y) || (ARCH_CHIP_STM32F302CB && y) || (ARCH_CHIP_STM32F302CC && y) || (ARCH_CHIP_STM32F302RB && y) || (ARCH_CHIP_STM32F302RC && y) || (ARCH_CHIP_STM32F302VB && y) || (ARCH_CHIP_STM32F302VC && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_I2C2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USBDEV", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_STM32F303", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F303K6 && y) || (ARCH_CHIP_STM32F303K8 && y) || (ARCH_CHIP_STM32F303C6 && y) || (ARCH_CHIP_STM32F303C8 && y) || (ARCH_CHIP_STM32F303CB && y) || (ARCH_CHIP_STM32F303CC && y) || (ARCH_CHIP_STM32F303RB && y) || (ARCH_CHIP_STM32F303RC && y) || (ARCH_CHIP_STM32F303RD && y) || (ARCH_CHIP_STM32F303RE && y) || (ARCH_CHIP_STM32F303VB && y) || (ARCH_CHIP_STM32F303VC && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_ADC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CCM", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM7", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_STM32F33XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F334K4 && y) || (ARCH_CHIP_STM32F334K6 && y) || (ARCH_CHIP_STM32F334K8 && y) || (ARCH_CHIP_STM32F334C4 && y) || (ARCH_CHIP_STM32F334C6 && y) || (ARCH_CHIP_STM32F334C8 && y) || (ARCH_CHIP_STM32F334R4 && y) || (ARCH_CHIP_STM32F334R6 && y) || (ARCH_CHIP_STM32F334R8 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_HRTIM1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_COMP2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_COMP4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_COMP6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_OPAMP2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CCM", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM15", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM16", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM17", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_STM32F37XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F372C8 && y) || (ARCH_CHIP_STM32F372R8 && y) || (ARCH_CHIP_STM32F372V8 && y) || (ARCH_CHIP_STM32F372CB && y) || (ARCH_CHIP_STM32F372RB && y) || (ARCH_CHIP_STM32F372VB && y) || (ARCH_CHIP_STM32F372CC && y) || (ARCH_CHIP_STM32F372RC && y) || (ARCH_CHIP_STM32F372VC && y) || (ARCH_CHIP_STM32F373C8 && y) || (ARCH_CHIP_STM32F373R8 && y) || (ARCH_CHIP_STM32F373V8 && y) || (ARCH_CHIP_STM32F373CB && y) || (ARCH_CHIP_STM32F373RB && y) || (ARCH_CHIP_STM32F373VB && y) || (ARCH_CHIP_STM32F373CC && y) || (ARCH_CHIP_STM32F373RC && y) || (ARCH_CHIP_STM32F373VC && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_USBDEV", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM7", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM15", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM16", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM17", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SDADC1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SDADC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SDADC3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2C2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_STM32F4XXX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F401RE && y) || (ARCH_CHIP_STM32F410RB && y) || (ARCH_CHIP_STM32F411RE && y) || (ARCH_CHIP_STM32F411VE && y) || (ARCH_CHIP_STM32F405RG && y) || (ARCH_CHIP_STM32F405VG && y) || (ARCH_CHIP_STM32F405ZG && y) || (ARCH_CHIP_STM32F407VE && y) || (ARCH_CHIP_STM32F407VG && y) || (ARCH_CHIP_STM32F407ZE && y) || (ARCH_CHIP_STM32F407ZG && y) || (ARCH_CHIP_STM32F407IE && y) || (ARCH_CHIP_STM32F407IG && y) || (ARCH_CHIP_STM32F427V && y) || (ARCH_CHIP_STM32F427Z && y) || (ARCH_CHIP_STM32F427I && y) || (ARCH_CHIP_STM32F429V && y) || (ARCH_CHIP_STM32F429Z && y) || (ARCH_CHIP_STM32F429I && y) || (ARCH_CHIP_STM32F429B && y) || (ARCH_CHIP_STM32F429N && y) || (ARCH_CHIP_STM32F446M && y) || (ARCH_CHIP_STM32F446R && y) || (ARCH_CHIP_STM32F446V && y) || (ARCH_CHIP_STM32F446Z && y) || (ARCH_CHIP_STM32F469A && y) || (ARCH_CHIP_STM32F469I && y) || (ARCH_CHIP_STM32F469B && y) || (ARCH_CHIP_STM32F469N && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_SPI2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2C2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_STM32F401", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_STM32F401RE && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_USART6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM9", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM10", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM11", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2S3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2C3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_OTGFS", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_STM32F410", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_STM32F410RB && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_USART6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM9", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM11", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_STM32F411", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F411RE && y) || (ARCH_CHIP_STM32F411VE && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_USART6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM9", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM10", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM11", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2S3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2C3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_OTGFS", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_STM32F405", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F405RG && y) || (ARCH_CHIP_STM32F405VG && y) || (ARCH_CHIP_STM32F405ZG && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_FSMC", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CCM", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM7", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM8", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM9", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM10", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM11", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM12", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM13", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM14", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2S3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2C3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_RNG", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_OTGFS", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_STM32F407", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F407VE && y) || (ARCH_CHIP_STM32F407VG && y) || (ARCH_CHIP_STM32F407ZE && y) || (ARCH_CHIP_STM32F407ZG && y) || (ARCH_CHIP_STM32F407IE && y) || (ARCH_CHIP_STM32F407IG && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_FSMC", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CCM", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM7", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM8", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM9", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM10", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM11", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM12", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM13", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM14", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2S3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2C3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_RNG", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ETHMAC", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_OTGFS", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_STM32F427", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F427V && y) || (ARCH_CHIP_STM32F427Z && y) || (ARCH_CHIP_STM32F427I && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_FSMC", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CCM", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART7", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART8", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM7", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM8", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM9", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM10", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM11", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM12", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM13", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM14", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_RNG", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ETHMAC", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2S3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2C3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_OTGFS", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_STM32F429", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F429V && y) || (ARCH_CHIP_STM32F429Z && y) || (ARCH_CHIP_STM32F429I && y) || (ARCH_CHIP_STM32F429B && y) || (ARCH_CHIP_STM32F429N && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_FSMC", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_LTDC", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CCM", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART7", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART8", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM7", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM8", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM9", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM10", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM11", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM12", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM13", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM14", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_RNG", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ETHMAC", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2S3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2S3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2C3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_OTGFS", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_STM32F446", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F446M && y) || (ARCH_CHIP_STM32F446R && y) || (ARCH_CHIP_STM32F446V && y) || (ARCH_CHIP_STM32F446Z && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_USART3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM7", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM8", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM9", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM10", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM11", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM12", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM13", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM14", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2S3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2C3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_OTGFS", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SAIPLL", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2SPLL", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_STM32F469", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F469A && y) || (ARCH_CHIP_STM32F469I && y) || (ARCH_CHIP_STM32F469B && y) || (ARCH_CHIP_STM32F469N && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_HAVE_FSMC", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_LTDC", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CCM", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_USART6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART7", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_UART8", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM7", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM8", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM9", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM10", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM11", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM12", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM13", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_TIM14", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_CAN2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_DAC2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_RNG", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI4", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI5", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SPI6", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_OTGFS", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SAIPLL", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2SPLL", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2S3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_I2C3", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_DFU", "value": "n", "user_value": null, "rev_dep": "PHOTON_DFU_BOOTLOADER && ARCH_BOARD_PHOTON && ARCH_BOARD_PHOTON", "dep": "n", "prompt": "DFU bootloader", "cond": "!STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Configure and position code for use with the STMicro DFU bootloader.  Do\nnot select this option if you will load code using JTAG/SWM."}, {"type": 31, "dep": "n", "prompt": "STM32 Peripheral Support", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "children": [{"type": 3, "name": "STM32_HAVE_CCM", "value": "n", "user_value": null, "rev_dep": "(STM32_STM32F303 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F33XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_USBDEV", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F303CB && y) || (ARCH_CHIP_STM32F303CC && y) || (ARCH_CHIP_STM32F303RB && y) || (ARCH_CHIP_STM32F303RC && y) || (ARCH_CHIP_STM32F303RD && y) || (ARCH_CHIP_STM32F303RE && y) || (ARCH_CHIP_STM32F303VB && y) || (ARCH_CHIP_STM32F303VC && y) || (STM32_ENERGYLITE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_PERFORMANCELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_USBACCESSLINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F302 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F37XX && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_OTGFS", "value": "n", "user_value": null, "rev_dep": "(STM32_CONNECTIVITYLINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F401 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F411 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_FSMC", "value": "n", "user_value": null, "rev_dep": "(STM32_USBACCESSLINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_HIGHDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_HRTIM1", "value": "n", "user_value": null, "rev_dep": "STM32_STM32F33XX && ARCH_CHIP_STM32 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_LTDC", "value": "n", "user_value": null, "rev_dep": "(STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_USART3", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F302CB && y) || (ARCH_CHIP_STM32F302CC && y) || (ARCH_CHIP_STM32F302RB && y) || (ARCH_CHIP_STM32F302RC && y) || (ARCH_CHIP_STM32F302VB && y) || (ARCH_CHIP_STM32F302VC && y) || (ARCH_CHIP_STM32F303C6 && y) || (ARCH_CHIP_STM32F303C8 && y) || (ARCH_CHIP_STM32F303CB && y) || (ARCH_CHIP_STM32F303CC && y) || (ARCH_CHIP_STM32F303RB && y) || (ARCH_CHIP_STM32F303RC && y) || (ARCH_CHIP_STM32F303RD && y) || (ARCH_CHIP_STM32F303RE && y) || (ARCH_CHIP_STM32F303VB && y) || (ARCH_CHIP_STM32F303VC && y) || (STM32_ENERGYLITE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_CONNECTIVITYLINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_PERFORMANCELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_USBACCESSLINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_HIGHDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_MEDIUMDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_LOWDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F33XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F37XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_UART4", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F302RB && y) || (ARCH_CHIP_STM32F302RC && y) || (ARCH_CHIP_STM32F302VB && y) || (ARCH_CHIP_STM32F302VC && y) || (ARCH_CHIP_STM32F303RB && y) || (ARCH_CHIP_STM32F303RC && y) || (ARCH_CHIP_STM32F303RD && y) || (ARCH_CHIP_STM32F303RE && y) || (ARCH_CHIP_STM32F303VB && y) || (ARCH_CHIP_STM32F303VC && y) || (STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_CONNECTIVITYLINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_PERFORMANCELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_HIGHDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_MEDIUMDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_LOWDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_UART5", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F302RB && y) || (ARCH_CHIP_STM32F302RC && y) || (ARCH_CHIP_STM32F302VB && y) || (ARCH_CHIP_STM32F302VC && y) || (ARCH_CHIP_STM32F303RB && y) || (ARCH_CHIP_STM32F303RC && y) || (ARCH_CHIP_STM32F303RD && y) || (ARCH_CHIP_STM32F303RE && y) || (ARCH_CHIP_STM32F303VB && y) || (ARCH_CHIP_STM32F303VC && y) || (STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_CONNECTIVITYLINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_PERFORMANCELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_HIGHDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_MEDIUMDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_LOWDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_USART6", "value": "n", "user_value": null, "rev_dep": "(STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F401 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F410 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F411 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_UART7", "value": "n", "user_value": null, "rev_dep": "(STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_UART8", "value": "n", "user_value": null, "rev_dep": "(STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_TIM1", "value": "n", "user_value": null, "rev_dep": "(STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_CONNECTIVITYLINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_PERFORMANCELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_HIGHDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_MEDIUMDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_LOWDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F30XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F33XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F401 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F410 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F411 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_TIM2", "value": "n", "user_value": null, "rev_dep": "(STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_TIM3", "value": "n", "user_value": null, "rev_dep": "(STM32_STM32L15XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F10XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F30XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F37XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F401 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F411 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_TIM4", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F100C8 && y) || (ARCH_CHIP_STM32F100CB && y) || (ARCH_CHIP_STM32F100R8 && y) || (ARCH_CHIP_STM32F100RB && y) || (ARCH_CHIP_STM32F100RC && y) || (ARCH_CHIP_STM32F100RD && y) || (ARCH_CHIP_STM32F100RE && y) || (ARCH_CHIP_STM32F100V8 && y) || (ARCH_CHIP_STM32F100VB && y) || (ARCH_CHIP_STM32F100VC && y) || (ARCH_CHIP_STM32F100VD && y) || (ARCH_CHIP_STM32F100VE && y) || (ARCH_CHIP_STM32F102CB && y) || (ARCH_CHIP_STM32F103T8 && y) || (ARCH_CHIP_STM32F103TB && y) || (ARCH_CHIP_STM32F103C8 && y) || (ARCH_CHIP_STM32F103CB && y) || (ARCH_CHIP_STM32F103R8 && y) || (ARCH_CHIP_STM32F103RB && y) || (ARCH_CHIP_STM32F103RC && y) || (ARCH_CHIP_STM32F103RD && y) || (ARCH_CHIP_STM32F103RE && y) || (ARCH_CHIP_STM32F103RG && y) || (ARCH_CHIP_STM32F103V8 && y) || (ARCH_CHIP_STM32F103VB && y) || (ARCH_CHIP_STM32F103VC && y) || (ARCH_CHIP_STM32F103VE && y) || (ARCH_CHIP_STM32F103ZE && y) || (ARCH_CHIP_STM32F105VB && y) || (ARCH_CHIP_STM32F105RB && y) || (ARCH_CHIP_STM32F107VC && y) || (ARCH_CHIP_STM32F303CB && y) || (ARCH_CHIP_STM32F303CC && y) || (ARCH_CHIP_STM32F303RB && y) || (ARCH_CHIP_STM32F303RC && y) || (ARCH_CHIP_STM32F303RD && y) || (ARCH_CHIP_STM32F303RE && y) || (ARCH_CHIP_STM32F303VB && y) || (ARCH_CHIP_STM32F303VC && y) || (STM32_STM32L15XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F302 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F37XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F401 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F411 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_TIM5", "value": "n", "user_value": null, "rev_dep": "(STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_CONNECTIVITYLINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_PERFORMANCELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_HIGHDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_MEDIUMDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_LOWDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F37XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F401 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F410 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F411 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_TIM6", "value": "n", "user_value": null, "rev_dep": "(STM32_ENERGYLITE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_CONNECTIVITYLINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_PERFORMANCELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_HIGHDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_MEDIUMDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_LOWDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F30XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F37XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F410 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_TIM7", "value": "n", "user_value": null, "rev_dep": "(STM32_ENERGYLITE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_CONNECTIVITYLINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_PERFORMANCELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_HIGHDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_MEDIUMDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_LOWDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F303 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F37XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_TIM8", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F303CB && y) || (ARCH_CHIP_STM32F303CC && y) || (ARCH_CHIP_STM32F303RB && y) || (ARCH_CHIP_STM32F303RC && y) || (ARCH_CHIP_STM32F303RD && y) || (ARCH_CHIP_STM32F303RE && y) || (ARCH_CHIP_STM32F303VB && y) || (ARCH_CHIP_STM32F303VC && y) || (STM32_PERFORMANCELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_HIGHDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_MEDIUMDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_LOWDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_TIM9", "value": "n", "user_value": null, "rev_dep": "(STM32_ENERGYLITE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F401 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F410 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F411 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_TIM10", "value": "n", "user_value": null, "rev_dep": "(STM32_ENERGYLITE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F401 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F411 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_TIM11", "value": "n", "user_value": null, "rev_dep": "(STM32_ENERGYLITE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F401 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F410 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F411 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_TIM12", "value": "n", "user_value": null, "rev_dep": "(STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_TIM13", "value": "n", "user_value": null, "rev_dep": "(STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_TIM14", "value": "n", "user_value": null, "rev_dep": "(STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_TIM15", "value": "n", "user_value": null, "rev_dep": "(STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F30XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F33XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F37XX && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_TIM16", "value": "n", "user_value": null, "rev_dep": "(STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F30XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F33XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F37XX && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_TIM17", "value": "n", "user_value": null, "rev_dep": "(STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F30XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F33XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F37XX && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_ADC2", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F302CB && y) || (ARCH_CHIP_STM32F302CC && y) || (ARCH_CHIP_STM32F302RB && y) || (ARCH_CHIP_STM32F302RC && y) || (ARCH_CHIP_STM32F302VB && y) || (ARCH_CHIP_STM32F302VC && y) || (STM32_ENERGYLITE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_CONNECTIVITYLINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_PERFORMANCELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_HIGHDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_MEDIUMDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_LOWDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F303 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F33XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_ADC3", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F303CB && y) || (ARCH_CHIP_STM32F303CC && y) || (ARCH_CHIP_STM32F303RB && y) || (ARCH_CHIP_STM32F303RC && y) || (ARCH_CHIP_STM32F303RD && y) || (ARCH_CHIP_STM32F303RE && y) || (ARCH_CHIP_STM32F303VB && y) || (ARCH_CHIP_STM32F303VC && y) || (STM32_HIGHDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_MEDIUMDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_ADC4", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F303CB && y) || (ARCH_CHIP_STM32F303CC && y) || (ARCH_CHIP_STM32F303RB && y) || (ARCH_CHIP_STM32F303RC && y) || (ARCH_CHIP_STM32F303RD && y) || (ARCH_CHIP_STM32F303RE && y) || (ARCH_CHIP_STM32F303VB && y) || (ARCH_CHIP_STM32F303VC && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_ADC1_DMA", "value": "n", "user_value": null, "rev_dep": "(STM32_ADC1 && STM32_STM32F10XX && STM32_DMA1 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_ADC1 && STM32_STM32F37XX && STM32_DMA1 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_ADC1 && !STM32_STM32F10XX && STM32_DMA2 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_ADC2_DMA", "value": "n", "user_value": null, "rev_dep": "STM32_ADC2 && STM32_DMA2 && STM32_HAVE_ADC2 && ARCH_CHIP_STM32 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_ADC3_DMA", "value": "n", "user_value": null, "rev_dep": "STM32_ADC3 && STM32_DMA2 && STM32_HAVE_ADC3 && ARCH_CHIP_STM32 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_ADC4_DMA", "value": "n", "user_value": null, "rev_dep": "STM32_ADC4 && STM32_DMA2 && STM32_HAVE_ADC4 && ARCH_CHIP_STM32 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_SDADC1", "value": "n", "user_value": null, "rev_dep": "STM32_STM32F37XX && ARCH_CHIP_STM32 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_SDADC2", "value": "n", "user_value": null, "rev_dep": "STM32_STM32F37XX && ARCH_CHIP_STM32 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_SDADC3", "value": "n", "user_value": null, "rev_dep": "STM32_STM32F37XX && ARCH_CHIP_STM32 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_SDADC1_DMA", "value": "n", "user_value": null, "rev_dep": "STM32_SDADC1 && STM32_DMA2 && STM32_HAVE_SDADC1 && ARCH_CHIP_STM32 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_SDADC2_DMA", "value": "n", "user_value": null, "rev_dep": "STM32_SDADC2 && STM32_DMA2 && STM32_HAVE_SDADC2 && ARCH_CHIP_STM32 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_SDADC3_DMA", "value": "n", "user_value": null, "rev_dep": "STM32_SDADC3 && STM32_DMA2 && STM32_HAVE_SDADC3 && ARCH_CHIP_STM32 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_CAN1", "value": "n", "user_value": null, "rev_dep": "(STM32_CONNECTIVITYLINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_PERFORMANCELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_HIGHDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_MEDIUMDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_LOWDENSITY && !STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F30XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F33XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F37XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_CAN2", "value": "n", "user_value": null, "rev_dep": "(STM32_CONNECTIVITYLINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_COMP1", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_COMP2", "value": "n", "user_value": null, "rev_dep": "STM32_STM32F33XX && ARCH_CHIP_STM32 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_COMP3", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_COMP4", "value": "n", "user_value": null, "rev_dep": "STM32_STM32F33XX && ARCH_CHIP_STM32 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_COMP5", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_COMP6", "value": "n", "user_value": null, "rev_dep": "STM32_STM32F33XX && ARCH_CHIP_STM32 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_COMP7", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_DAC1", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F100C8 && y) || (ARCH_CHIP_STM32F100CB && y) || (ARCH_CHIP_STM32F100R8 && y) || (ARCH_CHIP_STM32F100RB && y) || (ARCH_CHIP_STM32F100RC && y) || (ARCH_CHIP_STM32F100RD && y) || (ARCH_CHIP_STM32F100RE && y) || (ARCH_CHIP_STM32F100V8 && y) || (ARCH_CHIP_STM32F100VB && y) || (ARCH_CHIP_STM32F100VC && y) || (ARCH_CHIP_STM32F100VD && y) || (ARCH_CHIP_STM32F100VE && y) || (ARCH_CHIP_STM32F103RC && y) || (ARCH_CHIP_STM32F103RD && y) || (ARCH_CHIP_STM32F103RE && y) || (ARCH_CHIP_STM32F103RG && y) || (ARCH_CHIP_STM32F103VC && y) || (ARCH_CHIP_STM32F103VE && y) || (ARCH_CHIP_STM32F103ZE && y) || (ARCH_CHIP_STM32F105VB && y) || (ARCH_CHIP_STM32F105RB && y) || (ARCH_CHIP_STM32F107VC && y) || (STM32_STM32L15XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F30XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F33XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F37XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F410 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_DAC2", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F100C8 && y) || (ARCH_CHIP_STM32F100CB && y) || (ARCH_CHIP_STM32F100R8 && y) || (ARCH_CHIP_STM32F100RB && y) || (ARCH_CHIP_STM32F100RC && y) || (ARCH_CHIP_STM32F100RD && y) || (ARCH_CHIP_STM32F100RE && y) || (ARCH_CHIP_STM32F100V8 && y) || (ARCH_CHIP_STM32F100VB && y) || (ARCH_CHIP_STM32F100VC && y) || (ARCH_CHIP_STM32F100VD && y) || (ARCH_CHIP_STM32F100VE && y) || (ARCH_CHIP_STM32F103RC && y) || (ARCH_CHIP_STM32F103RD && y) || (ARCH_CHIP_STM32F103RE && y) || (ARCH_CHIP_STM32F103RG && y) || (ARCH_CHIP_STM32F103VC && y) || (ARCH_CHIP_STM32F103VE && y) || (ARCH_CHIP_STM32F103ZE && y) || (ARCH_CHIP_STM32F105VB && y) || (ARCH_CHIP_STM32F105RB && y) || (ARCH_CHIP_STM32F107VC && y) || (STM32_STM32L15XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F303 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F33XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F37XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_RNG", "value": "n", "user_value": null, "rev_dep": "(STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_ETHMAC", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F469I && y) || (ARCH_CHIP_STM32F469B && y) || (ARCH_CHIP_STM32F469N && y) || (STM32_CONNECTIVITYLINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_I2C2", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F100C8 && y) || (ARCH_CHIP_STM32F100CB && y) || (ARCH_CHIP_STM32F100R8 && y) || (ARCH_CHIP_STM32F100RB && y) || (ARCH_CHIP_STM32F100RC && y) || (ARCH_CHIP_STM32F100RD && y) || (ARCH_CHIP_STM32F100RE && y) || (ARCH_CHIP_STM32F100V8 && y) || (ARCH_CHIP_STM32F100VB && y) || (ARCH_CHIP_STM32F100VC && y) || (ARCH_CHIP_STM32F100VD && y) || (ARCH_CHIP_STM32F100VE && y) || (ARCH_CHIP_STM32F102CB && y) || (ARCH_CHIP_STM32F103C8 && y) || (ARCH_CHIP_STM32F103CB && y) || (ARCH_CHIP_STM32F103R8 && y) || (ARCH_CHIP_STM32F103RB && y) || (ARCH_CHIP_STM32F103RC && y) || (ARCH_CHIP_STM32F103RD && y) || (ARCH_CHIP_STM32F103RE && y) || (ARCH_CHIP_STM32F103RG && y) || (ARCH_CHIP_STM32F103V8 && y) || (ARCH_CHIP_STM32F103VB && y) || (ARCH_CHIP_STM32F103VC && y) || (ARCH_CHIP_STM32F103VE && y) || (ARCH_CHIP_STM32F103ZE && y) || (ARCH_CHIP_STM32F105VB && y) || (ARCH_CHIP_STM32F105RB && y) || (ARCH_CHIP_STM32F303CB && y) || (ARCH_CHIP_STM32F303CC && y) || (ARCH_CHIP_STM32F303RB && y) || (ARCH_CHIP_STM32F303RC && y) || (ARCH_CHIP_STM32F303RD && y) || (ARCH_CHIP_STM32F303RE && y) || (ARCH_CHIP_STM32F303VB && y) || (ARCH_CHIP_STM32F303VC && y) || (STM32_STM32L15XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F302 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F37XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F4XXX && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_I2C3", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F302K6 && y) || (ARCH_CHIP_STM32F302K8 && y) || (ARCH_CHIP_STM32F303RD && y) || (ARCH_CHIP_STM32F303RE && y) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F401 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F411 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_SPI2", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F303CB && y) || (ARCH_CHIP_STM32F303CC && y) || (ARCH_CHIP_STM32F303RB && y) || (ARCH_CHIP_STM32F303RC && y) || (ARCH_CHIP_STM32F303RD && y) || (ARCH_CHIP_STM32F303RE && y) || (ARCH_CHIP_STM32F303VB && y) || (ARCH_CHIP_STM32F303VC && y) || (STM32_STM32L15XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F10XX && (STM32_HIGHDENSITY || STM32_MEDIUMDENSITY) && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_VALUELINE && STM32_HIGHDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_CONNECTIVITYLINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_USBACCESSLINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F302 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F37XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F4XXX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F401 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F411 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_SPI3", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F303CB && y) || (ARCH_CHIP_STM32F303CC && y) || (ARCH_CHIP_STM32F303RB && y) || (ARCH_CHIP_STM32F303RC && y) || (ARCH_CHIP_STM32F303RD && y) || (ARCH_CHIP_STM32F303RE && y) || (ARCH_CHIP_STM32F303VB && y) || (ARCH_CHIP_STM32F303VC && y) || (STM32_STM32L15XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F10XX && (STM32_HIGHDENSITY || STM32_MEDIUMDENSITY) && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_VALUELINE && STM32_HIGHDENSITY && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_CONNECTIVITYLINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F205 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F207 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F302 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F37XX && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F401 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F411 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_I2S3", "value": "n", "user_value": null, "rev_dep": "(STM32_STM32F401 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F411 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F405 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F407 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_SPI4", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F303RD && y) || (ARCH_CHIP_STM32F303RE && y) || (STM32_STM32F411 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_SPI5", "value": "n", "user_value": null, "rev_dep": "(STM32_STM32F410 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F411 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_SPI6", "value": "n", "user_value": null, "rev_dep": "(STM32_STM32F427 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_SAIPLL", "value": "n", "user_value": null, "rev_dep": "(STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_I2SPLL", "value": "n", "user_value": null, "rev_dep": "(STM32_STM32F446 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_STM32F469 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_OPAMP1", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_OPAMP2", "value": "n", "user_value": null, "rev_dep": "STM32_STM32F33XX && ARCH_CHIP_STM32 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_OPAMP3", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_OPAMP4", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_ADC", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC1_DMA", "cond": "STM32_STM32F10XX && STM32_DMA1 && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC1_DMA", "cond": "STM32_STM32F37XX && STM32_DMA1 && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC1_DMA", "cond": "!STM32_STM32F10XX && STM32_DMA2 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC2", "cond": "STM32_HAVE_ADC2 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_ADC2 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_ADC", "cond": "STM32_HAVE_ADC2 && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC2_DMA", "cond": "STM32_DMA2 && STM32_HAVE_ADC2 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC3", "cond": "STM32_HAVE_ADC3 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_ADC3 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_ADC", "cond": "STM32_HAVE_ADC3 && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC3_DMA", "cond": "STM32_DMA2 && STM32_HAVE_ADC3 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_ADC4", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC4", "cond": "STM32_HAVE_ADC4 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_ADC4 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_ADC", "cond": "STM32_HAVE_ADC4 && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_ADC4_DMA", "cond": "STM32_DMA2 && STM32_HAVE_ADC4 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_SDADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "SDADC1", "cond": "STM32_HAVE_SDADC1 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_SDADC1 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_SDADC", "cond": "STM32_HAVE_SDADC1 && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SDADC1_DMA", "cond": "STM32_DMA2 && STM32_HAVE_SDADC1 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_SDADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "SDADC2", "cond": "STM32_HAVE_SDADC2 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_SDADC2 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_SDADC", "cond": "STM32_HAVE_SDADC2 && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SDADC2_DMA", "cond": "STM32_DMA2 && STM32_HAVE_SDADC2 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_SDADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "SDADC3", "cond": "STM32_HAVE_SDADC3 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_SDADC3 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_SDADC", "cond": "STM32_HAVE_SDADC3 && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_HAVE_SDADC3_DMA", "cond": "STM32_DMA2 && STM32_HAVE_SDADC3 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_COMP", "value": "n", "user_value": null, "dep": "n", "prompt": "COMP", "cond": "STM32_STM32L15XX && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32L15XX && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_COMP1", "value": "n", "user_value": null, "dep": "n", "prompt": "COMP1", "cond": "STM32_HAVE_COMP1 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_COMP1 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_COMP2", "value": "n", "user_value": null, "dep": "n", "prompt": "COMP2", "cond": "STM32_HAVE_COMP2 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_COMP2 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_COMP3", "value": "n", "user_value": null, "dep": "n", "prompt": "COMP3", "cond": "STM32_HAVE_COMP3 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_COMP3 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_COMP4", "value": "n", "user_value": null, "dep": "n", "prompt": "COMP4", "cond": "STM32_HAVE_COMP4 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_COMP4 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_COMP5", "value": "n", "user_value": null, "dep": "n", "prompt": "COMP5", "cond": "STM32_HAVE_COMP5 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_COMP5 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_COMP6", "value": "n", "user_value": null, "dep": "n", "prompt": "COMP6", "cond": "STM32_HAVE_COMP6 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_COMP6 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_COMP7", "value": "n", "user_value": null, "dep": "n", "prompt": "COMP7", "cond": "STM32_HAVE_COMP6 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_COMP6 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_BKP", "value": "n", "user_value": null, "dep": "n", "prompt": "BKP", "cond": "STM32_STM32F10XX && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32F10XX && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_BKPSRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable BKP RAM Domain", "cond": "(STM32_STM32F207 || STM32_STM32F4XXX) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(STM32_STM32F207 || STM32_STM32F4XXX) && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_CAN1", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN1", "cond": "STM32_HAVE_CAN1 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_CAN1 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "CAN", "cond": "STM32_HAVE_CAN1 && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_CAN", "cond": "STM32_HAVE_CAN1 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_CAN2", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN2", "cond": "STM32_HAVE_CAN2 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_CAN2 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "CAN", "cond": "STM32_HAVE_CAN2 && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_CAN", "cond": "STM32_HAVE_CAN2 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_CCMDATARAM", "value": "n", "user_value": null, "dep": "n", "prompt": "CMD/DATA RAM", "cond": "STM32_STM32F4XXX && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32F4XXX && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_AES", "value": "n", "user_value": null, "dep": "n", "prompt": "128-bit AES", "cond": "STM32_HAVE_AES && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_AES && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "CRYPTO_AES192_DISABLE", "cond": "CRYPTO_ALGTEST && STM32_HAVE_AES && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "CRYPTO_AES256_DISABLE", "cond": "CRYPTO_ALGTEST && STM32_HAVE_AES && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_CEC", "value": "n", "user_value": null, "dep": "n", "prompt": "CEC", "cond": "STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_CRC", "value": "n", "user_value": null, "dep": "n", "prompt": "CRC", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_CRYP", "value": "n", "user_value": null, "dep": "n", "prompt": "CRYP", "cond": "(STM32_STM32F207 || STM32_STM32F4XXX) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(STM32_STM32F207 || STM32_STM32F4XXX) && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_DMA1", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_DMA", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_DMA2", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA2", "cond": "(!STM32_VALUELINE || (STM32_VALUELINE && STM32_HIGHDENSITY)) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(!STM32_VALUELINE || (STM32_VALUELINE && STM32_HIGHDENSITY)) && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_DMA", "cond": "(!STM32_VALUELINE || (STM32_VALUELINE && STM32_HIGHDENSITY)) && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC1", "cond": "STM32_HAVE_DAC1 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_DAC1 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_DAC", "cond": "STM32_HAVE_DAC1 && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_DAC1CH1", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC1CH1", "cond": "STM32_DAC1 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_DAC1 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_DAC1CH2", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC1CH2", "cond": "STM32_DAC1 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_DAC1 && ARCH_CHIP_STM32 && ARCH_ARM"}]}]}, {"type": 3, "name": "STM32_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC2", "cond": "STM32_HAVE_DAC2 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_DAC2 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_DAC", "cond": "STM32_HAVE_DAC2 && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_DAC2CH1", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC2CH1", "cond": "STM32_DAC2 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_DAC2 && ARCH_CHIP_STM32 && ARCH_ARM"}]}]}, {"type": 3, "name": "STM32_DCMI", "value": "n", "user_value": null, "dep": "n", "prompt": "DCMI", "cond": "(STM32_STM32F207 || STM32_STM32F4XXX) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(STM32_STM32F207 || STM32_STM32F4XXX) && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_ETHMAC", "value": "n", "user_value": null, "dep": "n", "prompt": "Ethernet MAC", "cond": "STM32_HAVE_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "NETDEVICES", "cond": "STM32_HAVE_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_PHY", "cond": "STM32_HAVE_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_FSMC", "value": "n", "user_value": null, "dep": "n", "prompt": "FSMC", "cond": "STM32_HAVE_FSMC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_FSMC && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HASH", "value": "n", "user_value": null, "dep": "n", "prompt": "HASH", "cond": "(STM32_STM32F207 || STM32_STM32F4XXX) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(STM32_STM32F207 || STM32_STM32F4XXX) && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HRTIM1", "value": "n", "user_value": null, "dep": "n", "prompt": "HRTIM1", "cond": "STM32_HAVE_HRTIM1 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_HRTIM1 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_I2C1", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_I2C", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_I2C2", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C2", "cond": "STM32_HAVE_I2C2 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_I2C2 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_I2C", "cond": "STM32_HAVE_I2C2 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_I2C3", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C3", "cond": "STM32_HAVE_I2C3 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_I2C3 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_I2C", "cond": "STM32_HAVE_I2C3 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_LTDC", "value": "n", "user_value": null, "dep": "n", "prompt": "LTDC", "cond": "STM32_HAVE_LTDC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_LTDC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "The STM32 LTDC is an LCD-TFT Display Controller available on\nthe STM32F429 and STM32F439 devices.  It is a standard parallel\nvideo interface (HSYNC, VSYNC, etc.) for controlling TFT\nLCD displays."}, {"type": 3, "name": "STM32_DMA2D", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA2D", "cond": "STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32F429 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "The STM32 DMA2D is an Chrom-Art Accelerator for image manipulation\navailable on the STM32F429 and STM32F439 devices."}, {"type": 3, "name": "STM32_OPAMP", "value": "n", "user_value": null, "dep": "n", "prompt": "OPAMP", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_OPAMP1", "value": "n", "user_value": null, "dep": "n", "prompt": "OPAMP1", "cond": "STM32_HAVE_OPAMP1 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_OPAMP1 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_OPAMP2", "value": "n", "user_value": null, "dep": "n", "prompt": "OPAMP2", "cond": "STM32_HAVE_OPAMP2 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_OPAMP2 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_OPAMP3", "value": "n", "user_value": null, "dep": "n", "prompt": "OPAMP3", "cond": "STM32_HAVE_OPAMP3 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_OPAMP3 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_OPAMP4", "value": "n", "user_value": null, "dep": "n", "prompt": "OPAMP4", "cond": "STM32_HAVE_OPAMP4 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_OPAMP4 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_OTGFS", "value": "n", "user_value": null, "dep": "n", "prompt": "OTG FS", "cond": "STM32_HAVE_OTGFS && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_OTGFS && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "USBHOST_HAVE_ASYNCH", "cond": "USBHOST && STM32_HAVE_OTGFS && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_OTGHS", "value": "n", "user_value": null, "dep": "n", "prompt": "OTG HS", "cond": "(STM32_STM32F205 || STM32_STM32F207 || STM32_STM32F4XXX || STM32_STM32F429) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(STM32_STM32F205 || STM32_STM32F207 || STM32_STM32F4XXX || STM32_STM32F429) && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "USBHOST_HAVE_ASYNCH", "cond": "USBHOST && (STM32_STM32F205 || STM32_STM32F207 || STM32_STM32F4XXX || STM32_STM32F429) && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_PWR", "value": "n", "user_value": null, "dep": "n", "prompt": "PWR", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_RNG", "value": "n", "user_value": null, "dep": "n", "prompt": "RNG", "cond": "STM32_HAVE_RNG && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_RNG && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_RNG", "cond": "STM32_HAVE_RNG && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_SDIO", "value": "n", "user_value": null, "dep": "n", "prompt": "SDIO", "cond": "!STM32_CONNECTIVITYLINE && !STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!STM32_CONNECTIVITYLINE && !STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SDIO", "cond": "!STM32_CONNECTIVITYLINE && !STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SDIOWAIT_WRCOMPLETE", "cond": "!STM32_CONNECTIVITYLINE && !STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "SDIO_PREFLIGHT", "cond": "!STM32_CONNECTIVITYLINE && !STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_SPI1", "value": "n", "user_value": null, "rev_dep": "STM32F103MINIMUM_FLASH && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM", "dep": "n", "prompt": "SPI1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_SPI", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_SPI2", "value": "n", "user_value": null, "rev_dep": "(CLICKER2_STM32_MB2_SPI && ARCH_BOARD_CLICKER2_STM32 && ARCH_BOARD_CLICKER2_STM32) || (SPARK_FLASH && ARCH_BOARD_SPARK && ARCH_BOARD_SPARK)", "dep": "n", "prompt": "SPI2", "cond": "STM32_HAVE_SPI2 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_SPI2 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "STM32_HAVE_SPI2 && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_SPI", "cond": "STM32_HAVE_SPI2 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_SPI3", "value": "n", "user_value": null, "rev_dep": "(CLICKER2_STM32_MB1_SPI && ARCH_BOARD_CLICKER2_STM32 && ARCH_BOARD_CLICKER2_STM32) || (MIKROE_FLASH && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4)", "dep": "n", "prompt": "SPI3", "cond": "STM32_HAVE_SPI3 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_SPI3 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "STM32_HAVE_SPI3 && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_SPI", "cond": "STM32_HAVE_SPI3 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_I2S3", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S3", "cond": "STM32_HAVE_I2S3 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_I2S3 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "I2S", "cond": "STM32_HAVE_I2S3 && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_I2S", "cond": "STM32_HAVE_I2S3 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_SPI4", "value": "n", "user_value": null, "rev_dep": "STM32F429I_DISCO_FLASH && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "dep": "n", "prompt": "SPI4", "cond": "STM32_HAVE_SPI4 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_SPI4 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "STM32_HAVE_SPI4 && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_SPI", "cond": "STM32_HAVE_SPI4 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_SPI5", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI5", "cond": "STM32_HAVE_SPI5 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_SPI5 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "STM32_HAVE_SPI5 && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_SPI", "cond": "STM32_HAVE_SPI5 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_SPI6", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI6", "cond": "STM32_HAVE_SPI6 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_SPI6 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "STM32_HAVE_SPI6 && ARCH_CHIP_STM32 && ARCH_ARM"}, {"symbol": "STM32_SPI", "cond": "STM32_HAVE_SPI6 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_SYSCFG", "value": "n", "user_value": null, "dep": "n", "prompt": "SYSCFG", "cond": "(STM32_STM32L15XX || STM32_STM32F30XX || STM32_STM32F37XX || STM32_STM32F207 || STM32_STM32F4XXX || STM32_CONNECTIVITYLINE) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "(STM32_STM32L15XX || STM32_STM32F30XX || STM32_STM32F37XX || STM32_STM32F207 || STM32_STM32F4XXX || STM32_CONNECTIVITYLINE) && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1", "cond": "STM32_HAVE_TIM1 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM1 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3", "cond": "STM32_HAVE_TIM3 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM3 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4", "cond": "STM32_HAVE_TIM4 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM4 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM5", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5", "cond": "STM32_HAVE_TIM5 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM5 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM6", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM6", "cond": "STM32_HAVE_TIM6 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM6 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM7", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM7", "cond": "STM32_HAVE_TIM7 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM7 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM8", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8", "cond": "STM32_HAVE_TIM8 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM8 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM9", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9", "cond": "STM32_HAVE_TIM9 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM9 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM10", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10", "cond": "STM32_HAVE_TIM10 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM10 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM11", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11", "cond": "STM32_HAVE_TIM11 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM11 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM12", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12", "cond": "STM32_HAVE_TIM12 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM12 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM13", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13", "cond": "STM32_HAVE_TIM13 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM13 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM14", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14", "cond": "STM32_HAVE_TIM14 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM14 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM15", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM15", "cond": "STM32_HAVE_TIM15 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM15 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM16", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM16", "cond": "STM32_HAVE_TIM16 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM16 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM17", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM17", "cond": "STM32_HAVE_TIM17 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM17 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TSC", "value": "n", "user_value": null, "dep": "n", "prompt": "TSC", "cond": "STM32_STM32F30XX && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32F30XX && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_USART1", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_USART", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_USART2", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_USART", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_USART3", "value": "n", "user_value": null, "dep": "n", "prompt": "USART3", "cond": "STM32_HAVE_USART3 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_USART3 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_USART", "cond": "STM32_HAVE_USART3 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_UART4", "value": "n", "user_value": null, "dep": "n", "prompt": "UART4", "cond": "STM32_HAVE_UART4 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_UART4 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_USART", "cond": "STM32_HAVE_UART4 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_UART5", "value": "n", "user_value": null, "dep": "n", "prompt": "UART5", "cond": "STM32_HAVE_UART5 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_UART5 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_USART", "cond": "STM32_HAVE_UART5 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_USART6", "value": "n", "user_value": null, "dep": "n", "prompt": "USART6", "cond": "STM32_HAVE_USART6 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_USART6 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_USART", "cond": "STM32_HAVE_USART6 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_UART7", "value": "n", "user_value": null, "dep": "n", "prompt": "UART7", "cond": "STM32_HAVE_UART7 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_UART7 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_USART", "cond": "STM32_HAVE_UART7 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_UART8", "value": "n", "user_value": null, "dep": "n", "prompt": "UART8", "cond": "STM32_HAVE_UART8 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_UART8 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "STM32_USART", "cond": "STM32_HAVE_UART8 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_USB", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Device", "cond": "STM32_HAVE_USBDEV && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_USBDEV && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "USBDEV", "cond": "STM32_HAVE_USBDEV && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_LCD", "value": "n", "user_value": null, "dep": "n", "prompt": "Segment LCD", "cond": "STM32_STM32L15XX && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32L15XX && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_IWDG", "value": "n", "user_value": null, "dep": "n", "prompt": "IWDG", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "WATCHDOG", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_WWDG", "value": "n", "user_value": null, "dep": "n", "prompt": "WWDG", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "WATCHDOG", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}]}, {"type": 3, "name": "STM32_ADC", "value": "n", "user_value": null, "rev_dep": "(STM32_ADC1 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_ADC2 && STM32_HAVE_ADC2 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_ADC3 && STM32_HAVE_ADC3 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_ADC4 && STM32_HAVE_ADC4 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "STM32_SDADC", "value": "n", "user_value": null, "rev_dep": "(STM32_SDADC1 && STM32_HAVE_SDADC1 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_SDADC2 && STM32_HAVE_SDADC2 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_SDADC3 && STM32_HAVE_SDADC3 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "STM32_DAC", "value": "n", "user_value": null, "rev_dep": "(STM32_DAC1 && STM32_HAVE_DAC1 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_DAC2 && STM32_HAVE_DAC2 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "STM32_SPI", "value": "n", "user_value": null, "rev_dep": "(STM32_SPI1 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_SPI2 && STM32_HAVE_SPI2 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_SPI3 && STM32_HAVE_SPI3 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_SPI4 && STM32_HAVE_SPI4 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_SPI5 && STM32_HAVE_SPI5 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_SPI6 && STM32_HAVE_SPI6 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "STM32_I2C", "value": "n", "user_value": null, "rev_dep": "(STM32_I2C1 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_I2C2 && STM32_HAVE_I2C2 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_I2C3 && STM32_HAVE_I2C3 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "STM32_CAN", "value": "n", "user_value": null, "rev_dep": "(STM32_CAN1 && STM32_HAVE_CAN1 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_CAN2 && STM32_HAVE_CAN2 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "STM32_NOEXT_VECTORS", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable the ARMv7-M EXT vectors", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Sometimes you may not need any Vector support beyond SysTick\nand wish to save memory. This applies only to ARMv7-M architectures."}, {"type": 31, "dep": "n", "prompt": "Alternate Pin Mapping", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "CAN1 Alternate Pin Mappings", "cond": "STM32_STM32F10XX && STM32_CAN1 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_CAN1_NO_REMAP", "default": "n", "cond": "STM32_STM32F10XX && STM32_CAN1 && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_CAN1_NO_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "No pin remapping", "cond": "y"}, {"type": 3, "name": "STM32_CAN1_REMAP1", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN1 alternate pin remapping #1", "cond": "y"}, {"type": 3, "name": "STM32_CAN1_REMAP2", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN1 alternate pin remapping #2", "cond": "y"}]}, {"type": 3, "name": "STM32_CAN2_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN2 Alternate Pin Mapping", "cond": "STM32_CONNECTIVITYLINE && STM32_CAN2 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_CONNECTIVITYLINE && STM32_CAN2 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_CEC_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "CEC Alternate Pin Mapping", "cond": "STM32_STM32F10XX && STM32_CEC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32F10XX && STM32_CEC && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_ETH_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Ethernet Alternate Pin Mapping", "cond": "STM32_CONNECTIVITYLINE && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_CONNECTIVITYLINE && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_I2C1_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C1 Alternate Pin Mapping", "cond": "STM32_STM32F10XX && STM32_I2C1 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32F10XX && STM32_I2C1 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_SPI1_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI1 Alternate Pin Mapping", "cond": "STM32_STM32F10XX && STM32_SPI1 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32F10XX && STM32_SPI1 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_SPI3_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI3 Alternate Pin Mapping", "cond": "STM32_STM32F10XX && STM32_SPI3 && !STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32F10XX && STM32_SPI3 && !STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_I2S3_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S3 Alternate Pin Mapping", "cond": "STM32_STM32F10XX && STM32_I2S3 && !STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32F10XX && STM32_I2S3 && !STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "TIM1 Alternate Pin Mappings", "cond": "STM32_STM32F10XX && STM32_TIM1 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM1_NO_REMAP", "default": "n", "cond": "STM32_STM32F10XX && STM32_TIM1 && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM1_NO_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "No pin remapping", "cond": "y"}, {"type": 3, "name": "STM32_TIM1_FULL_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Full pin remapping", "cond": "y"}, {"type": 3, "name": "STM32_TIM1_PARTIAL_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Partial pin remapping", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "TIM2 Alternate Pin Mappings", "cond": "STM32_STM32F10XX && STM32_TIM2 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM2_NO_REMAP", "default": "n", "cond": "STM32_STM32F10XX && STM32_TIM2 && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM2_NO_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "No pin remapping", "cond": "y"}, {"type": 3, "name": "STM32_TIM2_FULL_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Full pin remapping", "cond": "y"}, {"type": 3, "name": "STM32_TIM2_PARTIAL_REMAP_1", "value": "n", "user_value": null, "dep": "n", "prompt": "Partial pin remapping #1", "cond": "y"}, {"type": 3, "name": "STM32_TIM2_PARTIAL_REMAP_2", "value": "n", "user_value": null, "dep": "n", "prompt": "Partial pin remapping #2", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "TIM3 Alternate Pin Mappings", "cond": "STM32_STM32F10XX && STM32_TIM3 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM3_NO_REMAP", "default": "n", "cond": "STM32_STM32F10XX && STM32_TIM3 && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM3_NO_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "No pin remapping", "cond": "y"}, {"type": 3, "name": "STM32_TIM3_FULL_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Full pin remapping", "cond": "y"}, {"type": 3, "name": "STM32_TIM3_PARTIAL_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Partial pin remapping", "cond": "y"}]}, {"type": 3, "name": "STM32_TIM4_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Alternate Pin Mapping", "cond": "STM32_STM32F10XX && STM32_TIM4 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32F10XX && STM32_TIM4 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM9_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 Alternate Pin Mapping", "cond": "STM32_STM32F10XX && STM32_TIM9 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32F10XX && STM32_TIM9 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM10_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 Alternate Pin Mapping", "cond": "STM32_STM32F10XX && STM32_TIM10 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32F10XX && STM32_TIM10 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM11_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 Alternate Pin Mapping", "cond": "STM32_STM32F10XX && STM32_TIM11 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32F10XX && STM32_TIM11 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM12_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 Alternate Pin Mapping", "cond": "STM32_STM32F10XX && STM32_TIM12 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32F10XX && STM32_TIM12 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM13_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 Alternate Pin Mapping", "cond": "STM32_STM32F10XX && STM32_TIM13 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32F10XX && STM32_TIM13 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM14_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 Alternate Pin Mapping", "cond": "STM32_STM32F10XX && STM32_TIM14 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32F10XX && STM32_TIM14 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM15_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM15 Alternate Pin Mapping", "cond": "STM32_STM32F10XX && STM32_TIM15 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32F10XX && STM32_TIM15 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM16_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM16 Alternate Pin Mapping", "cond": "STM32_STM32F10XX && STM32_TIM16 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32F10XX && STM32_TIM16 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_TIM17_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM17 Alternate Pin Mapping", "cond": "STM32_STM32F10XX && STM32_TIM17 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32F10XX && STM32_TIM17 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_USART1_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1 Alternate Pin Mapping", "cond": "STM32_STM32F10XX && STM32_USART1 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32F10XX && STM32_USART1 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_USART2_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2 Alternate Pin Mapping", "cond": "STM32_STM32F10XX && STM32_USART2 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_STM32F10XX && STM32_USART2 && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USART3 Alternate Pin Mappings", "cond": "STM32_STM32F10XX && STM32_USART3 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_USART3_NO_REMAP", "default": "n", "cond": "STM32_STM32F10XX && STM32_USART3 && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_USART3_NO_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "No pin remapping", "cond": "y"}, {"type": 3, "name": "STM32_USART3_FULL_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Full pin remapping", "cond": "y"}, {"type": 3, "name": "STM32_USART3_PARTIAL_REMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Partial pin remapping", "cond": "y"}]}]}, {"type": 3, "name": "STM32_FLASH_PREFETCH", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable FLASH Pre-fetch", "cond": "(STM32_STM32F207 || STM32_STM32F4XXX) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "(STM32_STM32F427 || STM32_STM32F429 || STM32_STM32F446) && (STM32_STM32F207 || STM32_STM32F4XXX) && ARCH_CHIP_STM32 && ARCH_ARM"}, {"name": "n", "default": "n", "cond": "(STM32_STM32F207 || STM32_STM32F4XXX) && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable FLASH prefetch and F2 and F4 parts (FLASH pre-fetch is always enabled\non F1 parts).  Some early revisions of F4 parts do not support FLASH pre-fetch\nproperly and enabling this option may interfere with ADC accuracy."}, {"type": 3, "name": "STM32_FLASH_WORKAROUND_DATA_CACHE_CORRUPTION_ON_RWW", "value": "n", "user_value": null, "dep": "n", "prompt": "Workaround for FLASH data cache corruption", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable the workaround to fix flash data cache corruption when reading\nfrom one flash bank while writing on other flash bank.  See your STM32\nerrata to check if your STM32 is affected by this problem."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "JTAG Configuration", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_JTAG_DISABLE", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "JTAG Enable settings (by default JTAG-DP and SW-DP are disabled)", "children": [{"type": 3, "name": "STM32_JTAG_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable all JTAG clocking", "cond": "y"}, {"type": 3, "name": "STM32_JTAG_FULL_ENABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable full SWJ (JTAG-DP + SW-DP)", "cond": "y"}, {"type": 3, "name": "STM32_JTAG_NOJNTRST_ENABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable full SWJ (JTAG-DP + SW-DP) but without JNTRST", "cond": "y"}, {"type": 3, "name": "STM32_JTAG_SW_ENABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Set JTAG-DP disabled and SW-DP enabled", "cond": "y"}]}, {"type": 3, "name": "STM32_DISABLE_IDLE_SLEEP_DURING_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable IDLE Sleep (WFI) in debug mode", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "In debug configuration, disables the WFI instruction in the IDLE loop\nto prevent the JTAG from disconnecting.  With some JTAG debuggers, such\nas the ST-LINK2 with OpenOCD, if the ARM is put to sleep via the WFI\ninstruction, the debugger will disconnect, terminating the debug session."}, {"type": 3, "name": "STM32_FORCEPOWER", "value": "n", "user_value": null, "dep": "n", "prompt": "Force power", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Timer and I2C devices may need to the following to force power to be applied\nunconditionally at power up.  (Otherwise, the device is powered when it is\ninitialized)."}, {"type": 3, "name": "ARCH_BOARD_STM32_CUSTOM_CLOCKCONFIG", "value": "n", "user_value": null, "dep": "n", "prompt": "Custom clock configuration", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables special, board-specific STM32 clock configuration."}, {"type": 3, "name": "STM32_SAIPLL", "value": "n", "user_value": null, "dep": "n", "prompt": "SAIPLL", "cond": "STM32_HAVE_SAIPLL && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_SAIPLL && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "The STM32F446 has a separate PLL for the SAI block.\nSet this true and provide configuration parameters in\nboard.h to use this PLL."}, {"type": 3, "name": "STM32_I2SPLL", "value": "n", "user_value": null, "dep": "n", "prompt": "I2SPLL", "cond": "STM32_HAVE_I2SPLL && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_I2SPLL && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "The STM32F446 has a separate PLL for the I2S block.\nSet this true and provide configuration parameters in\nboard.h to use this PLL."}, {"type": 3, "name": "STM32_CCMEXCLUDE", "value": "n", "user_value": null, "dep": "n", "prompt": "Exclude CCM SRAM from the heap", "cond": "STM32_HAVE_CCM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "(ARCH_DMA || ELF) && STM32_HAVE_CCM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Exclude CCM SRAM from the HEAP because (1) it cannot be used for DMA\nand (2) it appears to be impossible to execute ELF modules from CCM\nRAM."}, {"type": 3, "name": "STM32_CCM_PROCFS", "value": "n", "user_value": null, "dep": "n", "prompt": "CCM PROCFS support", "cond": "!DISABLE_MOUNTPOINT && FS_PROCFS && FS_PROCFS_REGISTER && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!DISABLE_MOUNTPOINT && FS_PROCFS && FS_PROCFS_REGISTER && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Select to build in support for /proc/ccm.  Reading from /proc/ccm\nwill provide statistics about CCM memory use similar to what you\nwould get from mallinfo() for the user heap."}, {"type": 3, "name": "STM32_DMACAPABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Workaround non-DMA capable memory", "cond": "ARCH_DMA && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "STM32_STM32F4XXX && !STM32_CCMEXCLUDE && ARCH_DMA && ARCH_CHIP_STM32 && ARCH_ARM"}, {"name": "n", "default": "n", "cond": "(!STM32_STM32F4XXX || STM32_CCMEXCLUDE) && ARCH_DMA && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "This option enables the DMA interface stm32_dmacapable that can be\nused to check if it is possible to do DMA from the selected address.\nDrivers then may use this information to determine if they should\nattempt the DMA or fall back to a different transfer method."}, {"type": 3, "name": "STM32_FSMC_SRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "External SRAM on FSMC", "cond": "STM32_FSMC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_FSMC && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_HEAP2", "cond": "STM32_FSMC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "In addition to internal SRAM, SRAM may also be available through the FSMC."}, {"type": 31, "dep": "n", "prompt": "Timer Configuration", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "children": [{"type": 27, "name": "STM32_TICKLESS_TIMER", "value": "", "user_value": null, "dep": "n", "prompt": "Tickless hardware timer", "cond": "SCHED_TICKLESS && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "SCHED_TICKLESS && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "14", "cond": "SCHED_TICKLESS && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If the Tickless OS feature is enabled, then one clock must be\nassigned to provided the timer needed by the OS."}, {"type": 27, "name": "STM32_TICKLESS_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "Tickless timer channel", "cond": "SCHED_TICKLESS && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "SCHED_TICKLESS && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "SCHED_TICKLESS && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If the Tickless OS feature is enabled, the one clock must be\nassigned to provided the free-running timer needed by the OS\nand one channel on that clock is needed to handle intervals."}, {"type": 3, "name": "STM32_ONESHOT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM one-shot wrapper", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable a wrapper around the low level timer/counter functions to\nsupport one-shot timer."}, {"type": 3, "name": "STM32_FREERUN", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM free-running wrapper", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable a wrapper around the low level timer/counter functions to\nsupport a free-running timer."}, {"type": 27, "name": "STM32_ONESHOT_MAXTIMERS", "value": "", "user_value": null, "dep": "n", "prompt": "Maximum number of oneshot timers", "cond": "STM32_ONESHOT && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "STM32_ONESHOT && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "8", "cond": "STM32_ONESHOT && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Determines the maximum number of oneshot timers that can be\nsupported.  This setting pre-allocates some minimal support for each\nof the timers and places an upper limit on the number of oneshot\ntimers that you can use."}, {"type": 3, "name": "STM32_TIM1_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 PWM", "cond": "STM32_TIM1 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM1 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32_TIM1 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 1 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32_TIM1\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "STM32_TIM1_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 Mode", "cond": "STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the timer mode."}, {"type": 3, "name": "STM32_TIM1_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 1", "cond": "STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32_TIM1_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 1 Mode", "cond": "STM32_TIM1_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM1_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM1_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM1_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM1_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 1 Output", "cond": "STM32_TIM1_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM1_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32_TIM1_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 2", "cond": "STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32_TIM1_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 2 Mode", "cond": "STM32_TIM1_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM1_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM1_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM1_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM1_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 2 Output", "cond": "STM32_TIM1_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM1_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32_TIM1_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 3", "cond": "STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32_TIM1_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 3 Mode", "cond": "STM32_TIM1_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM1_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM1_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM1_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM1_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 3 Output", "cond": "STM32_TIM1_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM1_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32_TIM1_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 4", "cond": "STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32_TIM1_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 4 Mode", "cond": "STM32_TIM1_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM1_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM1_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM1_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM1_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 4 Output", "cond": "STM32_TIM1_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM1_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32_TIM1_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 PWM Output Channel", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If TIM1 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32_TIM1_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 Channel Mode", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM1_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32_TIM2_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 PWM", "cond": "STM32_TIM2 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM2 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32_TIM2 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 2 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32_TIM2\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "STM32_TIM2_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 Mode", "cond": "STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the timer mode."}, {"type": 3, "name": "STM32_TIM2_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 1", "cond": "STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32_TIM2_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 1 Mode", "cond": "STM32_TIM2_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM2_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM2_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM2_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM2_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 1 Output", "cond": "STM32_TIM2_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM2_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32_TIM2_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 2", "cond": "STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32_TIM2_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 2 Mode", "cond": "STM32_TIM2_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM2_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM2_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM2_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM2_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 2 Output", "cond": "STM32_TIM2_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM2_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32_TIM2_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 3", "cond": "STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32_TIM2_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 3 Mode", "cond": "STM32_TIM2_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM2_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM2_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM2_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM2_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 3 Output", "cond": "STM32_TIM2_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM2_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32_TIM2_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 4", "cond": "STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32_TIM2_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 4 Mode", "cond": "STM32_TIM2_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM2_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM2_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM2_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM2_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 4 Output", "cond": "STM32_TIM2_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM2_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32_TIM2_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 PWM Output Channel", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If TIM2 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32_TIM2_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 Channel Mode", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM2_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32_TIM3_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 PWM", "cond": "STM32_TIM3 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM3 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32_TIM3 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 3 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32_TIM3\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "STM32_TIM3_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 Mode", "cond": "STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the timer mode."}, {"type": 3, "name": "STM32_TIM3_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 1", "cond": "STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32_TIM3_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 1 Mode", "cond": "STM32_TIM3_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM3_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM3_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM3_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM3_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 1 Output", "cond": "STM32_TIM3_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM3_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32_TIM3_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 2", "cond": "STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32_TIM3_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 2 Mode", "cond": "STM32_TIM3_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM3_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM3_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM3_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM3_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 2 Output", "cond": "STM32_TIM3_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM3_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32_TIM3_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 3", "cond": "STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32_TIM3_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 3 Mode", "cond": "STM32_TIM3_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM3_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM3_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM3_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM3_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 3 Output", "cond": "STM32_TIM3_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM3_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32_TIM3_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 4", "cond": "STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32_TIM3_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 4 Mode", "cond": "STM32_TIM3_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM3_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM3_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM3_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM3_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 4 Output", "cond": "STM32_TIM3_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM3_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32_TIM3_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 PWM Output Channel", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If TIM3 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32_TIM3_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 Channel Mode", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM3_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32_TIM4_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 PWM", "cond": "STM32_TIM4 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM4 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32_TIM4 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 4 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32_TIM4\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "STM32_TIM4_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 Mode", "cond": "STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the timer mode."}, {"type": 3, "name": "STM32_TIM4_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 1", "cond": "STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32_TIM4_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 1 Mode", "cond": "STM32_TIM4_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM4_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM4_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM4_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM4_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 1 Output", "cond": "STM32_TIM4_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM4_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32_TIM4_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 2", "cond": "STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32_TIM4_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 2 Mode", "cond": "STM32_TIM4_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM4_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM4_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM4_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM4_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 2 Output", "cond": "STM32_TIM4_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM4_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32_TIM4_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 3", "cond": "STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32_TIM4_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 3 Mode", "cond": "STM32_TIM4_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM4_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM4_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM4_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM4_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 3 Output", "cond": "STM32_TIM4_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM4_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32_TIM4_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 4", "cond": "STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32_TIM4_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 4 Mode", "cond": "STM32_TIM4_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM4_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM4_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM4_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM4_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 4 Output", "cond": "STM32_TIM4_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM4_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32_TIM4_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 PWM Output Channel", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If TIM4 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32_TIM4_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 Channel Mode", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM4_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32_TIM5_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 PWM", "cond": "STM32_TIM5 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM5 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32_TIM5 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 5 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32_TIM5\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "STM32_TIM5_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 Mode", "cond": "STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the timer mode."}, {"type": 3, "name": "STM32_TIM5_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 1", "cond": "STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32_TIM5_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 1 Mode", "cond": "STM32_TIM5_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM5_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM5_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM5_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM5_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 1 Output", "cond": "STM32_TIM5_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM5_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32_TIM5_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 2", "cond": "STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32_TIM5_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 2 Mode", "cond": "STM32_TIM5_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM5_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM5_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM5_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM5_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 2 Output", "cond": "STM32_TIM5_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM5_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32_TIM5_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 3", "cond": "STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32_TIM5_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 3 Mode", "cond": "STM32_TIM5_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM5_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM5_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM5_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM5_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 3 Output", "cond": "STM32_TIM5_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM5_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32_TIM5_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 4", "cond": "STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32_TIM5_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 4 Mode", "cond": "STM32_TIM5_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM5_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM5_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM5_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM5_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 4 Output", "cond": "STM32_TIM5_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM5_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32_TIM5_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 PWM Output Channel", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If TIM5 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32_TIM5_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 Channel Mode", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM5_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32_TIM8_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 PWM", "cond": "STM32_TIM8 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM8 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32_TIM8 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 8 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32_TIM8\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "STM32_TIM8_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 Mode", "cond": "STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the timer mode."}, {"type": 3, "name": "STM32_TIM8_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 1", "cond": "STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32_TIM8_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 1 Mode", "cond": "STM32_TIM8_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM8_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM8_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM8_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM8_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 1 Output", "cond": "STM32_TIM8_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM8_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32_TIM8_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 2", "cond": "STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32_TIM8_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 2 Mode", "cond": "STM32_TIM8_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM8_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM8_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM8_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM8_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 2 Output", "cond": "STM32_TIM8_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM8_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32_TIM8_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 3", "cond": "STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32_TIM8_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 3 Mode", "cond": "STM32_TIM8_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM8_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM8_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM8_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM8_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 3 Output", "cond": "STM32_TIM8_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM8_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32_TIM8_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 4", "cond": "STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32_TIM8_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 4 Mode", "cond": "STM32_TIM8_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM8_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM8_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM8_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM8_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 4 Output", "cond": "STM32_TIM8_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM8_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32_TIM8_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 PWM Output Channel", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If TIM8 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32_TIM8_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 Channel Mode", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM8_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32_TIM9_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 PWM", "cond": "STM32_TIM9 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM9 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32_TIM9 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 9 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32_TIM9\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 3, "name": "STM32_TIM9_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 1", "cond": "STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32_TIM9_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 1 Mode", "cond": "STM32_TIM9_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM9_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM9_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM9_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM9_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 1 Output", "cond": "STM32_TIM9_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM9_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32_TIM9_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 2", "cond": "STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32_TIM9_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 2 Mode", "cond": "STM32_TIM9_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM9_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM9_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM9_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM9_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 2 Output", "cond": "STM32_TIM9_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM9_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32_TIM9_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 3", "cond": "STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32_TIM9_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 3 Mode", "cond": "STM32_TIM9_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM9_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM9_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM9_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM9_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 3 Output", "cond": "STM32_TIM9_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM9_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32_TIM9_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 4", "cond": "STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32_TIM9_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 4 Mode", "cond": "STM32_TIM9_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM9_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM9_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM9_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM9_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 4 Output", "cond": "STM32_TIM9_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM9_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32_TIM9_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM9 PWM Output Channel", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If TIM9 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32_TIM9_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM9 Channel Mode", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM9_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32_TIM10_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 PWM", "cond": "STM32_TIM10 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM10 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32_TIM10 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 10 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32_TIM10\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 3, "name": "STM32_TIM10_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 1", "cond": "STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32_TIM10_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 1 Mode", "cond": "STM32_TIM10_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM10_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM10_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM10_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM10_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 1 Output", "cond": "STM32_TIM10_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM10_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32_TIM10_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 2", "cond": "STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32_TIM10_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 2 Mode", "cond": "STM32_TIM10_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM10_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM10_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM10_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM10_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 2 Output", "cond": "STM32_TIM10_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM10_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32_TIM10_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 3", "cond": "STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32_TIM10_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 3 Mode", "cond": "STM32_TIM10_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM10_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM10_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM10_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM10_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 3 Output", "cond": "STM32_TIM10_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM10_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32_TIM10_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 4", "cond": "STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32_TIM10_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 4 Mode", "cond": "STM32_TIM10_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM10_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM10_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM10_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM10_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 4 Output", "cond": "STM32_TIM10_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM10_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32_TIM10_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM10 PWM Output Channel", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If TIM10 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32_TIM10_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM10 Channel Mode", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM10_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32_TIM11_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 PWM", "cond": "STM32_TIM11 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM11 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32_TIM11 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 11 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32_TIM11\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 3, "name": "STM32_TIM11_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 1", "cond": "STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32_TIM11_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 1 Mode", "cond": "STM32_TIM11_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM11_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM11_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM11_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM11_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 1 Output", "cond": "STM32_TIM11_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM11_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32_TIM11_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 2", "cond": "STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32_TIM11_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 2 Mode", "cond": "STM32_TIM11_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM11_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM11_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM11_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM11_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 2 Output", "cond": "STM32_TIM11_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM11_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32_TIM11_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 3", "cond": "STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32_TIM11_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 3 Mode", "cond": "STM32_TIM11_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM11_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM11_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM11_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM11_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 3 Output", "cond": "STM32_TIM11_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM11_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32_TIM11_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 4", "cond": "STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32_TIM11_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 4 Mode", "cond": "STM32_TIM11_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM11_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM11_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM11_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM11_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 4 Output", "cond": "STM32_TIM11_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM11_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32_TIM11_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM11 PWM Output Channel", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If TIM11 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32_TIM11_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM11 Channel Mode", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM11_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32_TIM12_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 PWM", "cond": "STM32_TIM12 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM12 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32_TIM12 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 12 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32_TIM12\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 3, "name": "STM32_TIM12_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 1", "cond": "STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32_TIM12_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 1 Mode", "cond": "STM32_TIM12_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM12_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM12_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM12_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM12_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 1 Output", "cond": "STM32_TIM12_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM12_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32_TIM12_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 2", "cond": "STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32_TIM12_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 2 Mode", "cond": "STM32_TIM12_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM12_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM12_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM12_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM12_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 2 Output", "cond": "STM32_TIM12_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM12_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32_TIM12_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 3", "cond": "STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32_TIM12_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 3 Mode", "cond": "STM32_TIM12_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM12_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM12_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM12_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM12_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 3 Output", "cond": "STM32_TIM12_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM12_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32_TIM12_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 4", "cond": "STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32_TIM12_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 4 Mode", "cond": "STM32_TIM12_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM12_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM12_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM12_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM12_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 4 Output", "cond": "STM32_TIM12_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM12_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32_TIM12_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM12 PWM Output Channel", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If TIM12 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32_TIM12_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM12 Channel Mode", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM12_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32_TIM13_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 PWM", "cond": "STM32_TIM13 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM13 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32_TIM13 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 13 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32_TIM13\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 3, "name": "STM32_TIM13_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 1", "cond": "STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32_TIM13_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 1 Mode", "cond": "STM32_TIM13_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM13_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM13_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM13_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM13_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 1 Output", "cond": "STM32_TIM13_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM13_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32_TIM13_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 2", "cond": "STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32_TIM13_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 2 Mode", "cond": "STM32_TIM13_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM13_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM13_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM13_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM13_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 2 Output", "cond": "STM32_TIM13_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM13_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32_TIM13_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 3", "cond": "STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32_TIM13_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 3 Mode", "cond": "STM32_TIM13_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM13_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM13_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM13_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM13_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 3 Output", "cond": "STM32_TIM13_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM13_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32_TIM13_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 4", "cond": "STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32_TIM13_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 4 Mode", "cond": "STM32_TIM13_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM13_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM13_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM13_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM13_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 4 Output", "cond": "STM32_TIM13_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM13_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32_TIM13_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM13 PWM Output Channel", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If TIM13 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32_TIM13_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM13 Channel Mode", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM13_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32_TIM14_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 PWM", "cond": "STM32_TIM14 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM14 && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32_TIM14 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 14 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32_TIM14\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 3, "name": "STM32_TIM14_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 1", "cond": "STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32_TIM14_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 1 Mode", "cond": "STM32_TIM14_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM14_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM14_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM14_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM14_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 1 Output", "cond": "STM32_TIM14_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM14_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32_TIM14_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 2", "cond": "STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32_TIM14_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 2 Mode", "cond": "STM32_TIM14_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM14_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM14_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM14_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM14_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 2 Output", "cond": "STM32_TIM14_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM14_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32_TIM14_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 3", "cond": "STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32_TIM14_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 3 Mode", "cond": "STM32_TIM14_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM14_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM14_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM14_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM14_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 3 Output", "cond": "STM32_TIM14_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM14_CHANNEL3 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32_TIM14_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 4", "cond": "STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32_TIM14_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 4 Mode", "cond": "STM32_TIM14_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM14_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && STM32_TIM14_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM14_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM14_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 4 Output", "cond": "STM32_TIM14_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM14_CHANNEL4 && STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32_TIM14_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM14 PWM Output Channel", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If TIM14 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32_TIM14_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM14 Channel Mode", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM14_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32_TIM15_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM15 PWM", "cond": "STM32_TIM15 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM15 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 15 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32_TIM15\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 3, "name": "STM32_TIM15_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM15 Channel 1", "cond": "STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32_TIM15_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM15 Channel 1 Mode", "cond": "STM32_TIM15_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM15_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "3", "cond": "STM32_STM32F30XX && STM32_TIM15_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM15_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM15_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM15 Channel 1 Output", "cond": "STM32_TIM15_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM15_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32_TIM15_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM15 Channel 2", "cond": "STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32_TIM15_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM15 Channel 2 Mode", "cond": "STM32_TIM15_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM15_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "3", "cond": "STM32_STM32F30XX && STM32_TIM15_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && STM32_TIM15_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM15_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM15 Channel 2 Output", "cond": "STM32_TIM15_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM15_CHANNEL2 && STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 27, "name": "STM32_TIM15_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM15 PWM Output Channel", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "2", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If TIM15 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,2}"}, {"type": 27, "name": "STM32_TIM15_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM15 Channel Mode", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "3", "cond": "STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}, {"min": "0", "max": "1", "cond": "!STM32_STM32F30XX && !STM32_PWM_MULTICHAN && STM32_TIM15_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32_TIM16_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM16 PWM", "cond": "STM32_TIM16 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM16 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 16 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32_TIM16\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 3, "name": "STM32_TIM16_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM16 Channel 1", "cond": "STM32_PWM_MULTICHAN && STM32_TIM16_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM16_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32_TIM16_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM16 Channel 1 Mode", "cond": "STM32_TIM16_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM16_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM16_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM16_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "STM32_TIM16_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM16_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM16_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM16 Channel 1 Output", "cond": "STM32_TIM16_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM16_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM16_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM16_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 27, "name": "STM32_TIM16_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM16 PWM Output Channel", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM16_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM16_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "1", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM16_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If TIM16 is enabled for PWM usage, you also need specifies the timer output\nchannel {1}"}, {"type": 27, "name": "STM32_TIM16_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM16 Channel Mode", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM16_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM16_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM16_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32_TIM17_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM17 PWM", "cond": "STM32_TIM17 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM17 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 17 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32_TIM17\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 3, "name": "STM32_TIM17_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM17 Channel 1", "cond": "STM32_PWM_MULTICHAN && STM32_TIM17_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_PWM_MULTICHAN && STM32_TIM17_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32_TIM17_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM17 Channel 1 Mode", "cond": "STM32_TIM17_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM17_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_TIM17_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM17_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "STM32_TIM17_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM17_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32_TIM17_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM17 Channel 1 Output", "cond": "STM32_TIM17_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM17_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM17_CHANNEL1 && STM32_PWM_MULTICHAN && STM32_TIM17_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 27, "name": "STM32_TIM17_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM17 PWM Output Channel", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM17_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM17_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "1", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM17_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If TIM17 is enabled for PWM usage, you also need specifies the timer output\nchannel {1}"}, {"type": 27, "name": "STM32_TIM17_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM17 Channel Mode", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM17_PWM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM17_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "!STM32_PWM_MULTICHAN && STM32_TIM17_PWM && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32_PWM_MULTICHAN", "value": "n", "user_value": null, "dep": "n", "prompt": "PWM Multiple Output Channels", "cond": "(STM32_TIM1_PWM || STM32_TIM2_PWM || STM32_TIM3_PWM || STM32_TIM4_PWM || STM32_TIM5_PWM || STM32_TIM8_PWM || STM32_TIM9_PWM || STM32_TIM10_PWM || STM32_TIM11_PWM || STM32_TIM12_PWM || STM32_TIM13_PWM || STM32_TIM14_PWM || STM32_TIM15_PWM || STM32_TIM16_PWM || STM32_TIM17_PWM) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(STM32_TIM1_PWM || STM32_TIM2_PWM || STM32_TIM3_PWM || STM32_TIM4_PWM || STM32_TIM5_PWM || STM32_TIM8_PWM || STM32_TIM9_PWM || STM32_TIM10_PWM || STM32_TIM11_PWM || STM32_TIM12_PWM || STM32_TIM13_PWM || STM32_TIM14_PWM || STM32_TIM15_PWM || STM32_TIM16_PWM || STM32_TIM17_PWM) && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_MULTICHAN", "cond": "(STM32_TIM1_PWM || STM32_TIM2_PWM || STM32_TIM3_PWM || STM32_TIM4_PWM || STM32_TIM5_PWM || STM32_TIM8_PWM || STM32_TIM9_PWM || STM32_TIM10_PWM || STM32_TIM11_PWM || STM32_TIM12_PWM || STM32_TIM13_PWM || STM32_TIM14_PWM || STM32_TIM15_PWM || STM32_TIM16_PWM || STM32_TIM17_PWM) && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Specifies that the PWM driver supports multiple output\nchannels per timer."}, {"type": 3, "name": "STM32_TIM1_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 ADC", "cond": "STM32_TIM1 && STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM1 && STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 1 for use by ADC\n\nTimer devices may be used for different purposes.  If STM32_TIM1 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for ADC conversion. Note that ADC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the ADC, but then you also have to configure which ADC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM1 ADC channel", "cond": "STM32_TIM1_ADC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM1_ADC1", "default": "n", "cond": "STM32_TIM1_ADC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM1_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 ADC channel 1", "cond": "STM32_ADC1 && y", "selects": [{"symbol": "HAVE_ADC1_TIMER", "cond": "STM32_ADC1 && y"}], "help": "Reserve TIM1 to trigger ADC1"}, {"type": 3, "name": "STM32_TIM1_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 ADC channel 2", "cond": "STM32_ADC2 && y", "selects": [{"symbol": "HAVE_ADC2_TIMER", "cond": "STM32_ADC2 && y"}], "help": "Reserve TIM1 to trigger ADC2"}, {"type": 3, "name": "STM32_TIM1_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 ADC channel 3", "cond": "STM32_ADC3 && y", "selects": [{"symbol": "HAVE_ADC3_TIMER", "cond": "STM32_ADC3 && y"}], "help": "Reserve TIM1 to trigger ADC3"}]}]}, {"type": 3, "name": "STM32_TIM2_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 ADC", "cond": "STM32_TIM2 && STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM2 && STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 1 for use by ADC\n\nTimer devices may be used for different purposes.  If STM32_TIM2 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for ADC conversion. Note that ADC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the ADC, but then you also have to configure which ADC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM2 ADC channel", "cond": "STM32_TIM2_ADC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM2_ADC1", "default": "n", "cond": "STM32_TIM2_ADC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM2_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 ADC channel 1", "cond": "STM32_ADC1 && y", "selects": [{"symbol": "HAVE_ADC1_TIMER", "cond": "STM32_ADC1 && y"}], "help": "Reserve TIM2 to trigger ADC1"}, {"type": 3, "name": "STM32_TIM2_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 ADC channel 2", "cond": "STM32_ADC2 && y", "selects": [{"symbol": "HAVE_ADC2_TIMER", "cond": "STM32_ADC2 && y"}], "help": "Reserve TIM2 to trigger ADC2"}, {"type": 3, "name": "STM32_TIM2_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 ADC channel 3", "cond": "STM32_ADC3 && y", "selects": [{"symbol": "HAVE_ADC3_TIMER", "cond": "STM32_ADC3 && y"}], "help": "Reserve TIM2 to trigger ADC3"}]}]}, {"type": 3, "name": "STM32_TIM3_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 ADC", "cond": "STM32_TIM3 && STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM3 && STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 1 for use by ADC\n\nTimer devices may be used for different purposes.  If STM32_TIM3 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for ADC conversion. Note that ADC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the ADC, but then you also have to configure which ADC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM3 ADC channel", "cond": "STM32_TIM3_ADC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM3_ADC1", "default": "n", "cond": "STM32_TIM3_ADC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM3_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 ADC channel 1", "cond": "STM32_ADC1 && y", "selects": [{"symbol": "HAVE_ADC1_TIMER", "cond": "STM32_ADC1 && y"}], "help": "Reserve TIM3 to trigger ADC1"}, {"type": 3, "name": "STM32_TIM3_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 ADC channel 2", "cond": "STM32_ADC2 && y", "selects": [{"symbol": "HAVE_ADC2_TIMER", "cond": "STM32_ADC2 && y"}], "help": "Reserve TIM3 to trigger ADC2"}, {"type": 3, "name": "STM32_TIM3_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 ADC channel 3", "cond": "STM32_ADC3 && y", "selects": [{"symbol": "HAVE_ADC3_TIMER", "cond": "STM32_ADC3 && y"}], "help": "Reserve TIM3 to trigger ADC3"}]}]}, {"type": 3, "name": "STM32_TIM4_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 ADC", "cond": "STM32_TIM4 && STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM4 && STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 1 for use by ADC\n\nTimer devices may be used for different purposes.  If STM32_TIM4 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for ADC conversion. Note that ADC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the ADC, but then you also have to configure which ADC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM4 ADC channel", "cond": "STM32_TIM4_ADC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM4_ADC1", "default": "n", "cond": "STM32_TIM4_ADC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM4_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 ADC channel 1", "cond": "STM32_ADC1 && y", "selects": [{"symbol": "HAVE_ADC1_TIMER", "cond": "STM32_ADC1 && y"}], "help": "Reserve TIM4 to trigger ADC1"}, {"type": 3, "name": "STM32_TIM4_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 ADC channel 2", "cond": "STM32_ADC2 && y", "selects": [{"symbol": "HAVE_ADC2_TIMER", "cond": "STM32_ADC2 && y"}], "help": "Reserve TIM4 to trigger ADC2"}, {"type": 3, "name": "STM32_TIM4_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 ADC channel 3", "cond": "STM32_ADC3 && y", "selects": [{"symbol": "HAVE_ADC3_TIMER", "cond": "STM32_ADC3 && y"}], "help": "Reserve TIM4 to trigger ADC3"}]}]}, {"type": 3, "name": "STM32_TIM5_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 ADC", "cond": "STM32_TIM5 && STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM5 && STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 1 for use by ADC\n\nTimer devices may be used for different purposes.  If STM32_TIM5 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for ADC conversion. Note that ADC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the ADC, but then you also have to configure which ADC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM5 ADC channel", "cond": "STM32_TIM5_ADC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM5_ADC1", "default": "n", "cond": "STM32_TIM5_ADC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM5_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 ADC channel 1", "cond": "STM32_ADC1 && y", "selects": [{"symbol": "HAVE_ADC1_TIMER", "cond": "STM32_ADC1 && y"}], "help": "Reserve TIM5 to trigger ADC1"}, {"type": 3, "name": "STM32_TIM5_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 ADC channel 2", "cond": "STM32_ADC2 && y", "selects": [{"symbol": "HAVE_ADC2_TIMER", "cond": "STM32_ADC2 && y"}], "help": "Reserve TIM5 to trigger ADC2"}, {"type": 3, "name": "STM32_TIM5_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 ADC channel 3", "cond": "STM32_ADC3 && y", "selects": [{"symbol": "HAVE_ADC3_TIMER", "cond": "STM32_ADC3 && y"}], "help": "Reserve TIM5 to trigger ADC3"}]}]}, {"type": 3, "name": "STM32_TIM8_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 ADC", "cond": "STM32_TIM8 && STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM8 && STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 1 for use by ADC\n\nTimer devices may be used for different purposes.  If STM32_TIM8 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for ADC conversion. Note that ADC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the ADC, but then you also have to configure which ADC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM8 ADC channel", "cond": "STM32_TIM8_ADC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM8_ADC1", "default": "n", "cond": "STM32_TIM8_ADC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM8_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 ADC channel 1", "cond": "STM32_ADC1 && y", "selects": [{"symbol": "HAVE_ADC1_TIMER", "cond": "STM32_ADC1 && y"}], "help": "Reserve TIM8 to trigger ADC1"}, {"type": 3, "name": "STM32_TIM8_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 ADC channel 2", "cond": "STM32_ADC2 && y", "selects": [{"symbol": "HAVE_ADC2_TIMER", "cond": "STM32_ADC2 && y"}], "help": "Reserve TIM8 to trigger ADC2"}, {"type": 3, "name": "STM32_TIM8_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 ADC channel 3", "cond": "STM32_ADC3 && y", "selects": [{"symbol": "HAVE_ADC3_TIMER", "cond": "STM32_ADC3 && y"}], "help": "Reserve TIM8 to trigger ADC3"}]}]}, {"type": 3, "name": "HAVE_ADC1_TIMER", "value": "n", "user_value": null, "rev_dep": "(STM32_TIM1_ADC1 && STM32_ADC1 && y) || (STM32_TIM2_ADC1 && STM32_ADC1 && y) || (STM32_TIM3_ADC1 && STM32_ADC1 && y) || (STM32_TIM4_ADC1 && STM32_ADC1 && y) || (STM32_TIM5_ADC1 && STM32_ADC1 && y) || (STM32_TIM8_ADC1 && STM32_ADC1 && y) || (STM32F7_TIM1_ADC1 && STM32F7_ADC1 && y) || (STM32F7_TIM2_ADC1 && STM32F7_ADC1 && y) || (STM32F7_TIM3_ADC1 && STM32F7_ADC1 && y) || (STM32F7_TIM4_ADC1 && STM32F7_ADC1 && y) || (STM32F7_TIM5_ADC1 && STM32F7_ADC1 && y) || (STM32F7_TIM8_ADC1 && STM32F7_ADC1 && y) || (STM32L4_TIM1_ADC1 && STM32L4_ADC1 && y) || (STM32L4_TIM2_ADC1 && STM32L4_ADC1 && y) || (STM32L4_TIM3_ADC1 && STM32L4_ADC1 && y) || (STM32L4_TIM4_ADC1 && STM32L4_ADC1 && y) || (STM32L4_TIM6_ADC1 && STM32L4_ADC1 && y) || (STM32L4_TIM8_ADC1 && STM32L4_ADC1 && y) || (STM32L4_TIM15_ADC1 && STM32L4_ADC1 && y)", "dep": "n"}, {"type": 3, "name": "HAVE_ADC2_TIMER", "value": "n", "user_value": null, "rev_dep": "(STM32_TIM1_ADC2 && STM32_ADC2 && y) || (STM32_TIM2_ADC2 && STM32_ADC2 && y) || (STM32_TIM3_ADC2 && STM32_ADC2 && y) || (STM32_TIM4_ADC2 && STM32_ADC2 && y) || (STM32_TIM5_ADC2 && STM32_ADC2 && y) || (STM32_TIM8_ADC2 && STM32_ADC2 && y) || (STM32F7_TIM1_ADC2 && STM32F7_ADC2 && y) || (STM32F7_TIM2_ADC2 && STM32F7_ADC2 && y) || (STM32F7_TIM3_ADC2 && STM32F7_ADC2 && y) || (STM32F7_TIM4_ADC2 && STM32F7_ADC2 && y) || (STM32F7_TIM5_ADC2 && STM32F7_ADC2 && y) || (STM32F7_TIM8_ADC2 && STM32F7_ADC2 && y) || (STM32L4_TIM1_ADC2 && STM32L4_ADC2 && y) || (STM32L4_TIM2_ADC2 && STM32L4_ADC2 && y) || (STM32L4_TIM3_ADC2 && STM32L4_ADC2 && y) || (STM32L4_TIM4_ADC2 && STM32L4_ADC2 && y) || (STM32L4_TIM6_ADC2 && STM32L4_ADC2 && y) || (STM32L4_TIM8_ADC2 && STM32L4_ADC2 && y) || (STM32L4_TIM15_ADC2 && STM32L4_ADC2 && y)", "dep": "n"}, {"type": 3, "name": "HAVE_ADC3_TIMER", "value": "n", "user_value": null, "rev_dep": "(STM32_TIM1_ADC3 && STM32_ADC3 && y) || (STM32_TIM2_ADC3 && STM32_ADC3 && y) || (STM32_TIM3_ADC3 && STM32_ADC3 && y) || (STM32_TIM4_ADC3 && STM32_ADC3 && y) || (STM32_TIM5_ADC3 && STM32_ADC3 && y) || (STM32_TIM8_ADC3 && STM32_ADC3 && y) || (STM32F7_TIM1_ADC3 && STM32F7_ADC3 && y) || (STM32F7_TIM2_ADC3 && STM32F7_ADC3 && y) || (STM32F7_TIM3_ADC3 && STM32F7_ADC3 && y) || (STM32F7_TIM4_ADC3 && STM32F7_ADC3 && y) || (STM32F7_TIM5_ADC3 && STM32F7_ADC3 && y) || (STM32F7_TIM8_ADC3 && STM32F7_ADC3 && y) || (STM32L4_TIM1_ADC3 && STM32L4_ADC3 && y) || (STM32L4_TIM2_ADC3 && STM32L4_ADC3 && y) || (STM32L4_TIM3_ADC3 && STM32L4_ADC3 && y) || (STM32L4_TIM4_ADC3 && STM32L4_ADC3 && y) || (STM32L4_TIM6_ADC3 && STM32L4_ADC3 && y) || (STM32L4_TIM8_ADC3 && STM32L4_ADC3 && y) || (STM32L4_TIM15_ADC3 && STM32L4_ADC3 && y)", "dep": "n"}, {"type": 27, "name": "STM32_ADC1_SAMPLE_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "ADC1 Sampling Frequency", "cond": "HAVE_ADC1_TIMER && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "100", "default": "100", "cond": "HAVE_ADC1_TIMER && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "ADC1 sampling frequency.  Default:  100Hz"}, {"type": 27, "name": "STM32_ADC1_TIMTRIG", "value": "", "user_value": null, "dep": "n", "prompt": "ADC1 Timer Trigger", "cond": "HAVE_ADC1_TIMER && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "HAVE_ADC1_TIMER && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "HAVE_ADC1_TIMER && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Values 0:CC1 1:CC2 2:CC3 3:CC4 4:TRGO"}, {"type": 27, "name": "STM32_ADC2_SAMPLE_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "ADC2 Sampling Frequency", "cond": "HAVE_ADC2_TIMER && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "100", "default": "100", "cond": "HAVE_ADC2_TIMER && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "ADC2 sampling frequency.  Default:  100Hz"}, {"type": 27, "name": "STM32_ADC2_TIMTRIG", "value": "", "user_value": null, "dep": "n", "prompt": "ADC2 Timer Trigger", "cond": "HAVE_ADC2_TIMER && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "HAVE_ADC2_TIMER && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "HAVE_ADC2_TIMER && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Values 0:CC1 1:CC2 2:CC3 3:CC4 4:TRGO"}, {"type": 27, "name": "STM32_ADC3_SAMPLE_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "ADC3 Sampling Frequency", "cond": "HAVE_ADC3_TIMER && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "100", "default": "100", "cond": "HAVE_ADC3_TIMER && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "ADC3 sampling frequency.  Default:  100Hz"}, {"type": 27, "name": "STM32_ADC3_TIMTRIG", "value": "", "user_value": null, "dep": "n", "prompt": "ADC3 Timer Trigger", "cond": "HAVE_ADC3_TIMER && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "HAVE_ADC3_TIMER && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "HAVE_ADC3_TIMER && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Values 0:CC1 1:CC2 2:CC3 3:CC4 4:TRGO"}, {"type": 3, "name": "STM32_TIM1_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 DAC", "cond": "STM32_TIM1 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM1 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 1 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32_TIM1 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM1 DAC channel", "cond": "STM32_TIM1_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM1_DAC1", "default": "n", "cond": "STM32_TIM1_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM1_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 DAC channel 1", "cond": "y", "help": "Reserve TIM1 to trigger DAC1"}, {"type": 3, "name": "STM32_TIM1_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 DAC channel 2", "cond": "y", "help": "Reserve TIM1 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32_TIM2_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 DAC", "cond": "STM32_TIM2 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM2 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 2 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32_TIM2 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM2 DAC channel", "cond": "STM32_TIM2_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM2_DAC1", "default": "n", "cond": "STM32_TIM2_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM2_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 DAC channel 1", "cond": "y", "help": "Reserve TIM2 to trigger DAC1"}, {"type": 3, "name": "STM32_TIM2_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 DAC channel 2", "cond": "y", "help": "Reserve TIM2 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32_TIM3_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 DAC", "cond": "STM32_TIM3 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM3 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 3 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32_TIM3 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM3 DAC channel", "cond": "STM32_TIM3_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM3_DAC1", "default": "n", "cond": "STM32_TIM3_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM3_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 DAC channel 1", "cond": "y", "help": "Reserve TIM3 to trigger DAC1"}, {"type": 3, "name": "STM32_TIM3_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 DAC channel 2", "cond": "y", "help": "Reserve TIM3 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32_TIM4_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 DAC", "cond": "STM32_TIM4 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM4 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 4 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32_TIM4 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM4 DAC channel", "cond": "STM32_TIM4_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM4_DAC1", "default": "n", "cond": "STM32_TIM4_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM4_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 DAC channel 1", "cond": "y", "help": "Reserve TIM4 to trigger DAC1"}, {"type": 3, "name": "STM32_TIM4_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 DAC channel 2", "cond": "y", "help": "Reserve TIM4 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32_TIM5_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 DAC", "cond": "STM32_TIM5 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM5 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 5 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32_TIM5 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM5 DAC channel", "cond": "STM32_TIM5_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM5_DAC1", "default": "n", "cond": "STM32_TIM5_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM5_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 DAC channel 1", "cond": "y", "help": "Reserve TIM5 to trigger DAC1"}, {"type": 3, "name": "STM32_TIM5_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 DAC channel 2", "cond": "y", "help": "Reserve TIM5 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32_TIM6_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM6 DAC", "cond": "STM32_TIM6 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM6 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 6 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32_TIM6 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM6 DAC channel", "cond": "STM32_TIM6_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM6_DAC1", "default": "n", "cond": "STM32_TIM6_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM6_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM6 DAC channel 1", "cond": "y", "help": "Reserve TIM6 to trigger DAC1"}, {"type": 3, "name": "STM32_TIM6_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM6 DAC channel 2", "cond": "y", "help": "Reserve TIM6 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32_TIM7_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM7 DAC", "cond": "STM32_TIM7 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM7 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 7 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32_TIM7 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM7 DAC channel", "cond": "STM32_TIM7_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM7_DAC1", "default": "n", "cond": "STM32_TIM7_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM7_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM7 DAC channel 1", "cond": "y", "help": "Reserve TIM7 to trigger DAC1"}, {"type": 3, "name": "STM32_TIM7_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM7 DAC channel 2", "cond": "y", "help": "Reserve TIM7 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32_TIM8_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 DAC", "cond": "STM32_TIM8 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM8 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 8 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32_TIM8 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM8 DAC channel", "cond": "STM32_TIM8_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM8_DAC1", "default": "n", "cond": "STM32_TIM8_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM8_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 DAC channel 1", "cond": "y", "help": "Reserve TIM8 to trigger DAC1"}, {"type": 3, "name": "STM32_TIM8_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 DAC channel 2", "cond": "y", "help": "Reserve TIM8 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32_TIM9_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 DAC", "cond": "STM32_TIM9 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM9 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 9 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32_TIM9 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM9 DAC channel", "cond": "STM32_TIM9_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM9_DAC1", "default": "n", "cond": "STM32_TIM9_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM9_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 DAC channel 1", "cond": "y", "help": "Reserve TIM9 to trigger DAC1"}, {"type": 3, "name": "STM32_TIM9_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 DAC channel 2", "cond": "y", "help": "Reserve TIM9 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32_TIM10_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 DAC", "cond": "STM32_TIM10 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM10 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 10 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32_TIM10 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM10 DAC channel", "cond": "STM32_TIM10_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM10_DAC1", "default": "n", "cond": "STM32_TIM10_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM10_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 DAC channel 1", "cond": "y", "help": "Reserve TIM10 to trigger DAC1"}, {"type": 3, "name": "STM32_TIM10_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 DAC channel 2", "cond": "y", "help": "Reserve TIM10 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32_TIM11_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 DAC", "cond": "STM32_TIM11 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM11 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 11 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32_TIM11 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM11 DAC channel", "cond": "STM32_TIM11_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM11_DAC1", "default": "n", "cond": "STM32_TIM11_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM11_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 DAC channel 1", "cond": "y", "help": "Reserve TIM11 to trigger DAC1"}, {"type": 3, "name": "STM32_TIM11_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 DAC channel 2", "cond": "y", "help": "Reserve TIM11 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32_TIM12_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 DAC", "cond": "STM32_TIM12 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM12 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 12 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32_TIM12 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM12 DAC channel", "cond": "STM32_TIM12_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM12_DAC1", "default": "n", "cond": "STM32_TIM12_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM12_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 DAC channel 1", "cond": "y", "help": "Reserve TIM12 to trigger DAC1"}, {"type": 3, "name": "STM32_TIM12_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 DAC channel 2", "cond": "y", "help": "Reserve TIM12 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32_TIM13_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 DAC", "cond": "STM32_TIM13 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM13 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 13 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32_TIM13 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM13 DAC channel", "cond": "STM32_TIM13_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM13_DAC1", "default": "n", "cond": "STM32_TIM13_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM13_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 DAC channel 1", "cond": "y", "help": "Reserve TIM13 to trigger DAC1"}, {"type": 3, "name": "STM32_TIM13_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 DAC channel 2", "cond": "y", "help": "Reserve TIM13 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32_TIM14_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 DAC", "cond": "STM32_TIM14 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM14 && STM32_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 14 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32_TIM14 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM14 DAC channel", "cond": "STM32_TIM14_DAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_TIM14_DAC1", "default": "n", "cond": "STM32_TIM14_DAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_TIM14_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 DAC channel 1", "cond": "y", "help": "Reserve TIM14 to trigger DAC1"}, {"type": 3, "name": "STM32_TIM14_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 DAC channel 2", "cond": "y", "help": "Reserve TIM14 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32_TIM1_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Capture", "cond": "STM32_HAVE_TIM1 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM1 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 1 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32_TIM2_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Capture", "cond": "STM32_HAVE_TIM2 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM2 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 2 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32_TIM3_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Capture", "cond": "STM32_HAVE_TIM3 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM3 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 3 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32_TIM4_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Capture", "cond": "STM32_HAVE_TIM4 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM4 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 4 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32_TIM5_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Capture", "cond": "STM32_HAVE_TIM5 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM5 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 5 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32_TIM8_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Capture", "cond": "STM32_HAVE_TIM8 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM8 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 8 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32_TIM9_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 Capture", "cond": "STM32_HAVE_TIM9 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM9 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 9 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32_TIM10_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 Capture", "cond": "STM32_HAVE_TIM10 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM10 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 10 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32_TIM11_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 Capture", "cond": "STM32_HAVE_TIM11 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM11 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 11 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32_TIM12_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 Capture", "cond": "STM32_HAVE_TIM12 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM12 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 12 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32_TIM13_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 Capture", "cond": "STM32_HAVE_TIM13 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM13 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 13 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32_TIM14_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 Capture", "cond": "STM32_HAVE_TIM14 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_HAVE_TIM14 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve timer 14 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}]}, {"type": 31, "dep": "n", "prompt": "ADC Configuration", "cond": "STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM", "children": [{"type": 3, "name": "STM32_ADC_NO_STARTUP_CONV", "value": "n", "user_value": null, "dep": "n", "prompt": "Do not start conversion when opening ADC device", "cond": "STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Do not start conversion when opening ADC device."}, {"type": 3, "name": "STM32_ADC1_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC1 DMA", "cond": "STM32_ADC1 && STM32_HAVE_ADC1_DMA && STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_ADC1 && STM32_HAVE_ADC1_DMA && STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If DMA is selected, then the ADC may be configured to support\nDMA transfer, which is necessary if multiple channels are read\nor if very high trigger frequencies are used."}, {"type": 3, "name": "STM32_ADC2_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC2 DMA", "cond": "STM32_ADC2 && STM32_HAVE_ADC2_DMA && STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_ADC2 && STM32_HAVE_ADC2_DMA && STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If DMA is selected, then the ADC may be configured to support\nDMA transfer, which is necessary if multiple channels are read\nor if very high trigger frequencies are used."}, {"type": 3, "name": "STM32_ADC3_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC3 DMA", "cond": "STM32_ADC3 && STM32_HAVE_ADC3_DMA && STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_ADC3 && STM32_HAVE_ADC3_DMA && STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If DMA is selected, then the ADC may be configured to support\nDMA transfer, which is necessary if multiple channels are read\nor if very high trigger frequencies are used."}, {"type": 3, "name": "STM32_ADC4_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC4 DMA", "cond": "STM32_ADC4 && STM32_HAVE_ADC4_DMA && STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_ADC4 && STM32_HAVE_ADC4_DMA && STM32_ADC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If DMA is selected, then the ADC may be configured to support\nDMA transfer, which is necessary if multiple channels are read\nor if very high trigger frequencies are used."}]}, {"type": 31, "dep": "n", "prompt": "SDADC Configuration", "cond": "STM32_SDADC && ARCH_CHIP_STM32 && ARCH_ARM", "children": [{"type": 3, "name": "STM32_SDADC1_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "SDADC1 DMA", "cond": "STM32_SDADC1 && STM32_HAVE_SDADC1_DMA && STM32_SDADC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_SDADC1 && STM32_HAVE_SDADC1_DMA && STM32_SDADC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If DMA is selected, then the SDADC may be configured to support\nDMA transfer, which is advisable if multiple channels are read\nor if very high trigger frequencies are used."}, {"type": 3, "name": "STM32_SDADC2_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "SDADC2 DMA", "cond": "STM32_SDADC2 && STM32_HAVE_SDADC2_DMA && STM32_SDADC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_SDADC2 && STM32_HAVE_SDADC2_DMA && STM32_SDADC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If DMA is selected, then the SDADC may be configured to support\nDMA transfer, which is advisable if multiple channels are read\nor if very high trigger frequencies are used."}, {"type": 3, "name": "STM32_SDADC3_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "SDADC3 DMA", "cond": "STM32_SDADC3 && STM32_HAVE_SDADC3_DMA && STM32_SDADC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_SDADC3 && STM32_HAVE_SDADC3_DMA && STM32_SDADC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If DMA is selected, then the SDADC may be configured to support\nDMA transfer, which is advisable if multiple channels are read\nor if very high trigger frequencies are used."}]}, {"type": 31, "dep": "n", "prompt": "DAC Configuration", "cond": "(STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM", "children": [{"type": 3, "name": "STM32_DAC1CH1_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC1CH1 DMA", "cond": "STM32_DAC1CH1 && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_DAC1CH1 && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If DMA is selected, then a timer and output frequency must also be\nprovided to support the DMA transfer.  The DMA transfer could be\nsupported by and EXTI trigger, but this feature is not currently\nsupported by the driver.", "children": [{"type": 27, "name": "STM32_DAC1CH1_DMA_BUFFER_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "DAC1CH1 DMA buffer size", "cond": "STM32_DAC1CH1_DMA && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "256", "default": "256", "cond": "STM32_DAC1CH1_DMA && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 27, "name": "STM32_DAC1CH1_TIMER", "value": "", "user_value": null, "dep": "n", "prompt": "DAC1CH1 timer", "cond": "STM32_DAC1CH1_DMA && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM", "ranges": [{"min": "2", "max": "8", "cond": "STM32_DAC1CH1_DMA && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 27, "name": "STM32_DAC1CH1_TIMER_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "DAC1CH1 timer frequency", "cond": "STM32_DAC1CH1_DMA && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_DAC1CH1_DMA && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM"}]}]}, {"type": 3, "name": "STM32_DAC1CH2_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC1CH2 DMA", "cond": "STM32_DAC1CH2 && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_DAC1CH2 && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If DMA is selected, then a timer and output frequency must also be\nprovided to support the DMA transfer.  The DMA transfer could be\nsupported by and EXTI trigger, but this feature is not currently\nsupported by the driver.", "children": [{"type": 27, "name": "STM32_DAC1CH2_DMA_BUFFER_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "DAC1CH2 DMA buffer size", "cond": "STM32_DAC1CH2_DMA && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "256", "default": "256", "cond": "STM32_DAC1CH2_DMA && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 27, "name": "STM32_DAC1CH2_TIMER", "value": "", "user_value": null, "dep": "n", "prompt": "DAC1CH2 timer", "cond": "STM32_DAC1CH2_DMA && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM", "ranges": [{"min": "2", "max": "8", "cond": "STM32_DAC1CH2_DMA && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 27, "name": "STM32_DAC1CH2_TIMER_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "DAC1CH2 timer frequency", "cond": "STM32_DAC1CH2_DMA && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_DAC1CH2_DMA && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM"}]}]}, {"type": 3, "name": "STM32_DAC2CH1_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC2CH1 DMA", "cond": "STM32_DAC2CH1 && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_DAC2CH1 && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If DMA is selected, then a timer and output frequency must also be\nprovided to support the DMA transfer.  The DMA transfer could be\nsupported by and EXTI trigger, but this feature is not currently\nsupported by the driver.", "children": [{"type": 27, "name": "STM32_DAC2CH1_DMA_BUFFER_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "DAC2CH1 DMA buffer size", "cond": "STM32_DAC2CH1_DMA && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "256", "default": "256", "cond": "STM32_DAC2CH1_DMA && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 27, "name": "STM32_DAC2CH1_TIMER", "value": "", "user_value": null, "dep": "n", "prompt": "DAC2CH1 timer", "cond": "STM32_DAC2CH1_DMA && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_DAC2CH1_DMA && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "2", "max": "8", "cond": "STM32_DAC2CH1_DMA && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 27, "name": "STM32_DAC2CH1_TIMER_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "DAC2CH1 timer frequency", "cond": "STM32_DAC2CH1_DMA && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_DAC2CH1_DMA && (STM32_DAC1 || STM32_DAC2) && ARCH_CHIP_STM32 && ARCH_ARM"}]}]}]}, {"type": 3, "name": "STM32_USART", "value": "n", "user_value": null, "rev_dep": "(STM32_USART1 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_USART2 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_USART3 && STM32_HAVE_USART3 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_UART4 && STM32_HAVE_UART4 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_UART5 && STM32_HAVE_UART5 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_USART6 && STM32_HAVE_USART6 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_UART7 && STM32_HAVE_UART7 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_UART8 && STM32_HAVE_UART8 && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "STM32_SERIALDRIVER", "value": "n", "user_value": null, "rev_dep": "(STM32_USART1_SERIALDRIVER && y) || (STM32_USART2_SERIALDRIVER && y) || (STM32_USART3_SERIALDRIVER && y) || (STM32_UART4_SERIALDRIVER && y) || (STM32_UART5_SERIALDRIVER && y) || (STM32_USART6_SERIALDRIVER && y) || (STM32_UART7_SERIALDRIVER && y) || (STM32_UART8_SERIALDRIVER && y)", "dep": "n"}, {"type": 3, "name": "STM32_1WIREDRIVER", "value": "n", "user_value": null, "rev_dep": "(STM32_USART1_1WIREDRIVER && y) || (STM32_USART2_1WIREDRIVER && y) || (STM32_USART3_1WIREDRIVER && y) || (STM32_UART4_1WIREDRIVER && y) || (STM32_UART5_1WIREDRIVER && y) || (STM32_USART6_1WIREDRIVER && y) || (STM32_UART7_1WIREDRIVER && y) || (STM32_UART8_1WIREDRIVER && y)", "dep": "n"}, {"type": 31, "dep": "n", "prompt": "U[S]ART Configuration", "cond": "STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "children": [{"type": 6, "dep": "n", "prompt": "U[S]ART Device Configuration", "cond": "STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USART1 Driver Configuration", "cond": "STM32_USART1 && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_USART1_SERIALDRIVER", "default": "n", "cond": "STM32_USART1 && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_USART1_SERIALDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "Standard serial driver", "cond": "y", "selects": [{"symbol": "USART1_SERIALDRIVER", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}, {"symbol": "STM32_SERIALDRIVER", "cond": "y"}]}, {"type": 3, "name": "STM32_USART1_1WIREDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "1-Wire driver", "cond": "y", "selects": [{"symbol": "STM32_1WIREDRIVER", "cond": "y"}]}]}, {"type": 3, "name": "USART1_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART1", "cond": "STM32_USART1_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_USART1_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable RS-485 interface on USART1. Your board config will have to\nprovide GPIO_USART1_RS485_DIR pin definition. Currently it cannot be\nused with USART1_RXDMA.", "children": [{"type": 27, "name": "USART1_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "USART1 RS-485 DIR pin polarity", "cond": "USART1_RS485 && STM32_USART1_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "USART1_RS485 && STM32_USART1_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "USART1_RS485 && STM32_USART1_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on USART1. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 3, "name": "USART1_RXDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1 Rx DMA", "cond": "(((STM32_STM32F10XX || STM32_STM32L15XX) && STM32_DMA1) || (!STM32_STM32F10XX && STM32_DMA2)) && STM32_USART1_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(((STM32_STM32F10XX || STM32_STM32L15XX) && STM32_DMA1) || (!STM32_STM32F10XX && STM32_DMA2)) && STM32_USART1_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "In high data rate usage, Rx DMA may eliminate Rx overrun errors"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USART2 Driver Configuration", "cond": "STM32_USART2 && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_USART2_SERIALDRIVER", "default": "n", "cond": "STM32_USART2 && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_USART2_SERIALDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "Standard serial driver", "cond": "y", "selects": [{"symbol": "USART2_SERIALDRIVER", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}, {"symbol": "STM32_SERIALDRIVER", "cond": "y"}]}, {"type": 3, "name": "STM32_USART2_1WIREDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "1-Wire driver", "cond": "y", "selects": [{"symbol": "STM32_1WIREDRIVER", "cond": "y"}]}]}, {"type": 3, "name": "USART2_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART2", "cond": "STM32_USART2_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_USART2_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable RS-485 interface on USART2. Your board config will have to\nprovide GPIO_USART2_RS485_DIR pin definition. Currently it cannot be\nused with USART2_RXDMA.", "children": [{"type": 27, "name": "USART2_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "USART2 RS-485 DIR pin polarity", "cond": "USART2_RS485 && STM32_USART2_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "USART2_RS485 && STM32_USART2_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "USART2_RS485 && STM32_USART2_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on USART2. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 3, "name": "USART2_RXDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2 Rx DMA", "cond": "STM32_DMA1 && STM32_USART2_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_DMA1 && STM32_USART2_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "In high data rate usage, Rx DMA may eliminate Rx overrun errors"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USART3 Driver Configuration", "cond": "STM32_USART3 && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_USART3_SERIALDRIVER", "default": "n", "cond": "STM32_USART3 && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_USART3_SERIALDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "Standard serial driver", "cond": "y", "selects": [{"symbol": "USART3_SERIALDRIVER", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}, {"symbol": "STM32_SERIALDRIVER", "cond": "y"}]}, {"type": 3, "name": "STM32_USART3_1WIREDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "1-Wire driver", "cond": "y", "selects": [{"symbol": "STM32_1WIREDRIVER", "cond": "y"}]}]}, {"type": 3, "name": "USART3_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART3", "cond": "STM32_USART3_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_USART3_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable RS-485 interface on USART3. Your board config will have to\nprovide GPIO_USART3_RS485_DIR pin definition. Currently it cannot be\nused with USART3_RXDMA.", "children": [{"type": 27, "name": "USART3_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "USART3 RS-485 DIR pin polarity", "cond": "USART3_RS485 && STM32_USART3_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "USART3_RS485 && STM32_USART3_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "USART3_RS485 && STM32_USART3_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on USART3. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 3, "name": "USART3_RXDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART3 Rx DMA", "cond": "STM32_DMA1 && STM32_USART3_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_DMA1 && STM32_USART3_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "In high data rate usage, Rx DMA may eliminate Rx overrun errors"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "UART4 Driver Configuration", "cond": "STM32_UART4 && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_UART4_SERIALDRIVER", "default": "n", "cond": "STM32_UART4 && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_UART4_SERIALDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "Standard serial driver", "cond": "y", "selects": [{"symbol": "UART4_SERIALDRIVER", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}, {"symbol": "STM32_SERIALDRIVER", "cond": "y"}]}, {"type": 3, "name": "STM32_UART4_1WIREDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "1-Wire driver", "cond": "y", "selects": [{"symbol": "STM32_1WIREDRIVER", "cond": "y"}]}]}, {"type": 3, "name": "UART4_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on UART4", "cond": "STM32_UART4_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_UART4_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable RS-485 interface on UART4. Your board config will have to\nprovide GPIO_UART4_RS485_DIR pin definition. Currently it cannot be\nused with UART4_RXDMA.", "children": [{"type": 27, "name": "UART4_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "UART4 RS-485 DIR pin polarity", "cond": "UART4_RS485 && STM32_UART4_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "UART4_RS485 && STM32_UART4_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "UART4_RS485 && STM32_UART4_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on UART4. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 3, "name": "UART4_RXDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "UART4 Rx DMA", "cond": "STM32_DMA1 && STM32_UART4_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_DMA1 && STM32_UART4_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "In high data rate usage, Rx DMA may eliminate Rx overrun errors"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "UART5 Driver Configuration", "cond": "STM32_UART5 && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_UART5_SERIALDRIVER", "default": "n", "cond": "STM32_UART5 && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_UART5_SERIALDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "Standard serial driver", "cond": "y", "selects": [{"symbol": "UART5_SERIALDRIVER", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}, {"symbol": "STM32_SERIALDRIVER", "cond": "y"}]}, {"type": 3, "name": "STM32_UART5_1WIREDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "1-Wire driver", "cond": "y", "selects": [{"symbol": "STM32_1WIREDRIVER", "cond": "y"}]}]}, {"type": 3, "name": "UART5_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on UART5", "cond": "STM32_UART5_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_UART5_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable RS-485 interface on UART5. Your board config will have to\nprovide GPIO_UART5_RS485_DIR pin definition. Currently it cannot be\nused with UART5_RXDMA.", "children": [{"type": 27, "name": "UART5_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "UART5 RS-485 DIR pin polarity", "cond": "UART5_RS485 && STM32_UART5_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "UART5_RS485 && STM32_UART5_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "UART5_RS485 && STM32_UART5_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on UART5. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 3, "name": "UART5_RXDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "UART5 Rx DMA", "cond": "STM32_DMA1 && STM32_UART5_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_DMA1 && STM32_UART5_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "In high data rate usage, Rx DMA may eliminate Rx overrun errors"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USART6 Driver Configuration", "cond": "STM32_USART6 && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_USART6_SERIALDRIVER", "default": "n", "cond": "STM32_USART6 && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_USART6_SERIALDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "Standard serial driver", "cond": "y", "selects": [{"symbol": "USART6_SERIALDRIVER", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}, {"symbol": "STM32_SERIALDRIVER", "cond": "y"}]}, {"type": 3, "name": "STM32_USART6_1WIREDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "1-Wire driver", "cond": "y", "selects": [{"symbol": "STM32_1WIREDRIVER", "cond": "y"}]}]}, {"type": 3, "name": "USART6_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART6", "cond": "STM32_USART6_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_USART6_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable RS-485 interface on USART6. Your board config will have to\nprovide GPIO_USART6_RS485_DIR pin definition. Currently it cannot be\nused with USART6_RXDMA.", "children": [{"type": 27, "name": "USART6_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "USART6 RS-485 DIR pin polarity", "cond": "USART6_RS485 && STM32_USART6_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "USART6_RS485 && STM32_USART6_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "USART6_RS485 && STM32_USART6_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on USART6. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 3, "name": "USART6_RXDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART6 Rx DMA", "cond": "STM32_DMA2 && STM32_USART6_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_DMA2 && STM32_USART6_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "In high data rate usage, Rx DMA may eliminate Rx overrun errors"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "UART7 Driver Configuration", "cond": "STM32_UART7 && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_UART7_SERIALDRIVER", "default": "n", "cond": "STM32_UART7 && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_UART7_SERIALDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "Standard serial driver", "cond": "y", "selects": [{"symbol": "UART7_SERIALDRIVER", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}, {"symbol": "STM32_SERIALDRIVER", "cond": "y"}]}, {"type": 3, "name": "STM32_UART7_1WIREDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "1-Wire driver", "cond": "y", "selects": [{"symbol": "STM32_1WIREDRIVER", "cond": "y"}]}]}, {"type": 3, "name": "UART7_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on UART7", "cond": "STM32_UART7_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_UART7_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable RS-485 interface on UART7. Your board config will have to\nprovide GPIO_UART7_RS485_DIR pin definition. Currently it cannot be\nused with UART7_RXDMA.", "children": [{"type": 27, "name": "UART7_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "UART7 RS-485 DIR pin polarity", "cond": "UART7_RS485 && STM32_UART7_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "UART7_RS485 && STM32_UART7_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "UART7_RS485 && STM32_UART7_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on UART7. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 3, "name": "UART7_RXDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "UART7 Rx DMA", "cond": "STM32_DMA2 && STM32_UART7_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_DMA2 && STM32_UART7_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "In high data rate usage, Rx DMA may eliminate Rx overrun errors"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "UART8 Driver Configuration", "cond": "STM32_UART7 && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_UART8_SERIALDRIVER", "default": "n", "cond": "STM32_UART7 && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_UART8_SERIALDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "Standard serial driver", "cond": "y", "selects": [{"symbol": "UART8_SERIALDRIVER", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}, {"symbol": "STM32_SERIALDRIVER", "cond": "y"}]}, {"type": 3, "name": "STM32_UART8_1WIREDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "1-Wire driver", "cond": "y", "selects": [{"symbol": "STM32_1WIREDRIVER", "cond": "y"}]}]}, {"type": 3, "name": "UART8_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on UART8", "cond": "STM32_UART8_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_UART8_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable RS-485 interface on UART8. Your board config will have to\nprovide GPIO_UART8_RS485_DIR pin definition. Currently it cannot be\nused with UART8_RXDMA.", "children": [{"type": 27, "name": "UART8_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "UART8 RS-485 DIR pin polarity", "cond": "UART8_RS485 && STM32_UART8_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "UART8_RS485 && STM32_UART8_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "UART8_RS485 && STM32_UART8_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on UART8. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 3, "name": "UART8_RXDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "UART8 Rx DMA", "cond": "STM32_DMA2 && STM32_UART8_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_DMA2 && STM32_UART8_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "In high data rate usage, Rx DMA may eliminate Rx overrun errors"}, {"type": 6, "dep": "n", "prompt": "Serial Driver Configuration", "cond": "STM32_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}, {"type": 27, "name": "STM32_SERIAL_RXDMA_BUFFER_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Rx DMA buffer size", "cond": "(USART1_RXDMA || USART2_RXDMA || USART3_RXDMA || UART4_RXDMA || UART5_RXDMA || USART6_RXDMA || UART7_RXDMA || UART8_RXDMA) && STM32_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "32", "default": "32", "cond": "(USART1_RXDMA || USART2_RXDMA || USART3_RXDMA || UART4_RXDMA || UART5_RXDMA || USART6_RXDMA || UART7_RXDMA || UART8_RXDMA) && STM32_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "32", "max": "4096", "cond": "(USART1_RXDMA || USART2_RXDMA || USART3_RXDMA || UART4_RXDMA || UART5_RXDMA || USART6_RXDMA || UART7_RXDMA || UART8_RXDMA) && STM32_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "The DMA buffer size when using RX DMA to emulate a FIFO.\n\nWhen streaming data, the generic serial layer will be called\nevery time the FIFO receives half or this number of bytes.\n\nValue given here will be rounded up to next multiple of 4 bytes."}, {"type": 3, "name": "SERIAL_DISABLE_REORDERING", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable reordering of ttySx devices.", "cond": "(STM32_USART1 || STM32_USART2 || STM32_USART3 || STM32_UART4 || STM32_UART5 || STM32_USART6 || STM32_UART7 || STM32_UART8) && STM32_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(STM32_USART1 || STM32_USART2 || STM32_USART3 || STM32_UART4 || STM32_UART5 || STM32_USART6 || STM32_UART7 || STM32_UART8) && STM32_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "NuttX per default reorders the serial ports (/dev/ttySx) so that the\nconsole is always on /dev/ttyS0. If more than one UART is in use this\ncan, however, have the side-effect that all port mappings\n(hardware USART1 -> /dev/ttyS0) change if the console is moved to another\nUART. This is in particular relevant if a project uses the USB console\nin some configs and a serial console in other configs, but does not\nwant the side effect of having all serial port names change when just\nthe console is moved from serial to USB."}, {"type": 3, "name": "STM32_FLOWCONTROL_BROKEN", "value": "n", "user_value": null, "dep": "n", "prompt": "Use Software UART RTS flow control", "cond": "STM32_USART && STM32_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_USART && STM32_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable UART RTS flow control using Software. Because STM\nCurrent STM32 have broken HW based RTS behavior (they assert\nnRTS after every byte received)  Enable this setting workaround\nthis issue by useing software based management of RTS"}, {"type": 3, "name": "STM32_USART_BREAKS", "value": "n", "user_value": null, "dep": "n", "prompt": "Add TIOxSBRK to support sending Breaks", "cond": "STM32_USART && STM32_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_USART && STM32_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Add TIOCxBRK routines to send a line break per the STM32 manual, the\nbreak will be a pulse based on the value M. This is not a BSD compatible\nbreak.", "children": [{"type": 3, "name": "STM32_SERIALBRK_BSDCOMPAT", "value": "n", "user_value": null, "dep": "n", "prompt": "Use GPIO To send Break", "cond": "STM32_USART && STM32_USART_BREAKS && STM32_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_USART && STM32_USART_BREAKS && STM32_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable using GPIO on the TX pin to send a BSD compatible break:\nTIOCSBRK will start the break and TIOCCBRK will end the break.\nThe current STM32 U[S]ARTS have no way to leave the break (TX=LOW)\non because the SW starts the break and then the HW automatically clears\nthe break. This makes it is difficult to sent a long break."}]}, {"type": 3, "name": "STM32_USART_SINGLEWIRE", "value": "n", "user_value": null, "dep": "n", "prompt": "Single Wire Support", "cond": "STM32_USART && STM32_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_USART && STM32_SERIALDRIVER && STM32_USART && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable single wire UART support.  The option enables support for the\nTIOCSSINGLEWIRE ioctl in the STM32 serial driver."}]}, {"type": 31, "dep": "n", "prompt": "SPI Configuration", "cond": "STM32_SPI && ARCH_CHIP_STM32 && ARCH_ARM", "children": [{"type": 3, "name": "STM32_SPI_INTERRUPTS", "value": "n", "user_value": null, "dep": "n", "prompt": "Interrupt driver SPI", "cond": "STM32_SPI && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_SPI && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Select to enable interrupt driven SPI support. Non-interrupt-driven,\npoll-waiting is recommended if the interrupt rate would be to high in\nthe interrupt driven case."}, {"type": 3, "name": "STM32_SPI_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI DMA", "cond": "STM32_SPI && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_SPI && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Use DMA to improve SPI transfer performance.  Cannot be used with STM32_SPI_INTERRUPT."}]}, {"type": 31, "dep": "n", "prompt": "I2S Configuration", "cond": "STM32_I2S3 && ARCH_CHIP_STM32 && ARCH_ARM", "children": [{"type": 3, "name": "STM32_I2S_MCK", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S_MCK", "cond": "STM32_I2S3 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_I2S3 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "TBD."}, {"type": 27, "name": "STM32_I2S_MAXINFLIGHT", "value": "", "user_value": null, "dep": "n", "prompt": "I2S queue size", "cond": "STM32_I2S3 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "16", "default": "16", "cond": "STM32_I2S3 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "This is the total number of transfers, both RX and TX, that can be\nenqueue before the caller is required to wait.  This setting\ndetermines the number certain queue data structures that will be\npre-allocated."}, {"type": 6, "dep": "n", "prompt": "I2S3 Configuration", "cond": "STM32_I2S3 && ARCH_CHIP_STM32 && ARCH_ARM"}, {"type": 27, "name": "STM32_I2S3_DATALEN", "value": "", "user_value": null, "dep": "n", "prompt": "Data width (bits)", "cond": "STM32_I2S3 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "16", "default": "16", "cond": "STM32_I2S3 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Data width in bits.  This is a default value and may be change\nvia the I2S interface"}, {"type": 3, "name": "STM32_I2S3_RX", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable I2C receiver", "cond": "STM32_I2S3 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_I2S3 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable I2S receipt logic"}, {"type": 3, "name": "STM32_I2S3_TX", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable I2C transmitter", "cond": "STM32_I2S3 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_I2S3 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable I2S transmission logic"}, {"type": 3, "name": "STM32_I2S_DMADEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S DMA transfer debug", "cond": "DEBUG_DMA && STM32_I2S3 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_DMA && STM32_I2S3 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable special debug instrumentation analyze I2S DMA data transfers.\nThis logic is as non-invasive as possible:  It samples DMA\nregisters at key points in the data transfer and then dumps all of\nthe registers at the end of the transfer."}, {"type": 3, "name": "STM32_I2S_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "SSC Register level debug", "cond": "DEBUG && STM32_I2S3 && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG && STM32_I2S3 && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Output detailed register-level SSC device debug information.\nVery invasive! Requires also DEBUG."}]}, {"type": 31, "dep": "n", "prompt": "I2C Configuration", "cond": "STM32_I2C && ARCH_CHIP_STM32 && ARCH_ARM", "children": [{"type": 3, "name": "STM32_I2C_ALT", "value": "n", "user_value": null, "dep": "n", "prompt": "Alternate I2C implementation", "cond": "!STM32_STM32F30XX && STM32_I2C && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!STM32_PERFORMANCELINE && !STM32_STM32F30XX && STM32_I2C && ARCH_CHIP_STM32 && ARCH_ARM"}, {"name": "y", "default": "y", "cond": "STM32_PERFORMANCELINE && !STM32_STM32F30XX && STM32_I2C && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "This selection enables an alternative I2C driver.  This alternate\ndriver implements some rather complex workarounds for errata against\nthe STM32 F103 \"Performance Line\".  This selection is an option\nbecause: (1) It has not yet been fully verified and (2) It is not\ncertain that he scope of this workaround is needed only for the F103."}, {"type": 3, "name": "STM32_I2C_DYNTIMEO", "value": "n", "user_value": null, "dep": "n", "prompt": "Use dynamic timeouts", "cond": "STM32_I2C && STM32_I2C && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_I2C && STM32_I2C && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 27, "name": "STM32_I2C_DYNTIMEO_USECPERBYTE", "value": "", "user_value": null, "dep": "n", "prompt": "Timeout Microseconds per Byte", "cond": "STM32_I2C_DYNTIMEO && STM32_I2C && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "500", "default": "500", "cond": "STM32_I2C_DYNTIMEO && STM32_I2C && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 27, "name": "STM32_I2C_DYNTIMEO_STARTSTOP", "value": "", "user_value": null, "dep": "n", "prompt": "Timeout for Start/Stop (Milliseconds)", "cond": "STM32_I2C_DYNTIMEO && STM32_I2C && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1000", "default": "1000", "cond": "STM32_I2C_DYNTIMEO && STM32_I2C && ARCH_CHIP_STM32 && ARCH_ARM"}]}]}, {"type": 27, "name": "STM32_I2CTIMEOSEC", "value": "", "user_value": null, "dep": "n", "prompt": "Timeout seconds", "cond": "STM32_I2C && STM32_I2C && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_I2C && STM32_I2C && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 27, "name": "STM32_I2CTIMEOMS", "value": "", "user_value": null, "dep": "n", "prompt": "Timeout Milliseconds", "cond": "STM32_I2C && !STM32_I2C_DYNTIMEO && STM32_I2C && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "500", "default": "500", "cond": "STM32_I2C && !STM32_I2C_DYNTIMEO && STM32_I2C && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 27, "name": "STM32_I2CTIMEOTICKS", "value": "", "user_value": null, "dep": "n", "prompt": "Timeout for Done and Stop (ticks)", "cond": "STM32_I2C && !STM32_I2C_DYNTIMEO && STM32_I2C && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "500", "default": "500", "cond": "STM32_I2C && !STM32_I2C_DYNTIMEO && STM32_I2C && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_I2C_DUTY16_9", "value": "n", "user_value": null, "dep": "n", "prompt": "Frequency with Tlow/Thigh = 16/9", "cond": "STM32_I2C && STM32_I2C && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_I2C && STM32_I2C && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_I2C_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C DMA Support", "cond": "STM32_I2C && STM32_STM32F4XXX && STM32_DMA1 && !I2C_POLLED && STM32_I2C && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_I2C && STM32_STM32F4XXX && STM32_DMA1 && !I2C_POLLED && STM32_I2C && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "This option enables the DMA for I2C transfers.\nNote: The user can define CONFIG_I2C_DMAPRIO: a custom priority value for the\nI2C dma streams, else the default priority level is set to medium."}]}, {"type": 31, "dep": "n", "prompt": "SDIO Configuration", "cond": "STM32_SDIO && ARCH_CHIP_STM32 && ARCH_ARM", "children": [{"type": 3, "name": "STM32_SDIO_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "Support DMA data transfers", "cond": "STM32_DMA2 && STM32_SDIO && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "STM32_DMA2 && STM32_DMA2 && STM32_SDIO && ARCH_CHIP_STM32 && ARCH_ARM"}, {"name": "n", "default": "n", "cond": "!STM32_DMA2 && STM32_DMA2 && STM32_SDIO && ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "SDIO_DMA", "cond": "STM32_DMA2 && STM32_SDIO && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Support DMA data transfers.  Requires STM32_SDIO and config STM32_DMA2."}, {"type": 24, "name": "STM32_SDIO_PRI", "value": "", "user_value": null, "dep": "n", "prompt": "SDIO interrupt priority", "cond": "ARCH_IRQPRIO && EXPERIMENTAL && STM32_SDIO && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "128", "default": "128", "cond": "ARCH_IRQPRIO && EXPERIMENTAL && STM32_SDIO && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Select SDIO interrupt priority.  Default: 128."}, {"type": 24, "name": "STM32_SDIO_DMAPRIO", "value": "", "user_value": null, "dep": "n", "prompt": "SDIO DMA priority", "cond": "STM32_SDIO && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0x00001000", "default": "0x00001000", "cond": "STM32_STM32F10XX && STM32_SDIO && ARCH_CHIP_STM32 && ARCH_ARM"}, {"name": "0x00010000", "default": "0x00010000", "cond": "!STM32_STM32F10XX && STM32_SDIO && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Select SDIO DMA prority.\n\nFor STM32 F1 family, options are: 0x00000000 low, 0x00001000 medium,\n0x00002000 high, 0x00003000 very high.  Default: medium.\n\nFor other STM32's, options are: 0x00000000 low, 0x00010000 medium,\n0x00020000 high, 0x00030000 very high.  Default: medium."}, {"type": 3, "name": "STM32_SDIO_WIDTH_D1_ONLY", "value": "n", "user_value": null, "dep": "n", "prompt": "Use D1 only", "cond": "STM32_SDIO && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_SDIO && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Select 1-bit transfer mode.  Default: 4-bit transfer mode."}]}, {"type": 3, "name": "STM32_BBSRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "BBSRAM File Support", "cond": "STM32_BKPSRAM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_BKPSRAM && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 27, "name": "STM32_BBSRAM_FILES", "value": "", "user_value": null, "dep": "n", "prompt": "Max Files to support in BBSRAM", "cond": "STM32_BKPSRAM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "STM32_BKPSRAM && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_SAVE_CRASHDUMP", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Saving Panic to BBSRAM", "cond": "STM32_BKPSRAM && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_BKPSRAM && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_RTC_COUNTER", "value": "n", "user_value": null, "rev_dep": "STM32_STM32F10XX && ARCH_CHIP_STM32 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_HAVE_RTC_SUBSECONDS", "value": "n", "user_value": null, "rev_dep": "STM32_STM32L15XX && !STM32_LOWDENSITY && ARCH_CHIP_STM32 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_RTC_SUBSECONDS", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 31, "dep": "n", "prompt": "RTC Configuration", "cond": "RTC && ARCH_CHIP_STM32 && ARCH_ARM", "children": [{"type": 27, "name": "RTC_MAGIC_REG", "value": "", "user_value": null, "dep": "n", "prompt": "BKP register", "cond": "!STM32_HAVE_RTC_COUNTER && RTC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32_HAVE_RTC_COUNTER && RTC && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "19", "cond": "!STM32_HAVE_RTC_COUNTER && RTC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "The BKP register used to store/check the Magic value to determine if\nRTC is already setup"}, {"type": 24, "name": "RTC_MAGIC", "value": "", "user_value": null, "dep": "n", "prompt": "RTC Magic 1", "cond": "!STM32_HAVE_RTC_COUNTER && RTC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0xfacefeee", "default": "0xfacefeee", "cond": "!STM32_HAVE_RTC_COUNTER && RTC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Value used as Magic to determine if the RTC is already setup"}, {"type": 24, "name": "RTC_MAGIC_TIME_SET", "value": "", "user_value": null, "dep": "n", "prompt": "RTC Magic 2", "cond": "!STM32_HAVE_RTC_COUNTER && RTC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0xfacefeef", "default": "0xfacefeef", "cond": "!STM32_HAVE_RTC_COUNTER && RTC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Value used as Magic to determine if the RTC has been setup and has\ntime set"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "RTC clock source", "cond": "RTC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "RTC_LSECLOCK", "default": "n", "cond": "RTC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "RTC_LSECLOCK", "value": "n", "user_value": null, "dep": "n", "prompt": "LSE clock", "cond": "y", "help": "Drive the RTC with the LSE clock"}, {"type": 3, "name": "RTC_LSICLOCK", "value": "n", "user_value": null, "dep": "n", "prompt": "LSI clock", "cond": "y", "help": "Drive the RTC with the LSI clock"}, {"type": 3, "name": "RTC_HSECLOCK", "value": "n", "user_value": null, "dep": "n", "prompt": "HSE clock", "cond": "y", "help": "Drive the RTC with the HSE clock, divided down to 1MHz."}]}]}, {"type": 31, "dep": "n", "prompt": "Ethernet MAC configuration", "cond": "STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "children": [{"type": 27, "name": "STM32_PHYADDR", "value": "", "user_value": null, "dep": "n", "prompt": "PHY address", "cond": "STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "The 5-bit address of the PHY on the board.  Default: 1"}, {"type": 3, "name": "STM32_PHYINIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Board-specific PHY Initialization", "cond": "STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Some boards require specialized initialization of the PHY before it can be used.\nThis may include such things as configuring GPIOs, resetting the PHY, etc.  If\nSTM32_PHYINIT is defined in the configuration then the board specific logic must\nprovide stm32_phyinitialize();  The STM32 Ethernet driver will call this function\none time before it first uses the PHY."}, {"type": 3, "name": "STM32_MII", "value": "n", "user_value": null, "dep": "n", "prompt": "Use MII interface", "cond": "STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Support Ethernet MII interface.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "MII clock configuration", "cond": "STM32_MII && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_MII_MCO", "default": "n", "cond": "STM32_STM32F10XX && STM32_MII && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM"}, {"name": "STM32_MII_MCO1", "default": "n", "cond": "(STM32_STM32F207 || STM32_STM32F4XXX) && STM32_MII && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_MII_MCO", "value": "n", "user_value": null, "dep": "n", "prompt": "Use MC0 as MII clock", "cond": "STM32_STM32F10XX && y", "help": "Use MCO to clock the MII interface.  Default:  Use MC0"}, {"type": 3, "name": "STM32_MII_MCO1", "value": "n", "user_value": null, "dep": "n", "prompt": "Use MC01 as MII clock", "cond": "(STM32_STM32F207 || STM32_STM32F4XXX) && y", "help": "Use MCO1 to clock the MII interface.  Default:  Use MC01"}, {"type": 3, "name": "STM32_MII_MCO2", "value": "n", "user_value": null, "dep": "n", "prompt": "Use MC02 as MII clock", "cond": "(STM32_STM32F207 || STM32_STM32F4XXX) && y", "help": "Use MCO2 to clock the MII interface.  Default:  Use MC01"}, {"type": 3, "name": "STM32_MII_EXTCLK", "value": "n", "user_value": null, "dep": "n", "prompt": "External MII clock", "cond": "y", "help": "Clocking is provided by external logic.  Don't use MCO for MII\nclock.  Default:  Use MC0[1]"}]}]}, {"type": 3, "name": "STM32_AUTONEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Use autonegotiation", "cond": "STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Use PHY autonegotiation to determine speed and mode"}, {"type": 3, "name": "STM32_ETHFD", "value": "n", "user_value": null, "dep": "n", "prompt": "Full duplex", "cond": "!STM32_AUTONEG && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!STM32_AUTONEG && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If STM32_AUTONEG is not defined, then this may be defined to select full duplex\nmode. Default: half-duplex"}, {"type": 3, "name": "STM32_ETH100MBPS", "value": "n", "user_value": null, "dep": "n", "prompt": "100 Mbps", "cond": "!STM32_AUTONEG && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!STM32_AUTONEG && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "If STM32_AUTONEG is not defined, then this may be defined to select 100 MBps\nspeed.  Default: 10 Mbps"}, {"type": 27, "name": "STM32_PHYSR", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Status Register Address (decimal)", "cond": "STM32_AUTONEG && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "help": "This must be provided if STM32_AUTONEG is defined.  The PHY status register\naddress may diff from PHY to PHY.  This configuration sets the address of\nthe PHY status register."}, {"type": 3, "name": "STM32_PHYSR_ALTCONFIG", "value": "n", "user_value": null, "dep": "n", "prompt": "PHY Status Alternate Bit Layout", "cond": "STM32_AUTONEG && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_AUTONEG && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Different PHYs present speed and mode information in different ways.  Some\nwill present separate information for speed and mode (this is the default).\nThose PHYs, for example, may provide a 10/100 Mbps indication and a separate\nfull/half duplex indication. This options selects an alternative representation\nwhere speed and mode information are combined.  This might mean, for example,\nseparate bits for 10HD, 100HD, 10FD and 100FD."}, {"type": 24, "name": "STM32_PHYSR_SPEED", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Speed Mask", "cond": "STM32_AUTONEG && !STM32_PHYSR_ALTCONFIG && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "help": "This must be provided if STM32_AUTONEG is defined.  This provides bit mask\nfor isolating the 10 or 100MBps speed indication."}, {"type": 24, "name": "STM32_PHYSR_100MBPS", "value": "", "user_value": null, "dep": "n", "prompt": "PHY 100Mbps Speed Value", "cond": "STM32_AUTONEG && !STM32_PHYSR_ALTCONFIG && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "help": "This must be provided if STM32_AUTONEG is defined.  This provides the value\nof the speed bit(s) indicating 100MBps speed."}, {"type": 24, "name": "STM32_PHYSR_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Mode Mask", "cond": "STM32_AUTONEG && !STM32_PHYSR_ALTCONFIG && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "help": "This must be provided if STM32_AUTONEG is defined.  This provide bit mask\nfor isolating the full or half duplex mode bits."}, {"type": 24, "name": "STM32_PHYSR_FULLDUPLEX", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Full Duplex Mode Value", "cond": "STM32_AUTONEG && !STM32_PHYSR_ALTCONFIG && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "help": "This must be provided if STM32_AUTONEG is defined.  This provides the\nvalue of the mode bits indicating full duplex mode."}, {"type": 24, "name": "STM32_PHYSR_ALTMODE", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Mode Mask", "cond": "STM32_AUTONEG && STM32_PHYSR_ALTCONFIG && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "help": "This must be provided if STM32_AUTONEG is defined.  This provide bit mask\nfor isolating the speed and full/half duplex mode bits."}, {"type": 24, "name": "STM32_PHYSR_10HD", "value": "", "user_value": null, "dep": "n", "prompt": "10MBase-T Half Duplex Value", "cond": "STM32_AUTONEG && STM32_PHYSR_ALTCONFIG && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "help": "This must be provided if STM32_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 10Mbps, half duplex setting."}, {"type": 24, "name": "STM32_PHYSR_100HD", "value": "", "user_value": null, "dep": "n", "prompt": "100Base-T Half Duplex Value", "cond": "STM32_AUTONEG && STM32_PHYSR_ALTCONFIG && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "help": "This must be provided if STM32_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 100Mbps, half duplex setting."}, {"type": 24, "name": "STM32_PHYSR_10FD", "value": "", "user_value": null, "dep": "n", "prompt": "10Base-T Full Duplex Value", "cond": "STM32_AUTONEG && STM32_PHYSR_ALTCONFIG && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "help": "This must be provided if STM32_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 10Mbps, full duplex setting."}, {"type": 24, "name": "STM32_PHYSR_100FD", "value": "", "user_value": null, "dep": "n", "prompt": "100Base-T Full Duplex Value", "cond": "STM32_AUTONEG && STM32_PHYSR_ALTCONFIG && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "help": "This must be provided if STM32_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 100Mbps, full duplex setting."}, {"type": 3, "name": "STM32_ETH_PTP", "value": "n", "user_value": null, "dep": "n", "prompt": "Precision Time Protocol (PTP)", "cond": "STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Precision Time Protocol (PTP).  Not supported but some hooks are indicated\nwith this condition."}, {"type": 3, "name": "STM32_RMII", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "!STM32_MII && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "RMII clock configuration", "cond": "STM32_RMII && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_RMII_MCO", "default": "n", "cond": "STM32_STM32F10XX && STM32_RMII && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM"}, {"name": "STM32_RMII_MCO1", "default": "n", "cond": "(STM32_STM32F207 || STM32_STM32F4XXX) && STM32_RMII && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_RMII_MCO", "value": "n", "user_value": null, "dep": "n", "prompt": "Use MC0 as RMII clock", "cond": "STM32_STM32F10XX && y", "help": "Use MCO to clock the RMII interface.  Default:  Use MC0"}, {"type": 3, "name": "STM32_RMII_MCO1", "value": "n", "user_value": null, "dep": "n", "prompt": "Use MC01 as RMII clock", "cond": "(STM32_STM32F207 || STM32_STM32F4XXX) && y", "help": "Use MCO1 to clock the RMII interface.  Default:  Use MC01"}, {"type": 3, "name": "STM32_RMII_MCO2", "value": "n", "user_value": null, "dep": "n", "prompt": "Use MC02 as RMII clock", "cond": "(STM32_STM32F207 || STM32_STM32F4XXX) && y", "help": "Use MCO2 to clock the RMII interface.  Default:  Use MC01"}, {"type": 3, "name": "STM32_RMII_EXTCLK", "value": "n", "user_value": null, "dep": "n", "prompt": "External RMII clock", "cond": "y", "help": "Clocking is provided by external logic.  Don't use MCO for RMII\nclock.  Default:  Use MC0[1]"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_ETHMAC_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM"}, {"name": "STM32_ETHMAC_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Work queue support is required to use the Ethernet driver.  If the\nlow priority work queue is available, then it should be used by the\ndriver.", "children": [{"type": 3, "name": "STM32_ETHMAC_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "STM32_ETHMAC_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}, {"type": 3, "name": "STM32_ETHMAC_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register-Level Debug", "cond": "DEBUG_NET_INFO && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_NET_INFO && STM32_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable very low-level register access debug.  Depends on CONFIG_DEBUG_FEATURES."}]}, {"type": 31, "dep": "n", "prompt": "USB FS Host Configuration", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "children": [{"type": 27, "name": "STM32_OTGFS_RXFIFO_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Rx Packet Size", "cond": "USBHOST && STM32_OTGFS && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "128", "default": "128", "cond": "USBHOST && STM32_OTGFS && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Size of the RX FIFO in 32-bit words. Default 128 (512 bytes)"}, {"type": 27, "name": "STM32_OTGFS_NPTXFIFO_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Non-periodic Tx FIFO Size", "cond": "USBHOST && STM32_OTGFS && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "96", "default": "96", "cond": "USBHOST && STM32_OTGFS && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Size of the non-periodic Tx FIFO in 32-bit words.  Default 96 (384 bytes)"}, {"type": 27, "name": "STM32_OTGFS_PTXFIFO_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Periodic Tx FIFO size", "cond": "USBHOST && STM32_OTGFS && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "128", "default": "128", "cond": "USBHOST && STM32_OTGFS && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Size of the periodic Tx FIFO in 32-bit words.  Default 96 (384 bytes)"}, {"type": 27, "name": "STM32_OTGFS_DESCSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Descriptor Size", "cond": "USBHOST && STM32_OTGFS && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "128", "default": "128", "cond": "USBHOST && STM32_OTGFS && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Maximum size to allocate for descriptor memory descriptor.  Default: 128"}, {"type": 3, "name": "STM32_OTGFS_SOFINTR", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable SOF interrupts", "cond": "USBHOST && STM32_OTGFS && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "USBHOST && STM32_OTGFS && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable SOF interrupts.  Why would you ever want to do that?"}, {"type": 3, "name": "STM32_OTGFS_VBUS_CONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable VBus Control", "cond": "USBHOST && STM32_OTGFS && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "USBHOST && STM32_OTGFS && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable VBus control.  Used when the board has VBus sensing and\na power switch for the OTG FS USB port.  Disable this config\nif the board lacks this USB VBus control circuitry."}]}, {"type": 31, "dep": "n", "prompt": "USB HS Host Configuration", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "children": [{"type": 27, "name": "STM32_OTGHS_RXFIFO_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Rx Packet Size", "cond": "USBHOST && STM32_OTGHS && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "128", "default": "128", "cond": "USBHOST && STM32_OTGHS && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Size of the RX FIFO in 32-bit words. Default 128 (512 bytes)"}, {"type": 27, "name": "STM32_OTGHS_NPTXFIFO_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Non-periodic Tx FIFO Size", "cond": "USBHOST && STM32_OTGHS && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "96", "default": "96", "cond": "USBHOST && STM32_OTGHS && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Size of the non-periodic Tx FIFO in 32-bit words.  Default 96 (384 bytes)"}, {"type": 27, "name": "STM32_OTGHS_PTXFIFO_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Periodic Tx FIFO size", "cond": "USBHOST && STM32_OTGHS && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "128", "default": "128", "cond": "USBHOST && STM32_OTGHS && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Size of the periodic Tx FIFO in 32-bit words.  Default 96 (384 bytes)"}, {"type": 27, "name": "STM32_OTGHS_DESCSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Descriptor Size", "cond": "USBHOST && STM32_OTGHS && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "128", "default": "128", "cond": "USBHOST && STM32_OTGHS && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Maximum size to allocate for descriptor memory descriptor.  Default: 128"}, {"type": 3, "name": "STM32_OTGHS_SOFINTR", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable SOF interrupts", "cond": "USBHOST && STM32_OTGHS && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "USBHOST && STM32_OTGHS && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable SOF interrupts.  Why would you ever want to do that?"}]}, {"type": 31, "dep": "n", "prompt": "USB Host Debug Configuration", "cond": "ARCH_CHIP_STM32 && ARCH_ARM", "children": [{"type": 3, "name": "STM32_USBHOST_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register-Level Debug", "cond": "USBHOST && DEBUG_USB_INFO && (STM32_OTGFS || STM32_OTGHS) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "USBHOST && DEBUG_USB_INFO && (STM32_OTGFS || STM32_OTGHS) && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable very low-level register access debug."}, {"type": 3, "name": "STM32_USBHOST_PKTDUMP", "value": "n", "user_value": null, "dep": "n", "prompt": "Packet Dump Debug", "cond": "USBHOST && DEBUG_USB_INFO && (STM32_OTGFS || STM32_OTGHS) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "USBHOST && DEBUG_USB_INFO && (STM32_OTGFS || STM32_OTGHS) && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Dump all incoming and outgoing USB packets."}]}, {"type": 6, "dep": "n", "prompt": "USB Device Configuration", "cond": "ARCH_CHIP_STM32 && ARCH_ARM"}, {"type": 3, "name": "STM32_USB_ITRMP", "value": "n", "user_value": null, "dep": "n", "prompt": "Re-map USB interrupt", "cond": "STM32_USB && STM32_STM32F30XX && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!STM32_CAN1 && STM32_USB && STM32_STM32F30XX && ARCH_CHIP_STM32 && ARCH_ARM"}, {"name": "y", "default": "y", "cond": "STM32_CAN1 && STM32_USB && STM32_STM32F30XX && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "The legacy USB in the F1 series shared interrupt lines with USB\ndevice and CAN1.  In the F3 series, a hardware options was added to\neither retain the legacy F1 behavior or to map the USB interrupts to\nthere own dedicated vectors.  The option is available only for the\nF3 family and selects the use of the dedicated USB interrupts."}, {"type": 31, "dep": "n", "prompt": "CAN driver configuration", "cond": "STM32_CAN && ARCH_CHIP_STM32 && ARCH_ARM", "children": [{"type": 27, "name": "CAN1_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "CAN1 BAUD", "cond": "STM32_CAN1 && STM32_CAN && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "250000", "default": "250000", "cond": "STM32_CAN1 && STM32_CAN && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "CAN1 BAUD rate.  Required if CONFIG_STM32_CAN1 is defined."}, {"type": 27, "name": "CAN2_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "CAN2 BAUD", "cond": "STM32_CAN2 && STM32_CAN && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "250000", "default": "250000", "cond": "STM32_CAN2 && STM32_CAN && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "CAN2 BAUD rate.  Required if CONFIG_STM32_CAN2 is defined."}, {"type": 27, "name": "CAN_TSEG1", "value": "", "user_value": null, "dep": "n", "prompt": "TSEG1 quanta", "cond": "STM32_CAN && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "6", "default": "6", "cond": "STM32_CAN && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "The number of CAN time quanta in segment 1. Default: 6"}, {"type": 27, "name": "CAN_TSEG2", "value": "", "user_value": null, "dep": "n", "prompt": "TSEG2 quanta", "cond": "STM32_CAN && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "7", "default": "7", "cond": "STM32_CAN && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "The number of CAN time quanta in segment 2. Default: 7"}, {"type": 3, "name": "STM32_CAN_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN Register level debug", "cond": "DEBUG_CAN_INFO && STM32_CAN && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_CAN_INFO && STM32_CAN && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Output detailed register-level CAN device debug information.\nRequires also CONFIG_DEBUG_CAN_INFO."}]}, {"type": 31, "dep": "n", "prompt": "LTDC Configuration", "cond": "STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM", "children": [{"type": 3, "name": "STM32_LTDC_INTERFACE", "value": "n", "user_value": null, "dep": "n", "prompt": "LTDC interface support", "cond": "STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enable the ltdc interface to support ltdc layer control."}, {"type": 3, "name": "STM32_LTDC_BACKLIGHT", "value": "n", "user_value": null, "dep": "n", "prompt": "Backlight support", "cond": "STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 24, "name": "STM32_LTDC_DEFBACKLIGHT", "value": "", "user_value": null, "dep": "n", "prompt": "Default backlight level", "cond": "STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0xf0", "default": "0xf0", "cond": "STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 24, "name": "STM32_LTDC_BACKCOLOR", "value": "", "user_value": null, "dep": "n", "prompt": "Background color", "cond": "STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0x0", "default": "0x0", "cond": "STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "This is the background color that will be used as the LTDC\nbackground layer color.  It is an RGB888 format value."}, {"type": 3, "name": "STM32_LTDC_DITHER", "value": "n", "user_value": null, "dep": "n", "prompt": "Dither support", "cond": "STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 27, "name": "STM32_LTDC_DITHER_RED", "value": "", "user_value": null, "dep": "n", "prompt": "Dither red width", "cond": "STM32_LTDC_DITHER && STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "STM32_LTDC_DITHER && STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "7", "cond": "STM32_LTDC_DITHER && STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "This is the dither red width."}, {"type": 27, "name": "STM32_LTDC_DITHER_GREEN", "value": "", "user_value": null, "dep": "n", "prompt": "Dither green width", "cond": "STM32_LTDC_DITHER && STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "STM32_LTDC_DITHER && STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "7", "cond": "STM32_LTDC_DITHER && STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "This is the dither green width."}, {"type": 27, "name": "STM32_LTDC_DITHER_BLUE", "value": "", "user_value": null, "dep": "n", "prompt": "Dither blue width", "cond": "STM32_LTDC_DITHER && STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "STM32_LTDC_DITHER && STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "7", "cond": "STM32_LTDC_DITHER && STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "This is the dither blue width."}]}, {"type": 24, "name": "STM32_LTDC_FB_BASE", "value": "", "user_value": null, "dep": "n", "prompt": "Framebuffer memory start address", "cond": "STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM", "help": "If you are using the LTDC, then you must provide the address\nof the start of the framebuffer.  This address will typically\nbe in the SRAM or SDRAM memory region of the FSMC."}, {"type": 27, "name": "STM32_LTDC_FB_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Framebuffer memory size (bytes)", "cond": "STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Layer 1 color format", "cond": "STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_LTDC_L1_RGB565", "default": "n", "cond": "STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_LTDC_L1_L8", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bpp L8 (8-bit CLUT)", "cond": "y"}, {"type": 3, "name": "STM32_LTDC_L1_AL44", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bpp AL44 (4-bit alpha + 4-bit CLUT)", "cond": "y"}, {"type": 3, "name": "STM32_LTDC_L1_AL88", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp AL88 (8-bit alpha + 8-bit CLUT)", "cond": "y"}, {"type": 3, "name": "STM32_LTDC_L1_RGB565", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp RGB 565", "cond": "y"}, {"type": 3, "name": "STM32_LTDC_L1_ARGB4444", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp ARGB 4444", "cond": "y"}, {"type": 3, "name": "STM32_LTDC_L1_ARGB1555", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp ARGB 1555", "cond": "y"}, {"type": 3, "name": "STM32_LTDC_L1_RGB888", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bpp RGB 888", "cond": "y"}, {"type": 3, "name": "STM32_LTDC_L1_ARGB8888", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bpp ARGB 8888", "cond": "y"}]}, {"type": 3, "name": "STM32_LTDC_L2", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Layer 2 support", "cond": "STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Layer 2 (top layer) color format", "cond": "STM32_LTDC_L2 && STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_LTDC_L2_RGB565", "default": "n", "cond": "STM32_LTDC_L2 && STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_LTDC_L2_L8", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bpp L8 (8-bit CLUT)", "cond": "y"}, {"type": 3, "name": "STM32_LTDC_L2_AL44", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bpp AL44 (4-bit alpha + 4-bit CLUT)", "cond": "y"}, {"type": 3, "name": "STM32_LTDC_L2_AL88", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp AL88 (8-bit alpha + 8-bit CLUT)", "cond": "y"}, {"type": 3, "name": "STM32_LTDC_L2_RGB565", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp RGB 565", "cond": "y"}, {"type": 3, "name": "STM32_LTDC_L2_ARGB4444", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp ARGB 4444", "cond": "y"}, {"type": 3, "name": "STM32_LTDC_L2_ARGB1555", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp ARGB 1555", "cond": "y"}, {"type": 3, "name": "STM32_LTDC_L2_RGB888", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bpp RGB 888", "cond": "y"}, {"type": 3, "name": "STM32_LTDC_L2_ARGB8888", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bpp ARGB 8888", "cond": "y"}]}]}, {"type": 3, "name": "FB_CMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable color map support", "cond": "(STM32_LTDC_L1_L8 || STM32_LTDC_L2_L8) && STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "(STM32_LTDC_L1_L8 || STM32_LTDC_L2_L8) && STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enabling color map support is neccessary for ltdc L8 format."}, {"type": 3, "name": "FB_TRANSPARENCY", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable transparency color map support", "cond": "(STM32_LTDC_L1_L8 || STM32_LTDC_L2_L8) && STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "(STM32_LTDC_L1_L8 || STM32_LTDC_L2_L8) && STM32_LTDC && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Enabling transparency color map support is neccessary for ltdc L8 format."}]}, {"type": 31, "dep": "n", "prompt": "DMA2D Configuration", "cond": "STM32_DMA2D && ARCH_CHIP_STM32 && ARCH_ARM", "children": [{"type": 27, "name": "STM32_DMA2D_NLAYERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number DMA2D layers", "cond": "STM32_DMA2D && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "STM32_DMA2D && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Number of allocatable DMA2D layers except the LTDC layer."}, {"type": 31, "dep": "n", "prompt": "Supported pixel format", "cond": "STM32_DMA2D && ARCH_CHIP_STM32 && ARCH_ARM", "children": [{"type": 3, "name": "STM32_DMA2D_L8", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bpp L8 (8-bit CLUT)", "cond": "FB_CMAP && STM32_DMA2D && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "FB_CMAP && STM32_DMA2D && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_DMA2D_AL44", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bpp AL44 (4-bit alpha + 4-bit CLUT)", "cond": "FB_CMAP && STM32_DMA2D && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "FB_CMAP && STM32_DMA2D && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_DMA2D_AL88", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp AL88 (8-bit alpha + 8-bit CLUT)", "cond": "FB_CMAP && STM32_DMA2D && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "FB_CMAP && STM32_DMA2D && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_DMA2D_RGB565", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp RGB 565", "cond": "STM32_DMA2D && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "STM32_DMA2D && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_DMA2D_ARGB4444", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp ARGB 4444", "cond": "STM32_DMA2D && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_DMA2D && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_DMA2D_ARGB1555", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp ARGB 1555", "cond": "STM32_DMA2D && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_DMA2D && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_DMA2D_RGB888", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bpp RGB 888", "cond": "STM32_DMA2D && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "STM32_DMA2D && ARCH_CHIP_STM32 && ARCH_ARM"}]}, {"type": 3, "name": "STM32_DMA2D_ARGB8888", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bpp ARGB 8888", "cond": "STM32_DMA2D && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_DMA2D && ARCH_CHIP_STM32 && ARCH_ARM"}]}]}]}, {"type": 31, "dep": "n", "prompt": "QEncoder Driver", "cond": "QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM", "children": [{"type": 3, "name": "STM32_TIM1_QE", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1", "cond": "STM32_TIM1 && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM1 && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve TIM1 for use by QEncoder.", "children": [{"type": 27, "name": "STM32_TIM1_QEPSC", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 pulse prescaler", "cond": "STM32_TIM1_QE && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "STM32_TIM1_QE && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "This prescaler divides the number of recorded encoder pulses,\nlimiting the count rate at the expense of resolution."}]}, {"type": 3, "name": "STM32_TIM2_QE", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2", "cond": "STM32_TIM2 && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM2 && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve TIM2 for use by QEncoder.", "children": [{"type": 27, "name": "STM32_TIM2_QEPSC", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 pulse prescaler", "cond": "STM32_TIM2_QE && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "STM32_TIM2_QE && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "This prescaler divides the number of recorded encoder pulses,\nlimiting the count rate at the expense of resolution."}]}, {"type": 3, "name": "STM32_TIM3_QE", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3", "cond": "STM32_TIM3 && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM3 && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve TIM3 for use by QEncoder.", "children": [{"type": 27, "name": "STM32_TIM3_QEPSC", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 pulse prescaler", "cond": "STM32_TIM3_QE && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "STM32_TIM3_QE && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "This prescaler divides the number of recorded encoder pulses,\nlimiting the count rate at the expense of resolution."}]}, {"type": 3, "name": "STM32_TIM4_QE", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4", "cond": "STM32_TIM4 && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM4 && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve TIM4 for use by QEncoder.", "children": [{"type": 27, "name": "STM32_TIM4_QEPSC", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 pulse prescaler", "cond": "STM32_TIM4_QE && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "STM32_TIM4_QE && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "This prescaler divides the number of recorded encoder pulses,\nlimiting the count rate at the expense of resolution."}]}, {"type": 3, "name": "STM32_TIM5_QE", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5", "cond": "STM32_TIM5 && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM5 && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve TIM5 for use by QEncoder.", "children": [{"type": 27, "name": "STM32_TIM5_QEPSC", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 pulse prescaler", "cond": "STM32_TIM5_QE && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "STM32_TIM5_QE && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "This prescaler divides the number of recorded encoder pulses,\nlimiting the count rate at the expense of resolution."}]}, {"type": 3, "name": "STM32_TIM8_QE", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8", "cond": "STM32_TIM8 && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32_TIM8 && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "Reserve TIM8 for use by QEncoder.", "children": [{"type": 27, "name": "STM32_TIM8_QEPSC", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 pulse prescaler", "cond": "STM32_TIM8_QE && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "STM32_TIM8_QE && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM"}], "help": "This prescaler divides the number of recorded encoder pulses,\nlimiting the count rate at the expense of resolution."}]}, {"type": 3, "name": "STM32_QENCODER_FILTER", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable filtering on STM32 QEncoder input", "cond": "QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Input channel sampling frequency", "cond": "STM32_QENCODER_FILTER && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_QENCODER_SAMPLE_FDTS_4", "default": "n", "cond": "STM32_QENCODER_FILTER && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_QENCODER_SAMPLE_FDTS", "value": "n", "user_value": null, "dep": "n", "prompt": "fDTS", "cond": "y"}, {"type": 3, "name": "STM32_QENCODER_SAMPLE_CKINT", "value": "n", "user_value": null, "dep": "n", "prompt": "fCK_INT", "cond": "y"}, {"type": 3, "name": "STM32_QENCODER_SAMPLE_FDTS_2", "value": "n", "user_value": null, "dep": "n", "prompt": "fDTS/2", "cond": "y"}, {"type": 3, "name": "STM32_QENCODER_SAMPLE_FDTS_4", "value": "n", "user_value": null, "dep": "n", "prompt": "fDTS/4", "cond": "y"}, {"type": 3, "name": "STM32_QENCODER_SAMPLE_FDTS_8", "value": "n", "user_value": null, "dep": "n", "prompt": "fDTS/8", "cond": "y"}, {"type": 3, "name": "STM32_QENCODER_SAMPLE_FDTS_16", "value": "n", "user_value": null, "dep": "n", "prompt": "fDTS/16", "cond": "y"}, {"type": 3, "name": "STM32_QENCODER_SAMPLE_FDTS_32", "value": "n", "user_value": null, "dep": "n", "prompt": "fDTS/32", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Input channel event count", "cond": "STM32_QENCODER_FILTER && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM", "defaults": [{"name": "STM32_QENCODER_SAMPLE_EVENT_6", "default": "n", "cond": "STM32_QENCODER_FILTER && QENCODER && (STM32_TIM1 || STM32_TIM2 || STM32_TIM3 || STM32_TIM4 || STM32_TIM5 || STM32_TIM8) && ARCH_CHIP_STM32 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32_QENCODER_SAMPLE_EVENT_1", "value": "n", "user_value": null, "dep": "n", "prompt": "1", "cond": "STM32_QENCODER_SAMPLE_FDTS && y"}, {"type": 3, "name": "STM32_QENCODER_SAMPLE_EVENT_2", "value": "n", "user_value": null, "dep": "n", "prompt": "2", "cond": "STM32_QENCODER_SAMPLE_CKINT && y"}, {"type": 3, "name": "STM32_QENCODER_SAMPLE_EVENT_4", "value": "n", "user_value": null, "dep": "n", "prompt": "4", "cond": "STM32_QENCODER_SAMPLE_CKINT && y"}, {"type": 3, "name": "STM32_QENCODER_SAMPLE_EVENT_5", "value": "n", "user_value": null, "dep": "n", "prompt": "5", "cond": "(STM32_QENCODER_SAMPLE_FDTS_16 || STM32_QENCODER_SAMPLE_FDTS_32) && y"}, {"type": 3, "name": "STM32_QENCODER_SAMPLE_EVENT_6", "value": "n", "user_value": null, "dep": "n", "prompt": "6", "cond": "!STM32_QENCODER_SAMPLE_FDTS && !STM32_QENCODER_SAMPLE_CKINT && y"}, {"type": 3, "name": "STM32_QENCODER_SAMPLE_EVENT_8", "value": "n", "user_value": null, "dep": "n", "prompt": "8", "cond": "!STM32_QENCODER_SAMPLE_FDTS && y"}]}]}]}, {"type": 6, "dep": "n", "prompt": "STM32F0xx Configuration Options", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "ST STM32F0XX Chip Selection", "cond": "ARCH_CHIP_STM32F0 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "ARCH_CHIP_STM32F051R8", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_STM32F030C6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F030C6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F03X", "cond": "y"}, {"symbol": "STM32F0_VALUELINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F030C8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F030C8", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F03X", "cond": "y"}, {"symbol": "STM32F0_VALUELINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F030CC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F030CC", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F03X", "cond": "y"}, {"symbol": "STM32F0_VALUELINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F030F4", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F030F4", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F03X", "cond": "y"}, {"symbol": "STM32F0_VALUELINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F030K6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F030K6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F03X", "cond": "y"}, {"symbol": "STM32F0_VALUELINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F030R8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F030R8", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F03X", "cond": "y"}, {"symbol": "STM32F0_VALUELINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F030RC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F030RC", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F03X", "cond": "y"}, {"symbol": "STM32F0_VALUELINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F031C4", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F031C4", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F03X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F031C6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F031C6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F03X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F031E6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F031E6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F03X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F031F4", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F031F4", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F03X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F031F6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F031F6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F03X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F031G4", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F031G4", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F03X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F031G6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F031G6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F03X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F031K4", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F031K4", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F03X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F031K6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F031K6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F03X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F038C6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F038C6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F03X", "cond": "y"}, {"symbol": "STM32F0_LOWVOLTLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F038E6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F038E6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F03X", "cond": "y"}, {"symbol": "STM32F0_LOWVOLTLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F038F6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F038F6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F03X", "cond": "y"}, {"symbol": "STM32F0_LOWVOLTLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F038G6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F038G6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F03X", "cond": "y"}, {"symbol": "STM32F0_LOWVOLTLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F038K6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F038K6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F03X", "cond": "y"}, {"symbol": "STM32F0_LOWVOLTLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F042C4", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F042C4", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F04X", "cond": "y"}, {"symbol": "STM32F0_USBLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F042C6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F042C6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F04X", "cond": "y"}, {"symbol": "STM32F0_USBLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F042F4", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F042F4", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F04X", "cond": "y"}, {"symbol": "STM32F0_USBLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F042F6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F042F6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F04X", "cond": "y"}, {"symbol": "STM32F0_USBLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F042G4", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F042G4", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F04X", "cond": "y"}, {"symbol": "STM32F0_USBLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F042G6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F042G6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F04X", "cond": "y"}, {"symbol": "STM32F0_USBLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F042K4", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F042K4", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F04X", "cond": "y"}, {"symbol": "STM32F0_USBLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F042K6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F042K6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F04X", "cond": "y"}, {"symbol": "STM32F0_USBLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F042T6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F042T6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F04X", "cond": "y"}, {"symbol": "STM32F0_USBLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F048C6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F048C6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F04X", "cond": "y"}, {"symbol": "STM32F0_LOWVOLTLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F048G6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F048G6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F04X", "cond": "y"}, {"symbol": "STM32F0_LOWVOLTLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F048T6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F048T6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F04X", "cond": "y"}, {"symbol": "STM32F0_LOWVOLTLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F051C4", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F051C4", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F05X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F051C6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F051C6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F05X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F051C8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F051C8", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F05X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F051K4", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F051K4", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F05X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F051K6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F051K6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F05X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F051K8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F051K8", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F05X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F051R4", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F051R4", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F05X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F051R6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F051R6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F05X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F051R8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F051R8", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F05X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F051T8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F051T8", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F05X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F058C8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F058C8", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F05X", "cond": "y"}, {"symbol": "STM32F0_LOWVOLTLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F058R8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F058R8", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F05X", "cond": "y"}, {"symbol": "STM32F0_LOWVOLTLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F058T8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F058T8", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F05X", "cond": "y"}, {"symbol": "STM32F0_LOWVOLTLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F070C6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F070C6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F07X", "cond": "y"}, {"symbol": "STM32F0_VALUELINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F070CB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F070CB", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F07X", "cond": "y"}, {"symbol": "STM32F0_VALUELINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F070F6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F070F6", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F07X", "cond": "y"}, {"symbol": "STM32F0_VALUELINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F070RB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F070RB", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F07X", "cond": "y"}, {"symbol": "STM32F0_VALUELINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F071C8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F071C8", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F07X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F071CB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F071CB", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F07X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F071RB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F071RB", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F07X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F071V8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F071V8", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F07X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F071VB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F071VB", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F07X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F072C8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F072C8", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F07X", "cond": "y"}, {"symbol": "STM32F0_USBLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F072CB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F072CB", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F07X", "cond": "y"}, {"symbol": "STM32F0_USBLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F072R8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F072R8", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F07X", "cond": "y"}, {"symbol": "STM32F0_USBLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F072RB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F072RB", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F07X", "cond": "y"}, {"symbol": "STM32F0_USBLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F072V8", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F072V8", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F07X", "cond": "y"}, {"symbol": "STM32F0_USBLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F072VB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F072VB", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F07X", "cond": "y"}, {"symbol": "STM32F0_USBLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F078CB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F078CB", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F07X", "cond": "y"}, {"symbol": "STM32F0_LOWVOLTLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F078RB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F078RB", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F07X", "cond": "y"}, {"symbol": "STM32F0_LOWVOLTLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F078VB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F078VB", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F07X", "cond": "y"}, {"symbol": "STM32F0_LOWVOLTLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F091CB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F091CB", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F09X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F091CC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F091CC", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F09X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F091RB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F091RB", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F09X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F091RC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F091RC", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F09X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F091VB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F091VB", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F09X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F091VC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F091VC", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F09X", "cond": "y"}, {"symbol": "STM32F0_ACCESSLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F098CC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F098CC", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F09X", "cond": "y"}, {"symbol": "STM32F0_LOWVOLTLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F098RC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F098RC", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F09X", "cond": "y"}, {"symbol": "STM32F0_LOWVOLTLINE", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_STM32F098VC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F098VC", "cond": "y", "selects": [{"symbol": "STM32F0_STM32F09X", "cond": "y"}, {"symbol": "STM32F0_LOWVOLTLINE", "cond": "y"}]}]}, {"type": 3, "name": "ARCH_FAMILY_STM32F0XX", "value": "n", "user_value": null, "dep": "n"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Override Flash Size Designator", "cond": "ARCH_CHIP_STM32 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "STM32F0_FLASH_CONFIG_DEFAULT", "default": "n", "cond": "ARCH_CHIP_STM32 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "help": "STM32F series parts numbering (sans the package type) ends with a number or letter\nthat designates the FLASH size.\n\n   Designator  Size in KiB\n          4    16\n          6    32\n          8    64\n          B    128\n          C    256\n          D    384\n          E    512\n          F    768\n          G    1024\n          I    2048\n\nThis configuration option defaults to using the configuration based on that designator\nor the default smaller size if there is no last character designator is present in the\nSTM32 Chip Selection.\n\nExamples:\n   If the STM32F407VE is chosen, the Flash configuration would be 'E', if a variant of\n   the part with a  2048 KiB Flash is released in the future one could simply select\n   the 'I' designator here.\n\n   If an STM32F42xxx or  Series parts is chosen the default Flash configuration will be 'G'\n   and can be set herein to 'I' to choose the larger FLASH part.", "children": [{"type": 3, "name": "STM32F0_FLASH_CONFIG_DEFAULT", "value": "n", "user_value": null, "dep": "n", "prompt": "Default", "cond": "y"}, {"type": 3, "name": "STM32F0_FLASH_CONFIG_4", "value": "n", "user_value": null, "dep": "n", "prompt": "4 16KiB", "cond": "y"}, {"type": 3, "name": "STM32F0_FLASH_CONFIG_6", "value": "n", "user_value": null, "dep": "n", "prompt": "6 32KiB", "cond": "y"}, {"type": 3, "name": "STM32F0_FLASH_CONFIG_8", "value": "n", "user_value": null, "dep": "n", "prompt": "8 64KiB", "cond": "y"}, {"type": 3, "name": "STM32F0_FLASH_CONFIG_B", "value": "n", "user_value": null, "dep": "n", "prompt": "B 128KiB", "cond": "y"}, {"type": 3, "name": "STM32F0_FLASH_CONFIG_C", "value": "n", "user_value": null, "dep": "n", "prompt": "C 256KiB", "cond": "y"}, {"type": 3, "name": "STM32F0_FLASH_CONFIG_D", "value": "n", "user_value": null, "dep": "n", "prompt": "D 384KiB", "cond": "y"}, {"type": 3, "name": "STM32F0_FLASH_CONFIG_E", "value": "n", "user_value": null, "dep": "n", "prompt": "E 512KiB", "cond": "y"}, {"type": 3, "name": "STM32F0_FLASH_CONFIG_F", "value": "n", "user_value": null, "dep": "n", "prompt": "F 768KiB", "cond": "y"}, {"type": 3, "name": "STM32F0_FLASH_CONFIG_G", "value": "n", "user_value": null, "dep": "n", "prompt": "G 1024KiB", "cond": "y"}, {"type": 3, "name": "STM32F0_FLASH_CONFIG_I", "value": "n", "user_value": null, "dep": "n", "prompt": "I 2048KiB", "cond": "y"}]}, {"type": 3, "name": "STM32F0_STM32F03X", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F030C6 && y) || (ARCH_CHIP_STM32F030C8 && y) || (ARCH_CHIP_STM32F030CC && y) || (ARCH_CHIP_STM32F030F4 && y) || (ARCH_CHIP_STM32F030K6 && y) || (ARCH_CHIP_STM32F030R8 && y) || (ARCH_CHIP_STM32F030RC && y) || (ARCH_CHIP_STM32F031C4 && y) || (ARCH_CHIP_STM32F031C6 && y) || (ARCH_CHIP_STM32F031E6 && y) || (ARCH_CHIP_STM32F031F4 && y) || (ARCH_CHIP_STM32F031F6 && y) || (ARCH_CHIP_STM32F031G4 && y) || (ARCH_CHIP_STM32F031G6 && y) || (ARCH_CHIP_STM32F031K4 && y) || (ARCH_CHIP_STM32F031K6 && y) || (ARCH_CHIP_STM32F038C6 && y) || (ARCH_CHIP_STM32F038E6 && y) || (ARCH_CHIP_STM32F038F6 && y) || (ARCH_CHIP_STM32F038G6 && y) || (ARCH_CHIP_STM32F038K6 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_STM32F04X", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F042C4 && y) || (ARCH_CHIP_STM32F042C6 && y) || (ARCH_CHIP_STM32F042F4 && y) || (ARCH_CHIP_STM32F042F6 && y) || (ARCH_CHIP_STM32F042G4 && y) || (ARCH_CHIP_STM32F042G6 && y) || (ARCH_CHIP_STM32F042K4 && y) || (ARCH_CHIP_STM32F042K6 && y) || (ARCH_CHIP_STM32F042T6 && y) || (ARCH_CHIP_STM32F048C6 && y) || (ARCH_CHIP_STM32F048G6 && y) || (ARCH_CHIP_STM32F048T6 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_STM32F05X", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F051C4 && y) || (ARCH_CHIP_STM32F051C6 && y) || (ARCH_CHIP_STM32F051C8 && y) || (ARCH_CHIP_STM32F051K4 && y) || (ARCH_CHIP_STM32F051K6 && y) || (ARCH_CHIP_STM32F051K8 && y) || (ARCH_CHIP_STM32F051R4 && y) || (ARCH_CHIP_STM32F051R6 && y) || (ARCH_CHIP_STM32F051R8 && y) || (ARCH_CHIP_STM32F051T8 && y) || (ARCH_CHIP_STM32F058C8 && y) || (ARCH_CHIP_STM32F058R8 && y) || (ARCH_CHIP_STM32F058T8 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_STM32F07X", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F070C6 && y) || (ARCH_CHIP_STM32F070CB && y) || (ARCH_CHIP_STM32F070F6 && y) || (ARCH_CHIP_STM32F070RB && y) || (ARCH_CHIP_STM32F071C8 && y) || (ARCH_CHIP_STM32F071CB && y) || (ARCH_CHIP_STM32F071RB && y) || (ARCH_CHIP_STM32F071V8 && y) || (ARCH_CHIP_STM32F071VB && y) || (ARCH_CHIP_STM32F072C8 && y) || (ARCH_CHIP_STM32F072CB && y) || (ARCH_CHIP_STM32F072R8 && y) || (ARCH_CHIP_STM32F072RB && y) || (ARCH_CHIP_STM32F072V8 && y) || (ARCH_CHIP_STM32F072VB && y) || (ARCH_CHIP_STM32F078CB && y) || (ARCH_CHIP_STM32F078RB && y) || (ARCH_CHIP_STM32F078VB && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_STM32F09X", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F091CB && y) || (ARCH_CHIP_STM32F091CC && y) || (ARCH_CHIP_STM32F091RB && y) || (ARCH_CHIP_STM32F091RC && y) || (ARCH_CHIP_STM32F091VB && y) || (ARCH_CHIP_STM32F091VC && y) || (ARCH_CHIP_STM32F098CC && y) || (ARCH_CHIP_STM32F098RC && y) || (ARCH_CHIP_STM32F098VC && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_HAVE_HSI48", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_VALUELINE", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F030C6 && y) || (ARCH_CHIP_STM32F030C8 && y) || (ARCH_CHIP_STM32F030CC && y) || (ARCH_CHIP_STM32F030F4 && y) || (ARCH_CHIP_STM32F030K6 && y) || (ARCH_CHIP_STM32F030R8 && y) || (ARCH_CHIP_STM32F030RC && y) || (ARCH_CHIP_STM32F070C6 && y) || (ARCH_CHIP_STM32F070CB && y) || (ARCH_CHIP_STM32F070F6 && y) || (ARCH_CHIP_STM32F070RB && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_HAVE_USART3", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_USART4", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_USART5", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM1", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM2", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM3", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM6", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM7", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM14", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM15", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM16", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM17", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_SPI2", "cond": "STM32F0_HIGHDENSITY && ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_SPI3", "cond": "STM32F0_HIGHDENSITY && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_ACCESSLINE", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F031C4 && y) || (ARCH_CHIP_STM32F031C6 && y) || (ARCH_CHIP_STM32F031E6 && y) || (ARCH_CHIP_STM32F031F4 && y) || (ARCH_CHIP_STM32F031F6 && y) || (ARCH_CHIP_STM32F031G4 && y) || (ARCH_CHIP_STM32F031G6 && y) || (ARCH_CHIP_STM32F031K4 && y) || (ARCH_CHIP_STM32F031K6 && y) || (ARCH_CHIP_STM32F051C4 && y) || (ARCH_CHIP_STM32F051C6 && y) || (ARCH_CHIP_STM32F051C8 && y) || (ARCH_CHIP_STM32F051K4 && y) || (ARCH_CHIP_STM32F051K6 && y) || (ARCH_CHIP_STM32F051K8 && y) || (ARCH_CHIP_STM32F051R4 && y) || (ARCH_CHIP_STM32F051R6 && y) || (ARCH_CHIP_STM32F051R8 && y) || (ARCH_CHIP_STM32F051T8 && y) || (ARCH_CHIP_STM32F071C8 && y) || (ARCH_CHIP_STM32F071CB && y) || (ARCH_CHIP_STM32F071RB && y) || (ARCH_CHIP_STM32F071V8 && y) || (ARCH_CHIP_STM32F071VB && y) || (ARCH_CHIP_STM32F091CB && y) || (ARCH_CHIP_STM32F091CC && y) || (ARCH_CHIP_STM32F091RB && y) || (ARCH_CHIP_STM32F091RC && y) || (ARCH_CHIP_STM32F091VB && y) || (ARCH_CHIP_STM32F091VC && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_HAVE_USART3", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_USART4", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_USART5", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM1", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM2", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM3", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM6", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM7", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM14", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM15", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM16", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM17", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_ADC2", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_CAN1", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_SPI2", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_SPI3", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_LOWVOLTLINE", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F038C6 && y) || (ARCH_CHIP_STM32F038E6 && y) || (ARCH_CHIP_STM32F038F6 && y) || (ARCH_CHIP_STM32F038G6 && y) || (ARCH_CHIP_STM32F038K6 && y) || (ARCH_CHIP_STM32F048C6 && y) || (ARCH_CHIP_STM32F048G6 && y) || (ARCH_CHIP_STM32F048T6 && y) || (ARCH_CHIP_STM32F058C8 && y) || (ARCH_CHIP_STM32F058R8 && y) || (ARCH_CHIP_STM32F058T8 && y) || (ARCH_CHIP_STM32F078CB && y) || (ARCH_CHIP_STM32F078RB && y) || (ARCH_CHIP_STM32F078VB && y) || (ARCH_CHIP_STM32F098CC && y) || (ARCH_CHIP_STM32F098RC && y) || (ARCH_CHIP_STM32F098VC && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_HAVE_USART3", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_USART4", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_USART5", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM1", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM2", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM3", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM6", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM7", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM14", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM15", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM16", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM17", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_ADC2", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_CAN1", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_SPI2", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_SPI3", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_USBLINE", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F042C4 && y) || (ARCH_CHIP_STM32F042C6 && y) || (ARCH_CHIP_STM32F042F4 && y) || (ARCH_CHIP_STM32F042F6 && y) || (ARCH_CHIP_STM32F042G4 && y) || (ARCH_CHIP_STM32F042G6 && y) || (ARCH_CHIP_STM32F042K4 && y) || (ARCH_CHIP_STM32F042K6 && y) || (ARCH_CHIP_STM32F042T6 && y) || (ARCH_CHIP_STM32F072C8 && y) || (ARCH_CHIP_STM32F072CB && y) || (ARCH_CHIP_STM32F072R8 && y) || (ARCH_CHIP_STM32F072RB && y) || (ARCH_CHIP_STM32F072V8 && y) || (ARCH_CHIP_STM32F072VB && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_HAVE_HSI48", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_USART3", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_USART4", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM1", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM2", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM3", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM6", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM7", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM14", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM15", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM16", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_TIM17", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_ADC2", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_CAN1", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_SPI2", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_SPI3", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_HAVE_USBDEV", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_DFU", "value": "n", "user_value": null, "dep": "n", "prompt": "DFU bootloader", "cond": "!STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "help": "Configure and position code for use with the STMicro DFU bootloader.  Do\nnot select this option if you will load code using JTAG/SWM."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SysTick clock source", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "STM32F0_SYSTICK_CORECLK", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F0_SYSTICK_CORECLK", "value": "n", "user_value": null, "dep": "n", "prompt": "Cortex-M0 core clock", "cond": "y"}, {"type": 3, "name": "STM32F0_SYSTICK_CORECLK_DIV16", "value": "n", "user_value": null, "dep": "n", "prompt": "Cortex-M0 core clock divided by 16", "cond": "y"}]}, {"type": 31, "dep": "n", "prompt": "STM32 Peripheral Support", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM", "children": [{"type": 3, "name": "STM32F0_HAVE_CCM", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_HSI48", "value": "n", "user_value": null, "rev_dep": "(STM32F0_STM32F09X && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USBLINE && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_USBDEV", "value": "n", "user_value": null, "rev_dep": "STM32F0_USBLINE && ARCH_CHIP_STM32F0 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_FSMC", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_USART3", "value": "n", "user_value": null, "rev_dep": "(STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_ACCESSLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_LOWVOLTLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USBLINE && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_USART4", "value": "n", "user_value": null, "rev_dep": "(STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_ACCESSLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_LOWVOLTLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USBLINE && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_USART5", "value": "n", "user_value": null, "rev_dep": "(STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_ACCESSLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_LOWVOLTLINE && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_USART6", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_USART7", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_USART8", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_TIM1", "value": "n", "user_value": null, "rev_dep": "(STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_ACCESSLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_LOWVOLTLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USBLINE && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_TIM2", "value": "n", "user_value": null, "rev_dep": "(STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_ACCESSLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_LOWVOLTLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USBLINE && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_TIM3", "value": "n", "user_value": null, "rev_dep": "(STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_ACCESSLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_LOWVOLTLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USBLINE && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_TIM6", "value": "n", "user_value": null, "rev_dep": "(STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_ACCESSLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_LOWVOLTLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USBLINE && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_TIM7", "value": "n", "user_value": null, "rev_dep": "(STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_ACCESSLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_LOWVOLTLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USBLINE && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_TIM14", "value": "n", "user_value": null, "rev_dep": "(STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_ACCESSLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_LOWVOLTLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USBLINE && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_TIM15", "value": "n", "user_value": null, "rev_dep": "(STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_ACCESSLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_LOWVOLTLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USBLINE && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_TIM16", "value": "n", "user_value": null, "rev_dep": "(STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_ACCESSLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_LOWVOLTLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USBLINE && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_TIM17", "value": "n", "user_value": null, "rev_dep": "(STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_ACCESSLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_LOWVOLTLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USBLINE && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_TSC", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_ADC2", "value": "n", "user_value": null, "rev_dep": "(STM32F0_ACCESSLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_LOWVOLTLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USBLINE && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_ADC3", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_ADC4", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_ADC1_DMA", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_ADC2_DMA", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_ADC3_DMA", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_ADC4_DMA", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_SDADC1", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_SDADC2", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_SDADC3", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_SDADC1_DMA", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_SDADC2_DMA", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_SDADC3_DMA", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_CAN1", "value": "n", "user_value": null, "rev_dep": "(STM32F0_ACCESSLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_LOWVOLTLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USBLINE && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_COMP1", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_COMP2", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_COMP3", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_COMP4", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_COMP5", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_COMP6", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_COMP7", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_DAC1", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_DAC2", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_RNG", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_I2C2", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_I2C3", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_SPI2", "value": "n", "user_value": null, "rev_dep": "(STM32F0_VALUELINE && STM32F0_HIGHDENSITY && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_ACCESSLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_LOWVOLTLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USBLINE && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_SPI3", "value": "n", "user_value": null, "rev_dep": "(STM32F0_VALUELINE && STM32F0_HIGHDENSITY && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_ACCESSLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_LOWVOLTLINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USBLINE && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_SPI4", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_SPI5", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_SPI6", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_SAIPLL", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_I2SPLL", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_OPAMP1", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_OPAMP2", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_OPAMP3", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HAVE_OPAMP4", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC1", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_ADC", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC2", "cond": "STM32F0_HAVE_ADC2 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_ADC2 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_ADC", "cond": "STM32F0_HAVE_ADC2 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC3", "cond": "STM32F0_HAVE_ADC3 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_ADC3 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_ADC", "cond": "STM32F0_HAVE_ADC3 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_ADC4", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC4", "cond": "STM32F0_HAVE_ADC4 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_ADC4 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_ADC", "cond": "STM32F0_HAVE_ADC4 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_SDADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "SDADC1", "cond": "STM32F0_HAVE_SDADC1 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_SDADC1 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_SDADC", "cond": "STM32F0_HAVE_SDADC1 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_SDADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "SDADC2", "cond": "STM32F0_HAVE_SDADC2 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_SDADC2 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_SDADC", "cond": "STM32F0_HAVE_SDADC2 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_SDADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "SDADC3", "cond": "STM32F0_HAVE_SDADC3 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_SDADC3 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_SDADC", "cond": "STM32F0_HAVE_SDADC3 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_COMP", "value": "n", "user_value": null, "dep": "n", "prompt": "COMP", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_COMP1", "value": "n", "user_value": null, "dep": "n", "prompt": "COMP1", "cond": "STM32F0_HAVE_COMP1 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_COMP1 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_COMP2", "value": "n", "user_value": null, "dep": "n", "prompt": "COMP2", "cond": "STM32F0_HAVE_COMP2 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_COMP2 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_COMP3", "value": "n", "user_value": null, "dep": "n", "prompt": "COMP3", "cond": "STM32F0_HAVE_COMP3 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_COMP3 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_COMP4", "value": "n", "user_value": null, "dep": "n", "prompt": "COMP4", "cond": "STM32F0_HAVE_COMP4 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_COMP4 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_COMP5", "value": "n", "user_value": null, "dep": "n", "prompt": "COMP5", "cond": "STM32F0_HAVE_COMP5 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_COMP5 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_COMP6", "value": "n", "user_value": null, "dep": "n", "prompt": "COMP6", "cond": "STM32F0_HAVE_COMP6 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_COMP6 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_COMP7", "value": "n", "user_value": null, "dep": "n", "prompt": "COMP7", "cond": "STM32F0_HAVE_COMP6 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_COMP6 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_BKP", "value": "n", "user_value": null, "dep": "n", "prompt": "BKP", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_BKPSRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable BKP RAM Domain", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_CAN1", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN1", "cond": "STM32F0_HAVE_CAN1 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_CAN1 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "CAN", "cond": "STM32F0_HAVE_CAN1 && ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_CAN", "cond": "STM32F0_HAVE_CAN1 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_CEC", "value": "n", "user_value": null, "dep": "n", "prompt": "CEC", "cond": "STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_CRC", "value": "n", "user_value": null, "dep": "n", "prompt": "CRC", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_CRYP", "value": "n", "user_value": null, "dep": "n", "prompt": "CRYP", "cond": "(STM32F0_STM32F207 || STM32F0_STM32F40XX) && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(STM32F0_STM32F207 || STM32F0_STM32F40XX) && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_DMA1", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA1", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_DMA", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_DMA2", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA2", "cond": "(!STM32F0_VALUELINE || (STM32F0_VALUELINE && STM32F0_HIGHDENSITY)) && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(!STM32F0_VALUELINE || (STM32F0_VALUELINE && STM32F0_HIGHDENSITY)) && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_DMA", "cond": "(!STM32F0_VALUELINE || (STM32F0_VALUELINE && STM32F0_HIGHDENSITY)) && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC1", "cond": "STM32F0_HAVE_DAC1 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_DAC1 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_DAC", "cond": "STM32F0_HAVE_DAC1 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC2", "cond": "STM32F0_HAVE_DAC2 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_DAC2 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_DAC", "cond": "STM32F0_HAVE_DAC2 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_FSMC", "value": "n", "user_value": null, "dep": "n", "prompt": "FSMC", "cond": "STM32F0_HAVE_FSMC && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_FSMC && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_HASH", "value": "n", "user_value": null, "dep": "n", "prompt": "HASH", "cond": "(STM32F0_STM32F207 || STM32F0_STM32F40XX) && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(STM32F0_STM32F207 || STM32F0_STM32F40XX) && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_I2C1", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C1", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_I2C", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_I2C2", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C2", "cond": "STM32F0_HAVE_I2C2 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_I2C2 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_I2C", "cond": "STM32F0_HAVE_I2C2 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_I2C3", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C3", "cond": "STM32F0_HAVE_I2C3 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_I2C3 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_I2C", "cond": "STM32F0_HAVE_I2C3 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_PWR", "value": "n", "user_value": null, "dep": "n", "prompt": "PWR", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_RNG", "value": "n", "user_value": null, "dep": "n", "prompt": "RNG", "cond": "STM32F0_HAVE_RNG && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_RNG && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_RNG", "cond": "STM32F0_HAVE_RNG && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_SDIO", "value": "n", "user_value": null, "dep": "n", "prompt": "SDIO", "cond": "!STM32F0_CONNECTIVITYLINE && !STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!STM32F0_CONNECTIVITYLINE && !STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SDIO", "cond": "!STM32F0_CONNECTIVITYLINE && !STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SDIOWAIT_WRCOMPLETE", "cond": "!STM32F0_CONNECTIVITYLINE && !STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "SDIO_PREFLIGHT", "cond": "!STM32F0_CONNECTIVITYLINE && !STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_SPI1", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI1", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_SPI", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_SPI2", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI2", "cond": "STM32F0_HAVE_SPI2 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_SPI2 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "STM32F0_HAVE_SPI2 && ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_SPI", "cond": "STM32F0_HAVE_SPI2 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_SPI3", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI3", "cond": "STM32F0_HAVE_SPI3 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_SPI3 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "STM32F0_HAVE_SPI3 && ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_SPI", "cond": "STM32F0_HAVE_SPI3 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_SPI4", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI4", "cond": "STM32F0_HAVE_SPI4 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_SPI4 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "STM32F0_HAVE_SPI4 && ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_SPI", "cond": "STM32F0_HAVE_SPI4 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_SPI5", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI5", "cond": "STM32F0_HAVE_SPI5 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_SPI5 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "STM32F0_HAVE_SPI5 && ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_SPI", "cond": "STM32F0_HAVE_SPI5 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_SPI6", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI6", "cond": "STM32F0_HAVE_SPI6 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_SPI6 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "STM32F0_HAVE_SPI6 && ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"symbol": "STM32F0_SPI", "cond": "STM32F0_HAVE_SPI6 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_SYSCFG", "value": "n", "user_value": null, "dep": "n", "prompt": "SYSCFG", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_TIM1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1", "cond": "STM32F0_HAVE_TIM1 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_TIM1 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_TIM2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_TIM3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3", "cond": "STM32F0_HAVE_TIM3 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_TIM3 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_TIM6", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM6", "cond": "STM32F0_HAVE_TIM6 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_TIM6 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_TIM7", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM7", "cond": "STM32F0_HAVE_TIM7 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_TIM7 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_TIM14", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14", "cond": "STM32F0_HAVE_TIM14 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_TIM14 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_TIM15", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM15", "cond": "STM32F0_HAVE_TIM15 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_TIM15 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_TIM16", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM16", "cond": "STM32F0_HAVE_TIM16 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_TIM16 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_TIM17", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM17", "cond": "STM32F0_HAVE_TIM17 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_TIM17 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_TSC", "value": "n", "user_value": null, "dep": "n", "prompt": "TSC", "cond": "STM32F0_HAVE_TSC && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_TSC && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_USART1", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_USART", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_USART2", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_USART", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_USART3", "value": "n", "user_value": null, "dep": "n", "prompt": "USART3", "cond": "STM32F0_HAVE_USART3 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_USART3 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_USART", "cond": "STM32F0_HAVE_USART3 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_USART4", "value": "n", "user_value": null, "dep": "n", "prompt": "USART4", "cond": "STM32F0_HAVE_USART4 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_USART4 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_USART", "cond": "STM32F0_HAVE_USART4 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_USART5", "value": "n", "user_value": null, "dep": "n", "prompt": "USART5", "cond": "STM32F0_HAVE_USART5 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_USART5 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_USART", "cond": "STM32F0_HAVE_USART5 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_USART6", "value": "n", "user_value": null, "dep": "n", "prompt": "USART6", "cond": "STM32F0_HAVE_USART6 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_USART6 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_USART", "cond": "STM32F0_HAVE_USART6 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_USART7", "value": "n", "user_value": null, "dep": "n", "prompt": "USART7", "cond": "STM32F0_HAVE_USART7 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_USART7 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_USART", "cond": "STM32F0_HAVE_USART7 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_USART8", "value": "n", "user_value": null, "dep": "n", "prompt": "USART8", "cond": "STM32F0_HAVE_USART8 && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_USART8 && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "STM32F0_USART", "cond": "STM32F0_HAVE_USART8 && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_USB", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Device", "cond": "STM32F0_HAVE_USBDEV && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_HAVE_USBDEV && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "USBDEV", "cond": "STM32F0_HAVE_USBDEV && ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_IWDG", "value": "n", "user_value": null, "dep": "n", "prompt": "IWDG", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "WATCHDOG", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F0_WWDG", "value": "n", "user_value": null, "dep": "n", "prompt": "WWDG", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}], "selects": [{"symbol": "WATCHDOG", "cond": "ARCH_CHIP_STM32F0 && ARCH_ARM"}]}]}, {"type": 3, "name": "STM32F0_ADC", "value": "n", "user_value": null, "rev_dep": "(STM32F0_ADC1 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_ADC2 && STM32F0_HAVE_ADC2 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_ADC3 && STM32F0_HAVE_ADC3 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_ADC4 && STM32F0_HAVE_ADC4 && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "STM32F0_SDADC", "value": "n", "user_value": null, "rev_dep": "(STM32F0_SDADC1 && STM32F0_HAVE_SDADC1 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_SDADC2 && STM32F0_HAVE_SDADC2 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_SDADC3 && STM32F0_HAVE_SDADC3 && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "STM32F0_DAC", "value": "n", "user_value": null, "rev_dep": "(STM32F0_DAC1 && STM32F0_HAVE_DAC1 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_DAC2 && STM32F0_HAVE_DAC2 && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "STM32F0_SPI", "value": "n", "user_value": null, "rev_dep": "(STM32F0_SPI1 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_SPI2 && STM32F0_HAVE_SPI2 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_SPI3 && STM32F0_HAVE_SPI3 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_SPI4 && STM32F0_HAVE_SPI4 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_SPI5 && STM32F0_HAVE_SPI5 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_SPI6 && STM32F0_HAVE_SPI6 && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "STM32F0_I2C", "value": "n", "user_value": null, "rev_dep": "(STM32F0_I2C1 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_I2C2 && STM32F0_HAVE_I2C2 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_I2C3 && STM32F0_HAVE_I2C3 && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "STM32F0_CAN", "value": "n", "user_value": null, "rev_dep": "STM32F0_CAN1 && STM32F0_HAVE_CAN1 && ARCH_CHIP_STM32F0 && ARCH_ARM", "dep": "n"}, {"type": 3, "name": "STM32F0_USART", "value": "n", "user_value": null, "rev_dep": "(STM32F0_USART1 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USART2 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USART3 && STM32F0_HAVE_USART3 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USART4 && STM32F0_HAVE_USART4 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USART5 && STM32F0_HAVE_USART5 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USART6 && STM32F0_HAVE_USART6 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USART7 && STM32F0_HAVE_USART7 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_USART8 && STM32F0_HAVE_USART8 && ARCH_CHIP_STM32F0 && ARCH_ARM)", "dep": "n"}, {"type": 3, "name": "STM32F0_SERIALDRIVER", "value": "n", "user_value": null, "rev_dep": "(STM32F0_USART1_SERIALDRIVER && y) || (STM32F0_USART2_SERIALDRIVER && y) || (STM32F0_USART3_SERIALDRIVER && y) || (STM32F0_USART4_SERIALDRIVER && y) || (STM32F0_USART5_SERIALDRIVER && y) || (STM32F0_USART6_SERIALDRIVER && y) || (STM32F0_USART7_SERIALDRIVER && y) || (STM32F0_USART8_SERIALDRIVER && y)", "dep": "n"}, {"type": 3, "name": "STM32F0_1WIREDRIVER", "value": "n", "user_value": null, "rev_dep": "(STM32F0_USART1_1WIREDRIVER && y) || (STM32F0_USART2_1WIREDRIVER && y) || (STM32F0_USART3_1WIREDRIVER && y) || (STM32F0_USART4_1WIREDRIVER && y) || (STM32F0_USART5_1WIREDRIVER && y) || (STM32F0_USART6_1WIREDRIVER && y) || (STM32F0_USART7_1WIREDRIVER && y) || (STM32F0_USART8_1WIREDRIVER && y)", "dep": "n"}, {"type": 31, "dep": "n", "prompt": "U[S]ART Configuration", "cond": "STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "children": [{"type": 6, "dep": "n", "prompt": "U[S]ART Device Configuration", "cond": "STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USART1 Driver Configuration", "cond": "STM32F0_USART1 && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "STM32F0_USART1_SERIALDRIVER", "default": "n", "cond": "STM32F0_USART1 && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F0_USART1_SERIALDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "Standard serial driver", "cond": "y", "selects": [{"symbol": "USART1_SERIALDRIVER", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}, {"symbol": "STM32F0_SERIALDRIVER", "cond": "y"}]}, {"type": 3, "name": "STM32F0_USART1_1WIREDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "1-Wire driver", "cond": "y", "selects": [{"symbol": "STM32F0_1WIREDRIVER", "cond": "y"}]}]}, {"type": 3, "name": "USART1_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART1", "cond": "STM32F0_USART1_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_USART1_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "help": "Enable RS-485 interface on USART1. Your board config will have to\nprovide GPIO_USART1_RS485_DIR pin definition.", "children": [{"type": 27, "name": "USART1_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "USART1 RS-485 DIR pin polarity", "cond": "USART1_RS485 && STM32F0_USART1_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "USART1_RS485 && STM32F0_USART1_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "USART1_RS485 && STM32F0_USART1_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on USART1. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USART2 Driver Configuration", "cond": "STM32F0_USART2 && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "STM32F0_USART2_SERIALDRIVER", "default": "n", "cond": "STM32F0_USART2 && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F0_USART2_SERIALDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "Standard serial driver", "cond": "y", "selects": [{"symbol": "USART2_SERIALDRIVER", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}, {"symbol": "STM32F0_SERIALDRIVER", "cond": "y"}]}, {"type": 3, "name": "STM32F0_USART2_1WIREDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "1-Wire driver", "cond": "y", "selects": [{"symbol": "STM32F0_1WIREDRIVER", "cond": "y"}]}]}, {"type": 3, "name": "USART2_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART2", "cond": "STM32F0_USART2_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_USART2_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "help": "Enable RS-485 interface on USART2. Your board config will have to\nprovide GPIO_USART2_RS485_DIR pin definition.", "children": [{"type": 27, "name": "USART2_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "USART2 RS-485 DIR pin polarity", "cond": "USART2_RS485 && STM32F0_USART2_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "USART2_RS485 && STM32F0_USART2_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "USART2_RS485 && STM32F0_USART2_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on USART2. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USART3 Driver Configuration", "cond": "STM32F0_USART3 && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "STM32F0_USART3_SERIALDRIVER", "default": "n", "cond": "STM32F0_USART3 && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F0_USART3_SERIALDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "Standard serial driver", "cond": "y", "selects": [{"symbol": "USART3_SERIALDRIVER", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}, {"symbol": "STM32F0_SERIALDRIVER", "cond": "y"}]}, {"type": 3, "name": "STM32F0_USART3_1WIREDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "1-Wire driver", "cond": "y", "selects": [{"symbol": "STM32F0_1WIREDRIVER", "cond": "y"}]}]}, {"type": 3, "name": "USART3_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART3", "cond": "STM32F0_USART3_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_USART3_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "help": "Enable RS-485 interface on USART3. Your board config will have to\nprovide GPIO_USART3_RS485_DIR pin definition.", "children": [{"type": 27, "name": "USART3_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "USART3 RS-485 DIR pin polarity", "cond": "USART3_RS485 && STM32F0_USART3_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "USART3_RS485 && STM32F0_USART3_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "USART3_RS485 && STM32F0_USART3_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on USART3. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USART4 Driver Configuration", "cond": "STM32F0_USART4 && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "STM32F0_USART4_SERIALDRIVER", "default": "n", "cond": "STM32F0_USART4 && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F0_USART4_SERIALDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "Standard serial driver", "cond": "y", "selects": [{"symbol": "USART4_SERIALDRIVER", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}, {"symbol": "STM32F0_SERIALDRIVER", "cond": "y"}]}, {"type": 3, "name": "STM32F0_USART4_1WIREDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "1-Wire driver", "cond": "y", "selects": [{"symbol": "STM32F0_1WIREDRIVER", "cond": "y"}]}]}, {"type": 3, "name": "USART4_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART4", "cond": "STM32F0_USART4_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_USART4_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "help": "Enable RS-485 interface on USART4. Your board config will have to\nprovide GPIO_USART4_RS485_DIR pin definition.", "children": [{"type": 27, "name": "USART4_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "USART4 RS-485 DIR pin polarity", "cond": "USART4_RS485 && STM32F0_USART4_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "USART4_RS485 && STM32F0_USART4_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "USART4_RS485 && STM32F0_USART4_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on USART4. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USART5 Driver Configuration", "cond": "STM32F0_USART5 && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "STM32F0_USART5_SERIALDRIVER", "default": "n", "cond": "STM32F0_USART5 && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F0_USART5_SERIALDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "Standard serial driver", "cond": "y", "selects": [{"symbol": "USART5_SERIALDRIVER", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}, {"symbol": "STM32F0_SERIALDRIVER", "cond": "y"}]}, {"type": 3, "name": "STM32F0_USART5_1WIREDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "1-Wire driver", "cond": "y", "selects": [{"symbol": "STM32F0_1WIREDRIVER", "cond": "y"}]}]}, {"type": 3, "name": "USART5_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART5", "cond": "STM32F0_USART5_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_USART5_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "help": "Enable RS-485 interface on USART5. Your board config will have to\nprovide GPIO_USART5_RS485_DIR pin definition.", "children": [{"type": 27, "name": "USART5_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "USART5 RS-485 DIR pin polarity", "cond": "USART5_RS485 && STM32F0_USART5_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "USART5_RS485 && STM32F0_USART5_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "USART5_RS485 && STM32F0_USART5_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on USART5. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USART6 Driver Configuration", "cond": "STM32F0_USART6 && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "STM32F0_USART6_SERIALDRIVER", "default": "n", "cond": "STM32F0_USART6 && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F0_USART6_SERIALDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "Standard serial driver", "cond": "y", "selects": [{"symbol": "USART6_SERIALDRIVER", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}, {"symbol": "STM32F0_SERIALDRIVER", "cond": "y"}]}, {"type": 3, "name": "STM32F0_USART6_1WIREDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "1-Wire driver", "cond": "y", "selects": [{"symbol": "STM32F0_1WIREDRIVER", "cond": "y"}]}]}, {"type": 3, "name": "USART6_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART6", "cond": "STM32F0_USART6_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_USART6_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "help": "Enable RS-485 interface on USART6. Your board config will have to\nprovide GPIO_USART6_RS485_DIR pin definition.", "children": [{"type": 27, "name": "USART6_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "USART6 RS-485 DIR pin polarity", "cond": "USART6_RS485 && STM32F0_USART6_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "USART6_RS485 && STM32F0_USART6_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "USART6_RS485 && STM32F0_USART6_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on USART6. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USART7 Driver Configuration", "cond": "STM32F0_USART7 && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "STM32F0_USART7_SERIALDRIVER", "default": "n", "cond": "STM32F0_USART7 && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F0_USART7_SERIALDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "Standard serial driver", "cond": "y", "selects": [{"symbol": "USART7_SERIALDRIVER", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}, {"symbol": "STM32F0_SERIALDRIVER", "cond": "y"}]}, {"type": 3, "name": "STM32F0_USART7_1WIREDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "1-Wire driver", "cond": "y", "selects": [{"symbol": "STM32F0_1WIREDRIVER", "cond": "y"}]}]}, {"type": 3, "name": "USART7_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART7", "cond": "STM32F0_USART7_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_USART7_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "help": "Enable RS-485 interface on USART7. Your board config will have to\nprovide GPIO_USART7_RS485_DIR pin definition.", "children": [{"type": 27, "name": "USART7_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "USART7 RS-485 DIR pin polarity", "cond": "USART7_RS485 && STM32F0_USART7_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "USART7_RS485 && STM32F0_USART7_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "USART7_RS485 && STM32F0_USART7_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on USART7. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USART8 Driver Configuration", "cond": "STM32F0_USART8 && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "STM32F0_USART8_SERIALDRIVER", "default": "n", "cond": "STM32F0_USART8 && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F0_USART8_SERIALDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "Standard serial driver", "cond": "y", "selects": [{"symbol": "USART8_SERIALDRIVER", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}, {"symbol": "STM32F0_SERIALDRIVER", "cond": "y"}]}, {"type": 3, "name": "STM32F0_USART8_1WIREDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "1-Wire driver", "cond": "y", "selects": [{"symbol": "STM32F0_1WIREDRIVER", "cond": "y"}]}]}, {"type": 3, "name": "USART8_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART8", "cond": "STM32F0_USART8_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F0_USART8_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "help": "Enable RS-485 interface on USART8. Your board config will have to\nprovide GPIO_USART8_RS485_DIR pin definition.", "children": [{"type": 27, "name": "USART8_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "USART8 RS-485 DIR pin polarity", "cond": "USART8_RS485 && STM32F0_USART8_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "USART8_RS485 && STM32F0_USART8_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "USART8_RS485 && STM32F0_USART8_SERIALDRIVER && STM32F0_USART && ARCH_CHIP_STM32F0 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on USART8. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}]}, {"type": 6, "dep": "n", "prompt": "STM32 F7 Configuration Options", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "STM32 F7 Chip Selection", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "ARCH_CHIP_STM32F746", "default": "ARCH_CHIP_STM32F746", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_STM32F745VG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F745VG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F745XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_V", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 320K (240+16+64) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F745VE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F745VE", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F745XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_V", "cond": "y"}], "help": "STM32 F7 Cortex M7, 512 FLASH, 320K (240+16+64) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F745IG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F745IG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F745XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_I", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 320K (240+16+64) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F745IE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F745IE", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F745XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_I", "cond": "y"}], "help": "STM32 F7 Cortex M7, 512 FLASH, 320K (240+16+64) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F745ZE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F745ZE", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F745XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_Z", "cond": "y"}], "help": "STM32 F7 Cortex M7, 512 FLASH, 320K (240+16+64) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F745ZG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F745ZG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F745XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_Z", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 320K (240+16+64) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F746BG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F746BG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F746XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_B", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 320K (240+16+64) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F746VG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F746VG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F746XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_V", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 320K (240+16+64) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F746VE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F746VE", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F746XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_V", "cond": "y"}], "help": "STM32 F7 Cortex M7, 512 FLASH, 320K (240+16+64) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F746BE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F746BE", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F746XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_B", "cond": "y"}], "help": "STM32 F7 Cortex M7, 512 FLASH, 320K (240+16+64) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F746ZG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F746ZG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F746XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_Z", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 320K (240+16+64) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F746IE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F746IE", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F746XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_I", "cond": "y"}], "help": "STM32 F7 Cortex M7, 512 FLASH, 320K (240+16+64) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F746NG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F746NG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F746XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_N", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 320K (240+16+64) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F746NE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F746NE", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F746XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_N", "cond": "y"}], "help": "STM32 F7 Cortex M7, 512 FLASH, 320K (240+16+64) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F746ZE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F746ZE", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F746XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_Z", "cond": "y"}], "help": "STM32 F7 Cortex M7, 512 FLASH, 320K (240+16+64) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F746IG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F746IG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F746XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_I", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 320K (240+16+64) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F756NG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F756NG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F756XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_N", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 320K (240+16+64) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F756BG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F756BG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F756XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_B", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 320K (240+16+64) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F756IG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F756IG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F756XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_I", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 320K (240+16+64) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F756VG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F756VG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F756XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_V", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 320K (240+16+64) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F756ZG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F756ZG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F756XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_Z", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 320K (240+16+64) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F765NI", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F765NI", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F765XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_N", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F765VI", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F765VI", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F765XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_V", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F765VG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F765VG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F765XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_V", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F765BI", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F765BI", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F765XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_B", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F765NG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F765NG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F765XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_N", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F765ZG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F765ZG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F765XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_Z", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F765ZI", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F765ZI", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F765XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_Z", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F765IG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F765IG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F765XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_I", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F765BG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F765BG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F765XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_B", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F765II", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F765II", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F765XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_I", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F767NG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F767NG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F767XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_N", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F767IG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F767IG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F767XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_I", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F767VG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F767VG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F767XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_V", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F767ZG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F767ZG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F767XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_Z", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F767NI", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F767NI", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F767XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_N", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F767VI", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F767VI", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F767XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_V", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F767BG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F767BG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F767XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_B", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F767ZI", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F767ZI", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F767XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_Z", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F767II", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F767II", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F767XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_I", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F769BI", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F769BI", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F769XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_B", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F769II", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F769II", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F769XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_I", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F769BG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F769BG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F769XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_B", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F769NI", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F769NI", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F769XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_N", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F769AI", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F769AI", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F769AX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_A", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F769NG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F769NG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F769XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_N", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F769IG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F769IG", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F769XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_I", "cond": "y"}], "help": "STM32 F7 Cortex M7, 1024 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F777ZI", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F777ZI", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F777XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_Z", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F777VI", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F777VI", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F777XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_V", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F777NI", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F777NI", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F777XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_N", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F777BI", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F777BI", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F777XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_B", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F777II", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F777II", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F777XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_I", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F778AI", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F778AI", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F778AX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_A", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F779II", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F779II", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F779XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_I", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F779NI", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F779NI", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F779XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_N", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F779BI", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F779BI", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F779XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_B", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32F779AI", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F779AI", "cond": "y", "selects": [{"symbol": "STM32F7_STM32F779XX", "cond": "y"}, {"symbol": "STM32F7_FLASH_CONFIG_I", "cond": "y"}, {"symbol": "STM32F7_IO_CONFIG_A", "cond": "y"}], "help": "STM32 F7 Cortex M7, 2048 FLASH, 512K (368+16+128) Kb SRAM"}]}, {"type": 3, "name": "STM32F7_STM32F74XX", "value": "n", "user_value": null, "rev_dep": "(STM32F7_STM32F745XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F746XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_STM32F75XX", "value": "n", "user_value": null, "rev_dep": "STM32F7_STM32F756XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_STM32F76XX", "value": "n", "user_value": null, "rev_dep": "(STM32F7_STM32F765XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F767XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_STM32F77XX", "value": "n", "user_value": null, "rev_dep": "(STM32F7_STM32F777XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_IO_CONFIG_V", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F745VG && y) || (ARCH_CHIP_STM32F745VE && y) || (ARCH_CHIP_STM32F746VG && y) || (ARCH_CHIP_STM32F746VE && y) || (ARCH_CHIP_STM32F756VG && y) || (ARCH_CHIP_STM32F765VI && y) || (ARCH_CHIP_STM32F765VG && y) || (ARCH_CHIP_STM32F767VG && y) || (ARCH_CHIP_STM32F767VI && y) || (ARCH_CHIP_STM32F777VI && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_IO_CONFIG_I", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F745IG && y) || (ARCH_CHIP_STM32F745IE && y) || (ARCH_CHIP_STM32F746IE && y) || (ARCH_CHIP_STM32F746IG && y) || (ARCH_CHIP_STM32F756IG && y) || (ARCH_CHIP_STM32F765IG && y) || (ARCH_CHIP_STM32F765II && y) || (ARCH_CHIP_STM32F767IG && y) || (ARCH_CHIP_STM32F767II && y) || (ARCH_CHIP_STM32F769II && y) || (ARCH_CHIP_STM32F769IG && y) || (ARCH_CHIP_STM32F777II && y) || (ARCH_CHIP_STM32F779II && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_IO_CONFIG_Z", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F745ZE && y) || (ARCH_CHIP_STM32F745ZG && y) || (ARCH_CHIP_STM32F746ZG && y) || (ARCH_CHIP_STM32F746ZE && y) || (ARCH_CHIP_STM32F756ZG && y) || (ARCH_CHIP_STM32F765ZG && y) || (ARCH_CHIP_STM32F765ZI && y) || (ARCH_CHIP_STM32F767ZG && y) || (ARCH_CHIP_STM32F767ZI && y) || (ARCH_CHIP_STM32F777ZI && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_IO_CONFIG_N", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F746NG && y) || (ARCH_CHIP_STM32F746NE && y) || (ARCH_CHIP_STM32F756NG && y) || (ARCH_CHIP_STM32F765NI && y) || (ARCH_CHIP_STM32F765NG && y) || (ARCH_CHIP_STM32F767NG && y) || (ARCH_CHIP_STM32F767NI && y) || (ARCH_CHIP_STM32F769NI && y) || (ARCH_CHIP_STM32F769NG && y) || (ARCH_CHIP_STM32F777NI && y) || (ARCH_CHIP_STM32F779NI && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_IO_CONFIG_B", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F746BG && y) || (ARCH_CHIP_STM32F746BE && y) || (ARCH_CHIP_STM32F756BG && y) || (ARCH_CHIP_STM32F765BI && y) || (ARCH_CHIP_STM32F765BG && y) || (ARCH_CHIP_STM32F767BG && y) || (ARCH_CHIP_STM32F769BI && y) || (ARCH_CHIP_STM32F769BG && y) || (ARCH_CHIP_STM32F777BI && y) || (ARCH_CHIP_STM32F779BI && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_IO_CONFIG_A", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F769AI && y) || (ARCH_CHIP_STM32F778AI && y) || (ARCH_CHIP_STM32F779AI && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_STM32F745XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F745VG && y) || (ARCH_CHIP_STM32F745VE && y) || (ARCH_CHIP_STM32F745IG && y) || (ARCH_CHIP_STM32F745IE && y) || (ARCH_CHIP_STM32F745ZE && y) || (ARCH_CHIP_STM32F745ZG && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_STM32F74XX", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ICACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DCACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ITCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DTCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_FMC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_ETHRNET", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_RNG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI5", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI6", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DCMI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DMA2D", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_STM32F746XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F746BG && y) || (ARCH_CHIP_STM32F746VG && y) || (ARCH_CHIP_STM32F746VE && y) || (ARCH_CHIP_STM32F746BE && y) || (ARCH_CHIP_STM32F746ZG && y) || (ARCH_CHIP_STM32F746IE && y) || (ARCH_CHIP_STM32F746NG && y) || (ARCH_CHIP_STM32F746NE && y) || (ARCH_CHIP_STM32F746ZE && y) || (ARCH_CHIP_STM32F746IG && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_STM32F74XX", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ICACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DCACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ITCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DTCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_FMC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_ETHRNET", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_RNG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI5", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI6", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DCMI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_LTDC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DMA2D", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_STM32F756XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F756NG && y) || (ARCH_CHIP_STM32F756BG && y) || (ARCH_CHIP_STM32F756IG && y) || (ARCH_CHIP_STM32F756VG && y) || (ARCH_CHIP_STM32F756ZG && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_STM32F75XX", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ICACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DCACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ITCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DTCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_FMC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_ETHRNET", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_RNG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI5", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI6", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_LTDC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DMA2D", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_CRYP", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_HASH", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_STM32F765XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F765NI && y) || (ARCH_CHIP_STM32F765VI && y) || (ARCH_CHIP_STM32F765VG && y) || (ARCH_CHIP_STM32F765BI && y) || (ARCH_CHIP_STM32F765NG && y) || (ARCH_CHIP_STM32F765ZG && y) || (ARCH_CHIP_STM32F765ZI && y) || (ARCH_CHIP_STM32F765IG && y) || (ARCH_CHIP_STM32F765BG && y) || (ARCH_CHIP_STM32F765II && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_STM32F76XX", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_DPFPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ICACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DCACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ITCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DTCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_FMC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_ETHRNET", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_RNG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI5", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI6", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SDMMC2", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_CAN3", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DCMI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DMA2D", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DFSDM1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_STM32F767XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F767NG && y) || (ARCH_CHIP_STM32F767IG && y) || (ARCH_CHIP_STM32F767VG && y) || (ARCH_CHIP_STM32F767ZG && y) || (ARCH_CHIP_STM32F767NI && y) || (ARCH_CHIP_STM32F767VI && y) || (ARCH_CHIP_STM32F767BG && y) || (ARCH_CHIP_STM32F767ZI && y) || (ARCH_CHIP_STM32F767II && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_STM32F76XX", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_DPFPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ICACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DCACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ITCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DTCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_FMC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_ETHRNET", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_RNG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI5", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI6", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SDMMC2", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_CAN3", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DCMI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DSIHOST", "cond": "!(STM32F7_IO_CONFIG_V || STM32F7_IO_CONFIG_Z) && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_LTDC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DMA2D", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_JPEG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DFSDM1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_STM32F768XX", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_STM32F76XX", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_DPFPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ICACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DCACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ITCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DTCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_FMC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_ETHRNET", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_RNG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI5", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI6", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SDMMC2", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_CAN3", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DCMI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DSIHOST", "cond": "!(STM32F7_IO_CONFIG_V || STM32F7_IO_CONFIG_Z) && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_LTDC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DMA2D", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_JPEG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DFSDM1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_STM32F768AX", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_STM32F76XX", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_DPFPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ICACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DCACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ITCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DTCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_FMC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_RNG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI5", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI6", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SDMMC2", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_CAN3", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DCMI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DSIHOST", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_LTDC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DMA2D", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_JPEG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DFSDM1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_STM32F769XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F769BI && y) || (ARCH_CHIP_STM32F769II && y) || (ARCH_CHIP_STM32F769BG && y) || (ARCH_CHIP_STM32F769NI && y) || (ARCH_CHIP_STM32F769NG && y) || (ARCH_CHIP_STM32F769IG && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_STM32F76XX", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_DPFPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ICACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DCACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ITCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DTCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_FMC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_ETHRNET", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_RNG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI5", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI6", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SDMMC2", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_CAN3", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DCMI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DSIHOST", "cond": "!(STM32F7_IO_CONFIG_V || STM32F7_IO_CONFIG_Z) && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_LTDC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DMA2D", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_JPEG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DFSDM1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_STM32F769AX", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_STM32F769AI && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_STM32F76XX", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_DPFPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ICACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DCACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ITCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DTCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_FMC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_RNG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI5", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI6", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SDMMC2", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_CAN3", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DCMI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DSIHOST", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_LTDC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DMA2D", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_JPEG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DFSDM1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_STM32F777XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F777ZI && y) || (ARCH_CHIP_STM32F777VI && y) || (ARCH_CHIP_STM32F777NI && y) || (ARCH_CHIP_STM32F777BI && y) || (ARCH_CHIP_STM32F777II && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_STM32F77XX", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_DPFPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ICACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DCACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ITCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DTCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_FMC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_ETHRNET", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_RNG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI5", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI6", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SDMMC2", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_CAN3", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DCMI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DSIHOST", "cond": "!(STM32F7_IO_CONFIG_V || STM32F7_IO_CONFIG_Z) && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_LTDC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DMA2D", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_JPEG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_CRYP", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_HASH", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DFSDM1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_STM32F778XX", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_STM32F77XX", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_DPFPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ICACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DCACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ITCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DTCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_FMC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_ETHRNET", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_RNG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI5", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI6", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SDMMC2", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_CAN3", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DCMI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DSIHOST", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_LTDC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DMA2D", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_JPEG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_CRYP", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_HASH", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DFSDM1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_STM32F778AX", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_STM32F778AI && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_STM32F77XX", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_DPFPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ICACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DCACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ITCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DTCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_FMC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_RNG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI5", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI6", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SDMMC2", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_CAN3", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DCMI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DSIHOST", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_LTDC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DMA2D", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_JPEG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_CRYP", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_HASH", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DFSDM1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_STM32F779XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F779II && y) || (ARCH_CHIP_STM32F779NI && y) || (ARCH_CHIP_STM32F779BI && y) || (ARCH_CHIP_STM32F779AI && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_STM32F77XX", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_DPFPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ICACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DCACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ITCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DTCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_FMC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_ETHRNET", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_RNG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI5", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI6", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SDMMC2", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_CAN3", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DCMI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DSIHOST", "cond": "!(STM32F7_IO_CONFIG_V || STM32F7_IO_CONFIG_Z) && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_LTDC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DMA2D", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_JPEG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_CRYP", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_HASH", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DFSDM1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_STM32F779AX", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_STM32F77XX", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_DPFPU", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ICACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DCACHE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_ITCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARMV7M_HAVE_DTCM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_FMC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_RNG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI5", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SPI6", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_SDMMC2", "cond": "!STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_CAN3", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DCMI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DSIHOST", "cond": "!(STM32F7_IO_CONFIG_V || STM32F7_IO_CONFIG_Z) && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_LTDC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DMA2D", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_JPEG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_CRYP", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_HASH", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_DFSDM1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_FLASH_CONFIG_E", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F745VE && y) || (ARCH_CHIP_STM32F745IE && y) || (ARCH_CHIP_STM32F745ZE && y) || (ARCH_CHIP_STM32F746VE && y) || (ARCH_CHIP_STM32F746BE && y) || (ARCH_CHIP_STM32F746IE && y) || (ARCH_CHIP_STM32F746NE && y) || (ARCH_CHIP_STM32F746ZE && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_FLASH_CONFIG_G", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F745VG && y) || (ARCH_CHIP_STM32F745IG && y) || (ARCH_CHIP_STM32F745ZG && y) || (ARCH_CHIP_STM32F746BG && y) || (ARCH_CHIP_STM32F746VG && y) || (ARCH_CHIP_STM32F746ZG && y) || (ARCH_CHIP_STM32F746NG && y) || (ARCH_CHIP_STM32F746IG && y) || (ARCH_CHIP_STM32F756NG && y) || (ARCH_CHIP_STM32F756BG && y) || (ARCH_CHIP_STM32F756IG && y) || (ARCH_CHIP_STM32F756VG && y) || (ARCH_CHIP_STM32F756ZG && y) || (ARCH_CHIP_STM32F765VG && y) || (ARCH_CHIP_STM32F765NG && y) || (ARCH_CHIP_STM32F765ZG && y) || (ARCH_CHIP_STM32F765IG && y) || (ARCH_CHIP_STM32F765BG && y) || (ARCH_CHIP_STM32F767NG && y) || (ARCH_CHIP_STM32F767IG && y) || (ARCH_CHIP_STM32F767VG && y) || (ARCH_CHIP_STM32F767ZG && y) || (ARCH_CHIP_STM32F767BG && y) || (ARCH_CHIP_STM32F769BG && y) || (ARCH_CHIP_STM32F769NG && y) || (ARCH_CHIP_STM32F769IG && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_FLASH_CONFIG_I", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32F765NI && y) || (ARCH_CHIP_STM32F765VI && y) || (ARCH_CHIP_STM32F765BI && y) || (ARCH_CHIP_STM32F765ZI && y) || (ARCH_CHIP_STM32F765II && y) || (ARCH_CHIP_STM32F767NI && y) || (ARCH_CHIP_STM32F767VI && y) || (ARCH_CHIP_STM32F767ZI && y) || (ARCH_CHIP_STM32F767II && y) || (ARCH_CHIP_STM32F769BI && y) || (ARCH_CHIP_STM32F769II && y) || (ARCH_CHIP_STM32F769NI && y) || (ARCH_CHIP_STM32F769AI && y) || (ARCH_CHIP_STM32F777ZI && y) || (ARCH_CHIP_STM32F777VI && y) || (ARCH_CHIP_STM32F777NI && y) || (ARCH_CHIP_STM32F777BI && y) || (ARCH_CHIP_STM32F777II && y) || (ARCH_CHIP_STM32F778AI && y) || (ARCH_CHIP_STM32F779II && y) || (ARCH_CHIP_STM32F779NI && y) || (ARCH_CHIP_STM32F779BI && y) || (ARCH_CHIP_STM32F779AI && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Override Flash Size Designator", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_FLASH_OVERRIDE_DEFAULT", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "STM32F7 series parts numbering (sans the package type) ends with a letter\nthat designates the FLASH size.\n\n                Designator  Size in KiB\n                   E    512\n                   G    1024\n                   I    2048\n\nThis configuration option defaults to using the configuration based on that designator\nor the default smaller size if there is no last character designator is present in the\nSTM32 Chip Selection.\n\nExamples:\n   If the STM32F745VE is chosen, the Flash configuration would be 'E', if a variant of\n   the part with a 2048 KiB Flash is released in the future one could simply select\n   the 'I' designator here.\n\n   If an STM32F7xxx Series parts is chosen the default Flash configuration will be set\n   herein and can be changed.", "children": [{"type": 3, "name": "STM32F7_FLASH_OVERRIDE_DEFAULT", "value": "n", "user_value": null, "dep": "n", "prompt": "Default", "cond": "y"}, {"type": 3, "name": "STM32F7_FLASH_OVERRIDE_E", "value": "n", "user_value": null, "dep": "n", "prompt": "E 512KiB", "cond": "y"}, {"type": 3, "name": "STM32F7_FLASH_OVERRIDE_G", "value": "n", "user_value": null, "dep": "n", "prompt": "G 1024KiB", "cond": "y"}, {"type": 3, "name": "STM32F7_FLASH_OVERRIDE_I", "value": "n", "user_value": null, "dep": "n", "prompt": "I 2048KiB", "cond": "y"}]}, {"type": 3, "name": "STM32F7_FLASH_ART_ACCELERATOR", "value": "n", "user_value": null, "dep": "n", "prompt": "Flash ART Accelerator", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "ART Accelerator on the flash memory ITCM interface accelerates code execution\nwith a system of instruction prefetch and cache lines.\n\nEnable if code and/or read-only data is accessed through ITCM bus instead of\nAXIM bus."}, {"type": 31, "dep": "n", "prompt": "STM32 Peripheral Support", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "children": [{"type": 3, "name": "STM32F7_HAVE_LTDC", "value": "n", "user_value": null, "rev_dep": "(STM32F7_STM32F746XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F756XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F767XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_HAVE_FMC", "value": "n", "user_value": null, "rev_dep": "(STM32F7_STM32F745XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F746XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F756XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F765XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F767XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_HAVE_ETHRNET", "value": "n", "user_value": null, "rev_dep": "(STM32F7_STM32F745XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F746XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F756XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F765XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F767XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_HAVE_RNG", "value": "n", "user_value": null, "rev_dep": "(STM32F7_STM32F745XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F746XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F756XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F765XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F767XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_HAVE_SPI5", "value": "n", "user_value": null, "rev_dep": "(STM32F7_STM32F745XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F746XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F756XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F765XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F767XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_HAVE_SPI6", "value": "n", "user_value": null, "rev_dep": "(STM32F7_STM32F745XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F746XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F756XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F765XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F767XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_HAVE_SDMMC2", "value": "n", "user_value": null, "rev_dep": "(STM32F7_STM32F765XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F767XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && !STM32F7_IO_CONFIG_V && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_HAVE_ADC1_DMA", "value": "n", "user_value": null, "rev_dep": "STM32F7_ADC1 && STM32F7_DMA2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_HAVE_ADC2_DMA", "value": "n", "user_value": null, "rev_dep": "STM32F7_ADC2 && STM32F7_DMA2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_HAVE_ADC3_DMA", "value": "n", "user_value": null, "rev_dep": "STM32F7_ADC3 && STM32F7_DMA2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_HAVE_CAN3", "value": "n", "user_value": null, "rev_dep": "(STM32F7_STM32F765XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F767XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_HAVE_DCMI", "value": "n", "user_value": null, "rev_dep": "(STM32F7_STM32F745XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F746XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F765XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F767XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_HAVE_DSIHOST", "value": "n", "user_value": null, "rev_dep": "(STM32F7_STM32F767XX && !(STM32F7_IO_CONFIG_V || STM32F7_IO_CONFIG_Z) && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768XX && !(STM32F7_IO_CONFIG_V || STM32F7_IO_CONFIG_Z) && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769XX && !(STM32F7_IO_CONFIG_V || STM32F7_IO_CONFIG_Z) && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && !(STM32F7_IO_CONFIG_V || STM32F7_IO_CONFIG_Z) && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && !(STM32F7_IO_CONFIG_V || STM32F7_IO_CONFIG_Z) && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && !(STM32F7_IO_CONFIG_V || STM32F7_IO_CONFIG_Z) && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_HAVE_LTDC", "value": "n", "user_value": null, "rev_dep": "(STM32F7_STM32F746XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F756XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F767XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_HAVE_DMA2D", "value": "n", "user_value": null, "rev_dep": "(STM32F7_STM32F745XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F746XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F756XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F765XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F767XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_HAVE_JPEG", "value": "n", "user_value": null, "rev_dep": "(STM32F7_STM32F767XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_HAVE_CRYP", "value": "n", "user_value": null, "rev_dep": "(STM32F7_STM32F756XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_HAVE_HASH", "value": "n", "user_value": null, "rev_dep": "(STM32F7_STM32F756XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_HAVE_DFSDM1", "value": "n", "user_value": null, "rev_dep": "(STM32F7_STM32F765XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F767XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F768AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F769AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F777XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F778AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779XX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_STM32F779AX && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_ADC", "value": "n", "user_value": null, "rev_dep": "(STM32F7_ADC1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_ADC2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_ADC3 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_CAN", "value": "n", "user_value": null, "rev_dep": "(STM32F7_CAN1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_CAN2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_CAN3 && STM32F7_HAVE_CAN3 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_DAC", "value": "n", "user_value": null, "rev_dep": "(STM32F7_DAC1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_DAC2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_DMA", "value": "n", "user_value": null, "rev_dep": "(STM32F7_DMA1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_DMA2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_I2C", "value": "n", "user_value": null, "rev_dep": "(STM32F7_I2C1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_I2C2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_I2C3 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_I2C4 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_SAI", "value": "n", "user_value": null, "rev_dep": "(STM32F7_SAI1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_SAI2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_SDMMC", "value": "n", "user_value": null, "rev_dep": "(STM32F7_SDMMC1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_SDMMC2 && STM32F7_HAVE_SDMMC2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_SPI", "value": "n", "user_value": null, "rev_dep": "(STM32F7_SPI1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_SPI2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_SPI3 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_SPI4 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_SPI5 && STM32F7_HAVE_SPI5 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_SPI6 && STM32F7_HAVE_SPI6 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_TIM", "value": "n", "user_value": null, "rev_dep": "(STM32F7_TIM1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM3 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM4 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM5 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM6 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM7 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM8 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM9 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM10 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM11 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM12 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM13 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM14 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_USART", "value": "n", "user_value": null, "rev_dep": "(STM32F7_USART1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_USART2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_USART3 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_UART4 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_UART5 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_USART6 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_UART7 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_UART8 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_ADC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_ADC1_DMA", "cond": "STM32F7_DMA2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC2", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_ADC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_ADC2_DMA", "cond": "STM32F7_DMA2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC3", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_ADC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_HAVE_ADC3_DMA", "cond": "STM32F7_DMA2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_BKPSRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable BKP RAM Domain", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_CAN1", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "CAN", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_CAN", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_CAN2", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN2", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "CAN", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_CAN", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_CAN3", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN3", "cond": "STM32F7_HAVE_CAN3 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_CAN3 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "CAN", "cond": "STM32F7_HAVE_CAN3 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_CAN", "cond": "STM32F7_HAVE_CAN3 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_CEC", "value": "n", "user_value": null, "dep": "n", "prompt": "CEC", "cond": "STM32F7_VALUELINE && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_VALUELINE && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_CRC", "value": "n", "user_value": null, "dep": "n", "prompt": "CRC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_CRYP", "value": "n", "user_value": null, "dep": "n", "prompt": "CRYP", "cond": "STM32F7_HAVE_CRYP && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_CRYP && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_DFSDM1", "value": "n", "user_value": null, "dep": "n", "prompt": "DFSDM1", "cond": "STM32F7_HAVE_DFSDM1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_DFSDM1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_DFSDM1", "cond": "STM32F7_HAVE_DFSDM1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_DMA1", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_DMA", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_DMA", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_DMA2", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA2", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_DMA", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_DMA", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_DAC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC2", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_DAC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_DCMI", "value": "n", "user_value": null, "dep": "n", "prompt": "DCMI", "cond": "STM32F7_HAVE_DCMI && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_DCMI && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "The devices embed a camera interface that can connect with camera\nmodules and CMOS sensors through an 8-bit to 14-bit parallel interface,\n to receive video data."}, {"type": 3, "name": "STM32F7_DSIHOST", "value": "n", "user_value": null, "dep": "n", "prompt": "DSIHOST", "cond": "STM32F7_HAVE_DSIHOST && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_DSIHOST && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "The DSI Host is a dedicated peripheral for interfacing with MIPI\u00ae DSI\n compliant displays."}, {"type": 3, "name": "STM32F7_DMA2D", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA2D", "cond": "STM32F7_HAVE_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "The STM32 DMA2D is an Chrom-Art Accelerator for image manipulation\navailable on the STM32 F7 devices."}, {"type": 3, "name": "STM32F7_JPEG", "value": "n", "user_value": null, "dep": "n", "prompt": "JPEG", "cond": "STM32F7_HAVE_JPEG && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_JPEG && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "The JPEG codec provides an fast and simple hardware compressor and\n decompressor of JPEG images with full management of JPEG headers."}, {"type": 3, "name": "STM32F7_ETHMAC", "value": "n", "user_value": null, "dep": "n", "prompt": "Ethernet MAC", "cond": "STM32F7_HAVE_ETHRNET && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_ETHRNET && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "NETDEVICES", "cond": "STM32F7_HAVE_ETHRNET && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_PHY", "cond": "STM32F7_HAVE_ETHRNET && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_FMC", "value": "n", "user_value": null, "dep": "n", "prompt": "FMC", "cond": "STM32F7_HAVE_FMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_FMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_HASH", "value": "n", "user_value": null, "dep": "n", "prompt": "HASH", "cond": "STM32F7_HAVE_HASH && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_HASH && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_HASH", "cond": "STM32F7_HAVE_HASH && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_CEC", "value": "n", "user_value": null, "dep": "n", "prompt": "HDMI-CEC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_I2C1", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_I2C", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_I2C2", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C2", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_I2C", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_I2C3", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C3", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_I2C", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_I2C4", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C4", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_I2C", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_LPTIM1", "value": "n", "user_value": null, "dep": "n", "prompt": "Low-power timer 1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_LTDC", "value": "n", "user_value": null, "dep": "n", "prompt": "LTDC", "cond": "STM32F7_HAVE_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "The STM32 LTDC is an LCD-TFT Display Controller available on\nthe STM32F7x6, STM32F7x7, STM32F7x8 and STM32F7x9 devices.\nIt features a standard RGB888 parallel video interface (along\nwith HSYNC, VSYNC, etc.) for controlling TFT LCD displays.\nWith the STM32F7x8/9, the graphics signals can optionally\nbe output via DSI instead of the parallel interface:\nSee config options STM32F7_DSIHOST and STM32F7_LTDC_USE_DSI."}, {"type": 3, "name": "STM32F7_OTGFS", "value": "n", "user_value": null, "dep": "n", "prompt": "OTG FS", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "USBHOST_HAVE_ASYNCH", "cond": "USBHOST && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_OTGHS", "value": "n", "user_value": null, "dep": "n", "prompt": "OTG HS", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "USBHOST_HAVE_ASYNCH", "cond": "USBHOST && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_QUADSPI", "value": "n", "user_value": null, "dep": "n", "prompt": "QuadSPI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_PWR", "value": "n", "user_value": null, "dep": "n", "prompt": "PWR", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_RNG", "value": "n", "user_value": null, "dep": "n", "prompt": "RNG", "cond": "STM32F7_HAVE_RNG && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_RNG && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_RNG", "cond": "STM32F7_HAVE_RNG && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_SAI1", "value": "n", "user_value": null, "dep": "n", "prompt": "SAI1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_SAI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_SAI2", "value": "n", "user_value": null, "dep": "n", "prompt": "SAI2", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_SAI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_SDMMC1", "value": "n", "user_value": null, "dep": "n", "prompt": "SDMMC1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_SDMMC", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SDIO", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SDIOWAIT_WRCOMPLETE", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "SDIO_PREFLIGHT", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_SDMMC2", "value": "n", "user_value": null, "dep": "n", "prompt": "SDMMC2", "cond": "STM32F7_HAVE_SDMMC2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_SDMMC2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_SDMMC", "cond": "STM32F7_HAVE_SDMMC2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SDIO", "cond": "STM32F7_HAVE_SDMMC2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SDIOWAIT_WRCOMPLETE", "cond": "STM32F7_HAVE_SDMMC2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "SDIO_PREFLIGHT", "cond": "STM32F7_HAVE_SDMMC2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_SPDIFRX", "value": "n", "user_value": null, "dep": "n", "prompt": "SPDIFRX", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_SPI1", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_SPI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_SPI2", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI2", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_SPI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_SPI3", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI3", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_SPI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_SPI4", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI4", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_SPI", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_SPI5", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI5", "cond": "STM32F7_HAVE_SPI5 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_SPI5 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "STM32F7_HAVE_SPI5 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_SPI", "cond": "STM32F7_HAVE_SPI5 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_SPI6", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI6", "cond": "STM32F7_HAVE_SPI6 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_SPI6 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "STM32F7_HAVE_SPI6 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_SPI", "cond": "STM32F7_HAVE_SPI6 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_TIM1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_TIM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_TIM2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_TIM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_TIM3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_TIM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_TIM4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_TIM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_TIM5", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_TIM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_TIM6", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM6", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_TIM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_TIM7", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM7", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_TIM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_TIM8", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_TIM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_TIM9", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_TIM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_TIM10", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_TIM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_TIM11", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_TIM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_TIM12", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_TIM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_TIM13", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_TIM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_TIM14", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "STM32F7_TIM", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_USART1", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "USART1_SERIALDRIVER", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_USART", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_USART2", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "USART2_SERIALDRIVER", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_USART", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_USART3", "value": "n", "user_value": null, "rev_dep": "NUCLEO_CONSOLE_VIRTUAL && y", "dep": "n", "prompt": "USART3", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "USART3_SERIALDRIVER", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_USART", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_UART4", "value": "n", "user_value": null, "dep": "n", "prompt": "UART4", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "UART4_SERIALDRIVER", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_USART", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_UART5", "value": "n", "user_value": null, "dep": "n", "prompt": "UART5", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "UART5_SERIALDRIVER", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_USART", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_USART6", "value": "n", "user_value": null, "rev_dep": "NUCLEO_CONSOLE_ARDUINO && y", "dep": "n", "prompt": "USART6", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "USART6_SERIALDRIVER", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_USART", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_UART7", "value": "n", "user_value": null, "dep": "n", "prompt": "UART7", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "UART7_SERIALDRIVER", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_USART", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_UART8", "value": "n", "user_value": null, "rev_dep": "NUCLEO_CONSOLE_MORPHO && y", "dep": "n", "prompt": "UART8", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "UART8_SERIALDRIVER", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"symbol": "STM32F7_USART", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_IWDG", "value": "n", "user_value": null, "dep": "n", "prompt": "IWDG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "WATCHDOG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_WWDG", "value": "n", "user_value": null, "dep": "n", "prompt": "WWDG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "WATCHDOG", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}]}, {"type": 31, "dep": "n", "prompt": "U[S]ART Configuration", "cond": "STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "children": [{"type": 3, "name": "USART1_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART1", "cond": "STM32F7_USART1 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_USART1 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enable RS-485 interface on USART1. Your board config will have to\nprovide GPIO_USART1_RS485_DIR pin definition. Currently it cannot be\nused with USART1_RXDMA.", "children": [{"type": 27, "name": "USART1_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "USART1 RS-485 DIR pin polarity", "cond": "USART1_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "USART1_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "USART1_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on USART1. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 3, "name": "USART1_RXDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1 Rx DMA", "cond": "STM32F7_USART1 && STM32F7_DMA1 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_USART1 && STM32F7_DMA1 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "In high data rate usage, Rx DMA may eliminate Rx overrun errors"}, {"type": 3, "name": "USART2_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART2", "cond": "STM32F7_USART2 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_USART2 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enable RS-485 interface on USART2. Your board config will have to\nprovide GPIO_USART2_RS485_DIR pin definition. Currently it cannot be\nused with USART2_RXDMA.", "children": [{"type": 27, "name": "USART2_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "USART2 RS-485 DIR pin polarity", "cond": "USART2_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "USART2_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "USART2_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on USART2. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 3, "name": "USART2_RXDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2 Rx DMA", "cond": "STM32F7_USART2 && STM32F7_DMA1 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_USART2 && STM32F7_DMA1 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "In high data rate usage, Rx DMA may eliminate Rx overrun errors"}, {"type": 3, "name": "USART3_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART3", "cond": "STM32F7_USART3 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_USART3 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enable RS-485 interface on USART3. Your board config will have to\nprovide GPIO_USART3_RS485_DIR pin definition. Currently it cannot be\nused with USART3_RXDMA.", "children": [{"type": 27, "name": "USART3_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "USART3 RS-485 DIR pin polarity", "cond": "USART3_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "USART3_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "USART3_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on USART3. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 3, "name": "USART3_RXDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART3 Rx DMA", "cond": "STM32F7_USART3 && STM32F7_DMA1 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_USART3 && STM32F7_DMA1 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "In high data rate usage, Rx DMA may eliminate Rx overrun errors"}, {"type": 3, "name": "UART4_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on UART4", "cond": "STM32F7_UART4 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_UART4 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enable RS-485 interface on UART4. Your board config will have to\nprovide GPIO_UART4_RS485_DIR pin definition. Currently it cannot be\nused with UART4_RXDMA.", "children": [{"type": 27, "name": "UART4_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "UART4 RS-485 DIR pin polarity", "cond": "UART4_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "UART4_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "UART4_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on UART4. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 3, "name": "UART4_RXDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "UART4 Rx DMA", "cond": "STM32F7_UART4 && STM32F7_DMA1 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_UART4 && STM32F7_DMA1 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "In high data rate usage, Rx DMA may eliminate Rx overrun errors"}, {"type": 3, "name": "UART5_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on UART5", "cond": "STM32F7_UART5 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_UART5 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enable RS-485 interface on UART5. Your board config will have to\nprovide GPIO_UART5_RS485_DIR pin definition. Currently it cannot be\nused with UART5_RXDMA.", "children": [{"type": 27, "name": "UART5_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "UART5 RS-485 DIR pin polarity", "cond": "UART5_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "UART5_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "UART5_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on UART5. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 3, "name": "UART5_RXDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "UART5 Rx DMA", "cond": "STM32F7_UART5 && STM32F7_DMA1 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_UART5 && STM32F7_DMA1 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "In high data rate usage, Rx DMA may eliminate Rx overrun errors"}, {"type": 3, "name": "USART6_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART6", "cond": "STM32F7_USART6 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_USART6 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enable RS-485 interface on USART6. Your board config will have to\nprovide GPIO_USART6_RS485_DIR pin definition. Currently it cannot be\nused with USART6_RXDMA.", "children": [{"type": 27, "name": "USART6_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "USART6 RS-485 DIR pin polarity", "cond": "USART6_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "USART6_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "USART6_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on USART6. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 3, "name": "USART6_RXDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART6 Rx DMA", "cond": "STM32F7_USART6 && STM32F7_DMA2 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_USART6 && STM32F7_DMA2 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "In high data rate usage, Rx DMA may eliminate Rx overrun errors"}, {"type": 3, "name": "UART7_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on UART7", "cond": "STM32F7_UART7 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_UART7 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enable RS-485 interface on UART7. Your board config will have to\nprovide GPIO_UART7_RS485_DIR pin definition. Currently it cannot be\nused with UART7_RXDMA.", "children": [{"type": 27, "name": "UART7_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "UART7 RS-485 DIR pin polarity", "cond": "UART7_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "UART7_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "UART7_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on UART7. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 3, "name": "UART7_RXDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "UART7 Rx DMA", "cond": "STM32F7_UART7 && STM32F7_DMA2 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_UART7 && STM32F7_DMA2 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "In high data rate usage, Rx DMA may eliminate Rx overrun errors"}, {"type": 3, "name": "UART8_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on UART8", "cond": "STM32F7_UART8 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_UART8 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enable RS-485 interface on UART8. Your board config will have to\nprovide GPIO_UART8_RS485_DIR pin definition. Currently it cannot be\nused with UART8_RXDMA.", "children": [{"type": 27, "name": "UART8_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "UART8 RS-485 DIR pin polarity", "cond": "UART8_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "UART8_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "UART8_RS485 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on UART8. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 3, "name": "UART8_RXDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "UART8 Rx DMA", "cond": "STM32F7_UART8 && STM32F7_DMA2 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_UART8 && STM32F7_DMA2 && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "In high data rate usage, Rx DMA may eliminate Rx overrun errors"}, {"type": 27, "name": "STM32F7_SERIAL_RXDMA_BUFFER_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Rx DMA buffer size", "cond": "(USART1_RXDMA || USART2_RXDMA || USART3_RXDMA || UART4_RXDMA || UART5_RXDMA || USART6_RXDMA || UART7_RXDMA || UART8_RXDMA) && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "32", "default": "32", "cond": "(USART1_RXDMA || USART2_RXDMA || USART3_RXDMA || UART4_RXDMA || UART5_RXDMA || USART6_RXDMA || UART7_RXDMA || UART8_RXDMA) && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "The DMA buffer size when using RX DMA to emulate a FIFO.\n\nWhen streaming data, the generic serial layer will be called\nevery time the FIFO receives half this number of bytes.\n\nValue given here will be rounded up to next multiple of 32 bytes."}, {"type": 3, "name": "SERIAL_DISABLE_REORDERING", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable reordering of ttySx devices.", "cond": "(STM32F7_USART1 || STM32F7_USART2 || STM32F7_USART3 || STM32F7_UART4 || STM32F7_UART5 || STM32F7_USART6 || STM32F7_UART7 || STM32F7_UART8) && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(STM32F7_USART1 || STM32F7_USART2 || STM32F7_USART3 || STM32F7_UART4 || STM32F7_UART5 || STM32F7_USART6 || STM32F7_UART7 || STM32F7_UART8) && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "NuttX per default reorders the serial ports (/dev/ttySx) so that the\nconsole is always on /dev/ttyS0. If more than one UART is in use this\ncan, however, have the side-effect that all port mappings\n(hardware USART1 -> /dev/ttyS0) change if the console is moved to another\nUART. This is in particular relevant if a project uses the USB console\nin some configs and a serial console in other configs, but does not\nwant the side effect of having all serial port names change when just\nthe console is moved from serial to USB."}, {"type": 3, "name": "STM32F7_FLOWCONTROL_BROKEN", "value": "n", "user_value": null, "dep": "n", "prompt": "Use Software UART RTS flow control", "cond": "STM32F7_USART && SERIAL_IFLOWCONTROL_WATERMARKS && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_USART && SERIAL_IFLOWCONTROL_WATERMARKS && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enable UART RTS flow control using Software. Because STM\nCurrent STM32 have broken HW based RTS behavior (they assert\nnRTS after every byte received)  Enable this setting workaround\nthis issue by useing software based management of RTS"}, {"type": 3, "name": "STM32F7_USART_BREAKS", "value": "n", "user_value": null, "dep": "n", "prompt": "Add TIOxSBRK to support sending Breaks", "cond": "STM32F7_USART && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_USART && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Add TIOCxBRK routines to send a line break per the STM32 manual, the\nbreak will be a pulse based on the value M. This is not a BSD compatible\nbreak.", "children": [{"type": 3, "name": "STM32F7_SERIALBRK_BSDCOMPAT", "value": "n", "user_value": null, "dep": "n", "prompt": "Use GPIO To send Break", "cond": "STM32F7_USART && STM32F7_USART_BREAKS && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_USART && STM32F7_USART_BREAKS && STM32F7_USART && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enable using GPIO on the TX pin to send a BSD compatible break:\nTIOCSBRK will start the break and TIOCCBRK will end the break.\nThe current STM32 U[S]ARTS have no way to leave the break (TX=LOW)\non because the SW starts the break and then the HW automatically clears\nthe break. This makes it is difficult to sent a long break."}]}]}, {"type": 31, "dep": "n", "prompt": "SPI Configuration", "cond": "STM32F7_SPI && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "children": [{"type": 3, "name": "STM32F7_SPI_INTERRUPTS", "value": "n", "user_value": null, "dep": "n", "prompt": "Interrupt driver SPI", "cond": "STM32F7_SPI && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_SPI && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Select to enable interrupt driven SPI support. Non-interrupt-driven,\npoll-waiting is recommended if the interrupt rate would be to high in\nthe interrupt driven case."}, {"type": 3, "name": "STM32F7_SPI_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI DMA", "cond": "STM32F7_SPI && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_SPI && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Use DMA to improve SPI transfer performance.  Cannot be used with STM32F7_SPI_INTERRUPT."}]}, {"type": 31, "dep": "n", "prompt": "I2C Configuration", "cond": "STM32F7_I2C && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "children": [{"type": 3, "name": "STM32F7_I2C_DYNTIMEO", "value": "n", "user_value": null, "dep": "n", "prompt": "Use dynamic timeouts", "cond": "STM32F7_I2C && STM32F7_I2C && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_I2C && STM32F7_I2C && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 27, "name": "STM32F7_I2C_DYNTIMEO_USECPERBYTE", "value": "", "user_value": null, "dep": "n", "prompt": "Timeout Microseconds per Byte", "cond": "STM32F7_I2C_DYNTIMEO && STM32F7_I2C && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "500", "default": "500", "cond": "STM32F7_I2C_DYNTIMEO && STM32F7_I2C && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 27, "name": "STM32F7_I2C_DYNTIMEO_STARTSTOP", "value": "", "user_value": null, "dep": "n", "prompt": "Timeout for Start/Stop (Milliseconds)", "cond": "STM32F7_I2C_DYNTIMEO && STM32F7_I2C && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1000", "default": "1000", "cond": "STM32F7_I2C_DYNTIMEO && STM32F7_I2C && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}]}, {"type": 27, "name": "STM32F7_I2CTIMEOSEC", "value": "", "user_value": null, "dep": "n", "prompt": "Timeout seconds", "cond": "STM32F7_I2C && STM32F7_I2C && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_I2C && STM32F7_I2C && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 27, "name": "STM32F7_I2CTIMEOMS", "value": "", "user_value": null, "dep": "n", "prompt": "Timeout Milliseconds", "cond": "STM32F7_I2C && !STM32F7_I2C_DYNTIMEO && STM32F7_I2C && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "500", "default": "500", "cond": "STM32F7_I2C && !STM32F7_I2C_DYNTIMEO && STM32F7_I2C && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 27, "name": "STM32F7_I2CTIMEOTICKS", "value": "", "user_value": null, "dep": "n", "prompt": "Timeout for Done and Stop (ticks)", "cond": "STM32F7_I2C && !STM32F7_I2C_DYNTIMEO && STM32F7_I2C && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "500", "default": "500", "cond": "STM32F7_I2C && !STM32F7_I2C_DYNTIMEO && STM32F7_I2C && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_I2C_DUTY16_9", "value": "n", "user_value": null, "dep": "n", "prompt": "Frequency with Tlow/Thigh = 16/9", "cond": "STM32F7_I2C && STM32F7_I2C && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_I2C && STM32F7_I2C && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}]}, {"type": 31, "dep": "n", "prompt": "SD/MMC Configuration", "cond": "STM32F7_SDMMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "children": [{"type": 3, "name": "STM32F7_SDMMC_XFRDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "SDMMC transfer debug", "cond": "DEBUG_FS_INFO && STM32F7_SDMMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FS_INFO && STM32F7_SDMMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enable special debug instrumentation analyze SDMMC data transfers.\nThis logic is as non-invasive as possible:  It samples SDMMC\nregisters at key points in the data transfer and then dumps all of\nthe registers at the end of the transfer.  If DEBUG_DMA is also\nenabled, then DMA register will be collected as well.  Requires also\nDEBUG_FS and CONFIG_DEBUG_INFO."}, {"type": 3, "name": "STM32F7_SDMMC_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "Support DMA data transfers", "cond": "STM32F7_DMA && STM32F7_SDMMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_DMA && STM32F7_SDMMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "SDIO_DMA", "cond": "STM32F7_DMA && STM32F7_SDMMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Support DMA data transfers."}, {"type": 31, "dep": "n", "prompt": "SDMMC1 Configuration", "cond": "STM32F7_SDMMC1 && STM32F7_SDMMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "children": [{"type": 24, "name": "STM32F7_SDMMC1_PRI", "value": "", "user_value": null, "dep": "n", "prompt": "SDMMC1 interrupt priority", "cond": "ARCH_IRQPRIO && EXPERIMENTAL && STM32F7_SDMMC1 && STM32F7_SDMMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "128", "default": "128", "cond": "ARCH_IRQPRIO && EXPERIMENTAL && STM32F7_SDMMC1 && STM32F7_SDMMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Select SDMMC1 interrupt priority.  Default: 128."}, {"type": 24, "name": "STM32F7_SDMMC1_DMAPRIO", "value": "", "user_value": null, "dep": "n", "prompt": "SDMMC1 DMA priority", "cond": "STM32F7_SDMMC1 && STM32F7_SDMMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0x00010000", "default": "0x00010000", "cond": "STM32F7_SDMMC1 && STM32F7_SDMMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Select SDMMC1 DMA prority.\n\nOptions are: 0x00000000 low, 0x00010000 medium,\n0x00020000 high, 0x00030000 very high.  Default: medium."}, {"type": 3, "name": "SDMMC1_WIDTH_D1_ONLY", "value": "n", "user_value": null, "dep": "n", "prompt": "Use D1 only on SDMMC1", "cond": "STM32F7_SDMMC1 && STM32F7_SDMMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_SDMMC1 && STM32F7_SDMMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Select 1-bit transfer mode.  Default: 4-bit transfer mode."}]}, {"type": 31, "dep": "n", "prompt": "SDMMC2 Configuration", "cond": "STM32F7_SDMMC2 && STM32F7_SDMMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "children": [{"type": 24, "name": "STM32F7_SDMMC2_PRI", "value": "", "user_value": null, "dep": "n", "prompt": "SDMMC2 interrupt priority", "cond": "ARCH_IRQPRIO && EXPERIMENTAL && STM32F7_SDMMC2 && STM32F7_SDMMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "128", "default": "128", "cond": "ARCH_IRQPRIO && EXPERIMENTAL && STM32F7_SDMMC2 && STM32F7_SDMMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Select SDMMC2 interrupt priority.  Default: 128."}, {"type": 24, "name": "STM32F7_SDMMC2_DMAPRIO", "value": "", "user_value": null, "dep": "n", "prompt": "SDMMC2 DMA priority", "cond": "STM32F7_SDMMC2 && STM32F7_SDMMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0x00010000", "default": "0x00010000", "cond": "STM32F7_SDMMC2 && STM32F7_SDMMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Select SDMMC1 DMA prority.\n\nOptions are: 0x00000000 low, 0x00010000 medium,\n0x00020000 high, 0x00030000 very high.  Default: medium."}, {"type": 3, "name": "SDMMC2_WIDTH_D1_ONLY", "value": "n", "user_value": null, "dep": "n", "prompt": "Use D1 only on SDMMC2", "cond": "STM32F7_SDMMC2 && STM32F7_SDMMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_SDMMC2 && STM32F7_SDMMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Select 1-bit transfer mode.  Default: 4-bit transfer mode."}]}]}, {"type": 3, "name": "STM32F7_BBSRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "BBSRAM File Support", "cond": "STM32F7_BKPSRAM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_BKPSRAM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 27, "name": "STM32F7_BBSRAM_FILES", "value": "", "user_value": null, "dep": "n", "prompt": "Max Files to support in BBSRAM", "cond": "STM32F7_BKPSRAM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "STM32F7_BKPSRAM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_SAVE_CRASHDUMP", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Saving Panic to BBSRAM", "cond": "STM32F7_BKPSRAM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_BKPSRAM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_HAVE_RTC_SUBSECONDS", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_RTC_SUBSECONDS", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 31, "dep": "n", "prompt": "RTC Configuration", "cond": "RTC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "children": [{"type": 27, "name": "RTC_MAGIC_REG", "value": "", "user_value": null, "dep": "n", "prompt": "BKP register", "cond": "RTC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "RTC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "31", "cond": "RTC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "The BKP register used to store/check the Magic value to determine if\nRTC is already setup"}, {"type": 24, "name": "RTC_MAGIC", "value": "", "user_value": null, "dep": "n", "prompt": "RTC Magic 1", "cond": "RTC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0xfacefeee", "default": "0xfacefeee", "cond": "RTC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Value used as Magic to determine if the RTC is already setup"}, {"type": 24, "name": "RTC_MAGIC_TIME_SET", "value": "", "user_value": null, "dep": "n", "prompt": "RTC Magic 2", "cond": "RTC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0xfacefeef", "default": "0xfacefeef", "cond": "RTC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Value used as Magic to determine if the RTC has been setup and has\ntime set"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "RTC clock source", "cond": "RTC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_RTC_LSECLOCK", "default": "n", "cond": "RTC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_RTC_HSECLOCK", "value": "n", "user_value": null, "dep": "n", "prompt": "HSE clock", "cond": "y", "help": "Drive the RTC with the HSE clock, divided down to 1MHz."}, {"type": 3, "name": "STM32F7_RTC_LSECLOCK", "value": "n", "user_value": null, "dep": "n", "prompt": "LSE clock", "cond": "y", "help": "Drive the RTC with the LSE clock"}, {"type": 3, "name": "STM32F7_RTC_LSICLOCK", "value": "n", "user_value": null, "dep": "n", "prompt": "LSI clock", "cond": "y", "help": "Drive the RTC with the LSI clock"}]}]}, {"type": 3, "name": "STM32F7_CUSTOM_CLOCKCONFIG", "value": "n", "user_value": null, "dep": "n", "prompt": "Custom clock configuration", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables special, board-specific STM32 clock configuration."}, {"type": 3, "name": "STM32F7_DTCMEXCLUDE", "value": "n", "user_value": null, "dep": "n", "prompt": "Exclude DTCM SRAM from the heap", "cond": "ARMV7M_HAVE_DTCM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ELF && ARMV7M_HAVE_DTCM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Exclude DTCM SRAM from the HEAP because it appears to be impossible\nto execute ELF modules from DTCM RAM (REVISIT!)."}, {"type": 3, "name": "STM32F7_DTCM_PROCFS", "value": "n", "user_value": null, "dep": "n", "prompt": "DTCM SRAM PROCFS support", "cond": "ARMV7M_DTCM && FS_PROCFS && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARMV7M_DTCM && FS_PROCFS && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Select to build in support for /proc/dtcm.  Reading from /proc/dtcm\nwill provide statistics about DTCM memory use similar to what you\nwould get from mallinfo() for the user heap."}, {"type": 3, "name": "STM32F7_DMACAPABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Workaround non-DMA capable memory", "cond": "ARCH_DMA && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_DMA && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "This option enables the DMA interface stm32_dmacapable that can be\nused to check if it is possible to do DMA from the selected address.\nDrivers then may use this information to determine if they should\nattempt the DMA or fall back to a different transfer method."}, {"type": 31, "dep": "n", "prompt": "Timer Configuration", "cond": "ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "children": [{"type": 3, "name": "STM32F7_TIM1_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 PWM", "cond": "STM32F7_TIM1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32F7_TIM1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 1 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32F7_TIM1\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "STM32F7_TIM1_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 Mode", "cond": "STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the timer mode."}, {"type": 3, "name": "STM32F7_TIM1_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 1", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32F7_TIM1_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 1 Mode", "cond": "STM32F7_TIM1_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM1_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM1_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM1_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 1 Output", "cond": "STM32F7_TIM1_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM1_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32F7_TIM1_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 2", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32F7_TIM1_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 2 Mode", "cond": "STM32F7_TIM1_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM1_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM1_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM1_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 2 Output", "cond": "STM32F7_TIM1_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM1_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32F7_TIM1_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 3", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32F7_TIM1_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 3 Mode", "cond": "STM32F7_TIM1_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM1_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM1_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM1_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 3 Output", "cond": "STM32F7_TIM1_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM1_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32F7_TIM1_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 4", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32F7_TIM1_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 4 Mode", "cond": "STM32F7_TIM1_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM1_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM1_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM1_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 4 Output", "cond": "STM32F7_TIM1_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM1_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32F7_TIM1_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 PWM Output Channel", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "If TIM1 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32F7_TIM1_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 Channel Mode", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM1_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32F7_TIM2_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 PWM", "cond": "STM32F7_TIM2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32F7_TIM2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 2 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32F7_TIM2\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "STM32F7_TIM2_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 Mode", "cond": "STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the timer mode."}, {"type": 3, "name": "STM32F7_TIM2_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 1", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32F7_TIM2_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 1 Mode", "cond": "STM32F7_TIM2_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM2_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM2_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM2_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 1 Output", "cond": "STM32F7_TIM2_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM2_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32F7_TIM2_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 2", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32F7_TIM2_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 2 Mode", "cond": "STM32F7_TIM2_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM2_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM2_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM2_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 2 Output", "cond": "STM32F7_TIM2_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM2_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32F7_TIM2_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 3", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32F7_TIM2_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 3 Mode", "cond": "STM32F7_TIM2_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM2_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM2_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM2_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 3 Output", "cond": "STM32F7_TIM2_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM2_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32F7_TIM2_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 4", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32F7_TIM2_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 4 Mode", "cond": "STM32F7_TIM2_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM2_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM2_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM2_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 4 Output", "cond": "STM32F7_TIM2_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM2_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32F7_TIM2_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 PWM Output Channel", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "If TIM2 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32F7_TIM2_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 Channel Mode", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM2_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32F7_TIM3_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 PWM", "cond": "STM32F7_TIM3 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM3 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32F7_TIM3 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 3 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32F7_TIM3\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "STM32F7_TIM3_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 Mode", "cond": "STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the timer mode."}, {"type": 3, "name": "STM32F7_TIM3_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 1", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32F7_TIM3_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 1 Mode", "cond": "STM32F7_TIM3_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM3_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM3_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM3_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 1 Output", "cond": "STM32F7_TIM3_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM3_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32F7_TIM3_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 2", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32F7_TIM3_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 2 Mode", "cond": "STM32F7_TIM3_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM3_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM3_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM3_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 2 Output", "cond": "STM32F7_TIM3_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM3_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32F7_TIM3_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 3", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32F7_TIM3_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 3 Mode", "cond": "STM32F7_TIM3_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM3_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM3_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM3_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 3 Output", "cond": "STM32F7_TIM3_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM3_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32F7_TIM3_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 4", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32F7_TIM3_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 4 Mode", "cond": "STM32F7_TIM3_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM3_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM3_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM3_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 4 Output", "cond": "STM32F7_TIM3_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM3_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32F7_TIM3_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 PWM Output Channel", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "If TIM3 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32F7_TIM3_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 Channel Mode", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM3_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32F7_TIM4_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 PWM", "cond": "STM32F7_TIM4 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM4 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32F7_TIM4 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 4 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32F7_TIM4\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "STM32F7_TIM4_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 Mode", "cond": "STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the timer mode."}, {"type": 3, "name": "STM32F7_TIM4_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 1", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32F7_TIM4_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 1 Mode", "cond": "STM32F7_TIM4_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM4_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM4_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM4_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 1 Output", "cond": "STM32F7_TIM4_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM4_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32F7_TIM4_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 2", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32F7_TIM4_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 2 Mode", "cond": "STM32F7_TIM4_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM4_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM4_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM4_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 2 Output", "cond": "STM32F7_TIM4_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM4_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32F7_TIM4_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 3", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32F7_TIM4_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 3 Mode", "cond": "STM32F7_TIM4_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM4_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM4_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM4_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 3 Output", "cond": "STM32F7_TIM4_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM4_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32F7_TIM4_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 4", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32F7_TIM4_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 4 Mode", "cond": "STM32F7_TIM4_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM4_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM4_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM4_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 4 Output", "cond": "STM32F7_TIM4_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM4_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32F7_TIM4_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 PWM Output Channel", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "If TIM4 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32F7_TIM4_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 Channel Mode", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM4_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32F7_TIM5_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 PWM", "cond": "STM32F7_TIM5 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM5 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32F7_TIM5 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 5 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32F7_TIM5\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "STM32F7_TIM5_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 Mode", "cond": "STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the timer mode."}, {"type": 3, "name": "STM32F7_TIM5_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 1", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32F7_TIM5_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 1 Mode", "cond": "STM32F7_TIM5_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM5_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM5_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM5_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 1 Output", "cond": "STM32F7_TIM5_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM5_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32F7_TIM5_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 2", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32F7_TIM5_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 2 Mode", "cond": "STM32F7_TIM5_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM5_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM5_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM5_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 2 Output", "cond": "STM32F7_TIM5_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM5_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32F7_TIM5_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 3", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32F7_TIM5_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 3 Mode", "cond": "STM32F7_TIM5_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM5_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM5_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM5_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 3 Output", "cond": "STM32F7_TIM5_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM5_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32F7_TIM5_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 4", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32F7_TIM5_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 4 Mode", "cond": "STM32F7_TIM5_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM5_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM5_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM5_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 4 Output", "cond": "STM32F7_TIM5_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM5_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32F7_TIM5_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 PWM Output Channel", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "If TIM5 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32F7_TIM5_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 Channel Mode", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM5_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32F7_TIM8_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 PWM", "cond": "STM32F7_TIM8 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM8 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32F7_TIM8 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 8 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32F7_TIM8\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "STM32F7_TIM8_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 Mode", "cond": "STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the timer mode."}, {"type": 3, "name": "STM32F7_TIM8_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 1", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32F7_TIM8_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 1 Mode", "cond": "STM32F7_TIM8_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM8_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM8_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM8_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 1 Output", "cond": "STM32F7_TIM8_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM8_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32F7_TIM8_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 2", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32F7_TIM8_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 2 Mode", "cond": "STM32F7_TIM8_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM8_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM8_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM8_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 2 Output", "cond": "STM32F7_TIM8_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM8_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32F7_TIM8_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 3", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32F7_TIM8_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 3 Mode", "cond": "STM32F7_TIM8_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM8_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM8_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM8_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 3 Output", "cond": "STM32F7_TIM8_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM8_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32F7_TIM8_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 4", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32F7_TIM8_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 4 Mode", "cond": "STM32F7_TIM8_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM8_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM8_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM8_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 4 Output", "cond": "STM32F7_TIM8_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM8_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32F7_TIM8_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 PWM Output Channel", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "If TIM8 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32F7_TIM8_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 Channel Mode", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM8_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32F7_TIM9_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 PWM", "cond": "STM32F7_TIM9 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM9 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32F7_TIM9 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 9 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32F7_TIM9\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 3, "name": "STM32F7_TIM9_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 1", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32F7_TIM9_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 1 Mode", "cond": "STM32F7_TIM9_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM9_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM9_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM9_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 1 Output", "cond": "STM32F7_TIM9_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM9_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32F7_TIM9_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 2", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32F7_TIM9_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 2 Mode", "cond": "STM32F7_TIM9_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM9_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM9_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM9_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 2 Output", "cond": "STM32F7_TIM9_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM9_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32F7_TIM9_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 3", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32F7_TIM9_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 3 Mode", "cond": "STM32F7_TIM9_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM9_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM9_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM9_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 3 Output", "cond": "STM32F7_TIM9_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM9_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32F7_TIM9_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 4", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32F7_TIM9_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 4 Mode", "cond": "STM32F7_TIM9_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM9_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM9_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM9_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 Channel 4 Output", "cond": "STM32F7_TIM9_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM9_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32F7_TIM9_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM9 PWM Output Channel", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "If TIM9 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32F7_TIM9_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM9 Channel Mode", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM9_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32F7_TIM10_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 PWM", "cond": "STM32F7_TIM10 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM10 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32F7_TIM10 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 10 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32F7_TIM10\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 3, "name": "STM32F7_TIM10_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 1", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32F7_TIM10_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 1 Mode", "cond": "STM32F7_TIM10_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM10_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM10_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM10_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 1 Output", "cond": "STM32F7_TIM10_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM10_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32F7_TIM10_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 2", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32F7_TIM10_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 2 Mode", "cond": "STM32F7_TIM10_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM10_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM10_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM10_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 2 Output", "cond": "STM32F7_TIM10_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM10_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32F7_TIM10_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 3", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32F7_TIM10_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 3 Mode", "cond": "STM32F7_TIM10_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM10_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM10_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM10_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 3 Output", "cond": "STM32F7_TIM10_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM10_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32F7_TIM10_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 4", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32F7_TIM10_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 4 Mode", "cond": "STM32F7_TIM10_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM10_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM10_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM10_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 Channel 4 Output", "cond": "STM32F7_TIM10_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM10_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32F7_TIM10_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM10 PWM Output Channel", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "If TIM10 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32F7_TIM10_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM10 Channel Mode", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM10_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32F7_TIM11_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 PWM", "cond": "STM32F7_TIM11 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM11 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32F7_TIM11 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 11 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32F7_TIM11\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 3, "name": "STM32F7_TIM11_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 1", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32F7_TIM11_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 1 Mode", "cond": "STM32F7_TIM11_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM11_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM11_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM11_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 1 Output", "cond": "STM32F7_TIM11_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM11_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32F7_TIM11_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 2", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32F7_TIM11_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 2 Mode", "cond": "STM32F7_TIM11_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM11_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM11_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM11_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 2 Output", "cond": "STM32F7_TIM11_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM11_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32F7_TIM11_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 3", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32F7_TIM11_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 3 Mode", "cond": "STM32F7_TIM11_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM11_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM11_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM11_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 3 Output", "cond": "STM32F7_TIM11_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM11_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32F7_TIM11_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 4", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32F7_TIM11_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 4 Mode", "cond": "STM32F7_TIM11_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM11_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM11_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM11_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 Channel 4 Output", "cond": "STM32F7_TIM11_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM11_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32F7_TIM11_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM11 PWM Output Channel", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "If TIM11 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32F7_TIM11_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM11 Channel Mode", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM11_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32F7_TIM12_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 PWM", "cond": "STM32F7_TIM12 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM12 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32F7_TIM12 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 12 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32F7_TIM12\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 3, "name": "STM32F7_TIM12_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 1", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32F7_TIM12_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 1 Mode", "cond": "STM32F7_TIM12_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM12_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM12_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM12_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 1 Output", "cond": "STM32F7_TIM12_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM12_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32F7_TIM12_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 2", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32F7_TIM12_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 2 Mode", "cond": "STM32F7_TIM12_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM12_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM12_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM12_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 2 Output", "cond": "STM32F7_TIM12_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM12_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32F7_TIM12_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 3", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32F7_TIM12_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 3 Mode", "cond": "STM32F7_TIM12_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM12_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM12_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM12_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 3 Output", "cond": "STM32F7_TIM12_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM12_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32F7_TIM12_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 4", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32F7_TIM12_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 4 Mode", "cond": "STM32F7_TIM12_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM12_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM12_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM12_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 Channel 4 Output", "cond": "STM32F7_TIM12_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM12_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32F7_TIM12_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM12 PWM Output Channel", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "If TIM12 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32F7_TIM12_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM12 Channel Mode", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM12_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32F7_TIM13_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 PWM", "cond": "STM32F7_TIM13 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM13 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32F7_TIM13 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 13 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32F7_TIM13\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 3, "name": "STM32F7_TIM13_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 1", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32F7_TIM13_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 1 Mode", "cond": "STM32F7_TIM13_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM13_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM13_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM13_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 1 Output", "cond": "STM32F7_TIM13_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM13_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32F7_TIM13_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 2", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32F7_TIM13_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 2 Mode", "cond": "STM32F7_TIM13_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM13_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM13_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM13_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 2 Output", "cond": "STM32F7_TIM13_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM13_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32F7_TIM13_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 3", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32F7_TIM13_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 3 Mode", "cond": "STM32F7_TIM13_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM13_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM13_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM13_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 3 Output", "cond": "STM32F7_TIM13_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM13_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32F7_TIM13_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 4", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32F7_TIM13_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 4 Mode", "cond": "STM32F7_TIM13_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM13_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM13_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM13_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 Channel 4 Output", "cond": "STM32F7_TIM13_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM13_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32F7_TIM13_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM13 PWM Output Channel", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "If TIM13 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32F7_TIM13_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM13 Channel Mode", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM13_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32F7_TIM14_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 PWM", "cond": "STM32F7_TIM14 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM14 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32F7_TIM14 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 14 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32F7_TIM14\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 3, "name": "STM32F7_TIM14_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 1", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32F7_TIM14_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 1 Mode", "cond": "STM32F7_TIM14_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM14_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM14_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM14_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 1 Output", "cond": "STM32F7_TIM14_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM14_CHANNEL1 && STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32F7_TIM14_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 2", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32F7_TIM14_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 2 Mode", "cond": "STM32F7_TIM14_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM14_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM14_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM14_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 2 Output", "cond": "STM32F7_TIM14_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM14_CHANNEL2 && STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32F7_TIM14_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 3", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32F7_TIM14_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 3 Mode", "cond": "STM32F7_TIM14_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM14_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM14_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM14_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 3 Output", "cond": "STM32F7_TIM14_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM14_CHANNEL3 && STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32F7_TIM14_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 4", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32F7_TIM14_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 4 Mode", "cond": "STM32F7_TIM14_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_TIM14_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32F7_TIM14_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32F7_TIM14_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 Channel 4 Output", "cond": "STM32F7_TIM14_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM14_CHANNEL4 && STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32F7_TIM14_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM14 PWM Output Channel", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "If TIM14 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32F7_TIM14_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM14 Channel Mode", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "!STM32F7_PWM_MULTICHAN && STM32F7_TIM14_PWM && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32F7_PWM_MULTICHAN", "value": "n", "user_value": null, "dep": "n", "prompt": "PWM Multiple Output Channels", "cond": "(STM32F7_TIM1_PWM || STM32F7_TIM2_PWM || STM32F7_TIM3_PWM || STM32F7_TIM4_PWM || STM32F7_TIM5_PWM || STM32F7_TIM8_PWM || STM32F7_TIM9_PWM || STM32F7_TIM10_PWM || STM32F7_TIM11_PWM || STM32F7_TIM12_PWM || STM32F7_TIM13_PWM || STM32F7_TIM14_PWM) && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(STM32F7_TIM1_PWM || STM32F7_TIM2_PWM || STM32F7_TIM3_PWM || STM32F7_TIM4_PWM || STM32F7_TIM5_PWM || STM32F7_TIM8_PWM || STM32F7_TIM9_PWM || STM32F7_TIM10_PWM || STM32F7_TIM11_PWM || STM32F7_TIM12_PWM || STM32F7_TIM13_PWM || STM32F7_TIM14_PWM) && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_MULTICHAN", "cond": "(STM32F7_TIM1_PWM || STM32F7_TIM2_PWM || STM32F7_TIM3_PWM || STM32F7_TIM4_PWM || STM32F7_TIM5_PWM || STM32F7_TIM8_PWM || STM32F7_TIM9_PWM || STM32F7_TIM10_PWM || STM32F7_TIM11_PWM || STM32F7_TIM12_PWM || STM32F7_TIM13_PWM || STM32F7_TIM14_PWM) && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Specifies that the PWM driver supports multiple output\nchannels per timer."}, {"type": 3, "name": "STM32F7_TIM1_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 ADC", "cond": "STM32F7_TIM1 && STM32F7_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM1 && STM32F7_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 1 for use by ADC\n\nTimer devices may be used for different purposes.  If STM32F7_TIM1 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for ADC conversion. Note that ADC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the ADC, but then you also have to configure which ADC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM1 ADC channel", "cond": "STM32F7_TIM1_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_TIM1_ADC1", "default": "n", "cond": "STM32F7_TIM1_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_TIM1_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 ADC channel 1", "cond": "STM32F7_ADC1 && y", "selects": [{"symbol": "HAVE_ADC1_TIMER", "cond": "STM32F7_ADC1 && y"}], "help": "Reserve TIM1 to trigger ADC1"}, {"type": 3, "name": "STM32F7_TIM1_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 ADC channel 2", "cond": "STM32F7_ADC2 && y", "selects": [{"symbol": "HAVE_ADC2_TIMER", "cond": "STM32F7_ADC2 && y"}], "help": "Reserve TIM1 to trigger ADC2"}, {"type": 3, "name": "STM32F7_TIM1_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 ADC channel 3", "cond": "STM32F7_ADC3 && y", "selects": [{"symbol": "HAVE_ADC3_TIMER", "cond": "STM32F7_ADC3 && y"}], "help": "Reserve TIM1 to trigger ADC3"}]}]}, {"type": 3, "name": "STM32F7_TIM2_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 ADC", "cond": "STM32F7_TIM2 && STM32F7_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM2 && STM32F7_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 1 for use by ADC\n\nTimer devices may be used for different purposes.  If STM32F7_TIM2 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for ADC conversion. Note that ADC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the ADC, but then you also have to configure which ADC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM2 ADC channel", "cond": "STM32F7_TIM2_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_TIM2_ADC1", "default": "n", "cond": "STM32F7_TIM2_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_TIM2_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 ADC channel 1", "cond": "STM32F7_ADC1 && y", "selects": [{"symbol": "HAVE_ADC1_TIMER", "cond": "STM32F7_ADC1 && y"}], "help": "Reserve TIM2 to trigger ADC1"}, {"type": 3, "name": "STM32F7_TIM2_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 ADC channel 2", "cond": "STM32F7_ADC2 && y", "selects": [{"symbol": "HAVE_ADC2_TIMER", "cond": "STM32F7_ADC2 && y"}], "help": "Reserve TIM2 to trigger ADC2"}, {"type": 3, "name": "STM32F7_TIM2_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 ADC channel 3", "cond": "STM32F7_ADC3 && y", "selects": [{"symbol": "HAVE_ADC3_TIMER", "cond": "STM32F7_ADC3 && y"}], "help": "Reserve TIM2 to trigger ADC3"}]}]}, {"type": 3, "name": "STM32F7_TIM3_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 ADC", "cond": "STM32F7_TIM3 && STM32F7_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM3 && STM32F7_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 1 for use by ADC\n\nTimer devices may be used for different purposes.  If STM32F7_TIM3 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for ADC conversion. Note that ADC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the ADC, but then you also have to configure which ADC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM3 ADC channel", "cond": "STM32F7_TIM3_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_TIM3_ADC1", "default": "n", "cond": "STM32F7_TIM3_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_TIM3_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 ADC channel 1", "cond": "STM32F7_ADC1 && y", "selects": [{"symbol": "HAVE_ADC1_TIMER", "cond": "STM32F7_ADC1 && y"}], "help": "Reserve TIM3 to trigger ADC1"}, {"type": 3, "name": "STM32F7_TIM3_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 ADC channel 2", "cond": "STM32F7_ADC2 && y", "selects": [{"symbol": "HAVE_ADC2_TIMER", "cond": "STM32F7_ADC2 && y"}], "help": "Reserve TIM3 to trigger ADC2"}, {"type": 3, "name": "STM32F7_TIM3_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 ADC channel 3", "cond": "STM32F7_ADC3 && y", "selects": [{"symbol": "HAVE_ADC3_TIMER", "cond": "STM32F7_ADC3 && y"}], "help": "Reserve TIM3 to trigger ADC3"}]}]}, {"type": 3, "name": "STM32F7_TIM4_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 ADC", "cond": "STM32F7_TIM4 && STM32F7_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM4 && STM32F7_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 1 for use by ADC\n\nTimer devices may be used for different purposes.  If STM32F7_TIM4 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for ADC conversion. Note that ADC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the ADC, but then you also have to configure which ADC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM4 ADC channel", "cond": "STM32F7_TIM4_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_TIM4_ADC1", "default": "n", "cond": "STM32F7_TIM4_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_TIM4_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 ADC channel 1", "cond": "STM32F7_ADC1 && y", "selects": [{"symbol": "HAVE_ADC1_TIMER", "cond": "STM32F7_ADC1 && y"}], "help": "Reserve TIM4 to trigger ADC1"}, {"type": 3, "name": "STM32F7_TIM4_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 ADC channel 2", "cond": "STM32F7_ADC2 && y", "selects": [{"symbol": "HAVE_ADC2_TIMER", "cond": "STM32F7_ADC2 && y"}], "help": "Reserve TIM4 to trigger ADC2"}, {"type": 3, "name": "STM32F7_TIM4_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 ADC channel 3", "cond": "STM32F7_ADC3 && y", "selects": [{"symbol": "HAVE_ADC3_TIMER", "cond": "STM32F7_ADC3 && y"}], "help": "Reserve TIM4 to trigger ADC3"}]}]}, {"type": 3, "name": "STM32F7_TIM5_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 ADC", "cond": "STM32F7_TIM5 && STM32F7_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM5 && STM32F7_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 1 for use by ADC\n\nTimer devices may be used for different purposes.  If STM32F7_TIM5 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for ADC conversion. Note that ADC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the ADC, but then you also have to configure which ADC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM5 ADC channel", "cond": "STM32F7_TIM5_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_TIM5_ADC1", "default": "n", "cond": "STM32F7_TIM5_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_TIM5_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 ADC channel 1", "cond": "STM32F7_ADC1 && y", "selects": [{"symbol": "HAVE_ADC1_TIMER", "cond": "STM32F7_ADC1 && y"}], "help": "Reserve TIM5 to trigger ADC1"}, {"type": 3, "name": "STM32F7_TIM5_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 ADC channel 2", "cond": "STM32F7_ADC2 && y", "selects": [{"symbol": "HAVE_ADC2_TIMER", "cond": "STM32F7_ADC2 && y"}], "help": "Reserve TIM5 to trigger ADC2"}, {"type": 3, "name": "STM32F7_TIM5_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 ADC channel 3", "cond": "STM32F7_ADC3 && y", "selects": [{"symbol": "HAVE_ADC3_TIMER", "cond": "STM32F7_ADC3 && y"}], "help": "Reserve TIM5 to trigger ADC3"}]}]}, {"type": 3, "name": "STM32F7_TIM8_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 ADC", "cond": "STM32F7_TIM8 && STM32F7_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM8 && STM32F7_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 1 for use by ADC\n\nTimer devices may be used for different purposes.  If STM32F7_TIM8 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for ADC conversion. Note that ADC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the ADC, but then you also have to configure which ADC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM8 ADC channel", "cond": "STM32F7_TIM8_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_TIM8_ADC1", "default": "n", "cond": "STM32F7_TIM8_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_TIM8_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 ADC channel 1", "cond": "STM32F7_ADC1 && y", "selects": [{"symbol": "HAVE_ADC1_TIMER", "cond": "STM32F7_ADC1 && y"}], "help": "Reserve TIM8 to trigger ADC1"}, {"type": 3, "name": "STM32F7_TIM8_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 ADC channel 2", "cond": "STM32F7_ADC2 && y", "selects": [{"symbol": "HAVE_ADC2_TIMER", "cond": "STM32F7_ADC2 && y"}], "help": "Reserve TIM8 to trigger ADC2"}, {"type": 3, "name": "STM32F7_TIM8_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 ADC channel 3", "cond": "STM32F7_ADC3 && y", "selects": [{"symbol": "HAVE_ADC3_TIMER", "cond": "STM32F7_ADC3 && y"}], "help": "Reserve TIM8 to trigger ADC3"}]}]}, {"type": 3, "name": "HAVE_ADC1_TIMER", "value": "n", "user_value": null, "rev_dep": "(STM32_TIM1_ADC1 && STM32_ADC1 && y) || (STM32_TIM2_ADC1 && STM32_ADC1 && y) || (STM32_TIM3_ADC1 && STM32_ADC1 && y) || (STM32_TIM4_ADC1 && STM32_ADC1 && y) || (STM32_TIM5_ADC1 && STM32_ADC1 && y) || (STM32_TIM8_ADC1 && STM32_ADC1 && y) || (STM32F7_TIM1_ADC1 && STM32F7_ADC1 && y) || (STM32F7_TIM2_ADC1 && STM32F7_ADC1 && y) || (STM32F7_TIM3_ADC1 && STM32F7_ADC1 && y) || (STM32F7_TIM4_ADC1 && STM32F7_ADC1 && y) || (STM32F7_TIM5_ADC1 && STM32F7_ADC1 && y) || (STM32F7_TIM8_ADC1 && STM32F7_ADC1 && y) || (STM32L4_TIM1_ADC1 && STM32L4_ADC1 && y) || (STM32L4_TIM2_ADC1 && STM32L4_ADC1 && y) || (STM32L4_TIM3_ADC1 && STM32L4_ADC1 && y) || (STM32L4_TIM4_ADC1 && STM32L4_ADC1 && y) || (STM32L4_TIM6_ADC1 && STM32L4_ADC1 && y) || (STM32L4_TIM8_ADC1 && STM32L4_ADC1 && y) || (STM32L4_TIM15_ADC1 && STM32L4_ADC1 && y)", "dep": "n"}, {"type": 3, "name": "HAVE_ADC2_TIMER", "value": "n", "user_value": null, "rev_dep": "(STM32_TIM1_ADC2 && STM32_ADC2 && y) || (STM32_TIM2_ADC2 && STM32_ADC2 && y) || (STM32_TIM3_ADC2 && STM32_ADC2 && y) || (STM32_TIM4_ADC2 && STM32_ADC2 && y) || (STM32_TIM5_ADC2 && STM32_ADC2 && y) || (STM32_TIM8_ADC2 && STM32_ADC2 && y) || (STM32F7_TIM1_ADC2 && STM32F7_ADC2 && y) || (STM32F7_TIM2_ADC2 && STM32F7_ADC2 && y) || (STM32F7_TIM3_ADC2 && STM32F7_ADC2 && y) || (STM32F7_TIM4_ADC2 && STM32F7_ADC2 && y) || (STM32F7_TIM5_ADC2 && STM32F7_ADC2 && y) || (STM32F7_TIM8_ADC2 && STM32F7_ADC2 && y) || (STM32L4_TIM1_ADC2 && STM32L4_ADC2 && y) || (STM32L4_TIM2_ADC2 && STM32L4_ADC2 && y) || (STM32L4_TIM3_ADC2 && STM32L4_ADC2 && y) || (STM32L4_TIM4_ADC2 && STM32L4_ADC2 && y) || (STM32L4_TIM6_ADC2 && STM32L4_ADC2 && y) || (STM32L4_TIM8_ADC2 && STM32L4_ADC2 && y) || (STM32L4_TIM15_ADC2 && STM32L4_ADC2 && y)", "dep": "n"}, {"type": 3, "name": "HAVE_ADC3_TIMER", "value": "n", "user_value": null, "rev_dep": "(STM32_TIM1_ADC3 && STM32_ADC3 && y) || (STM32_TIM2_ADC3 && STM32_ADC3 && y) || (STM32_TIM3_ADC3 && STM32_ADC3 && y) || (STM32_TIM4_ADC3 && STM32_ADC3 && y) || (STM32_TIM5_ADC3 && STM32_ADC3 && y) || (STM32_TIM8_ADC3 && STM32_ADC3 && y) || (STM32F7_TIM1_ADC3 && STM32F7_ADC3 && y) || (STM32F7_TIM2_ADC3 && STM32F7_ADC3 && y) || (STM32F7_TIM3_ADC3 && STM32F7_ADC3 && y) || (STM32F7_TIM4_ADC3 && STM32F7_ADC3 && y) || (STM32F7_TIM5_ADC3 && STM32F7_ADC3 && y) || (STM32F7_TIM8_ADC3 && STM32F7_ADC3 && y) || (STM32L4_TIM1_ADC3 && STM32L4_ADC3 && y) || (STM32L4_TIM2_ADC3 && STM32L4_ADC3 && y) || (STM32L4_TIM3_ADC3 && STM32L4_ADC3 && y) || (STM32L4_TIM4_ADC3 && STM32L4_ADC3 && y) || (STM32L4_TIM6_ADC3 && STM32L4_ADC3 && y) || (STM32L4_TIM8_ADC3 && STM32L4_ADC3 && y) || (STM32L4_TIM15_ADC3 && STM32L4_ADC3 && y)", "dep": "n"}, {"type": 27, "name": "STM32F7_ADC1_SAMPLE_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "ADC1 Sampling Frequency", "cond": "HAVE_ADC1_TIMER && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "100", "default": "100", "cond": "HAVE_ADC1_TIMER && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "ADC1 sampling frequency.  Default:  100Hz"}, {"type": 27, "name": "STM32F7_ADC1_TIMTRIG", "value": "", "user_value": null, "dep": "n", "prompt": "ADC1 Timer Trigger", "cond": "HAVE_ADC1_TIMER && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "HAVE_ADC1_TIMER && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "HAVE_ADC1_TIMER && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Values 0:CC1 1:CC2 2:CC3 3:CC4 4:TRGO"}, {"type": 27, "name": "STM32F7_ADC2_SAMPLE_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "ADC2 Sampling Frequency", "cond": "HAVE_ADC2_TIMER && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "100", "default": "100", "cond": "HAVE_ADC2_TIMER && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "ADC2 sampling frequency.  Default:  100Hz"}, {"type": 27, "name": "STM32F7_ADC2_TIMTRIG", "value": "", "user_value": null, "dep": "n", "prompt": "ADC2 Timer Trigger", "cond": "HAVE_ADC2_TIMER && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "HAVE_ADC2_TIMER && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "HAVE_ADC2_TIMER && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Values 0:CC1 1:CC2 2:CC3 3:CC4 4:TRGO"}, {"type": 27, "name": "STM32F7_ADC3_SAMPLE_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "ADC3 Sampling Frequency", "cond": "HAVE_ADC3_TIMER && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "100", "default": "100", "cond": "HAVE_ADC3_TIMER && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "ADC3 sampling frequency.  Default:  100Hz"}, {"type": 27, "name": "STM32F7_ADC3_TIMTRIG", "value": "", "user_value": null, "dep": "n", "prompt": "ADC3 Timer Trigger", "cond": "HAVE_ADC3_TIMER && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "HAVE_ADC3_TIMER && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "HAVE_ADC3_TIMER && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Values 0:CC1 1:CC2 2:CC3 3:CC4 4:TRGO"}, {"type": 3, "name": "STM32F7_TIM1_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 DAC", "cond": "STM32F7_TIM1 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM1 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 1 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32F7_TIM1 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM1 DAC channel", "cond": "STM32F7_TIM1_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_TIM1_DAC1", "default": "n", "cond": "STM32F7_TIM1_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_TIM1_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 DAC channel 1", "cond": "y", "help": "Reserve TIM1 to trigger DAC1"}, {"type": 3, "name": "STM32F7_TIM1_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 DAC channel 2", "cond": "y", "help": "Reserve TIM1 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32F7_TIM2_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 DAC", "cond": "STM32F7_TIM2 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM2 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 2 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32F7_TIM2 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM2 DAC channel", "cond": "STM32F7_TIM2_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_TIM2_DAC1", "default": "n", "cond": "STM32F7_TIM2_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_TIM2_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 DAC channel 1", "cond": "y", "help": "Reserve TIM2 to trigger DAC1"}, {"type": 3, "name": "STM32F7_TIM2_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 DAC channel 2", "cond": "y", "help": "Reserve TIM2 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32F7_TIM3_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 DAC", "cond": "STM32F7_TIM3 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM3 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 3 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32F7_TIM3 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM3 DAC channel", "cond": "STM32F7_TIM3_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_TIM3_DAC1", "default": "n", "cond": "STM32F7_TIM3_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_TIM3_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 DAC channel 1", "cond": "y", "help": "Reserve TIM3 to trigger DAC1"}, {"type": 3, "name": "STM32F7_TIM3_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 DAC channel 2", "cond": "y", "help": "Reserve TIM3 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32F7_TIM4_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 DAC", "cond": "STM32F7_TIM4 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM4 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 4 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32F7_TIM4 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM4 DAC channel", "cond": "STM32F7_TIM4_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_TIM4_DAC1", "default": "n", "cond": "STM32F7_TIM4_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_TIM4_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 DAC channel 1", "cond": "y", "help": "Reserve TIM4 to trigger DAC1"}, {"type": 3, "name": "STM32F7_TIM4_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 DAC channel 2", "cond": "y", "help": "Reserve TIM4 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32F7_TIM5_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 DAC", "cond": "STM32F7_TIM5 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM5 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 5 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32F7_TIM5 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM5 DAC channel", "cond": "STM32F7_TIM5_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_TIM5_DAC1", "default": "n", "cond": "STM32F7_TIM5_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_TIM5_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 DAC channel 1", "cond": "y", "help": "Reserve TIM5 to trigger DAC1"}, {"type": 3, "name": "STM32F7_TIM5_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 DAC channel 2", "cond": "y", "help": "Reserve TIM5 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32F7_TIM6_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM6 DAC", "cond": "STM32F7_TIM6 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM6 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 6 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32F7_TIM6 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM6 DAC channel", "cond": "STM32F7_TIM6_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_TIM6_DAC1", "default": "n", "cond": "STM32F7_TIM6_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_TIM6_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM6 DAC channel 1", "cond": "y", "help": "Reserve TIM6 to trigger DAC1"}, {"type": 3, "name": "STM32F7_TIM6_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM6 DAC channel 2", "cond": "y", "help": "Reserve TIM6 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32F7_TIM7_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM7 DAC", "cond": "STM32F7_TIM7 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM7 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 7 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32F7_TIM7 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM7 DAC channel", "cond": "STM32F7_TIM7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_TIM7_DAC1", "default": "n", "cond": "STM32F7_TIM7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_TIM7_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM7 DAC channel 1", "cond": "y", "help": "Reserve TIM7 to trigger DAC1"}, {"type": 3, "name": "STM32F7_TIM7_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM7 DAC channel 2", "cond": "y", "help": "Reserve TIM7 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32F7_TIM8_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 DAC", "cond": "STM32F7_TIM8 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM8 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 8 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32F7_TIM8 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM8 DAC channel", "cond": "STM32F7_TIM8_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_TIM8_DAC1", "default": "n", "cond": "STM32F7_TIM8_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_TIM8_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 DAC channel 1", "cond": "y", "help": "Reserve TIM8 to trigger DAC1"}, {"type": 3, "name": "STM32F7_TIM8_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 DAC channel 2", "cond": "y", "help": "Reserve TIM8 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32F7_TIM9_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 DAC", "cond": "STM32F7_TIM9 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM9 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 9 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32F7_TIM9 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM9 DAC channel", "cond": "STM32F7_TIM9_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_TIM9_DAC1", "default": "n", "cond": "STM32F7_TIM9_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_TIM9_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 DAC channel 1", "cond": "y", "help": "Reserve TIM9 to trigger DAC1"}, {"type": 3, "name": "STM32F7_TIM9_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 DAC channel 2", "cond": "y", "help": "Reserve TIM9 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32F7_TIM10_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 DAC", "cond": "STM32F7_TIM10 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM10 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 10 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32F7_TIM10 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM10 DAC channel", "cond": "STM32F7_TIM10_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_TIM10_DAC1", "default": "n", "cond": "STM32F7_TIM10_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_TIM10_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 DAC channel 1", "cond": "y", "help": "Reserve TIM10 to trigger DAC1"}, {"type": 3, "name": "STM32F7_TIM10_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 DAC channel 2", "cond": "y", "help": "Reserve TIM10 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32F7_TIM11_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 DAC", "cond": "STM32F7_TIM11 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM11 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 11 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32F7_TIM11 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM11 DAC channel", "cond": "STM32F7_TIM11_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_TIM11_DAC1", "default": "n", "cond": "STM32F7_TIM11_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_TIM11_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 DAC channel 1", "cond": "y", "help": "Reserve TIM11 to trigger DAC1"}, {"type": 3, "name": "STM32F7_TIM11_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 DAC channel 2", "cond": "y", "help": "Reserve TIM11 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32F7_TIM12_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 DAC", "cond": "STM32F7_TIM12 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM12 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 12 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32F7_TIM12 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM12 DAC channel", "cond": "STM32F7_TIM12_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_TIM12_DAC1", "default": "n", "cond": "STM32F7_TIM12_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_TIM12_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 DAC channel 1", "cond": "y", "help": "Reserve TIM12 to trigger DAC1"}, {"type": 3, "name": "STM32F7_TIM12_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 DAC channel 2", "cond": "y", "help": "Reserve TIM12 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32F7_TIM13_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 DAC", "cond": "STM32F7_TIM13 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM13 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 13 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32F7_TIM13 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM13 DAC channel", "cond": "STM32F7_TIM13_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_TIM13_DAC1", "default": "n", "cond": "STM32F7_TIM13_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_TIM13_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 DAC channel 1", "cond": "y", "help": "Reserve TIM13 to trigger DAC1"}, {"type": 3, "name": "STM32F7_TIM13_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 DAC channel 2", "cond": "y", "help": "Reserve TIM13 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32F7_TIM14_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 DAC", "cond": "STM32F7_TIM14 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_TIM14 && STM32F7_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 14 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32F7_TIM14 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM14 DAC channel", "cond": "STM32F7_TIM14_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_TIM14_DAC1", "default": "n", "cond": "STM32F7_TIM14_DAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_TIM14_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 DAC channel 1", "cond": "y", "help": "Reserve TIM14 to trigger DAC1"}, {"type": 3, "name": "STM32F7_TIM14_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 DAC channel 2", "cond": "y", "help": "Reserve TIM14 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32F7_TIM1_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Capture", "cond": "STM32F7_HAVE_TIM1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_TIM1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 1 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32F7_TIM2_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Capture", "cond": "STM32F7_HAVE_TIM2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_TIM2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 2 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32F7_TIM3_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Capture", "cond": "STM32F7_HAVE_TIM3 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_TIM3 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 3 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32F7_TIM4_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Capture", "cond": "STM32F7_HAVE_TIM4 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_TIM4 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 4 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32F7_TIM5_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Capture", "cond": "STM32F7_HAVE_TIM5 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_TIM5 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 5 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32F7_TIM8_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Capture", "cond": "STM32F7_HAVE_TIM8 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_TIM8 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 8 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32F7_TIM9_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM9 Capture", "cond": "STM32F7_HAVE_TIM9 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_TIM9 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 9 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32F7_TIM10_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM10 Capture", "cond": "STM32F7_HAVE_TIM10 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_TIM10 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 10 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32F7_TIM11_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM11 Capture", "cond": "STM32F7_HAVE_TIM11 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_TIM11 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 11 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32F7_TIM12_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM12 Capture", "cond": "STM32F7_HAVE_TIM12 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_TIM12 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 12 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32F7_TIM13_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM13 Capture", "cond": "STM32F7_HAVE_TIM13 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_TIM13 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 13 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32F7_TIM14_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM14 Capture", "cond": "STM32F7_HAVE_TIM14 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_HAVE_TIM14 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Reserve timer 14 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}]}, {"type": 31, "dep": "n", "prompt": "ADC Configuration", "cond": "STM32F7_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "children": [{"type": 3, "name": "STM32F7_ADC_NO_STARTUP_CONV", "value": "n", "user_value": null, "dep": "n", "prompt": "Do not start conversion when opening ADC device", "cond": "STM32F7_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Do not start conversion when opening ADC device."}, {"type": 3, "name": "STM32F7_ADC1_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC1 DMA", "cond": "STM32F7_ADC1 && STM32F7_HAVE_ADC1_DMA && STM32F7_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_ADC1 && STM32F7_HAVE_ADC1_DMA && STM32F7_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "If DMA is selected, then the ADC may be configured to support\nDMA transfer, which is necessary if multiple channels are read\nor if very high trigger frequencies are used."}, {"type": 3, "name": "STM32F7_ADC2_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC2 DMA", "cond": "STM32F7_ADC2 && STM32F7_HAVE_ADC2_DMA && STM32F7_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_ADC2 && STM32F7_HAVE_ADC2_DMA && STM32F7_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "If DMA is selected, then the ADC may be configured to support\nDMA transfer, which is necessary if multiple channels are read\nor if very high trigger frequencies are used."}, {"type": 3, "name": "STM32F7_ADC3_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC3 DMA", "cond": "STM32F7_ADC3 && STM32F7_HAVE_ADC3_DMA && STM32F7_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_ADC3 && STM32F7_HAVE_ADC3_DMA && STM32F7_ADC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "If DMA is selected, then the ADC may be configured to support\nDMA transfer, which is necessary if multiple channels are read\nor if very high trigger frequencies are used."}]}, {"type": 31, "dep": "n", "prompt": "Ethernet MAC configuration", "cond": "STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "children": [{"type": 27, "name": "STM32F7_PHYADDR", "value": "", "user_value": null, "dep": "n", "prompt": "PHY address", "cond": "STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "The 5-bit address of the PHY on the board.  Default: 1"}, {"type": 3, "name": "STM32F7_PHYINIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Board-specific PHY Initialization", "cond": "STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Some boards require specialized initialization of the PHY before it can be used.\nThis may include such things as configuring GPIOs, resetting the PHY, etc.  If\nSTM32F7_PHYINIT is defined in the configuration then the board specific logic must\nprovide stm32_phyinitialize();  The STM32 Ethernet driver will call this function\none time before it first uses the PHY."}, {"type": 3, "name": "STM32F7_MII", "value": "n", "user_value": null, "dep": "n", "prompt": "Use MII interface", "cond": "STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Support Ethernet MII interface.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "MII clock configuration", "cond": "STM32F7_MII && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_MII_EXTCLK", "default": "n", "cond": "STM32F7_MII && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_MII_MCO1", "value": "n", "user_value": null, "dep": "n", "prompt": "Use MC01 as MII clock", "cond": "y", "help": "Use MCO1 to clock the MII interface."}, {"type": 3, "name": "STM32F7_MII_MCO2", "value": "n", "user_value": null, "dep": "n", "prompt": "Use MC02 as MII clock", "cond": "y", "help": "Use MCO2 to clock the MII interface."}, {"type": 3, "name": "STM32F7_MII_EXTCLK", "value": "n", "user_value": null, "dep": "n", "prompt": "External MII clock", "cond": "y", "help": "Clocking is provided by external logic."}]}]}, {"type": 3, "name": "STM32F7_AUTONEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Use autonegotiation", "cond": "STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Use PHY autonegotiation to determine speed and mode"}, {"type": 3, "name": "STM32F7_ETHFD", "value": "n", "user_value": null, "dep": "n", "prompt": "Full duplex", "cond": "!STM32F7_AUTONEG && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!STM32F7_AUTONEG && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "If STM32F7_AUTONEG is not defined, then this may be defined to select full duplex\nmode. Default: half-duplex"}, {"type": 3, "name": "STM32F7_ETH100MBPS", "value": "n", "user_value": null, "dep": "n", "prompt": "100 Mbps", "cond": "!STM32F7_AUTONEG && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!STM32F7_AUTONEG && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "If STM32F7_AUTONEG is not defined, then this may be defined to select 100 MBps\nspeed.  Default: 10 Mbps"}, {"type": 27, "name": "STM32F7_PHYSR", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Status Register Address (decimal)", "cond": "STM32F7_AUTONEG && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "help": "This must be provided if STM32F7_AUTONEG is defined.  The PHY status register\naddress may diff from PHY to PHY.  This configuration sets the address of\nthe PHY status register."}, {"type": 3, "name": "STM32F7_PHYSR_ALTCONFIG", "value": "n", "user_value": null, "dep": "n", "prompt": "PHY Status Alternate Bit Layout", "cond": "STM32F7_AUTONEG && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_AUTONEG && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Different PHYs present speed and mode information in different ways.  Some\nwill present separate information for speed and mode (this is the default).\nThose PHYs, for example, may provide a 10/100 Mbps indication and a separate\nfull/half duplex indication. This options selects an alternative representation\nwhere speed and mode information are combined.  This might mean, for example,\nseparate bits for 10HD, 100HD, 10FD and 100FD."}, {"type": 24, "name": "STM32F7_PHYSR_SPEED", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Speed Mask", "cond": "STM32F7_AUTONEG && !STM32F7_PHYSR_ALTCONFIG && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "help": "This must be provided if STM32F7_AUTONEG is defined.  This provides bit mask\nfor isolating the 10 or 100MBps speed indication."}, {"type": 24, "name": "STM32F7_PHYSR_100MBPS", "value": "", "user_value": null, "dep": "n", "prompt": "PHY 100Mbps Speed Value", "cond": "STM32F7_AUTONEG && !STM32F7_PHYSR_ALTCONFIG && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "help": "This must be provided if STM32F7_AUTONEG is defined.  This provides the value\nof the speed bit(s) indicating 100MBps speed."}, {"type": 24, "name": "STM32F7_PHYSR_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Mode Mask", "cond": "STM32F7_AUTONEG && !STM32F7_PHYSR_ALTCONFIG && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "help": "This must be provided if STM32F7_AUTONEG is defined.  This provide bit mask\nfor isolating the full or half duplex mode bits."}, {"type": 24, "name": "STM32F7_PHYSR_FULLDUPLEX", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Full Duplex Mode Value", "cond": "STM32F7_AUTONEG && !STM32F7_PHYSR_ALTCONFIG && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "help": "This must be provided if STM32F7_AUTONEG is defined.  This provides the\nvalue of the mode bits indicating full duplex mode."}, {"type": 24, "name": "STM32F7_PHYSR_ALTMODE", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Mode Mask", "cond": "STM32F7_AUTONEG && STM32F7_PHYSR_ALTCONFIG && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "help": "This must be provided if STM32F7_AUTONEG is defined.  This provide bit mask\nfor isolating the speed and full/half duplex mode bits."}, {"type": 24, "name": "STM32F7_PHYSR_10HD", "value": "", "user_value": null, "dep": "n", "prompt": "10MBase-T Half Duplex Value", "cond": "STM32F7_AUTONEG && STM32F7_PHYSR_ALTCONFIG && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "help": "This must be provided if STM32F7_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 10Mbps, half duplex setting."}, {"type": 24, "name": "STM32F7_PHYSR_100HD", "value": "", "user_value": null, "dep": "n", "prompt": "100Base-T Half Duplex Value", "cond": "STM32F7_AUTONEG && STM32F7_PHYSR_ALTCONFIG && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "help": "This must be provided if STM32F7_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 100Mbps, half duplex setting."}, {"type": 24, "name": "STM32F7_PHYSR_10FD", "value": "", "user_value": null, "dep": "n", "prompt": "10Base-T Full Duplex Value", "cond": "STM32F7_AUTONEG && STM32F7_PHYSR_ALTCONFIG && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "help": "This must be provided if STM32F7_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 10Mbps, full duplex setting."}, {"type": 24, "name": "STM32F7_PHYSR_100FD", "value": "", "user_value": null, "dep": "n", "prompt": "100Base-T Full Duplex Value", "cond": "STM32F7_AUTONEG && STM32F7_PHYSR_ALTCONFIG && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "help": "This must be provided if STM32F7_AUTONEG is defined.  This is the value\nunder the bit mask that represents the 100Mbps, full duplex setting."}, {"type": 3, "name": "STM32F7_ETH_PTP", "value": "n", "user_value": null, "dep": "n", "prompt": "Precision Time Protocol (PTP)", "cond": "STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Precision Time Protocol (PTP).  Not supported but some hooks are indicated\nwith this condition."}, {"type": 3, "name": "STM32F7_RMII", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "!STM32F7_MII && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "RMII clock configuration", "cond": "STM32F7_RMII && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_RMII_EXTCLK", "default": "n", "cond": "STM32F7_RMII && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_RMII_MCO1", "value": "n", "user_value": null, "dep": "n", "prompt": "Use MC01 as RMII clock", "cond": "y", "help": "Use MCO1 to clock the RMII interface."}, {"type": 3, "name": "STM32F7_RMII_MCO2", "value": "n", "user_value": null, "dep": "n", "prompt": "Use MC02 as RMII clock", "cond": "y", "help": "Use MCO2 to clock the RMII interface."}, {"type": 3, "name": "STM32F7_RMII_EXTCLK", "value": "n", "user_value": null, "dep": "n", "prompt": "External RMII clock", "cond": "y", "help": "Clocking is provided by external logic."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_ETHMAC_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}, {"name": "STM32F7_ETHMAC_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Work queue support is required to use the Ethernet driver.  If the\nlow priority work queue is available, then it should be used by the\ndriver.", "children": [{"type": 3, "name": "STM32F7_ETHMAC_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "STM32F7_ETHMAC_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}, {"type": 3, "name": "STM32F7_ETHMAC_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register-Level Debug", "cond": "DEBUG_NET_INFO && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_NET_INFO && STM32F7_ETHMAC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enable very low-level register access debug.  Depends on\nCONFIG_DEBUG_FEATURES."}]}, {"type": 31, "dep": "n", "prompt": "LTDC Configuration", "cond": "STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "children": [{"type": 3, "name": "STM32F7_LTDC_INTERFACE", "value": "n", "user_value": null, "dep": "n", "prompt": "LTDC interface support", "cond": "STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enable the ltdc interface to support ltdc layer control."}, {"type": 3, "name": "STM32F7_LTDC_USE_DSI", "value": "n", "user_value": null, "dep": "n", "prompt": "Use DSI as display connection", "cond": "STM32F7_DSIHOST && STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_DSIHOST && STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Select this if your display is connected via DSI.\nDeselect option if your display is connected via digital\nRGB+HSYNC+VSYNC"}, {"type": 3, "name": "STM32F7_LTDC_BACKLIGHT", "value": "n", "user_value": null, "dep": "n", "prompt": "Backlight support", "cond": "STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 24, "name": "STM32F7_LTDC_DEFBACKLIGHT", "value": "", "user_value": null, "dep": "n", "prompt": "Default backlight level", "cond": "STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0xf0", "default": "0xf0", "cond": "STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 24, "name": "STM32F7_LTDC_BACKCOLOR", "value": "", "user_value": null, "dep": "n", "prompt": "Background color", "cond": "STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0x0", "default": "0x0", "cond": "STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "This is the background color that will be used as the LTDC\nbackground layer color.  It is an RGB888 format value,\nwhich gets written unmodified to register LTDC_BCCR."}, {"type": 3, "name": "STM32F7_LTDC_DITHER", "value": "n", "user_value": null, "dep": "n", "prompt": "Dither support", "cond": "STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 27, "name": "STM32F7_LTDC_DITHER_RED", "value": "", "user_value": null, "dep": "n", "prompt": "Dither red width", "cond": "STM32F7_LTDC_DITHER && STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "STM32F7_LTDC_DITHER && STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "7", "cond": "STM32F7_LTDC_DITHER && STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "This is the dither red width."}, {"type": 27, "name": "STM32F7_LTDC_DITHER_GREEN", "value": "", "user_value": null, "dep": "n", "prompt": "Dither green width", "cond": "STM32F7_LTDC_DITHER && STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "STM32F7_LTDC_DITHER && STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "7", "cond": "STM32F7_LTDC_DITHER && STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "This is the dither green width."}, {"type": 27, "name": "STM32F7_LTDC_DITHER_BLUE", "value": "", "user_value": null, "dep": "n", "prompt": "Dither blue width", "cond": "STM32F7_LTDC_DITHER && STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "STM32F7_LTDC_DITHER && STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "7", "cond": "STM32F7_LTDC_DITHER && STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "This is the dither blue width."}]}, {"type": 24, "name": "STM32F7_LTDC_FB_BASE", "value": "", "user_value": null, "dep": "n", "prompt": "Framebuffer memory start address", "cond": "STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "help": "If you are using the LTDC, then you must provide the address\nof the start of the framebuffer.  This address will typically\nbe in the SRAM or SDRAM memory region of the FMC."}, {"type": 27, "name": "STM32F7_LTDC_FB_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Framebuffer memory size (bytes)", "cond": "STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Layer 1 color format", "cond": "STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_LTDC_L1_RGB565", "default": "n", "cond": "STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_LTDC_L1_L8", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bpp L8 (8-bit CLUT)", "cond": "y"}, {"type": 3, "name": "STM32F7_LTDC_L1_AL44", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bpp AL44 (4-bit alpha + 4-bit CLUT)", "cond": "y"}, {"type": 3, "name": "STM32F7_LTDC_L1_AL88", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp AL88 (8-bit alpha + 8-bit CLUT)", "cond": "y"}, {"type": 3, "name": "STM32F7_LTDC_L1_RGB565", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp RGB 565", "cond": "y"}, {"type": 3, "name": "STM32F7_LTDC_L1_ARGB4444", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp ARGB 4444", "cond": "y"}, {"type": 3, "name": "STM32F7_LTDC_L1_ARGB1555", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp ARGB 1555", "cond": "y"}, {"type": 3, "name": "STM32F7_LTDC_L1_RGB888", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bpp RGB 888", "cond": "y"}, {"type": 3, "name": "STM32F7_LTDC_L1_ARGB8888", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bpp ARGB 8888", "cond": "y"}]}, {"type": 3, "name": "STM32F7_LTDC_L2", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Layer 2 support", "cond": "STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Layer 2 (top layer) color format", "cond": "STM32F7_LTDC_L2 && STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "STM32F7_LTDC_L2_RGB565", "default": "n", "cond": "STM32F7_LTDC_L2 && STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32F7_LTDC_L2_L8", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bpp L8 (8-bit CLUT)", "cond": "y"}, {"type": 3, "name": "STM32F7_LTDC_L2_AL44", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bpp AL44 (4-bit alpha + 4-bit CLUT)", "cond": "y"}, {"type": 3, "name": "STM32F7_LTDC_L2_AL88", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp AL88 (8-bit alpha + 8-bit CLUT)", "cond": "y"}, {"type": 3, "name": "STM32F7_LTDC_L2_RGB565", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp RGB 565", "cond": "y"}, {"type": 3, "name": "STM32F7_LTDC_L2_ARGB4444", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp ARGB 4444", "cond": "y"}, {"type": 3, "name": "STM32F7_LTDC_L2_ARGB1555", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp ARGB 1555", "cond": "y"}, {"type": 3, "name": "STM32F7_LTDC_L2_RGB888", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bpp RGB 888", "cond": "y"}, {"type": 3, "name": "STM32F7_LTDC_L2_ARGB8888", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bpp ARGB 8888", "cond": "y"}]}]}, {"type": 3, "name": "FB_CMAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable color map support", "cond": "(STM32F7_LTDC_L1_L8 || STM32F7_LTDC_L2_L8) && STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "(STM32F7_LTDC_L1_L8 || STM32F7_LTDC_L2_L8) && STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enabling color map support is neccessary for ltdc L8 format."}, {"type": 3, "name": "FB_TRANSPARENCY", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable transparency color map support", "cond": "(STM32F7_LTDC_L1_L8 || STM32F7_LTDC_L2_L8) && STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "(STM32F7_LTDC_L1_L8 || STM32F7_LTDC_L2_L8) && STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Enabling transparency color map support is neccessary for\nltdc L8 format."}, {"type": 3, "name": "STM32F7_LTDC_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable LTDC register value debug messages", "cond": "STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_LTDC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "This gives additional messages for LTDC related register values.\nAdditionally, you have to select \"Low-level LCD Debug Features\"\nto enable the debug messages."}]}, {"type": 31, "dep": "n", "prompt": "DMA2D Configuration", "cond": "STM32F7_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "children": [{"type": 27, "name": "STM32F7_DMA2D_NLAYERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number DMA2D layers", "cond": "STM32F7_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "STM32F7_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}], "help": "Number of allocatable DMA2D layers except the LTDC layer."}, {"type": 31, "dep": "n", "prompt": "Supported pixel format", "cond": "STM32F7_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "children": [{"type": 3, "name": "STM32F7_DMA2D_L8", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bpp L8 (8-bit CLUT)", "cond": "FB_CMAP && STM32F7_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "FB_CMAP && STM32F7_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_DMA2D_AL44", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bpp AL44 (4-bit alpha + 4-bit CLUT)", "cond": "FB_CMAP && STM32F7_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "FB_CMAP && STM32F7_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_DMA2D_AL88", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp AL88 (8-bit alpha + 8-bit CLUT)", "cond": "FB_CMAP && STM32F7_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "FB_CMAP && STM32F7_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_DMA2D_RGB565", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp RGB 565", "cond": "STM32F7_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "STM32F7_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_DMA2D_ARGB4444", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp ARGB 4444", "cond": "STM32F7_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_DMA2D_ARGB1555", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp ARGB 1555", "cond": "STM32F7_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_DMA2D_RGB888", "value": "n", "user_value": null, "dep": "n", "prompt": "24 bpp RGB 888", "cond": "STM32F7_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "STM32F7_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}, {"type": 3, "name": "STM32F7_DMA2D_ARGB8888", "value": "n", "user_value": null, "dep": "n", "prompt": "32 bpp ARGB 8888", "cond": "STM32F7_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F7_DMA2D && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM"}]}]}]}, {"type": 6, "dep": "n", "prompt": "STM32L4 Configuration Options", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "STM32 L4 Chip Selection", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "ARCH_CHIP_STM32L476RG", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_STM32L432KB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L432KB", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L432XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_B", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_K", "cond": "y"}], "help": "STM32 L4 Cortex M4, 128 Kb FLASH, 64 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L432KC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L432KC", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L432XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_C", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_K", "cond": "y"}], "help": "STM32 L4 Cortex M4, 256 Kb FLASH, 64 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L433RB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L433RB", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L433XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_B", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_K", "cond": "y"}], "help": "STM32 L4 Cortex M4, 128 Kb FLASH, 64 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L433RC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L433RC", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L433XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_C", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_K", "cond": "y"}], "help": "STM32 L4 Cortex M4, 256 Kb FLASH, 64 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L442KC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L442KC", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L442XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_C", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_K", "cond": "y"}], "help": "STM32 L4 Cortex M4, AES, 256 Kb FLASH, 64 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L433CB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L433CB", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L433XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_B", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_C", "cond": "y"}], "help": "STM32 L4 Cortex M4, 128 Kb FLASH, 64 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L433CC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L433CC", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L433XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_C", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_C", "cond": "y"}], "help": "STM32 L4 Cortex M4, 256 Kb FLASH, 64 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L433RB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L433RB", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L433XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_B", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_R", "cond": "y"}], "help": "STM32 L4 Cortex M4, 128 Kb FLASH, 64 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L433RC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L433RC", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L433XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_C", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_R", "cond": "y"}], "help": "STM32 L4 Cortex M4, 256 Kb FLASH, 64 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L433VC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L433VC", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L433XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_C", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_V", "cond": "y"}], "help": "STM32 L4 Cortex M4, 256 Kb FLASH, 64 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L443CC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L443CC", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L443XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_C", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_C", "cond": "y"}], "help": "STM32 L4 Cortex M4, AES, 256 Kb FLASH, 64 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L443RC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L443RC", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L443XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_C", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_R", "cond": "y"}], "help": "STM32 L4 Cortex M4, AES, 256 Kb FLASH, 64 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L443VC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L443VC", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L443XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_C", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_V", "cond": "y"}], "help": "STM32 L4 Cortex M4, AES, 256 Kb FLASH, 64 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L451CC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L451CC", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L451XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_C", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_C", "cond": "y"}], "help": "STM32 L4 Cortex M4, 256 Kb FLASH, 128+32 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L451CE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L451CE", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L451XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_C", "cond": "y"}], "help": "STM32 L4 Cortex M4, 512 Kb FLASH, 128+32 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L451RC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L451RC", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L451XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_C", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_R", "cond": "y"}], "help": "STM32 L4 Cortex M4, 256 Kb FLASH, 128+32 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L451RE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L451RE", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L451XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_R", "cond": "y"}], "help": "STM32 L4 Cortex M4, 512 Kb FLASH, 128+32 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L451VC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L451VC", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L451XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_C", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_V", "cond": "y"}], "help": "STM32 L4 Cortex M4, 256 Kb FLASH, 128+32 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L451VE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L451VE", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L451XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_V", "cond": "y"}], "help": "STM32 L4 Cortex M4, 512 Kb FLASH, 128+32 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L452CC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L452CC", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L452XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_C", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_C", "cond": "y"}], "help": "STM32 L4 Cortex M4, 256 Kb FLASH, 128+32 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L452CE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L452CE", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L452XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_C", "cond": "y"}], "help": "STM32 L4 Cortex M4, 512 Kb FLASH, 128+32 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L452RC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L452RC", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L452XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_C", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_R", "cond": "y"}], "help": "STM32 L4 Cortex M4, 256 Kb FLASH, 128+32 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L452RE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L452RE", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L452XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_R", "cond": "y"}], "help": "STM32 L4 Cortex M4, 512 Kb FLASH, 128+32 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L452VC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L452VC", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L452XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_C", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_V", "cond": "y"}], "help": "STM32 L4 Cortex M4, 256 Kb FLASH, 128+32 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L452VE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L452VE", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L452XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_V", "cond": "y"}], "help": "STM32 L4 Cortex M4, 512 Kb FLASH, 128+32 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L462CE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L462CE", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L462XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_C", "cond": "y"}], "help": "STM32 L4 Cortex M4, USB FS, AES, 512 Kb FLASH, 128+32 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L462RE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L462RE", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L462XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_R", "cond": "y"}], "help": "STM32 L4 Cortex M4, USB FS, AES, 512 Kb FLASH, 128+32 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L462VE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L462VE", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L462XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_V", "cond": "y"}], "help": "STM32 L4 Cortex M4, USB FS, AES, 512 Kb FLASH, 128+32 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L475RG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L475RG", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L475XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_R", "cond": "y"}], "help": "STM32 L4 Cortex M4, 1024Kb FLASH, 96+32 Kb SRAM, LQFP100"}, {"type": 3, "name": "ARCH_CHIP_STM32L475RE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L475RE", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L475XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_R", "cond": "y"}], "help": "STM32 L4 Cortex M4, 512Kb FLASH, 96+32 Kb SRAM, LQFP100"}, {"type": 3, "name": "ARCH_CHIP_STM32L475RC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L475RC", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L475XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_R", "cond": "y"}], "help": "STM32 L4 Cortex M4, 256Kb FLASH, 96+32 Kb SRAM, LQFP100"}, {"type": 3, "name": "ARCH_CHIP_STM32L475VG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L475VG", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L475XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_R", "cond": "y"}], "help": "STM32 L4 Cortex M4, 1024Kb FLASH, 96+32 Kb SRAM, LQFP64"}, {"type": 3, "name": "ARCH_CHIP_STM32L475VE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L475VE", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L475XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_R", "cond": "y"}], "help": "STM32 L4 Cortex M4, 512Kb FLASH, 96+32 Kb SRAM, LQFP64"}, {"type": 3, "name": "ARCH_CHIP_STM32L475VC", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L475VC", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L475XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_R", "cond": "y"}], "help": "STM32 L4 Cortex M4, 256Kb FLASH, 96+32 Kb SRAM, LQFP64"}, {"type": 3, "name": "ARCH_CHIP_STM32L476RG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L476RG", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L476XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_R", "cond": "y"}], "help": "STM32 L4 Cortex M4, 1024Kb FLASH, 96+32 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L476RE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L476RE", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L476XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_R", "cond": "y"}], "help": "STM32 L4 Cortex M4, 512Kb FLASH, 96+32 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L486", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L486xx", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L486XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_G", "cond": "y"}], "help": "STM32 L4 Cortex M4, AES, 1024Kb FLASH, 96+32 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L496ZE", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L496ZE", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L496XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_E", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_Z", "cond": "y"}], "help": "STM32 L4 Cortex M4, 512Kb FLASH, 320 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L496ZG", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L496ZG", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L496XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_G", "cond": "y"}, {"symbol": "STM32L4_IO_CONFIG_Z", "cond": "y"}], "help": "STM32 L4 Cortex M4, 1024Kb FLASH, 320 Kb SRAM"}, {"type": 3, "name": "ARCH_CHIP_STM32L4A6", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32L4A6xx", "cond": "y", "selects": [{"symbol": "STM32L4_STM32L4A6XX", "cond": "y"}, {"symbol": "STM32L4_FLASH_CONFIG_G", "cond": "y"}], "help": "STM32 L4 Cortex M4, AES, HASH, 1024Kb FLASH, 320 Kb SRAM"}]}, {"type": 3, "name": "STM32L4_STM32L4X1", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L431XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L451XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_STM32L4X3", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_STM32L4X2", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L432XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L442XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L452XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L462XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_STM32L4X3", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_STM32L4X3", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L433XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L443XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_USART1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_USART2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_USART3", "cond": "!(STM32L4_L432XX || STM32L4_L442XX) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_LPTIM1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_LPTIM2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_COMP", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_SAI1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_LCD", "cond": "!(STM32L4_STM32L4X1 || STM32L4_STM32L4X2) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_STM32L4X5", "value": "n", "user_value": null, "rev_dep": "STM32L4_STM32L475XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_USART1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_USART2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_USART3", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_UART4", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_UART5", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_ADC2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_ADC3", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_DAC2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_FSMC", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_TIM3", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_TIM4", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_TIM5", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_TIM7", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_TIM8", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_TIM17", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_LPTIM1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_LPTIM2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_COMP", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_SAI1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_SAI2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_SDMMC1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_OTGFS", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_DFSDM1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_STM32L4X6", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L476XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L486XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L496XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_FPU", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_USART1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_USART2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_USART3", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_UART4", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_UART5", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_ADC2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_ADC3", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_DAC2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_FSMC", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_TIM3", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_TIM4", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_TIM5", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_TIM7", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_TIM8", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_TIM17", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_LPTIM1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_LPTIM2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_COMP", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_SAI1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_SAI2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_SDMMC1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_OTGFS", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_LCD", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_STM32L431XX", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_STM32L4X1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_DAC2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_TIM7", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_SDMMC1", "cond": "(STM32L4_IO_CONFIG_V || STM32L4_IO_CONFIG_R) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_STM32L432XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32L432KB && y) || (ARCH_CHIP_STM32L432KC && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_STM32L4X2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_DAC2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_TIM7", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_STM32L433XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32L433RB && y) || (ARCH_CHIP_STM32L433RC && y) || (ARCH_CHIP_STM32L433CB && y) || (ARCH_CHIP_STM32L433CC && y) || (ARCH_CHIP_STM32L433RB && y) || (ARCH_CHIP_STM32L433RC && y) || (ARCH_CHIP_STM32L433VC && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_STM32L4X3", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_DAC2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_TIM7", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_STM32L442XX", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_STM32L442KC && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_STM32L4X2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_DAC2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_TIM7", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_AES", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_STM32L443XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32L443CC && y) || (ARCH_CHIP_STM32L443RC && y) || (ARCH_CHIP_STM32L443VC && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_STM32L4X3", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_DAC2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_TIM7", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_SDMMC1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_AES", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_STM32L451XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32L451CC && y) || (ARCH_CHIP_STM32L451CE && y) || (ARCH_CHIP_STM32L451RC && y) || (ARCH_CHIP_STM32L451RE && y) || (ARCH_CHIP_STM32L451VC && y) || (ARCH_CHIP_STM32L451VE && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_STM32L4X1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_UART4", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_TIM3", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_I2C4", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_SDMMC1", "cond": "!STM32L4_IO_CONFIG_C && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_DFSDM1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_STM32L452XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32L452CC && y) || (ARCH_CHIP_STM32L452CE && y) || (ARCH_CHIP_STM32L452RC && y) || (ARCH_CHIP_STM32L452RE && y) || (ARCH_CHIP_STM32L452VC && y) || (ARCH_CHIP_STM32L452VE && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_STM32L4X2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_UART4", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_TIM3", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_I2C4", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_SDMMC1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_DFSDM1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_STM32L462XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32L462CE && y) || (ARCH_CHIP_STM32L462RE && y) || (ARCH_CHIP_STM32L462VE && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_STM32L4X2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_UART4", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_TIM3", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_I2C4", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_SDMMC1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_DFSDM1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_AES", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_STM32L471XX", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_STM32L475XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32L475RG && y) || (ARCH_CHIP_STM32L475RE && y) || (ARCH_CHIP_STM32L475RC && y) || (ARCH_CHIP_STM32L475VG && y) || (ARCH_CHIP_STM32L475VE && y) || (ARCH_CHIP_STM32L475VC && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_STM32L4X5", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_STM32L476XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32L476RG && y) || (ARCH_CHIP_STM32L476RE && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_STM32L4X6", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_STM32L486XX", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_STM32L486 && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_STM32L4X6", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_AES", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_STM32L496XX", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32L496ZE && y) || (ARCH_CHIP_STM32L496ZG && y) || (STM32L4_STM32L4A6XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_STM32L4X6", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_I2C4", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_CAN2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_DCMI", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_DMA2D", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_DFSDM1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_STM32L4A6XX", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_STM32L4A6 && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_STM32L496XX", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_AES", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_HAVE_HASH", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Override Flash Size Designator", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_FLASH_OVERRIDE_DEFAULT", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "STM32L4 series parts numbering (sans the package type) ends with a letter\nthat designates the FLASH size.\n\n        Designator  Size in KiB\n             B         128\n             C         256\n             E         512\n             G        1024\n\nThis configuration option defaults to using the configuration based on that designator\nor the default smaller size if there is no last character designator is present in the\nSTM32 Chip Selection.\n\nExamples:\n   If the STM32L476VE is chosen, the Flash configuration would be 'E', if a variant of\n   the part with a 1024 KiB Flash is released in the future one could simply select\n   the 'G' designator here.\n\n   If an STM32L4xxx Series parts is chosen the default Flash configuration will be set\n   herein and can be changed.", "children": [{"type": 3, "name": "STM32L4_FLASH_OVERRIDE_DEFAULT", "value": "n", "user_value": null, "dep": "n", "prompt": "Default", "cond": "y"}, {"type": 3, "name": "STM32L4_FLASH_OVERRIDE_B", "value": "n", "user_value": null, "dep": "n", "prompt": "B 128 KB", "cond": "y"}, {"type": 3, "name": "STM32L4_FLASH_OVERRIDE_C", "value": "n", "user_value": null, "dep": "n", "prompt": "C 256 KB", "cond": "y"}, {"type": 3, "name": "STM32L4_FLASH_OVERRIDE_E", "value": "n", "user_value": null, "dep": "n", "prompt": "E 512 KB", "cond": "y"}, {"type": 3, "name": "STM32L4_FLASH_OVERRIDE_G", "value": "n", "user_value": null, "dep": "n", "prompt": "G 1024 KB", "cond": "y"}]}, {"type": 3, "name": "STM32L4_FLASH_CONFIG_B", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32L432KB && y) || (ARCH_CHIP_STM32L433RB && y) || (ARCH_CHIP_STM32L433CB && y) || (ARCH_CHIP_STM32L433RB && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(STM32L4_STM32L4X1 || STM32L4_STM32L4X3) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_FLASH_CONFIG_C", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32L432KC && y) || (ARCH_CHIP_STM32L433RC && y) || (ARCH_CHIP_STM32L442KC && y) || (ARCH_CHIP_STM32L433CC && y) || (ARCH_CHIP_STM32L433RC && y) || (ARCH_CHIP_STM32L433VC && y) || (ARCH_CHIP_STM32L443CC && y) || (ARCH_CHIP_STM32L443RC && y) || (ARCH_CHIP_STM32L443VC && y) || (ARCH_CHIP_STM32L451CC && y) || (ARCH_CHIP_STM32L451RC && y) || (ARCH_CHIP_STM32L451VC && y) || (ARCH_CHIP_STM32L452CC && y) || (ARCH_CHIP_STM32L452RC && y) || (ARCH_CHIP_STM32L452VC && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "!STM32L4_STM32L496XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_FLASH_CONFIG_E", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32L451CE && y) || (ARCH_CHIP_STM32L451RE && y) || (ARCH_CHIP_STM32L451VE && y) || (ARCH_CHIP_STM32L452CE && y) || (ARCH_CHIP_STM32L452RE && y) || (ARCH_CHIP_STM32L452VE && y) || (ARCH_CHIP_STM32L462CE && y) || (ARCH_CHIP_STM32L462RE && y) || (ARCH_CHIP_STM32L462VE && y) || (ARCH_CHIP_STM32L475RE && y) || (ARCH_CHIP_STM32L475RC && y) || (ARCH_CHIP_STM32L475VE && y) || (ARCH_CHIP_STM32L475VC && y) || (ARCH_CHIP_STM32L476RE && y) || (ARCH_CHIP_STM32L496ZE && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_FLASH_CONFIG_G", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32L475RG && y) || (ARCH_CHIP_STM32L475VG && y) || (ARCH_CHIP_STM32L476RG && y) || (ARCH_CHIP_STM32L486 && y) || (ARCH_CHIP_STM32L496ZG && y) || (ARCH_CHIP_STM32L4A6 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "(STM32L4_STM32L4X5 || STM32L4_STM32L4X6) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_IO_CONFIG_K", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32L432KB && y) || (ARCH_CHIP_STM32L432KC && y) || (ARCH_CHIP_STM32L433RB && y) || (ARCH_CHIP_STM32L433RC && y) || (ARCH_CHIP_STM32L442KC && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_IO_CONFIG_C", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32L433CB && y) || (ARCH_CHIP_STM32L433CC && y) || (ARCH_CHIP_STM32L443CC && y) || (ARCH_CHIP_STM32L451CC && y) || (ARCH_CHIP_STM32L451CE && y) || (ARCH_CHIP_STM32L452CC && y) || (ARCH_CHIP_STM32L452CE && y) || (ARCH_CHIP_STM32L462CE && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_IO_CONFIG_R", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32L433RB && y) || (ARCH_CHIP_STM32L433RC && y) || (ARCH_CHIP_STM32L443RC && y) || (ARCH_CHIP_STM32L451RC && y) || (ARCH_CHIP_STM32L451RE && y) || (ARCH_CHIP_STM32L452RC && y) || (ARCH_CHIP_STM32L452RE && y) || (ARCH_CHIP_STM32L462RE && y) || (ARCH_CHIP_STM32L475RG && y) || (ARCH_CHIP_STM32L475RE && y) || (ARCH_CHIP_STM32L475RC && y) || (ARCH_CHIP_STM32L475VG && y) || (ARCH_CHIP_STM32L475VE && y) || (ARCH_CHIP_STM32L475VC && y) || (ARCH_CHIP_STM32L476RG && y) || (ARCH_CHIP_STM32L476RE && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_IO_CONFIG_J", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_IO_CONFIG_M", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_IO_CONFIG_V", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32L433VC && y) || (ARCH_CHIP_STM32L443VC && y) || (ARCH_CHIP_STM32L451VC && y) || (ARCH_CHIP_STM32L451VE && y) || (ARCH_CHIP_STM32L452VC && y) || (ARCH_CHIP_STM32L452VE && y) || (ARCH_CHIP_STM32L462VE && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_IO_CONFIG_Q", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_IO_CONFIG_Z", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_STM32L496ZE && y) || (ARCH_CHIP_STM32L496ZG && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_IO_CONFIG_A", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 6, "dep": "n", "prompt": "STM32L4 SRAM2 Options", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"type": 3, "name": "STM32L4_SRAM2_HEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "SRAM2 is used for heap", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_SRAM2_INIT", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "The STM32L4 SRAM2 region has special properties (power, protection, parity)\nwhich may be used by the application for special purposes.  But if these\nspecial properties are not needed, it may be instead added to the heap for\nuse by malloc().\nNOTE: you must also select an appropriate number of memory regions in the\n'Memory Management' section."}, {"type": 3, "name": "STM32L4_SRAM2_INIT", "value": "n", "user_value": null, "rev_dep": "STM32L4_SRAM2_HEAP && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "dep": "n", "prompt": "SRAM2 is initialized to zero", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "The STM32L4 SRAM2 region has parity checking.  However, when the system\npowers on, the memory is in an unknown state, and reads from uninitialized\nmemory can trigger parity faults from the random data.  This can be\navoided by first writing to all locations to force the parity into a valid\nstate.\nHowever, if the SRAM2 is being used for it's battery-backed capability,\nthis may be undesireable (because it will destroy the contents).  In that\ncase, the board should handle the initialization itself at the appropriate\ntime."}, {"type": 6, "dep": "n", "prompt": "STM32L4 Peripherals", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"type": 31, "dep": "n", "prompt": "STM32L4 Peripheral Support", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "children": [{"type": 3, "name": "STM32L4_HAVE_ADC2", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_ADC3", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_AES", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L442XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L443XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L462XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L486XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4A6XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_CAN2", "value": "n", "user_value": null, "rev_dep": "STM32L4_STM32L496XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_COMP", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_DAC2", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L431XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L432XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L433XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L442XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L443XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_DCMI", "value": "n", "user_value": null, "rev_dep": "STM32L4_STM32L496XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_DFSDM1", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L451XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L452XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L462XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L496XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_DMA2D", "value": "n", "user_value": null, "rev_dep": "STM32L4_STM32L496XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_FSMC", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_HASH", "value": "n", "user_value": null, "rev_dep": "STM32L4_STM32L4A6XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_I2C4", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L451XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L452XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L462XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L496XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_LCD", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X3 && !(STM32L4_STM32L4X1 || STM32L4_STM32L4X2) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_LTDC", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_LPTIM1", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_LPTIM2", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_OTGFS", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_SAI1", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_SAI2", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_SDMMC1", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L431XX && (STM32L4_IO_CONFIG_V || STM32L4_IO_CONFIG_R) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L443XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L451XX && !STM32L4_IO_CONFIG_C && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L452XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L462XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_TIM3", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L451XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L452XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L462XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_TIM4", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_TIM5", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_TIM7", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L431XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L432XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L433XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L442XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L443XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_TIM8", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_TIM17", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_ADC", "value": "n", "user_value": null, "rev_dep": "(STM32L4_ADC1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_ADC2 && STM32L4_HAVE_ADC2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_ADC3 && STM32L4_HAVE_ADC3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_CAN", "value": "n", "user_value": null, "rev_dep": "(STM32L4_CAN1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_CAN2 && STM32L4_HAVE_CAN2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_DAC", "value": "n", "user_value": null, "rev_dep": "(STM32L4_DAC1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_DAC2 && STM32L4_HAVE_DAC2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_DMA", "value": "n", "user_value": null, "rev_dep": "(STM32L4_DMA1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_DMA2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_I2C", "value": "n", "user_value": null, "rev_dep": "(STM32L4_I2C1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_I2C2 && !(STM32L4_L432XX || STM32L4_L442XX) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_I2C3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_I2C4 && STM32L4_HAVE_I2C4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_SAI", "value": "n", "user_value": null, "rev_dep": "(STM32L4_SAI1_A && STM32L4_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_SAI1_B && STM32L4_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_SAI2_A && STM32L4_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_SAI2_B && STM32L4_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_SPI", "value": "n", "user_value": null, "rev_dep": "(STM32L4_SPI2 && !(STM32L4_L432XX || STM32L4_L442XX) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_SPI3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_SPI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_USART", "value": "n", "user_value": null, "rev_dep": "(STM32L4_USART2 && STM32L4_HAVE_USART2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_USART3 && STM32L4_HAVE_USART3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_UART4 && STM32L4_HAVE_UART4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_UART5 && STM32L4_HAVE_UART5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_USART1 && STM32L4_HAVE_USART1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_LPTIM", "value": "n", "user_value": null, "rev_dep": "(STM32L4_LPTIM1 && STM32L4_HAVE_LPTIM1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_LPTIM2 && STM32L4_HAVE_LPTIM2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 6, "dep": "n", "prompt": "AHB1 Peripherals", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"type": 3, "name": "STM32L4_DMA1", "value": "n", "user_value": null, "rev_dep": "B_L475E_IOT01A_MTD_FLASH && ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A", "dep": "n", "prompt": "DMA1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_DMA", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "ARCH_DMA", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_DMA2", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_DMA", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "ARCH_DMA", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_CRC", "value": "n", "user_value": null, "dep": "n", "prompt": "CRC", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_TSC", "value": "n", "user_value": null, "dep": "n", "prompt": "TSC", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 6, "dep": "n", "prompt": "AHB2 Peripherals", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"type": 3, "name": "STM32L4_OTGFS", "value": "n", "user_value": null, "dep": "n", "prompt": "OTG FS", "cond": "STM32L4_HAVE_OTGFS && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_OTGFS && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "USBHOST_HAVE_ASYNCH", "cond": "USBHOST && STM32L4_HAVE_OTGFS && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_ADC", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC2", "cond": "STM32L4_HAVE_ADC2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_ADC2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_ADC", "cond": "STM32L4_HAVE_ADC2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC3", "cond": "STM32L4_HAVE_ADC3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_ADC3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_ADC", "cond": "STM32L4_HAVE_ADC3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_AES", "value": "n", "user_value": null, "dep": "n", "prompt": "AES", "cond": "STM32L4_HAVE_AES && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_AES && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_DCMI", "value": "n", "user_value": null, "dep": "n", "prompt": "DCMI", "cond": "STM32L4_HAVE_DCMI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_DCMI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_DMA2D", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA2D", "cond": "STM32L4_HAVE_DMA2D && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_DMA2D && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HASH", "value": "n", "user_value": null, "dep": "n", "prompt": "HASH", "cond": "STM32L4_HAVE_HASH && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_HASH && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_RNG", "value": "n", "user_value": null, "dep": "n", "prompt": "RNG", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_RNG", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 6, "dep": "n", "prompt": "AHB3 Peripherals", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"type": 3, "name": "STM32L4_FSMC", "value": "n", "user_value": null, "dep": "n", "prompt": "FSMC", "cond": "STM32L4_HAVE_FSMC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_FSMC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_QSPI", "value": "n", "user_value": null, "rev_dep": "B_L475E_IOT01A_MTD_FLASH && ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A", "dep": "n", "prompt": "QuadSPI", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "The STM32L4 QSPI block is intended to support one serial NOR flash device", "children": [{"type": 27, "name": "STM32L4_QSPI_FLASH_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Size of attached serial flash, bytes", "cond": "STM32L4_QSPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "16777216", "default": "16777216", "cond": "STM32L4_QSPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "2147483648", "cond": "STM32L4_QSPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "The STM32L4 QSPI peripheral requires the size of the Flash be specified"}, {"type": 27, "name": "STM32L4_QSPI_FIFO_THESHOLD", "value": "", "user_value": null, "dep": "n", "prompt": "Number of bytes before asserting FIFO threshold flag", "cond": "STM32L4_QSPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "STM32L4_QSPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "16", "cond": "STM32L4_QSPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "The STM32L4 QSPI peripheral requires that the FIFO threshold be specified\nI would leave it at the default value of 4 unless you know what you are doing."}, {"type": 27, "name": "STM32L4_QSPI_CSHT", "value": "", "user_value": null, "dep": "n", "prompt": "Number of cycles Chip Select must be inactive between transactions", "cond": "STM32L4_QSPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "STM32L4_QSPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "8", "cond": "STM32L4_QSPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "The STM32L4 QSPI peripheral requires that it be specified the minimum number\nof AHB cycles that Chip Select be held inactive between transactions."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Transfer technique", "cond": "STM32L4_QSPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_QSPI_DMA", "default": "n", "cond": "STM32L4_QSPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "You can choose between using polling, interrupts, or DMA to transfer data\nover the QSPI interface.", "children": [{"type": 3, "name": "STM32L4_QSPI_POLLING", "value": "n", "user_value": null, "dep": "n", "prompt": "Polling", "cond": "y", "help": "Use conventional register I/O with status polling to transfer data."}, {"type": 3, "name": "STM32L4_QSPI_INTERRUPTS", "value": "n", "user_value": null, "dep": "n", "prompt": "Interrupts", "cond": "y", "help": "User interrupt driven I/O transfers."}, {"type": 3, "name": "STM32L4_QSPI_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA", "cond": "STM32L4_DMA && y", "help": "Use DMA to improve QSPI transfer performance."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "DMA Channel", "cond": "STM32L4_DMA && STM32L4_QSPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_QSPI_DMA_CHAN_1_5", "default": "n", "cond": "STM32L4_DMA && STM32L4_QSPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "You can choose between two DMA channels for use with QSPI:\neither DMA1 channel 5, or DMA2 channel 7.\nIf you only see one choice here, it is probably because\nyou have not also enabled the associated DMA controller.", "children": [{"type": 3, "name": "STM32L4_QSPI_DMA_CHAN_1_5", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA1 Channel 5", "cond": "STM32L4_DMA1 && y", "help": "Use DMA1 channel 5 for QSPI."}, {"type": 3, "name": "STM32L4_QSPI_DMA_CHAN_2_7", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA2 Channel 7", "cond": "STM32L4_DMA2 && y", "help": "Use DMA2 channel 7 for QSPI."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "DMA Priority", "cond": "STM32L4_DMA && STM32L4_QSPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_QSPI_DMAPRIORITY_MEDIUM", "default": "n", "cond": "STM32L4_DMA && STM32L4_QSPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "The DMA controller supports priority levels.  You are probably fine\nwith the default of 'medium' except for special cases.  In the event\nof contention between to channels at the same priority, the lower\nnumbered channel has hardware priority over the higher numbered one.", "children": [{"type": 3, "name": "STM32L4_QSPI_DMAPRIORITY_VERYHIGH", "value": "n", "user_value": null, "dep": "n", "prompt": "Very High priority", "cond": "STM32L4_DMA && y", "help": "'Highest' priority."}, {"type": 3, "name": "STM32L4_QSPI_DMAPRIORITY_HIGH", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "STM32L4_DMA && y", "help": "'High' priority."}, {"type": 3, "name": "STM32L4_QSPI_DMAPRIORITY_MEDIUM", "value": "n", "user_value": null, "dep": "n", "prompt": "Medium priority", "cond": "STM32L4_DMA && y", "help": "'Medium' priority."}, {"type": 3, "name": "STM32L4_QSPI_DMAPRIORITY_LOW", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "STM32L4_DMA && y", "help": "'Low' priority."}]}, {"type": 27, "name": "STM32L4_QSPI_DMATHRESHOLD", "value": "", "user_value": null, "dep": "n", "prompt": "QSPI DMA threshold", "cond": "STM32L4_QSPI_DMA && STM32L4_QSPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "4", "default": "4", "cond": "STM32L4_QSPI_DMA && STM32L4_QSPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "When QSPI DMA is enabled, small DMA transfers will still be performed\nby polling logic.  This value is the threshold below which transfers\nwill still be performed by conventional register status polling."}, {"type": 3, "name": "STM32L4_QSPI_DMADEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "QSPI DMA transfer debug", "cond": "STM32L4_QSPI_DMA && DEBUG_SPI && DEBUG_DMA && STM32L4_QSPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_QSPI_DMA && DEBUG_SPI && DEBUG_DMA && STM32L4_QSPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enable special debug instrumentation to analyze QSPI DMA data transfers.\nThis logic is as non-invasive as possible:  It samples DMA\nregisters at key points in the data transfer and then dumps all of\nthe registers at the end of the transfer."}, {"type": 3, "name": "STM32L4_QSPI_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "QSPI Register level debug", "cond": "DEBUG_SPI_INFO && STM32L4_QSPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_SPI_INFO && STM32L4_QSPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Output detailed register-level QSPI device debug information.\nRequires also CONFIG_DEBUG_SPI_INFO."}]}, {"type": 6, "dep": "n", "prompt": "APB1 Peripherals", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"type": 3, "name": "STM32L4_PWR", "value": "n", "user_value": null, "dep": "n", "prompt": "PWR", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_TIM2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_TIM3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3", "cond": "STM32L4_HAVE_TIM3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_TIM3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_TIM4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4", "cond": "STM32L4_HAVE_TIM4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_TIM4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_TIM5", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5", "cond": "STM32L4_HAVE_TIM5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_TIM5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_TIM6", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM6", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_TIM7", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM7", "cond": "STM32L4_HAVE_TIM7 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_TIM7 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_LCD", "value": "n", "user_value": null, "dep": "n", "prompt": "LCD", "cond": "STM32L4_HAVE_LCD && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_LCD && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_SPI2", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI2", "cond": "!(STM32L4_L432XX || STM32L4_L442XX) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!(STM32L4_L432XX || STM32L4_L442XX) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "!(STM32L4_L432XX || STM32L4_L442XX) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_SPI", "cond": "!(STM32L4_L432XX || STM32L4_L442XX) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_SPI3", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI3", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_SPI", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_USART2", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2", "cond": "STM32L4_HAVE_USART2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_USART2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "STM32L4_HAVE_USART2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "USART2_SERIALDRIVER", "cond": "STM32L4_HAVE_USART2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_USART", "cond": "STM32L4_HAVE_USART2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_USART3", "value": "n", "user_value": null, "dep": "n", "prompt": "USART3", "cond": "STM32L4_HAVE_USART3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_USART3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "STM32L4_HAVE_USART3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "USART3_SERIALDRIVER", "cond": "STM32L4_HAVE_USART3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_USART", "cond": "STM32L4_HAVE_USART3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_UART4", "value": "n", "user_value": null, "dep": "n", "prompt": "UART4", "cond": "STM32L4_HAVE_UART4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_UART4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "STM32L4_HAVE_UART4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "UART4_SERIALDRIVER", "cond": "STM32L4_HAVE_UART4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_USART", "cond": "STM32L4_HAVE_UART4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_UART5", "value": "n", "user_value": null, "dep": "n", "prompt": "UART5", "cond": "STM32L4_HAVE_UART5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_UART5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "STM32L4_HAVE_UART5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "UART5_SERIALDRIVER", "cond": "STM32L4_HAVE_UART5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_USART", "cond": "STM32L4_HAVE_UART5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_I2C1", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_I2C", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_I2C2", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C2", "cond": "!(STM32L4_L432XX || STM32L4_L442XX) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!(STM32L4_L432XX || STM32L4_L442XX) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_I2C", "cond": "!(STM32L4_L432XX || STM32L4_L442XX) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_I2C3", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C3", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_I2C", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_I2C4", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C4", "cond": "STM32L4_HAVE_I2C4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_I2C4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_I2C", "cond": "STM32L4_HAVE_I2C4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_CAN1", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "CAN", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_CAN", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_CAN2", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN2", "cond": "STM32L4_HAVE_CAN2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_CAN2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "CAN", "cond": "STM32L4_HAVE_CAN2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_CAN", "cond": "STM32L4_HAVE_CAN2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_DAC", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC2", "cond": "STM32L4_HAVE_DAC2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_DAC2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_DAC", "cond": "STM32L4_HAVE_DAC2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_OPAMP", "value": "n", "user_value": null, "dep": "n", "prompt": "OPAMP", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_LPTIM1", "value": "n", "user_value": null, "dep": "n", "prompt": "LPTIM1", "cond": "STM32L4_HAVE_LPTIM1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_LPTIM1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_LPTIM", "cond": "STM32L4_HAVE_LPTIM1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_LPUART1", "value": "n", "user_value": null, "dep": "n", "prompt": "LPUART1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_LPUART1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_SWPMI", "value": "n", "user_value": null, "dep": "n", "prompt": "SWPMI", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_LPTIM2", "value": "n", "user_value": null, "dep": "n", "prompt": "LPTIM2", "cond": "STM32L4_HAVE_LPTIM2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_LPTIM2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "STM32L4_LPTIM", "cond": "STM32L4_HAVE_LPTIM2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 6, "dep": "n", "prompt": "APB2 Peripherals", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"type": 3, "name": "STM32L4_SYSCFG", "value": "n", "user_value": null, "dep": "n", "prompt": "SYSCFG", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32L4_FIREWALL", "value": "n", "user_value": null, "dep": "n", "prompt": "FIREWALL", "cond": "STM32L4_SYSCFG && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "STM32L4_SYSCFG && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}]}, {"type": 3, "name": "STM32L4_SDMMC1", "value": "n", "user_value": null, "dep": "n", "prompt": "SDMMC1", "cond": "STM32L4_HAVE_SDMMC1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_SDMMC1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SDIO", "cond": "STM32L4_HAVE_SDMMC1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_TIM1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_SPI1", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI1", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "SPI", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_SPI", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_TIM8", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8", "cond": "STM32L4_HAVE_TIM8 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_TIM8 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_USART1", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1", "cond": "STM32L4_HAVE_USART1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_USART1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "STM32L4_HAVE_USART1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "USART1_SERIALDRIVER", "cond": "STM32L4_HAVE_USART1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_USART", "cond": "STM32L4_HAVE_USART1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_TIM15", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM15", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_TIM16", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM16", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_TIM17", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM17", "cond": "STM32L4_HAVE_TIM17 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_TIM17 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_COMP", "value": "n", "user_value": null, "dep": "n", "prompt": "COMP", "cond": "STM32L4_HAVE_COMP && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_COMP && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "COMP", "cond": "STM32L4_HAVE_COMP && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_SAI1", "value": "n", "user_value": null, "dep": "n", "prompt": "SAI1", "cond": "STM32L4_HAVE_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32L4_SAI1_A", "value": "n", "user_value": null, "dep": "n", "prompt": "SAI1 Block A", "cond": "STM32L4_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "AUDIO", "cond": "STM32L4_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "I2S", "cond": "STM32L4_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "SCHED_WORKQUEUE", "cond": "STM32L4_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_SAI", "cond": "STM32L4_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_SAI1_B", "value": "n", "user_value": null, "dep": "n", "prompt": "SAI1 Block B", "cond": "STM32L4_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "AUDIO", "cond": "STM32L4_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "I2S", "cond": "STM32L4_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "SCHED_WORKQUEUE", "cond": "STM32L4_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_SAI", "cond": "STM32L4_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}]}, {"type": 3, "name": "STM32L4_SAI2", "value": "n", "user_value": null, "dep": "n", "prompt": "SAI2", "cond": "STM32L4_HAVE_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32L4_SAI2_A", "value": "n", "user_value": null, "dep": "n", "prompt": "SAI2 Block A", "cond": "STM32L4_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "AUDIO", "cond": "STM32L4_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "I2S", "cond": "STM32L4_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "SCHED_WORKQUEUE", "cond": "STM32L4_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_SAI", "cond": "STM32L4_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_SAI2_B", "value": "n", "user_value": null, "dep": "n", "prompt": "SAI2 Block B", "cond": "STM32L4_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "AUDIO", "cond": "STM32L4_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "I2S", "cond": "STM32L4_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "SCHED_WORKQUEUE", "cond": "STM32L4_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "STM32L4_SAI", "cond": "STM32L4_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}]}, {"type": 3, "name": "STM32L4_DFSDM1", "value": "n", "user_value": null, "dep": "n", "prompt": "DFSDM1", "cond": "STM32L4_HAVE_DFSDM1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_DFSDM1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 6, "dep": "n", "prompt": "Other Peripherals", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"type": 3, "name": "STM32L4_BKPSRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable BKP RAM Domain", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_IWDG", "value": "n", "user_value": null, "dep": "n", "prompt": "IWDG", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "WATCHDOG", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_WWDG", "value": "n", "user_value": null, "dep": "n", "prompt": "WWDG", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "WATCHDOG", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}]}, {"type": 3, "name": "STM32L4_FLASH_PREFETCH", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable FLASH Pre-fetch", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enable FLASH prefetch"}, {"type": 3, "name": "STM32L4_DISABLE_IDLE_SLEEP_DURING_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable IDLE Sleep (WFI) in debug mode", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "In debug configuration, disables the WFI instruction in the IDLE loop\nto prevent the JTAG from disconnecting.  With some JTAG debuggers, such\nas the ST-LINK2 with OpenOCD, if the ARM is put to sleep via the WFI\ninstruction, the debugger will disconnect, terminating the debug session."}, {"type": 3, "name": "ARCH_BOARD_STM32L4_CUSTOM_CLOCKCONFIG", "value": "n", "user_value": null, "dep": "n", "prompt": "Custom clock configuration", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables special, board-specific STM32 clock configuration."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "RTC clock source", "cond": "RTC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_RTC_LSECLOCK", "default": "n", "cond": "RTC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32L4_RTC_LSECLOCK", "value": "n", "user_value": null, "dep": "n", "prompt": "LSE clock", "cond": "y", "help": "Drive the RTC with the LSE clock"}, {"type": 3, "name": "STM32L4_RTC_LSICLOCK", "value": "n", "user_value": null, "dep": "n", "prompt": "LSI clock", "cond": "y", "help": "Drive the RTC with the LSI clock"}, {"type": 3, "name": "STM32L4_RTC_HSECLOCK", "value": "n", "user_value": null, "dep": "n", "prompt": "HSE clock", "cond": "y", "help": "Drive the RTC with the HSE clock, divided down to 1MHz."}]}, {"type": 3, "name": "STM32L4_SAI1PLL", "value": "n", "user_value": null, "dep": "n", "prompt": "SAI1PLL", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "The STM32L476 has a separate PLL for the SAI1 block.\nSet this true and provide configuration parameters in\nboard.h to use this PLL."}, {"type": 3, "name": "STM32L4_SAI2PLL", "value": "n", "user_value": null, "dep": "n", "prompt": "SAI2PLL", "cond": "STM32L4_HAVE_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "The STM32L476 has a separate PLL for the SAI2 block.\nSet this true and provide configuration parameters in\nboard.h to use this PLL."}, {"type": 31, "dep": "n", "prompt": "Timer Configuration", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "children": [{"type": 3, "name": "STM32L4_ONESHOT", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "SCHED_TICKLESS && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_FREERUN", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "SCHED_TICKLESS && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 27, "name": "STM32L4_TICKLESS_ONESHOT", "value": "", "user_value": null, "dep": "n", "prompt": "Tickless one-shot timer channel", "cond": "STM32L4_ONESHOT && SCHED_TICKLESS && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "2", "default": "2", "cond": "STM32L4_ONESHOT && SCHED_TICKLESS && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "8", "cond": "STM32L4_ONESHOT && SCHED_TICKLESS && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "If the Tickless OS feature is enabled, then one clock must be\nassigned to provide the one-shot timer needed by the OS."}, {"type": 27, "name": "STM32L4_TICKLESS_FREERUN", "value": "", "user_value": null, "dep": "n", "prompt": "Tickless free-running timer channel", "cond": "STM32L4_FREERUN && SCHED_TICKLESS && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "5", "default": "5", "cond": "STM32L4_FREERUN && SCHED_TICKLESS && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "8", "cond": "STM32L4_FREERUN && SCHED_TICKLESS && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "If the Tickless OS feature is enabled, then one clock must be\nassigned to provide the free-running timer needed by the OS."}, {"type": 3, "name": "STM32L4_ONESHOT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM one-shot wrapper", "cond": "!SCHED_TICKLESS && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SCHED_TICKLESS && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enable a wrapper around the low level timer/counter functions to\nsupport one-shot timer."}, {"type": 3, "name": "STM32L4_FREERUN", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM free-running wrapper", "cond": "!SCHED_TICKLESS && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "!SCHED_TICKLESS && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enable a wrapper around the low level timer/counter functions to\nsupport a free-running timer."}, {"type": 27, "name": "STM32L4_ONESHOT_MAXTIMERS", "value": "", "user_value": null, "dep": "n", "prompt": "Maximum number of oneshot timers", "cond": "STM32L4_ONESHOT && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "STM32L4_ONESHOT && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "8", "cond": "STM32L4_ONESHOT && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Determines the maximum number of oneshot timers that can be\nsupported.  This setting pre-allocates some minimal support for each\nof the timers and places an upper limit on the number of oneshot\ntimers that you can use."}, {"type": 3, "name": "STM32L4_TIM1_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 PWM", "cond": "STM32L4_TIM1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "PWM", "cond": "STM32L4_TIM1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32L4_TIM1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 1 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32L4_TIM1\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "STM32L4_TIM1_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 Mode", "cond": "STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the timer mode."}, {"type": 3, "name": "STM32L4_TIM1_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 1", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32L4_TIM1_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 1 Mode", "cond": "STM32L4_TIM1_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM1_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM1_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM1_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 1 Output", "cond": "STM32L4_TIM1_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM1_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1 output.", "children": [{"type": 3, "name": "STM32L4_TIM1_CH1NOUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 1 Complementary Output", "cond": "STM32L4_TIM1_CH1OUT && STM32L4_TIM1_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM1_CH1OUT && STM32L4_TIM1_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1 complementary output."}]}]}, {"type": 3, "name": "STM32L4_TIM1_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 2", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32L4_TIM1_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 2 Mode", "cond": "STM32L4_TIM1_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM1_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM1_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM1_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 2 Output", "cond": "STM32L4_TIM1_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM1_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 2 output.", "children": [{"type": 3, "name": "STM32L4_TIM1_CH2NOUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 2 Complemenrary Output", "cond": "STM32L4_TIM1_CH2OUT && STM32L4_TIM1_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM1_CH2OUT && STM32L4_TIM1_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 2 complementary output."}]}]}, {"type": 3, "name": "STM32L4_TIM1_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 3", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32L4_TIM1_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 3 Mode", "cond": "STM32L4_TIM1_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM1_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM1_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM1_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 3 Output", "cond": "STM32L4_TIM1_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM1_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 3 output.", "children": [{"type": 3, "name": "STM32L4_TIM1_CH3NOUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 3 Complementary Output", "cond": "STM32L4_TIM1_CH3OUT && STM32L4_TIM1_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM1_CH3OUT && STM32L4_TIM1_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 3 complementary output."}]}]}, {"type": 3, "name": "STM32L4_TIM1_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 4", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32L4_TIM1_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 4 Mode", "cond": "STM32L4_TIM1_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM1_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM1_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM1_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Channel 4 Output", "cond": "STM32L4_TIM1_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM1_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32L4_TIM1_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 PWM Output Channel", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "If TIM1 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32L4_TIM1_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 Channel Mode", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM1_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32L4_TIM2_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 PWM", "cond": "STM32L4_TIM2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "PWM", "cond": "STM32L4_TIM2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32L4_TIM2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 2 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32L4_TIM2\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "STM32L4_TIM2_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 Mode", "cond": "STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the timer mode."}, {"type": 3, "name": "STM32L4_TIM2_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 1", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32L4_TIM2_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 1 Mode", "cond": "STM32L4_TIM2_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM2_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM2_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM2_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 1 Output", "cond": "STM32L4_TIM2_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM2_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32L4_TIM2_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 2", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32L4_TIM2_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 2 Mode", "cond": "STM32L4_TIM2_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM2_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM2_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM2_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 2 Output", "cond": "STM32L4_TIM2_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM2_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32L4_TIM2_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 3", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32L4_TIM2_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 3 Mode", "cond": "STM32L4_TIM2_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM2_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM2_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM2_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 3 Output", "cond": "STM32L4_TIM2_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM2_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32L4_TIM2_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 4", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32L4_TIM2_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 4 Mode", "cond": "STM32L4_TIM2_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM2_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM2_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM2_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Channel 4 Output", "cond": "STM32L4_TIM2_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM2_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32L4_TIM2_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 PWM Output Channel", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "If TIM2 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32L4_TIM2_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 Channel Mode", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM2_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32L4_TIM3_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 PWM", "cond": "STM32L4_TIM3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "PWM", "cond": "STM32L4_TIM3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32L4_TIM3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 3 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32L4_TIM3\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "STM32L4_TIM3_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 Mode", "cond": "STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the timer mode."}, {"type": 3, "name": "STM32L4_TIM3_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 1", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32L4_TIM3_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 1 Mode", "cond": "STM32L4_TIM3_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM3_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM3_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM3_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 1 Output", "cond": "STM32L4_TIM3_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM3_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32L4_TIM3_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 2", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32L4_TIM3_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 2 Mode", "cond": "STM32L4_TIM3_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM3_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM3_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM3_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 2 Output", "cond": "STM32L4_TIM3_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM3_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32L4_TIM3_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 3", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32L4_TIM3_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 3 Mode", "cond": "STM32L4_TIM3_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM3_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM3_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM3_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 3 Output", "cond": "STM32L4_TIM3_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM3_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32L4_TIM3_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 4", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32L4_TIM3_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 4 Mode", "cond": "STM32L4_TIM3_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM3_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM3_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM3_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Channel 4 Output", "cond": "STM32L4_TIM3_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM3_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32L4_TIM3_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 PWM Output Channel", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "If TIM3 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32L4_TIM3_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 Channel Mode", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM3_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32L4_TIM4_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 PWM", "cond": "STM32L4_TIM4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "PWM", "cond": "STM32L4_TIM4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32L4_TIM4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 4 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32L4_TIM4\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "STM32L4_TIM4_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 Mode", "cond": "STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the timer mode."}, {"type": 3, "name": "STM32L4_TIM4_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 1", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32L4_TIM4_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 1 Mode", "cond": "STM32L4_TIM4_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM4_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM4_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM4_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 1 Output", "cond": "STM32L4_TIM4_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM4_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32L4_TIM4_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 2", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32L4_TIM4_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 2 Mode", "cond": "STM32L4_TIM4_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM4_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM4_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM4_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 2 Output", "cond": "STM32L4_TIM4_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM4_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32L4_TIM4_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 3", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32L4_TIM4_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 3 Mode", "cond": "STM32L4_TIM4_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM4_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM4_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM4_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 3 Output", "cond": "STM32L4_TIM4_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM4_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32L4_TIM4_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 4", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32L4_TIM4_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 4 Mode", "cond": "STM32L4_TIM4_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM4_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM4_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM4_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Channel 4 Output", "cond": "STM32L4_TIM4_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM4_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32L4_TIM4_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 PWM Output Channel", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "If TIM4 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32L4_TIM4_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 Channel Mode", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM4_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32L4_TIM5_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 PWM", "cond": "STM32L4_TIM5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "PWM", "cond": "STM32L4_TIM5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32L4_TIM5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 5 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32L4_TIM5\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "STM32L4_TIM5_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 Mode", "cond": "STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the timer mode."}, {"type": 3, "name": "STM32L4_TIM5_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 1", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32L4_TIM5_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 1 Mode", "cond": "STM32L4_TIM5_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM5_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM5_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM5_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 1 Output", "cond": "STM32L4_TIM5_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM5_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1 output."}]}, {"type": 3, "name": "STM32L4_TIM5_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 2", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32L4_TIM5_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 2 Mode", "cond": "STM32L4_TIM5_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM5_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM5_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM5_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 2 Output", "cond": "STM32L4_TIM5_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM5_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 3, "name": "STM32L4_TIM5_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 3", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32L4_TIM5_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 3 Mode", "cond": "STM32L4_TIM5_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM5_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM5_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM5_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 3 Output", "cond": "STM32L4_TIM5_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM5_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 3 output."}]}, {"type": 3, "name": "STM32L4_TIM5_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 4", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32L4_TIM5_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 4 Mode", "cond": "STM32L4_TIM5_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM5_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM5_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM5_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Channel 4 Output", "cond": "STM32L4_TIM5_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM5_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32L4_TIM5_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 PWM Output Channel", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "If TIM5 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32L4_TIM5_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 Channel Mode", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM5_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32L4_TIM8_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 PWM", "cond": "STM32L4_TIM8 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM8 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "PWM", "cond": "STM32L4_TIM8 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_PWM_PULSECOUNT", "cond": "STM32L4_TIM8 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 8 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32L4_TIM8\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 27, "name": "STM32L4_TIM8_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 Mode", "cond": "STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the timer mode."}, {"type": 3, "name": "STM32L4_TIM8_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 1", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32L4_TIM8_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 1 Mode", "cond": "STM32L4_TIM8_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM8_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM8_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM8_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 1 Output", "cond": "STM32L4_TIM8_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM8_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1 output.", "children": [{"type": 3, "name": "STM32L4_TIM8_CH1NOUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 1 Complementary Output", "cond": "STM32L4_TIM8_CH1OUT && STM32L4_TIM8_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM8_CH1OUT && STM32L4_TIM8_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1 complementary output."}]}]}, {"type": 3, "name": "STM32L4_TIM8_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 2", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32L4_TIM8_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 2 Mode", "cond": "STM32L4_TIM8_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM8_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM8_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM8_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 2 Output", "cond": "STM32L4_TIM8_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM8_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 2 output.", "children": [{"type": 3, "name": "STM32L4_TIM8_CH2NOUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 2 Complementary Output", "cond": "STM32L4_TIM8_CH2OUT && STM32L4_TIM8_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM8_CH2OUT && STM32L4_TIM8_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 2 complementary output."}]}]}, {"type": 3, "name": "STM32L4_TIM8_CHANNEL3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 3", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 3.", "children": [{"type": 27, "name": "STM32L4_TIM8_CH3MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 3 Mode", "cond": "STM32L4_TIM8_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM8_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM8_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM8_CH3OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 3 Output", "cond": "STM32L4_TIM8_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM8_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 3 output.", "children": [{"type": 3, "name": "STM32L4_TIM8_CH3NOUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 3 Complementary Output", "cond": "STM32L4_TIM8_CH3OUT && STM32L4_TIM8_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM8_CH3OUT && STM32L4_TIM8_CHANNEL3 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 3 complementary output."}]}]}, {"type": 3, "name": "STM32L4_TIM8_CHANNEL4", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 4", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 4.", "children": [{"type": 27, "name": "STM32L4_TIM8_CH4MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 4 Mode", "cond": "STM32L4_TIM8_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM8_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "STM32L4_TIM8_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM8_CH4OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Channel 4 Output", "cond": "STM32L4_TIM8_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM8_CHANNEL4 && STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 4 output."}]}, {"type": 27, "name": "STM32L4_TIM8_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 PWM Output Channel", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "4", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "If TIM8 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,..,4}"}, {"type": 27, "name": "STM32L4_TIM8_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 Channel Mode", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "5", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM8_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32L4_TIM15_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM15 PWM", "cond": "STM32L4_TIM15 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM15 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "PWM", "cond": "STM32L4_TIM15 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 15 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32L4_TIM15\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 3, "name": "STM32L4_TIM15_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM15 Channel 1", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32L4_TIM15_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM15 Channel 1 Mode", "cond": "STM32L4_TIM15_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM15_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "3", "cond": "STM32L4_TIM15_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM15_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM15 Channel 1 Output", "cond": "STM32L4_TIM15_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM15_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1 output.", "children": [{"type": 3, "name": "STM32L4_TIM15_CH1NOUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM15 Channel 1 Complementary Output", "cond": "STM32L4_TIM15_CH1OUT && STM32L4_TIM15_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM15_CH1OUT && STM32L4_TIM15_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1 complementary output."}]}]}, {"type": 3, "name": "STM32L4_TIM15_CHANNEL2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM15 Channel 2", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 2.", "children": [{"type": 27, "name": "STM32L4_TIM15_CH2MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM15 Channel 2 Mode", "cond": "STM32L4_TIM15_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM15_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "3", "cond": "STM32L4_TIM15_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM15_CH2OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM15 Channel 2 Output", "cond": "STM32L4_TIM15_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM15_CHANNEL2 && STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 2 output."}]}, {"type": 27, "name": "STM32L4_TIM15_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM15 PWM Output Channel", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "2", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "If TIM15 is enabled for PWM usage, you also need specifies the timer output\nchannel {1,2}"}, {"type": 27, "name": "STM32L4_TIM15_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM15 Channel Mode", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "3", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM15_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32L4_TIM16_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM16 PWM", "cond": "STM32L4_TIM16 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM16 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "PWM", "cond": "STM32L4_TIM16 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 16 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32L4_TIM16\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 3, "name": "STM32L4_TIM16_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM16 Channel 1", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM16_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM16_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32L4_TIM16_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM16 Channel 1 Mode", "cond": "STM32L4_TIM16_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM16_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM16_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM16_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "STM32L4_TIM16_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM16_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM16_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM16 Channel 1 Output", "cond": "STM32L4_TIM16_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM16_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM16_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM16_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1 output.", "children": [{"type": 3, "name": "STM32L4_TIM16_CH1NOUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM16 Channel 1 Complementary Output", "cond": "STM32L4_TIM16_CH1OUT && STM32L4_TIM16_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM16_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM16_CH1OUT && STM32L4_TIM16_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM16_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1 complementary output."}]}]}, {"type": 27, "name": "STM32L4_TIM16_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM16 PWM Output Channel", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM16_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM16_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "1", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM16_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "If TIM16 is enabled for PWM usage, you also need specifies the timer output\nchannel {1}"}, {"type": 27, "name": "STM32L4_TIM16_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM16 Channel Mode", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM16_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM16_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM16_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32L4_TIM17_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM17 PWM", "cond": "STM32L4_TIM17 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM17 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "PWM", "cond": "STM32L4_TIM17 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 17 for use by PWM\n\nTimer devices may be used for different purposes.  One special purpose is\nto generate modulated outputs for such things as motor control.  If STM32L4_TIM17\nis defined then THIS following may also be defined to indicate that\nthe timer is intended to be used for pulsed output modulation.", "children": [{"type": 3, "name": "STM32L4_TIM17_CHANNEL1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM17 Channel 1", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM17_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_PWM_MULTICHAN && STM32L4_TIM17_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1.", "children": [{"type": 27, "name": "STM32L4_TIM17_CH1MODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM17 Channel 1 Mode", "cond": "STM32L4_TIM17_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM17_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_TIM17_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM17_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "STM32L4_TIM17_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM17_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}, {"type": 3, "name": "STM32L4_TIM17_CH1OUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM17 Channel 1 Output", "cond": "STM32L4_TIM17_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM17_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM17_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM17_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1 output.", "children": [{"type": 3, "name": "STM32L4_TIM17_CH1NOUT", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM17 Channel 1 Complementary Output", "cond": "STM32L4_TIM17_CH1OUT && STM32L4_TIM17_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM17_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM17_CH1OUT && STM32L4_TIM17_CHANNEL1 && STM32L4_PWM_MULTICHAN && STM32L4_TIM17_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enables channel 1 complementary output."}]}]}, {"type": 27, "name": "STM32L4_TIM17_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "TIM17 PWM Output Channel", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM17_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM17_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "1", "max": "1", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM17_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "If TIM17 is enabled for PWM usage, you also need specifies the timer output\nchannel {1}"}, {"type": 27, "name": "STM32L4_TIM17_CHMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TIM17 Channel Mode", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM17_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM17_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "!STM32L4_PWM_MULTICHAN && STM32L4_TIM17_PWM && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies the channel mode."}]}, {"type": 3, "name": "STM32L4_PWM_MULTICHAN", "value": "n", "user_value": null, "dep": "n", "prompt": "PWM Multiple Output Channels", "cond": "(STM32L4_TIM1_PWM || STM32L4_TIM2_PWM || STM32L4_TIM3_PWM || STM32L4_TIM4_PWM || STM32L4_TIM5_PWM || STM32L4_TIM8_PWM || STM32L4_TIM15_PWM || STM32L4_TIM16_PWM || STM32L4_TIM17_PWM) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(STM32L4_TIM1_PWM || STM32L4_TIM2_PWM || STM32L4_TIM3_PWM || STM32L4_TIM4_PWM || STM32L4_TIM5_PWM || STM32L4_TIM8_PWM || STM32L4_TIM15_PWM || STM32L4_TIM16_PWM || STM32L4_TIM17_PWM) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "selects": [{"symbol": "ARCH_HAVE_PWM_MULTICHAN", "cond": "(STM32L4_TIM1_PWM || STM32L4_TIM2_PWM || STM32L4_TIM3_PWM || STM32L4_TIM4_PWM || STM32L4_TIM5_PWM || STM32L4_TIM8_PWM || STM32L4_TIM15_PWM || STM32L4_TIM16_PWM || STM32L4_TIM17_PWM) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Specifies that the PWM driver supports multiple output\nchannels per timer."}, {"type": 3, "name": "STM32L4_TIM1_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 ADC", "cond": "STM32L4_TIM1 && STM32L4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM1 && STM32L4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 1 for use by ADC\n\nTimer devices may be used for different purposes.  If STM32L4_TIM1 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for ADC conversion. Note that ADC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the ADC, but then you also have to configure which ADC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM1 ADC channel", "cond": "STM32L4_TIM1_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_TIM1_ADC1", "default": "n", "cond": "STM32L4_TIM1_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32L4_TIM1_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 ADC channel 1", "cond": "STM32L4_ADC1 && y", "selects": [{"symbol": "HAVE_ADC1_TIMER", "cond": "STM32L4_ADC1 && y"}], "help": "Reserve TIM1 to trigger ADC1"}, {"type": 3, "name": "STM32L4_TIM1_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 ADC channel 2", "cond": "STM32L4_ADC2 && y", "selects": [{"symbol": "HAVE_ADC2_TIMER", "cond": "STM32L4_ADC2 && y"}], "help": "Reserve TIM1 to trigger ADC2"}, {"type": 3, "name": "STM32L4_TIM1_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 ADC channel 3", "cond": "STM32L4_ADC3 && y", "selects": [{"symbol": "HAVE_ADC3_TIMER", "cond": "STM32L4_ADC3 && y"}], "help": "Reserve TIM1 to trigger ADC3"}]}]}, {"type": 3, "name": "STM32L4_TIM2_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 ADC", "cond": "STM32L4_TIM2 && STM32L4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM2 && STM32L4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 2 for use by ADC\n\nTimer devices may be used for different purposes.  If STM32L4_TIM2 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for ADC conversion. Note that ADC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the ADC, but then you also have to configure which ADC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM2 ADC channel", "cond": "STM32L4_TIM2_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_TIM2_ADC1", "default": "n", "cond": "STM32L4_TIM2_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32L4_TIM2_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 ADC channel 1", "cond": "STM32L4_ADC1 && y", "selects": [{"symbol": "HAVE_ADC1_TIMER", "cond": "STM32L4_ADC1 && y"}], "help": "Reserve TIM2 to trigger ADC1"}, {"type": 3, "name": "STM32L4_TIM2_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 ADC channel 2", "cond": "STM32L4_ADC2 && y", "selects": [{"symbol": "HAVE_ADC2_TIMER", "cond": "STM32L4_ADC2 && y"}], "help": "Reserve TIM2 to trigger ADC2"}, {"type": 3, "name": "STM32L4_TIM2_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 ADC channel 3", "cond": "STM32L4_ADC3 && y", "selects": [{"symbol": "HAVE_ADC3_TIMER", "cond": "STM32L4_ADC3 && y"}], "help": "Reserve TIM2 to trigger ADC3"}]}]}, {"type": 3, "name": "STM32L4_TIM3_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 ADC", "cond": "STM32L4_TIM3 && STM32L4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM3 && STM32L4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 3 for use by ADC\n\nTimer devices may be used for different purposes.  If STM32L4_TIM3 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for ADC conversion. Note that ADC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the ADC, but then you also have to configure which ADC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM3 ADC channel", "cond": "STM32L4_TIM3_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_TIM3_ADC1", "default": "n", "cond": "STM32L4_TIM3_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32L4_TIM3_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 ADC channel 1", "cond": "STM32L4_ADC1 && y", "selects": [{"symbol": "HAVE_ADC1_TIMER", "cond": "STM32L4_ADC1 && y"}], "help": "Reserve TIM3 to trigger ADC1"}, {"type": 3, "name": "STM32L4_TIM3_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 ADC channel 2", "cond": "STM32L4_ADC2 && y", "selects": [{"symbol": "HAVE_ADC2_TIMER", "cond": "STM32L4_ADC2 && y"}], "help": "Reserve TIM3 to trigger ADC2"}, {"type": 3, "name": "STM32L4_TIM3_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 ADC channel 3", "cond": "STM32L4_ADC3 && y", "selects": [{"symbol": "HAVE_ADC3_TIMER", "cond": "STM32L4_ADC3 && y"}], "help": "Reserve TIM3 to trigger ADC3"}]}]}, {"type": 3, "name": "STM32L4_TIM4_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 ADC", "cond": "STM32L4_TIM4 && STM32L4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM4 && STM32L4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 4 for use by ADC\n\nTimer devices may be used for different purposes.  If STM32L4_TIM4 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for ADC conversion. Note that ADC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the ADC, but then you also have to configure which ADC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM4 ADC channel", "cond": "STM32L4_TIM4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_TIM4_ADC1", "default": "n", "cond": "STM32L4_TIM4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32L4_TIM4_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 ADC channel 1", "cond": "STM32L4_ADC1 && y", "selects": [{"symbol": "HAVE_ADC1_TIMER", "cond": "STM32L4_ADC1 && y"}], "help": "Reserve TIM4 to trigger ADC1"}, {"type": 3, "name": "STM32L4_TIM4_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 ADC channel 2", "cond": "STM32L4_ADC2 && y", "selects": [{"symbol": "HAVE_ADC2_TIMER", "cond": "STM32L4_ADC2 && y"}], "help": "Reserve TIM4 to trigger ADC2"}, {"type": 3, "name": "STM32L4_TIM4_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 ADC channel 3", "cond": "STM32L4_ADC3 && y", "selects": [{"symbol": "HAVE_ADC3_TIMER", "cond": "STM32L4_ADC3 && y"}], "help": "Reserve TIM4 to trigger ADC3"}]}]}, {"type": 3, "name": "STM32L4_TIM6_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM6 ADC", "cond": "STM32L4_TIM6 && STM32L4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM6 && STM32L4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 6 for use by ADC\n\nTimer devices may be used for different purposes.  If STM32L4_TIM6 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for ADC conversion. Note that ADC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the ADC, but then you also have to configure which ADC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM6 ADC channel", "cond": "STM32L4_TIM6_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_TIM6_ADC1", "default": "n", "cond": "STM32L4_TIM6_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32L4_TIM6_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM6 ADC channel 1", "cond": "STM32L4_ADC1 && y", "selects": [{"symbol": "HAVE_ADC1_TIMER", "cond": "STM32L4_ADC1 && y"}], "help": "Reserve TIM6 to trigger ADC1"}, {"type": 3, "name": "STM32L4_TIM6_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM6 ADC channel 2", "cond": "STM32L4_ADC2 && y", "selects": [{"symbol": "HAVE_ADC2_TIMER", "cond": "STM32L4_ADC2 && y"}], "help": "Reserve TIM6 to trigger ADC2"}, {"type": 3, "name": "STM32L4_TIM6_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM6 ADC channel 3", "cond": "STM32L4_ADC3 && y", "selects": [{"symbol": "HAVE_ADC3_TIMER", "cond": "STM32L4_ADC3 && y"}], "help": "Reserve TIM6 to trigger ADC3"}]}]}, {"type": 3, "name": "STM32L4_TIM8_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 ADC", "cond": "STM32L4_TIM8 && STM32L4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM8 && STM32L4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 8 for use by ADC\n\nTimer devices may be used for different purposes.  If STM32L4_TIM8 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for ADC conversion. Note that ADC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the ADC, but then you also have to configure which ADC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM8 ADC channel", "cond": "STM32L4_TIM8_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_TIM8_ADC1", "default": "n", "cond": "STM32L4_TIM8_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32L4_TIM8_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 ADC channel 1", "cond": "STM32L4_ADC1 && y", "selects": [{"symbol": "HAVE_ADC1_TIMER", "cond": "STM32L4_ADC1 && y"}], "help": "Reserve TIM8 to trigger ADC1"}, {"type": 3, "name": "STM32L4_TIM8_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 ADC channel 2", "cond": "STM32L4_ADC2 && y", "selects": [{"symbol": "HAVE_ADC2_TIMER", "cond": "STM32L4_ADC2 && y"}], "help": "Reserve TIM8 to trigger ADC2"}, {"type": 3, "name": "STM32L4_TIM8_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 ADC channel 3", "cond": "STM32L4_ADC3 && y", "selects": [{"symbol": "HAVE_ADC3_TIMER", "cond": "STM32L4_ADC3 && y"}], "help": "Reserve TIM8 to trigger ADC3"}]}]}, {"type": 3, "name": "STM32L4_TIM15_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM15 ADC", "cond": "STM32L4_TIM15 && STM32L4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM15 && STM32L4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 15 for use by ADC\n\nTimer devices may be used for different purposes.  If STM32L4_TIM15 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for ADC conversion. Note that ADC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the ADC, but then you also have to configure which ADC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM15 ADC channel", "cond": "STM32L4_TIM15_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_TIM15_ADC1", "default": "n", "cond": "STM32L4_TIM15_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32L4_TIM15_ADC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM15 ADC channel 1", "cond": "STM32L4_ADC1 && y", "selects": [{"symbol": "HAVE_ADC1_TIMER", "cond": "STM32L4_ADC1 && y"}], "help": "Reserve TIM15 to trigger ADC1"}, {"type": 3, "name": "STM32L4_TIM15_ADC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM15 ADC channel 2", "cond": "STM32L4_ADC2 && y", "selects": [{"symbol": "HAVE_ADC2_TIMER", "cond": "STM32L4_ADC2 && y"}], "help": "Reserve TIM15 to trigger ADC2"}, {"type": 3, "name": "STM32L4_TIM15_ADC3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM15 ADC channel 3", "cond": "STM32L4_ADC3 && y", "selects": [{"symbol": "HAVE_ADC3_TIMER", "cond": "STM32L4_ADC3 && y"}], "help": "Reserve TIM15 to trigger ADC3"}]}]}, {"type": 3, "name": "HAVE_ADC1_TIMER", "value": "n", "user_value": null, "rev_dep": "(STM32_TIM1_ADC1 && STM32_ADC1 && y) || (STM32_TIM2_ADC1 && STM32_ADC1 && y) || (STM32_TIM3_ADC1 && STM32_ADC1 && y) || (STM32_TIM4_ADC1 && STM32_ADC1 && y) || (STM32_TIM5_ADC1 && STM32_ADC1 && y) || (STM32_TIM8_ADC1 && STM32_ADC1 && y) || (STM32F7_TIM1_ADC1 && STM32F7_ADC1 && y) || (STM32F7_TIM2_ADC1 && STM32F7_ADC1 && y) || (STM32F7_TIM3_ADC1 && STM32F7_ADC1 && y) || (STM32F7_TIM4_ADC1 && STM32F7_ADC1 && y) || (STM32F7_TIM5_ADC1 && STM32F7_ADC1 && y) || (STM32F7_TIM8_ADC1 && STM32F7_ADC1 && y) || (STM32L4_TIM1_ADC1 && STM32L4_ADC1 && y) || (STM32L4_TIM2_ADC1 && STM32L4_ADC1 && y) || (STM32L4_TIM3_ADC1 && STM32L4_ADC1 && y) || (STM32L4_TIM4_ADC1 && STM32L4_ADC1 && y) || (STM32L4_TIM6_ADC1 && STM32L4_ADC1 && y) || (STM32L4_TIM8_ADC1 && STM32L4_ADC1 && y) || (STM32L4_TIM15_ADC1 && STM32L4_ADC1 && y)", "dep": "n"}, {"type": 3, "name": "HAVE_ADC2_TIMER", "value": "n", "user_value": null, "rev_dep": "(STM32_TIM1_ADC2 && STM32_ADC2 && y) || (STM32_TIM2_ADC2 && STM32_ADC2 && y) || (STM32_TIM3_ADC2 && STM32_ADC2 && y) || (STM32_TIM4_ADC2 && STM32_ADC2 && y) || (STM32_TIM5_ADC2 && STM32_ADC2 && y) || (STM32_TIM8_ADC2 && STM32_ADC2 && y) || (STM32F7_TIM1_ADC2 && STM32F7_ADC2 && y) || (STM32F7_TIM2_ADC2 && STM32F7_ADC2 && y) || (STM32F7_TIM3_ADC2 && STM32F7_ADC2 && y) || (STM32F7_TIM4_ADC2 && STM32F7_ADC2 && y) || (STM32F7_TIM5_ADC2 && STM32F7_ADC2 && y) || (STM32F7_TIM8_ADC2 && STM32F7_ADC2 && y) || (STM32L4_TIM1_ADC2 && STM32L4_ADC2 && y) || (STM32L4_TIM2_ADC2 && STM32L4_ADC2 && y) || (STM32L4_TIM3_ADC2 && STM32L4_ADC2 && y) || (STM32L4_TIM4_ADC2 && STM32L4_ADC2 && y) || (STM32L4_TIM6_ADC2 && STM32L4_ADC2 && y) || (STM32L4_TIM8_ADC2 && STM32L4_ADC2 && y) || (STM32L4_TIM15_ADC2 && STM32L4_ADC2 && y)", "dep": "n"}, {"type": 3, "name": "HAVE_ADC3_TIMER", "value": "n", "user_value": null, "rev_dep": "(STM32_TIM1_ADC3 && STM32_ADC3 && y) || (STM32_TIM2_ADC3 && STM32_ADC3 && y) || (STM32_TIM3_ADC3 && STM32_ADC3 && y) || (STM32_TIM4_ADC3 && STM32_ADC3 && y) || (STM32_TIM5_ADC3 && STM32_ADC3 && y) || (STM32_TIM8_ADC3 && STM32_ADC3 && y) || (STM32F7_TIM1_ADC3 && STM32F7_ADC3 && y) || (STM32F7_TIM2_ADC3 && STM32F7_ADC3 && y) || (STM32F7_TIM3_ADC3 && STM32F7_ADC3 && y) || (STM32F7_TIM4_ADC3 && STM32F7_ADC3 && y) || (STM32F7_TIM5_ADC3 && STM32F7_ADC3 && y) || (STM32F7_TIM8_ADC3 && STM32F7_ADC3 && y) || (STM32L4_TIM1_ADC3 && STM32L4_ADC3 && y) || (STM32L4_TIM2_ADC3 && STM32L4_ADC3 && y) || (STM32L4_TIM3_ADC3 && STM32L4_ADC3 && y) || (STM32L4_TIM4_ADC3 && STM32L4_ADC3 && y) || (STM32L4_TIM6_ADC3 && STM32L4_ADC3 && y) || (STM32L4_TIM8_ADC3 && STM32L4_ADC3 && y) || (STM32L4_TIM15_ADC3 && STM32L4_ADC3 && y)", "dep": "n"}, {"type": 27, "name": "STM32L4_ADC1_SAMPLE_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "ADC1 Sampling Frequency", "cond": "HAVE_ADC1_TIMER && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "100", "default": "100", "cond": "HAVE_ADC1_TIMER && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "ADC1 sampling frequency.  Default:  100Hz"}, {"type": 27, "name": "STM32L4_ADC1_TIMTRIG", "value": "", "user_value": null, "dep": "n", "prompt": "ADC1 Timer Trigger", "cond": "HAVE_ADC1_TIMER && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "HAVE_ADC1_TIMER && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "HAVE_ADC1_TIMER && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Values 0:CC1 1:CC2 2:CC3 3:CC4 4:TRGO"}, {"type": 27, "name": "STM32L4_ADC2_SAMPLE_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "ADC2 Sampling Frequency", "cond": "HAVE_ADC2_TIMER && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "100", "default": "100", "cond": "HAVE_ADC2_TIMER && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "ADC2 sampling frequency.  Default:  100Hz"}, {"type": 27, "name": "STM32L4_ADC2_TIMTRIG", "value": "", "user_value": null, "dep": "n", "prompt": "ADC2 Timer Trigger", "cond": "HAVE_ADC2_TIMER && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "HAVE_ADC2_TIMER && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "HAVE_ADC2_TIMER && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Values 0:CC1 1:CC2 2:CC3 3:CC4 4:TRGO"}, {"type": 27, "name": "STM32L4_ADC3_SAMPLE_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "ADC3 Sampling Frequency", "cond": "HAVE_ADC3_TIMER && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "100", "default": "100", "cond": "HAVE_ADC3_TIMER && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "ADC3 sampling frequency.  Default:  100Hz"}, {"type": 27, "name": "STM32L4_ADC3_TIMTRIG", "value": "", "user_value": null, "dep": "n", "prompt": "ADC3 Timer Trigger", "cond": "HAVE_ADC3_TIMER && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "HAVE_ADC3_TIMER && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "4", "cond": "HAVE_ADC3_TIMER && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Values 0:CC1 1:CC2 2:CC3 3:CC4 4:TRGO"}, {"type": 3, "name": "STM32L4_TIM1_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 DAC", "cond": "STM32L4_TIM1 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM1 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 1 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32L4_TIM1 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM1 DAC channel", "cond": "STM32L4_TIM1_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_TIM1_DAC1", "default": "n", "cond": "STM32L4_TIM1_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32L4_TIM1_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 DAC channel 1", "cond": "y", "help": "Reserve TIM1 to trigger DAC1"}, {"type": 3, "name": "STM32L4_TIM1_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 DAC channel 2", "cond": "y", "help": "Reserve TIM1 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32L4_TIM2_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 DAC", "cond": "STM32L4_TIM2 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM2 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 2 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32L4_TIM2 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM2 DAC channel", "cond": "STM32L4_TIM2_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_TIM2_DAC1", "default": "n", "cond": "STM32L4_TIM2_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32L4_TIM2_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 DAC channel 1", "cond": "y", "help": "Reserve TIM2 to trigger DAC1"}, {"type": 3, "name": "STM32L4_TIM2_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 DAC channel 2", "cond": "y", "help": "Reserve TIM2 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32L4_TIM3_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 DAC", "cond": "STM32L4_TIM3 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM3 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 3 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32L4_TIM3 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM3 DAC channel", "cond": "STM32L4_TIM3_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_TIM3_DAC1", "default": "n", "cond": "STM32L4_TIM3_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32L4_TIM3_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 DAC channel 1", "cond": "y", "help": "Reserve TIM3 to trigger DAC1"}, {"type": 3, "name": "STM32L4_TIM3_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 DAC channel 2", "cond": "y", "help": "Reserve TIM3 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32L4_TIM4_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 DAC", "cond": "STM32L4_TIM4 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM4 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 4 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32L4_TIM4 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM4 DAC channel", "cond": "STM32L4_TIM4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_TIM4_DAC1", "default": "n", "cond": "STM32L4_TIM4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32L4_TIM4_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 DAC channel 1", "cond": "y", "help": "Reserve TIM4 to trigger DAC1"}, {"type": 3, "name": "STM32L4_TIM4_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 DAC channel 2", "cond": "y", "help": "Reserve TIM4 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32L4_TIM5_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 DAC", "cond": "STM32L4_TIM5 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM5 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 5 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32L4_TIM5 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM5 DAC channel", "cond": "STM32L4_TIM5_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_TIM5_DAC1", "default": "n", "cond": "STM32L4_TIM5_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32L4_TIM5_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 DAC channel 1", "cond": "y", "help": "Reserve TIM5 to trigger DAC1"}, {"type": 3, "name": "STM32L4_TIM5_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 DAC channel 2", "cond": "y", "help": "Reserve TIM5 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32L4_TIM6_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM6 DAC", "cond": "STM32L4_TIM6 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM6 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 6 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32L4_TIM6 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM6 DAC channel", "cond": "STM32L4_TIM6_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_TIM6_DAC1", "default": "n", "cond": "STM32L4_TIM6_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32L4_TIM6_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM6 DAC channel 1", "cond": "y", "help": "Reserve TIM6 to trigger DAC1"}, {"type": 3, "name": "STM32L4_TIM6_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM6 DAC channel 2", "cond": "y", "help": "Reserve TIM6 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32L4_TIM7_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM7 DAC", "cond": "STM32L4_TIM7 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM7 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 7 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32L4_TIM7 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM7 DAC channel", "cond": "STM32L4_TIM7_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_TIM7_DAC1", "default": "n", "cond": "STM32L4_TIM7_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32L4_TIM7_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM7 DAC channel 1", "cond": "y", "help": "Reserve TIM7 to trigger DAC1"}, {"type": 3, "name": "STM32L4_TIM7_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM7 DAC channel 2", "cond": "y", "help": "Reserve TIM7 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32L4_TIM8_DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 DAC", "cond": "STM32L4_TIM8 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM8 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 8 for use by DAC\n\nTimer devices may be used for different purposes.  If STM32L4_TIM8 is\ndefined then the following may also be defined to indicate that the\ntimer is intended to be used for DAC conversion. Note that DAC usage\nrequires two definition:  Not only do you have to assign the timer\nfor used by the DAC, but then you also have to configure which DAC\nchannel it is assigned to.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Select TIM8 DAC channel", "cond": "STM32L4_TIM8_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_TIM8_DAC1", "default": "n", "cond": "STM32L4_TIM8_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32L4_TIM8_DAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 DAC channel 1", "cond": "y", "help": "Reserve TIM8 to trigger DAC1"}, {"type": 3, "name": "STM32L4_TIM8_DAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 DAC channel 2", "cond": "y", "help": "Reserve TIM8 to trigger DAC2"}]}]}, {"type": 3, "name": "STM32L4_TIM1_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1 Capture", "cond": "STM32L4_HAVE_TIM1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_TIM1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 1 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32L4_TIM2_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2 Capture", "cond": "STM32L4_HAVE_TIM2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_TIM2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 2 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32L4_TIM3_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3 Capture", "cond": "STM32L4_HAVE_TIM3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_TIM3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 3 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32L4_TIM4_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4 Capture", "cond": "STM32L4_HAVE_TIM4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_TIM4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 4 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32L4_TIM5_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5 Capture", "cond": "STM32L4_HAVE_TIM5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_TIM5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 5 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}, {"type": 3, "name": "STM32L4_TIM8_CAP", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8 Capture", "cond": "STM32L4_HAVE_TIM8 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_HAVE_TIM8 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve timer 8 for use by Capture\n\nTimer devices may be used for different purposes.  One special purpose is\nto capture input."}]}, {"type": 31, "dep": "n", "prompt": "ADC Configuration", "cond": "STM32L4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "children": [{"type": 3, "name": "STM32L4_ADC1_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC1 DMA", "cond": "STM32L4_ADC1 && STM32L4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_ADC1 && STM32L4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "If DMA is selected, then the ADC may be configured to support\nDMA transfer, which is necessary if multiple channels are read\nor if very high trigger frequencies are used."}, {"type": 3, "name": "STM32L4_ADC2_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC2 DMA", "cond": "STM32L4_ADC2 && STM32L4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_ADC2 && STM32L4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "If DMA is selected, then the ADC may be configured to support\nDMA transfer, which is necessary if multiple channels are read\nor if very high trigger frequencies are used."}, {"type": 3, "name": "STM32L4_ADC3_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC3 DMA", "cond": "STM32L4_ADC3 && STM32L4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_ADC3 && STM32L4_ADC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "If DMA is selected, then the ADC may be configured to support\nDMA transfer, which is necessary if multiple channels are read\nor if very high trigger frequencies are used."}]}, {"type": 31, "dep": "n", "prompt": "DAC Configuration", "cond": "STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "children": [{"type": 3, "name": "STM32L4_DAC1_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC1 DMA", "cond": "STM32L4_DAC1 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_DAC1 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "If DMA is selected, then a timer and output frequency must also be\nprovided to support the DMA transfer.  The DMA transfer could be\nsupported by an EXTI trigger, but this feature is not currently\nsupported by the driver.", "children": [{"type": 27, "name": "STM32L4_DAC1_TIMER", "value": "", "user_value": null, "dep": "n", "prompt": "DAC1 timer", "cond": "STM32L4_DAC1_DMA && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "ranges": [{"min": "2", "max": "8", "cond": "STM32L4_DAC1_DMA && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 27, "name": "STM32L4_DAC1_TIMER_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "DAC1 timer frequency", "cond": "STM32L4_DAC1_DMA && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "100", "default": "100", "cond": "STM32L4_DAC1_DMA && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "DAC1 output frequency.  Default:  100Hz"}, {"type": 27, "name": "STM32L4_DAC1_DMA_BUFFER_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "DAC1 DMA buffer size", "cond": "STM32L4_DAC1_DMA && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "STM32L4_DAC1_DMA && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}]}, {"type": 3, "name": "STM32L4_DAC1_OUTPUT_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC1 output to ADC", "cond": "STM32L4_DAC1 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_DAC1 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Route DAC1 output to ADC input instead of external pin."}, {"type": 3, "name": "STM32L4_DAC2_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC2 DMA", "cond": "STM32L4_DAC2 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_DAC2 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "If DMA is selected, then a timer and output frequency must also be\nprovided to support the DMA transfer.  The DMA transfer could be\nsupported by an EXTI trigger, but this feature is not currently\nsupported by the driver.", "children": [{"type": 27, "name": "STM32L4_DAC2_TIMER", "value": "", "user_value": null, "dep": "n", "prompt": "DAC2 timer", "cond": "STM32L4_DAC2_DMA && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_DAC2_DMA && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "2", "max": "8", "cond": "STM32L4_DAC2_DMA && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 27, "name": "STM32L4_DAC2_TIMER_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "DAC2 timer frequency", "cond": "STM32L4_DAC2_DMA && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "100", "default": "100", "cond": "STM32L4_DAC2_DMA && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "DAC2 output frequency.  Default:  100Hz"}, {"type": 27, "name": "STM32L4_DAC2_DMA_BUFFER_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "DAC2 DMA buffer size", "cond": "STM32L4_DAC2_DMA && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "STM32L4_DAC2_DMA && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}]}, {"type": 3, "name": "STM32L4_DAC2_OUTPUT_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "DAC2 output to ADC", "cond": "STM32L4_DAC2 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_DAC2 && STM32L4_DAC && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Route DAC2 output to ADC input instead of external pin."}]}, {"type": 3, "name": "STM32L4_HAVE_USART1", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_USART2", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_USART3", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X3 && !(STM32L4_L432XX || STM32L4_L442XX) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_UART4", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L451XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L452XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L462XX && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_HAVE_UART5", "value": "n", "user_value": null, "rev_dep": "(STM32L4_STM32L4X5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_STM32L4X6 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 31, "dep": "n", "prompt": "U[S]ART Configuration", "cond": "STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "children": [{"type": 3, "name": "USART1_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART1", "cond": "STM32L4_USART1 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_USART1 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enable RS-485 interface on USART1. Your board config will have to\nprovide GPIO_USART1_RS485_DIR pin definition. Currently it cannot be\nused with USART1_RXDMA.", "children": [{"type": 27, "name": "USART1_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "USART1 RS-485 DIR pin polarity", "cond": "USART1_RS485 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "USART1_RS485 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "USART1_RS485 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on USART1. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 3, "name": "USART1_RXDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1 Rx DMA", "cond": "STM32L4_USART1 && (STM32L4_DMA1 || STM32L4_DMA2) && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_USART1 && (STM32L4_DMA1 || STM32L4_DMA2) && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "In high data rate usage, Rx DMA may eliminate Rx overrun errors"}, {"type": 3, "name": "USART2_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART2", "cond": "STM32L4_USART2 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_USART2 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enable RS-485 interface on USART2. Your board config will have to\nprovide GPIO_USART2_RS485_DIR pin definition. Currently it cannot be\nused with USART2_RXDMA.", "children": [{"type": 27, "name": "USART2_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "USART2 RS-485 DIR pin polarity", "cond": "USART2_RS485 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "USART2_RS485 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "USART2_RS485 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on USART2. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 3, "name": "USART2_RXDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2 Rx DMA", "cond": "STM32L4_USART2 && STM32L4_DMA1 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_USART2 && STM32L4_DMA1 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "In high data rate usage, Rx DMA may eliminate Rx overrun errors"}, {"type": 3, "name": "USART3_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on USART3", "cond": "STM32L4_USART3 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_USART3 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enable RS-485 interface on USART3. Your board config will have to\nprovide GPIO_USART3_RS485_DIR pin definition. Currently it cannot be\nused with USART3_RXDMA.", "children": [{"type": 27, "name": "USART3_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "USART3 RS-485 DIR pin polarity", "cond": "USART3_RS485 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "USART3_RS485 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "USART3_RS485 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on USART3. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 3, "name": "USART3_RXDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART3 Rx DMA", "cond": "STM32L4_USART3 && STM32L4_DMA1 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_USART3 && STM32L4_DMA1 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "In high data rate usage, Rx DMA may eliminate Rx overrun errors"}, {"type": 3, "name": "UART4_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on UART4", "cond": "STM32L4_UART4 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_UART4 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enable RS-485 interface on UART4. Your board config will have to\nprovide GPIO_UART4_RS485_DIR pin definition. Currently it cannot be\nused with UART4_RXDMA.", "children": [{"type": 27, "name": "UART4_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "UART4 RS-485 DIR pin polarity", "cond": "UART4_RS485 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "UART4_RS485 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "UART4_RS485 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on UART4. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 3, "name": "UART4_RXDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "UART4 Rx DMA", "cond": "STM32L4_UART4 && STM32L4_DMA2 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_UART4 && STM32L4_DMA2 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "In high data rate usage, Rx DMA may eliminate Rx overrun errors"}, {"type": 3, "name": "UART5_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "RS-485 on UART5", "cond": "STM32L4_UART5 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_UART5 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enable RS-485 interface on UART5. Your board config will have to\nprovide GPIO_UART5_RS485_DIR pin definition. Currently it cannot be\nused with UART5_RXDMA.", "children": [{"type": 27, "name": "UART5_RS485_DIR_POLARITY", "value": "", "user_value": null, "dep": "n", "prompt": "UART5 RS-485 DIR pin polarity", "cond": "UART5_RS485 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "UART5_RS485 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "ranges": [{"min": "0", "max": "1", "cond": "UART5_RS485 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Polarity of DIR pin for RS-485 on UART5. Set to state on DIR pin which\nenables TX (0 - low / nTXEN, 1 - high / TXEN)."}]}, {"type": 3, "name": "UART5_RXDMA", "value": "n", "user_value": null, "dep": "n", "prompt": "UART5 Rx DMA", "cond": "STM32L4_UART5 && STM32L4_DMA2 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_UART5 && STM32L4_DMA2 && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "In high data rate usage, Rx DMA may eliminate Rx overrun errors"}, {"type": 27, "name": "STM32L4_SERIAL_RXDMA_BUFFER_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Rx DMA buffer size", "cond": "(USART1_RXDMA || USART2_RXDMA || USART3_RXDMA || UART4_RXDMA || UART5_RXDMA) && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "32", "default": "32", "cond": "(USART1_RXDMA || USART2_RXDMA || USART3_RXDMA || UART4_RXDMA || UART5_RXDMA) && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "The DMA buffer size when using RX DMA to emulate a FIFO.\n\nWhen streaming data, the generic serial layer will be called\nevery time the FIFO receives half this number of bytes.\n\nValue given here will be rounded up to next multiple of 32 bytes."}, {"type": 3, "name": "SERIAL_DISABLE_REORDERING", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable reordering of ttySx devices.", "cond": "(STM32L4_USART1 || STM32L4_USART2 || STM32L4_USART3 || STM32L4_UART4 || STM32L4_UART5) && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "(STM32L4_USART1 || STM32L4_USART2 || STM32L4_USART3 || STM32L4_UART4 || STM32L4_UART5) && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "NuttX per default reorders the serial ports (/dev/ttySx) so that the\nconsole is always on /dev/ttyS0. If more than one UART is in use this\ncan, however, have the side-effect that all port mappings\n(hardware USART1 -> /dev/ttyS0) change if the console is moved to another\nUART. This is in particular relevant if a project uses the USB console\nin some configs and a serial console in other configs, but does not\nwant the side effect of having all serial port names change when just\nthe console is moved from serial to USB."}, {"type": 3, "name": "STM32L4_FLOWCONTROL_BROKEN", "value": "n", "user_value": null, "dep": "n", "prompt": "Use Software UART RTS flow control", "cond": "STM32L4_USART && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_USART && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enable UART RTS flow control using Software. Because STM\nCurrent STM32 have broken HW based RTS behavior (they assert\nnRTS after every byte received)  Enable this setting workaround\nthis issue by useing software based management of RTS"}, {"type": 3, "name": "STM32L4_USART_BREAKS", "value": "n", "user_value": null, "dep": "n", "prompt": "Add TIOxSBRK to support sending Breaks", "cond": "STM32L4_USART && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_USART && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Add TIOCxBRK routines to send a line break per the STM32 manual, the\nbreak will be a pulse based on the value M. This is not a BSD compatible\nbreak.", "children": [{"type": 3, "name": "STM32L4_SERIALBRK_BSDCOMPAT", "value": "n", "user_value": null, "dep": "n", "prompt": "Use GPIO To send Break", "cond": "STM32L4_USART && STM32L4_USART_BREAKS && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_USART && STM32L4_USART_BREAKS && STM32L4_USART && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Enable using GPIO on the TX pin to send a BSD compatible break:\nTIOCSBRK will start the break and TIOCCBRK will end the break.\nThe current STM32 U[S]ARTS have no way to leave the break (TX=LOW)\non because the SW starts the break and then the HW automatically clears\nthe break. This makes it is difficult to sent a long break."}]}]}, {"type": 31, "dep": "n", "prompt": "SPI Configuration", "cond": "STM32L4_SPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "children": [{"type": 3, "name": "STM32L4_SPI_INTERRUPTS", "value": "n", "user_value": null, "dep": "n", "prompt": "Interrupt driver SPI", "cond": "STM32L4_SPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_SPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Select to enable interrupt driven SPI support. Non-interrupt-driven,\npoll-waiting is recommended if the interrupt rate would be to high in\nthe interrupt driven case."}, {"type": 3, "name": "STM32L4_SPI_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI DMA", "cond": "STM32L4_SPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_SPI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Use DMA to improve SPI transfer performance.  Cannot be used with STM32L4_SPI_INTERRUPT."}]}, {"type": 31, "dep": "n", "prompt": "I2C Configuration", "cond": "STM32L4_I2C && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "children": [{"type": 3, "name": "STM32L4_I2C_DYNTIMEO", "value": "n", "user_value": null, "dep": "n", "prompt": "Use dynamic timeouts", "cond": "STM32L4_I2C && STM32L4_I2C && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_I2C && STM32L4_I2C && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 27, "name": "STM32L4_I2C_DYNTIMEO_USECPERBYTE", "value": "", "user_value": null, "dep": "n", "prompt": "Timeout Microseconds per Byte", "cond": "STM32L4_I2C_DYNTIMEO && STM32L4_I2C && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "500", "default": "500", "cond": "STM32L4_I2C_DYNTIMEO && STM32L4_I2C && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 27, "name": "STM32L4_I2C_DYNTIMEO_STARTSTOP", "value": "", "user_value": null, "dep": "n", "prompt": "Timeout for Start/Stop (Milliseconds)", "cond": "STM32L4_I2C_DYNTIMEO && STM32L4_I2C && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1000", "default": "1000", "cond": "STM32L4_I2C_DYNTIMEO && STM32L4_I2C && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}]}, {"type": 27, "name": "STM32L4_I2CTIMEOSEC", "value": "", "user_value": null, "dep": "n", "prompt": "Timeout seconds", "cond": "STM32L4_I2C && STM32L4_I2C && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STM32L4_I2C && STM32L4_I2C && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 27, "name": "STM32L4_I2CTIMEOMS", "value": "", "user_value": null, "dep": "n", "prompt": "Timeout Milliseconds", "cond": "STM32L4_I2C && !STM32L4_I2C_DYNTIMEO && STM32L4_I2C && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "500", "default": "500", "cond": "STM32L4_I2C && !STM32L4_I2C_DYNTIMEO && STM32L4_I2C && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 27, "name": "STM32L4_I2CTIMEOTICKS", "value": "", "user_value": null, "dep": "n", "prompt": "Timeout for Done and Stop (ticks)", "cond": "STM32L4_I2C && !STM32L4_I2C_DYNTIMEO && STM32L4_I2C && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "500", "default": "500", "cond": "STM32L4_I2C && !STM32L4_I2C_DYNTIMEO && STM32L4_I2C && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}, {"type": 3, "name": "STM32L4_I2C_DUTY16_9", "value": "n", "user_value": null, "dep": "n", "prompt": "Frequency with Tlow/Thigh = 16/9", "cond": "STM32L4_I2C && STM32L4_I2C && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_I2C && STM32L4_I2C && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}]}]}, {"type": 31, "dep": "n", "prompt": "CAN driver configuration", "cond": "(STM32L4_CAN1 || STM32L4_CAN2) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "children": [{"type": 27, "name": "CAN1_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "CAN1 BAUD", "cond": "STM32L4_CAN1 && (STM32L4_CAN1 || STM32L4_CAN2) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "250000", "default": "250000", "cond": "STM32L4_CAN1 && (STM32L4_CAN1 || STM32L4_CAN2) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "CAN1 BAUD rate.  Required if CONFIG_STM32L4_CAN1 is defined."}, {"type": 27, "name": "CAN2_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "CAN2 BAUD", "cond": "STM32L4_CAN2 && (STM32L4_CAN1 || STM32L4_CAN2) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "250000", "default": "250000", "cond": "STM32L4_CAN2 && (STM32L4_CAN1 || STM32L4_CAN2) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "CAN2 BAUD rate.  Required if CONFIG_STM32L4_CAN2 is defined."}, {"type": 27, "name": "CAN_TSEG1", "value": "", "user_value": null, "dep": "n", "prompt": "TSEG1 quanta", "cond": "(STM32L4_CAN1 || STM32L4_CAN2) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "6", "default": "6", "cond": "(STM32L4_CAN1 || STM32L4_CAN2) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "The number of CAN time quanta in segment 1. Default: 6"}, {"type": 27, "name": "CAN_TSEG2", "value": "", "user_value": null, "dep": "n", "prompt": "TSEG2 quanta", "cond": "(STM32L4_CAN1 || STM32L4_CAN2) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "7", "default": "7", "cond": "(STM32L4_CAN1 || STM32L4_CAN2) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "The number of CAN time quanta in segment 2. Default: 7"}, {"type": 3, "name": "STM32L4_CAN_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN Register level debug", "cond": "DEBUG_CAN_INFO && (STM32L4_CAN1 || STM32L4_CAN2) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_CAN_INFO && (STM32L4_CAN1 || STM32L4_CAN2) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Output detailed register-level CAN device debug information.\nRequires also CONFIG_DEBUG_CAN_INFO."}]}, {"type": 31, "dep": "n", "prompt": "QEncoder Driver", "cond": "QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "children": [{"type": 3, "name": "STM32L4_TIM1_QE", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1", "cond": "STM32L4_TIM1 && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM1 && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve TIM1 for use by QEncoder.", "children": [{"type": 27, "name": "STM32L4_TIM1_QEPSC", "value": "", "user_value": null, "dep": "n", "prompt": "TIM1 pulse prescaler", "cond": "STM32L4_TIM1_QE && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "STM32L4_TIM1_QE && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "This prescaler divides the number of recorded encoder pulses, limiting the count rate at the expense of resolution.\nReplaces the obscure \"output clock of TIM1.\" (CONFIG_TIM1_QECLKOUT)."}]}, {"type": 3, "name": "STM32L4_TIM2_QE", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2", "cond": "STM32L4_TIM2 && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM2 && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve TIM2 for use by QEncoder.", "children": [{"type": 27, "name": "STM32L4_TIM2_QEPSC", "value": "", "user_value": null, "dep": "n", "prompt": "TIM2 pulse prescaler", "cond": "STM32L4_TIM2_QE && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "STM32L4_TIM2_QE && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "This prescaler divides the number of recorded encoder pulses, limiting the count rate at the expense of resolution.\nReplaces the obscure \"output clock of TIM2.\" (CONFIG_TIM2_QECLKOUT)."}]}, {"type": 3, "name": "STM32L4_TIM3_QE", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3", "cond": "STM32L4_TIM3 && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM3 && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve TIM3 for use by QEncoder.", "children": [{"type": 27, "name": "STM32L4_TIM3_QEPSC", "value": "", "user_value": null, "dep": "n", "prompt": "TIM3 pulse prescaler", "cond": "STM32L4_TIM3_QE && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "STM32L4_TIM3_QE && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "This prescaler divides the number of recorded encoder pulses, limiting the count rate at the expense of resolution.\nReplaces the obscure \"output clock of TIM3.\" (CONFIG_TIM3_QECLKOUT)."}]}, {"type": 3, "name": "STM32L4_TIM4_QE", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM4", "cond": "STM32L4_TIM4 && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM4 && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve TIM4 for use by QEncoder.", "children": [{"type": 27, "name": "STM32L4_TIM4_QEPSC", "value": "", "user_value": null, "dep": "n", "prompt": "TIM4 pulse prescaler", "cond": "STM32L4_TIM4_QE && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "STM32L4_TIM4_QE && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "This prescaler divides the number of recorded encoder pulses, limiting the count rate at the expense of resolution.\nReplaces the obscure \"output clock of TIM4.\" (CONFIG_TIM4_QECLKOUT)."}]}, {"type": 3, "name": "STM32L4_TIM5_QE", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM5", "cond": "STM32L4_TIM5 && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM5 && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve TIM5 for use by QEncoder.", "children": [{"type": 27, "name": "STM32L4_TIM5_QEPSC", "value": "", "user_value": null, "dep": "n", "prompt": "TIM5 pulse prescaler", "cond": "STM32L4_TIM5_QE && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "STM32L4_TIM5_QE && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "This prescaler divides the number of recorded encoder pulses, limiting the count rate at the expense of resolution.\nReplaces the obscure \"output clock of TIM5.\" (CONFIG_TIM5_QECLKOUT)."}]}, {"type": 3, "name": "STM32L4_TIM8_QE", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM8", "cond": "STM32L4_TIM8 && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STM32L4_TIM8 && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Reserve TIM8 for use by QEncoder.", "children": [{"type": 27, "name": "STM32L4_TIM8_QEPSC", "value": "", "user_value": null, "dep": "n", "prompt": "TIM8 pulse prescaler", "cond": "STM32L4_TIM8_QE && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "1", "default": "1", "cond": "STM32L4_TIM8_QE && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "This prescaler divides the number of recorded encoder pulses, limiting the count rate at the expense of resolution.\nReplaces the obscure \"output clock of TIM8.\" (CONFIG_TIM8_QECLKOUT)."}]}, {"type": 3, "name": "STM32L4_QENCODER_FILTER", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable filtering on STM32 QEncoder input", "cond": "QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Input channel sampling frequency", "cond": "STM32L4_QENCODER_FILTER && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_QENCODER_SAMPLE_FDTS_4", "default": "n", "cond": "STM32L4_QENCODER_FILTER && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32L4_QENCODER_SAMPLE_FDTS", "value": "n", "user_value": null, "dep": "n", "prompt": "fDTS", "cond": "y"}, {"type": 3, "name": "STM32L4_QENCODER_SAMPLE_CKINT", "value": "n", "user_value": null, "dep": "n", "prompt": "fCK_INT", "cond": "y"}, {"type": 3, "name": "STM32L4_QENCODER_SAMPLE_FDTS_2", "value": "n", "user_value": null, "dep": "n", "prompt": "fDTS/2", "cond": "y"}, {"type": 3, "name": "STM32L4_QENCODER_SAMPLE_FDTS_4", "value": "n", "user_value": null, "dep": "n", "prompt": "fDTS/4", "cond": "y"}, {"type": 3, "name": "STM32L4_QENCODER_SAMPLE_FDTS_8", "value": "n", "user_value": null, "dep": "n", "prompt": "fDTS/8", "cond": "y"}, {"type": 3, "name": "STM32L4_QENCODER_SAMPLE_FDTS_16", "value": "n", "user_value": null, "dep": "n", "prompt": "fDTS/16", "cond": "y"}, {"type": 3, "name": "STM32L4_QENCODER_SAMPLE_FDTS_32", "value": "n", "user_value": null, "dep": "n", "prompt": "fDTS/32", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Input channel event count", "cond": "STM32L4_QENCODER_FILTER && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_QENCODER_SAMPLE_EVENT_6", "default": "n", "cond": "STM32L4_QENCODER_FILTER && QENCODER && (STM32L4_TIM1 || STM32L4_TIM2 || STM32L4_TIM3 || STM32L4_TIM4 || STM32L4_TIM5 || STM32L4_TIM8) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "children": [{"type": 3, "name": "STM32L4_QENCODER_SAMPLE_EVENT_1", "value": "n", "user_value": null, "dep": "n", "prompt": "1", "cond": "STM32L4_QENCODER_SAMPLE_FDTS && y"}, {"type": 3, "name": "STM32L4_QENCODER_SAMPLE_EVENT_2", "value": "n", "user_value": null, "dep": "n", "prompt": "2", "cond": "STM32L4_QENCODER_SAMPLE_CKINT && y"}, {"type": 3, "name": "STM32L4_QENCODER_SAMPLE_EVENT_4", "value": "n", "user_value": null, "dep": "n", "prompt": "4", "cond": "STM32L4_QENCODER_SAMPLE_CKINT && y"}, {"type": 3, "name": "STM32L4_QENCODER_SAMPLE_EVENT_5", "value": "n", "user_value": null, "dep": "n", "prompt": "5", "cond": "(STM32L4_QENCODER_SAMPLE_FDTS_16 || STM32L4_QENCODER_SAMPLE_FDTS_32) && y"}, {"type": 3, "name": "STM32L4_QENCODER_SAMPLE_EVENT_6", "value": "n", "user_value": null, "dep": "n", "prompt": "6", "cond": "!STM32L4_QENCODER_SAMPLE_FDTS && !STM32L4_QENCODER_SAMPLE_CKINT && y"}, {"type": 3, "name": "STM32L4_QENCODER_SAMPLE_EVENT_8", "value": "n", "user_value": null, "dep": "n", "prompt": "8", "cond": "!STM32L4_QENCODER_SAMPLE_FDTS && y"}]}]}]}, {"type": 31, "dep": "n", "prompt": "SAI Configuration", "cond": "STM32L4_SAI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Operation mode", "cond": "STM32L4_SAI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_SAI_DMA", "default": "n", "cond": "STM32L4_SAI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Select the operation mode the SAI driver should use.", "children": [{"type": 3, "name": "STM32L4_SAI_POLLING", "value": "n", "user_value": null, "dep": "n", "prompt": "Polling", "cond": "y", "help": "The SAI registers are polled for events."}, {"type": 3, "name": "STM32L4_SAI_INTERRUPTS", "value": "n", "user_value": null, "dep": "n", "prompt": "Interrupt", "cond": "y", "help": "Select to enable interrupt driven SAI support."}, {"type": 3, "name": "STM32L4_SAI_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA", "cond": "y", "help": "Use DMA to improve SAI transfer performance."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SAI1 synchronization enable", "cond": "STM32L4_SAI1_A && STM32L4_SAI1_B && STM32L4_SAI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_SAI1_BOTH_ASYNC", "default": "n", "cond": "STM32L4_SAI1_A && STM32L4_SAI1_B && STM32L4_SAI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Select the synchronization mode of the SAI sub-blocks", "children": [{"type": 3, "name": "STM32L4_SAI1_BOTH_ASYNC", "value": "n", "user_value": null, "dep": "n", "prompt": "Both asynchronous", "cond": "y"}, {"type": 3, "name": "STM32L4_SAI1_A_SYNC_WITH_B", "value": "n", "user_value": null, "dep": "n", "prompt": "Block A is synchronous with Block B", "cond": "y"}, {"type": 3, "name": "STM32L4_SAI1_B_SYNC_WITH_A", "value": "n", "user_value": null, "dep": "n", "prompt": "Block B is synchronous with Block A", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SAI2 synchronization enable", "cond": "STM32L4_SAI2_A && STM32L4_SAI2_B && STM32L4_SAI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "defaults": [{"name": "STM32L4_SAI2_BOTH_ASYNC", "default": "n", "cond": "STM32L4_SAI2_A && STM32L4_SAI2_B && STM32L4_SAI && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM"}], "help": "Select the synchronization mode of the SAI sub-blocks", "children": [{"type": 3, "name": "STM32L4_SAI2_BOTH_ASYNC", "value": "n", "user_value": null, "dep": "n", "prompt": "Both asynchronous", "cond": "y"}, {"type": 3, "name": "STM32L4_SAI2_A_SYNC_WITH_B", "value": "n", "user_value": null, "dep": "n", "prompt": "Block A is synchronous with Block B", "cond": "y"}, {"type": 3, "name": "STM32L4_SAI2_B_SYNC_WITH_A", "value": "n", "user_value": null, "dep": "n", "prompt": "Block B is synchronous with Block A", "cond": "y"}]}]}, {"type": 6, "dep": "n", "prompt": "STR71x Configuration Options", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}, {"type": 31, "dep": "n", "prompt": "STR71x Peripheral Selections", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "children": [{"type": 3, "name": "STR71X_ADC12", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC12", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}], "selects": [{"symbol": "ADC", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_BSPI0", "value": "n", "user_value": null, "dep": "n", "prompt": "BSPI0", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}], "selects": [{"symbol": "STR71X_GPIO0", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}, {"symbol": "SPI", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_BSPI1", "value": "n", "user_value": null, "dep": "n", "prompt": "BSPI1", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}], "selects": [{"symbol": "STR71X_GPIO0", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}, {"symbol": "SPI", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_CAN", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}], "selects": [{"symbol": "CAN", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_CKOUT", "value": "n", "user_value": null, "dep": "n", "prompt": "CKOUT", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_GPIO0", "value": "n", "user_value": null, "rev_dep": "(STR71X_BSPI0 && ARCH_CHIP_STR71X && ARCH_ARM) || (STR71X_BSPI1 && ARCH_CHIP_STR71X && ARCH_ARM) || (STR71X_UART0 && ARCH_CHIP_STR71X && ARCH_ARM) || (STR71X_UART1 && ARCH_CHIP_STR71X && ARCH_ARM) || (STR71X_UART2 && ARCH_CHIP_STR71X && ARCH_ARM) || (STR71X_UART3 && ARCH_CHIP_STR71X && ARCH_ARM)", "dep": "n", "prompt": "GPIO0", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_GPIO1", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIO1", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_GPIO2", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIO2", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_HDLC", "value": "n", "user_value": null, "dep": "n", "prompt": "HDLC", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_I2C0", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C0", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}], "selects": [{"symbol": "I2C", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_I2C1", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C1", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}], "selects": [{"symbol": "I2C", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_RTC", "value": "n", "user_value": null, "dep": "n", "prompt": "RTC", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}], "selects": [{"symbol": "RTC", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_TIM1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM1", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_TIM2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM2", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_TIM3", "value": "n", "user_value": null, "dep": "n", "prompt": "TIM3", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_UART0", "value": "n", "user_value": null, "dep": "n", "prompt": "UART0", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}], "selects": [{"symbol": "STR71X_GPIO0", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}, {"symbol": "UART0_SERIALDRIVER", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}], "selects": [{"symbol": "STR71X_GPIO0", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}, {"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_UART2", "value": "n", "user_value": null, "dep": "n", "prompt": "UART2", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}], "selects": [{"symbol": "STR71X_GPIO0", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}, {"symbol": "UART2_SERIALDRIVER", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_UART3", "value": "n", "user_value": null, "dep": "n", "prompt": "UART3", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}], "selects": [{"symbol": "STR71X_GPIO0", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}, {"symbol": "UART3_SERIALDRIVER", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_USB", "value": "n", "user_value": null, "dep": "n", "prompt": "USB", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}], "selects": [{"symbol": "USBDEV", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_XTI", "value": "n", "user_value": null, "dep": "n", "prompt": "XTI", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_DISABLE_PERIPHINIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable peripheral interrupts", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 31, "dep": "n", "prompt": "STR71x EMI Configuration", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "children": [{"type": 3, "name": "STR71X_BANK0", "value": "n", "user_value": null, "dep": "n", "prompt": "Bank 0", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}], "selects": [{"symbol": "STR71X_HAVE_EXTMEM", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}], "children": [{"type": 27, "name": "STR71X_BANK0_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Bank 0 size", "cond": "STR71X_BANK0 && ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "16", "default": "16", "cond": "STR71X_BANK0 && ARCH_CHIP_STR71X && ARCH_ARM"}], "help": "The only valid options are 8 and 16"}, {"type": 27, "name": "STR71X_BANK0_WAITSTATES", "value": "", "user_value": null, "dep": "n", "prompt": "Bank 0 wait states", "cond": "STR71X_BANK0 && ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STR71X_BANK0 && ARCH_CHIP_STR71X && ARCH_ARM"}], "ranges": [{"min": "0", "max": "15", "cond": "STR71X_BANK0 && ARCH_CHIP_STR71X && ARCH_ARM"}]}]}, {"type": 3, "name": "STR71X_BANK1", "value": "n", "user_value": null, "dep": "n", "prompt": "Bank 1", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}], "selects": [{"symbol": "STR71X_HAVE_EXTMEM", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}], "children": [{"type": 27, "name": "STR71X_BANK1_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Bank 1 size", "cond": "STR71X_BANK1 && ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "16", "default": "16", "cond": "STR71X_BANK1 && ARCH_CHIP_STR71X && ARCH_ARM"}], "help": "The only valid options are 8 and 16"}, {"type": 27, "name": "STR71X_BANK1_WAITSTATES", "value": "", "user_value": null, "dep": "n", "prompt": "Bank 1 wait states", "cond": "STR71X_BANK1 && ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STR71X_BANK1 && ARCH_CHIP_STR71X && ARCH_ARM"}], "ranges": [{"min": "0", "max": "15", "cond": "STR71X_BANK1 && ARCH_CHIP_STR71X && ARCH_ARM"}]}]}, {"type": 3, "name": "STR71X_BANK2", "value": "n", "user_value": null, "dep": "n", "prompt": "Bank 2", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}], "selects": [{"symbol": "STR71X_HAVE_EXTMEM", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}], "children": [{"type": 27, "name": "STR71X_BANK2_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Bank 2 size", "cond": "STR71X_BANK2 && ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "16", "default": "16", "cond": "STR71X_BANK2 && ARCH_CHIP_STR71X && ARCH_ARM"}], "help": "The only valid options are 8 and 16"}, {"type": 27, "name": "STR71X_BANK2_WAITSTATES", "value": "", "user_value": null, "dep": "n", "prompt": "Bank 2 wait states", "cond": "STR71X_BANK2 && ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STR71X_BANK2 && ARCH_CHIP_STR71X && ARCH_ARM"}], "ranges": [{"min": "0", "max": "15", "cond": "STR71X_BANK2 && ARCH_CHIP_STR71X && ARCH_ARM"}]}]}, {"type": 3, "name": "STR71X_BANK3", "value": "n", "user_value": null, "dep": "n", "prompt": "Bank 3", "cond": "ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}], "selects": [{"symbol": "STR71X_HAVE_EXTMEM", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}], "children": [{"type": 27, "name": "STR71X_BANK3_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Bank 3 size", "cond": "STR71X_BANK3 && ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "16", "default": "16", "cond": "STR71X_BANK3 && ARCH_CHIP_STR71X && ARCH_ARM"}], "help": "The only valid options are 8 and 16"}, {"type": 27, "name": "STR71X_BANK3_WAITSTATES", "value": "", "user_value": null, "dep": "n", "prompt": "Bank 3 wait states", "cond": "STR71X_BANK3 && ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "0", "default": "0", "cond": "STR71X_BANK3 && ARCH_CHIP_STR71X && ARCH_ARM"}], "ranges": [{"min": "0", "max": "15", "cond": "STR71X_BANK3 && ARCH_CHIP_STR71X && ARCH_ARM"}]}]}, {"type": 3, "name": "STR71X_HAVE_EXTMEM", "value": "n", "user_value": null, "rev_dep": "(STR71X_BANK0 && ARCH_CHIP_STR71X && ARCH_ARM) || (STR71X_BANK1 && ARCH_CHIP_STR71X && ARCH_ARM) || (STR71X_BANK2 && ARCH_CHIP_STR71X && ARCH_ARM) || (STR71X_BANK3 && ARCH_CHIP_STR71X && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STR71X && ARCH_ARM"}]}, {"type": 3, "name": "STR71X_BIGEXTMEM", "value": "n", "user_value": null, "dep": "n", "prompt": "Big external memory", "cond": "STR71X_HAVE_EXTMEM && ARCH_CHIP_STR71X && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "STR71X_HAVE_EXTMEM && ARCH_CHIP_STR71X && ARCH_ARM"}], "help": "Needed if the address space is > 1MB"}]}, {"type": 6, "dep": "n", "prompt": "TMS570 Configuration Options", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM"}, {"type": 3, "name": "TMS570_HAVE_SCI2", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_TMS570LS0714PZ && y) || (ARCH_CHIP_TMS570LS0714PGE && y) || (ARCH_CHIP_TMS570LS0714ZWT && y) || (ARCH_CHIP_TMS570LS1227ZWT && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "TI TMS570 Chip Selection", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM", "defaults": [{"name": "ARCH_CHIP_TMS570LS1227ZWT", "default": "n", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_TMS570LS0232PZ", "value": "n", "user_value": null, "dep": "n", "prompt": "TI TMS570LS0232PZ", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXR4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_TMS570LS0332PZ", "value": "n", "user_value": null, "dep": "n", "prompt": "TI TMS570LS0332PZ", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXR4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_TMS570LS0432PZ", "value": "n", "user_value": null, "dep": "n", "prompt": "TI TMS570LS0432PZ", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXR4", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_TMS570LS0714PZ", "value": "n", "user_value": null, "dep": "n", "prompt": "TI TMS570LS0714PZ", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXR4F", "cond": "y"}, {"symbol": "TMS570_HAVE_SCI2", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_TMS570LS0714PGE", "value": "n", "user_value": null, "dep": "n", "prompt": "TI TMS570LS0714PGE", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXR4F", "cond": "y"}, {"symbol": "TMS570_HAVE_SCI2", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_TMS570LS0714ZWT", "value": "n", "user_value": null, "dep": "n", "prompt": "TI TMS570LS0714ZWT", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXR4F", "cond": "y"}, {"symbol": "TMS570_HAVE_SCI2", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_TMS570LS1227ZWT", "value": "n", "user_value": null, "dep": "n", "prompt": "TI TMS570LS1227ZWT", "cond": "y", "selects": [{"symbol": "ARCH_CORTEXR4F", "cond": "y"}, {"symbol": "TMS570_HAVE_SCI2", "cond": "y"}]}]}, {"type": 31, "dep": "n", "prompt": "TMS570 Peripheral Support", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM", "children": [{"type": 3, "name": "TMS570_MIBADC", "value": "n", "user_value": null, "dep": "n", "prompt": "MibADC", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM"}]}, {"type": 3, "name": "TMS570_DCAN1", "value": "n", "user_value": null, "dep": "n", "prompt": "Controller Area Network 1 (DCAN1)", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM"}]}, {"type": 3, "name": "TMS570_DCAN2", "value": "n", "user_value": null, "dep": "n", "prompt": "Controller Area Network 1 (DCAN2)", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM"}]}, {"type": 3, "name": "TMS570_QEP", "value": "n", "user_value": null, "dep": "n", "prompt": "Enhanced Quadrature Encoder Unit (eQEP)", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM"}]}, {"type": 3, "name": "TMS570_N2HET", "value": "n", "user_value": null, "dep": "n", "prompt": "High-End Timer (N2HET)", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM"}]}, {"type": 3, "name": "TMS570_DCAN1", "value": "n", "user_value": null, "dep": "n", "prompt": "Controller Area Network 1 (D", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM"}]}, {"type": 3, "name": "TMS570_MIBASPI1", "value": "n", "user_value": null, "dep": "n", "prompt": "Multi-Buffered Serial Peripheral Interface Module (MibSPI1)", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM"}]}, {"type": 3, "name": "TMS570_SCI1", "value": "n", "user_value": null, "dep": "n", "prompt": "Serial Communication Interface 1 (SCI1)", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM"}], "selects": [{"symbol": "SCI1_SERIALDRIVER", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM"}]}, {"type": 3, "name": "TMS570_SCI2", "value": "n", "user_value": null, "dep": "n", "prompt": "Serial Communication Interface 2 (SCI2)", "cond": "TMS570_HAVE_SCI2 && ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "TMS570_HAVE_SCI2 && ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM"}], "selects": [{"symbol": "SCI1_SERIALDRIVER", "cond": "TMS570_HAVE_SCI2 && ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "TMS570_HAVE_SCI2 && ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM"}]}]}, {"type": 3, "name": "TMS570_GIO_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GIO pin interrupts", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM", "help": "Build in support for interrupting GIO pins"}, {"type": 3, "name": "TMS570_SELFTEST", "value": "n", "user_value": null, "dep": "n", "prompt": "Power-on Selftest", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM"}], "help": "Enable power-on self-test of memories and ECC logic."}, {"type": 6, "dep": "n", "prompt": "XMC4xxx Configuration Options", "cond": "ARCH_CHIP_XMC4 && ARCH_ARM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "XMC4xxx Chip Selection", "cond": "ARCH_CHIP_XMC4 && ARCH_CHIP_XMC4 && ARCH_ARM", "defaults": [{"name": "ARCH_CHIP_XMC4500", "default": "n", "cond": "ARCH_CHIP_XMC4 && ARCH_CHIP_XMC4 && ARCH_ARM"}], "children": [{"type": 3, "name": "ARCH_CHIP_XMC4500", "value": "n", "user_value": null, "dep": "n", "prompt": "XMC4500", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_XMC4700", "value": "n", "user_value": null, "dep": "n", "prompt": "XMC4700", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_XMC4800", "value": "n", "user_value": null, "dep": "n", "prompt": "XMC4800", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_FPU", "cond": "y"}]}]}, {"type": 3, "name": "XMC4_USIC", "value": "n", "user_value": null, "rev_dep": "(XMC4_USIC0 && ARCH_CHIP_XMC4 && ARCH_ARM) || (XMC4_USIC2 && ARCH_CHIP_XMC4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_XMC4 && ARCH_ARM"}]}, {"type": 3, "name": "XMC4_USCI_UART", "value": "n", "user_value": null, "rev_dep": "(XMC4_USIC0_CHAN0_ISUART && y) || (XMC4_USIC0_CHAN1_ISUART && y) || (XMC4_USIC1_CHAN0_ISUART && y) || (XMC4_USIC1_CHAN1_ISUART && y) || (XMC4_USIC2_CHAN0_ISUART && y) || (XMC4_USIC2_CHAN1_ISUART && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_XMC4 && ARCH_ARM"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "ARCH_CHIP_XMC4 && ARCH_ARM"}]}, {"type": 3, "name": "XMC4_USCI_LIN", "value": "n", "user_value": null, "rev_dep": "(XMC4_USIC0_CHAN0_ISLIN && y) || (XMC4_USIC0_CHAN1_ISLIN && y) || (XMC4_USIC1_CHAN0_ISLIN && y) || (XMC4_USIC1_CHAN1_ISLIN && y) || (XMC4_USIC2_CHAN0_ISLIN && y) || (XMC4_USIC2_CHAN1_ISLIN && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_XMC4 && ARCH_ARM"}]}, {"type": 3, "name": "XMC4_USCI_SPI", "value": "n", "user_value": null, "rev_dep": "(XMC4_USIC0_CHAN0_ISSPI && y) || (XMC4_USIC0_CHAN1_ISSPI && y) || (XMC4_USIC1_CHAN0_ISSPI && y) || (XMC4_USIC1_CHAN1_ISSPI && y) || (XMC4_USIC2_CHAN0_ISSPI && y) || (XMC4_USIC2_CHAN1_ISSPI && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_XMC4 && ARCH_ARM"}]}, {"type": 3, "name": "XMC4_USCI_I2C", "value": "n", "user_value": null, "rev_dep": "(XMC4_USIC0_CHAN0_ISI2C && y) || (XMC4_USIC0_CHAN1_ISI2C && y) || (XMC4_USIC1_CHAN0_ISI2C && y) || (XMC4_USIC1_CHAN1_ISI2C && y) || (XMC4_USIC2_CHAN0_ISI2C && y) || (XMC4_USIC2_CHAN1_ISI2C && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_XMC4 && ARCH_ARM"}]}, {"type": 3, "name": "XMC4_USCI_I2S", "value": "n", "user_value": null, "rev_dep": "(XMC4_USIC0_CHAN0_ISI2S && y) || (XMC4_USIC0_CHAN1_ISI2S && y) || (XMC4_USIC1_CHAN0_ISI2S && y) || (XMC4_USIC1_CHAN1_ISI2S && y) || (XMC4_USIC2_CHAN0_ISI2S && y) || (XMC4_USIC2_CHAN1_ISI2S && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_XMC4 && ARCH_ARM"}]}, {"type": 31, "dep": "n", "prompt": "XMC4xxx Peripheral Support", "cond": "ARCH_CHIP_XMC4 && ARCH_ARM", "children": [{"type": 3, "name": "XMC4_USIC0", "value": "n", "user_value": null, "dep": "n", "prompt": "USIC0", "cond": "ARCH_CHIP_XMC4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_XMC4 && ARCH_ARM"}], "selects": [{"symbol": "XMC4_USIC", "cond": "ARCH_CHIP_XMC4 && ARCH_ARM"}], "help": "Support USIC0"}, {"type": 3, "name": "XMC4_USIC1", "value": "n", "user_value": null, "dep": "n", "prompt": "USIC1", "cond": "ARCH_CHIP_XMC4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_XMC4 && ARCH_ARM"}], "help": "Support USIC1"}, {"type": 3, "name": "XMC4_USIC2", "value": "n", "user_value": null, "dep": "n", "prompt": "USIC2", "cond": "ARCH_CHIP_XMC4 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_XMC4 && ARCH_ARM"}], "selects": [{"symbol": "XMC4_USIC", "cond": "ARCH_CHIP_XMC4 && ARCH_ARM"}], "help": "Support USIC2"}]}, {"type": 31, "dep": "n", "prompt": "XMC4xxx USIC Configuration", "cond": "XMC4_USIC && ARCH_CHIP_XMC4 && ARCH_ARM", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "USIC0 Channel 0 Configuration", "cond": "XMC4_USIC0 && XMC4_USIC && ARCH_CHIP_XMC4 && ARCH_ARM", "defaults": [{"name": "XMC4_USIC0_CHAN0_ISUART", "default": "n", "cond": "XMC4_USIC0 && XMC4_USIC && ARCH_CHIP_XMC4 && ARCH_ARM"}], "children": [{"type": 3, "name": "XMC4_USIC0_CHAN0_NONE", "value": "n", "user_value": null, "dep": "n", "prompt": "Not used", "cond": "y", "help": "USIC0 Channel 0 will not be enabled"}, {"type": 3, "name": "XMC4_USIC0_CHAN0_ISUART", "value": "n", "user_value": null, "dep": "n", "prompt": "UART0", "cond": "y", "selects": [{"symbol": "UART0_SERIALDRIVER", "cond": "y"}, {"symbol": "XMC4_USCI_UART", "cond": "y"}], "help": "Configure USIC0 Channel 0 as a UART"}, {"type": 3, "name": "XMC4_USIC0_CHAN0_ISLIN", "value": "n", "user_value": null, "dep": "n", "prompt": "LIN", "cond": "y", "selects": [{"symbol": "XMC4_USCI_LIN", "cond": "y"}], "help": "Configure USIC0 Channel 0 as a LIN UART"}, {"type": 3, "name": "XMC4_USIC0_CHAN0_ISSPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "y", "selects": [{"symbol": "XMC4_USCI_SPI", "cond": "y"}], "help": "Configure USIC0 Channel 0 for SPI communications"}, {"type": 3, "name": "XMC4_USIC0_CHAN0_ISI2C", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C", "cond": "y", "selects": [{"symbol": "XMC4_USCI_I2C", "cond": "y"}], "help": "Configure USIC0 Channel 0 for I2C communications"}, {"type": 3, "name": "XMC4_USIC0_CHAN0_ISI2S", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S", "cond": "y", "selects": [{"symbol": "XMC4_USCI_I2S", "cond": "y"}], "help": "Configure USIC0 Channel 0 for I2S audio"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USIC0 Channel 1 Configuration", "cond": "XMC4_USIC0 && XMC4_USIC && ARCH_CHIP_XMC4 && ARCH_ARM", "defaults": [{"name": "XMC4_USIC0_CHAN1_ISUART", "default": "n", "cond": "XMC4_USIC0 && XMC4_USIC && ARCH_CHIP_XMC4 && ARCH_ARM"}], "children": [{"type": 3, "name": "XMC4_USIC0_CHAN1_NONE", "value": "n", "user_value": null, "dep": "n", "prompt": "Not used", "cond": "y", "help": "USIC0 Channel 1 will not be enabled"}, {"type": 3, "name": "XMC4_USIC0_CHAN1_ISUART", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "y", "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "y"}, {"symbol": "XMC4_USCI_UART", "cond": "y"}], "help": "Configure USIC0 Channel 1 as a UART"}, {"type": 3, "name": "XMC4_USIC0_CHAN1_ISLIN", "value": "n", "user_value": null, "dep": "n", "prompt": "LIN", "cond": "y", "selects": [{"symbol": "XMC4_USCI_LIN", "cond": "y"}], "help": "Configure USIC0 Channel 1 as a LIN UART"}, {"type": 3, "name": "XMC4_USIC0_CHAN1_ISSPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "y", "selects": [{"symbol": "XMC4_USCI_SPI", "cond": "y"}], "help": "Configure USIC0 Channel 1 for SPI communications"}, {"type": 3, "name": "XMC4_USIC0_CHAN1_ISI2C", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C", "cond": "y", "selects": [{"symbol": "XMC4_USCI_I2C", "cond": "y"}], "help": "Configure USIC0 Channel 1 for I2C communications"}, {"type": 3, "name": "XMC4_USIC0_CHAN1_ISI2S", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S", "cond": "y", "selects": [{"symbol": "XMC4_USCI_I2S", "cond": "y"}], "help": "Configure USIC0 Channel 1 for I2S audio"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USIC1 Channel 0 Configuration", "cond": "XMC4_USIC1 && XMC4_USIC && ARCH_CHIP_XMC4 && ARCH_ARM", "defaults": [{"name": "XMC4_USIC1_CHAN0_ISUART", "default": "n", "cond": "XMC4_USIC1 && XMC4_USIC && ARCH_CHIP_XMC4 && ARCH_ARM"}], "children": [{"type": 3, "name": "XMC4_USIC1_CHAN0_NONE", "value": "n", "user_value": null, "dep": "n", "prompt": "Not used", "cond": "y", "help": "USIC0 Channel 0 will not be enabled"}, {"type": 3, "name": "XMC4_USIC1_CHAN0_ISUART", "value": "n", "user_value": null, "dep": "n", "prompt": "UART2", "cond": "y", "selects": [{"symbol": "UART2_SERIALDRIVER", "cond": "y"}, {"symbol": "XMC4_USCI_UART", "cond": "y"}], "help": "Configure USIC1 Channel 0 as a UART"}, {"type": 3, "name": "XMC4_USIC1_CHAN0_ISLIN", "value": "n", "user_value": null, "dep": "n", "prompt": "LIN", "cond": "y", "selects": [{"symbol": "XMC4_USCI_LIN", "cond": "y"}], "help": "Configure USIC1 Channel 0 as a LIN UART"}, {"type": 3, "name": "XMC4_USIC1_CHAN0_ISSPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "y", "selects": [{"symbol": "XMC4_USCI_SPI", "cond": "y"}], "help": "Configure USIC1 Channel 0 for SPI communications"}, {"type": 3, "name": "XMC4_USIC1_CHAN0_ISI2C", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C", "cond": "y", "selects": [{"symbol": "XMC4_USCI_I2C", "cond": "y"}], "help": "Configure USIC1 Channel 0 for I2C communications"}, {"type": 3, "name": "XMC4_USIC1_CHAN0_ISI2S", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S", "cond": "y", "selects": [{"symbol": "XMC4_USCI_I2S", "cond": "y"}], "help": "Configure USIC1 Channel 0 for I2S audio"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USIC1 Channel 1 Configuration", "cond": "XMC4_USIC1 && XMC4_USIC && ARCH_CHIP_XMC4 && ARCH_ARM", "defaults": [{"name": "XMC4_USIC1_CHAN1_ISUART", "default": "n", "cond": "XMC4_USIC1 && XMC4_USIC && ARCH_CHIP_XMC4 && ARCH_ARM"}], "children": [{"type": 3, "name": "XMC4_USIC1_CHAN1_NONE", "value": "n", "user_value": null, "dep": "n", "prompt": "Not used", "cond": "y", "help": "USIC0 Channel 1 will not be enabled"}, {"type": 3, "name": "XMC4_USIC1_CHAN1_ISUART", "value": "n", "user_value": null, "dep": "n", "prompt": "UART3", "cond": "y", "selects": [{"symbol": "UART3_SERIALDRIVER", "cond": "y"}, {"symbol": "XMC4_USCI_UART", "cond": "y"}], "help": "Configure USIC1 Channel 1 as a UART"}, {"type": 3, "name": "XMC4_USIC1_CHAN1_ISLIN", "value": "n", "user_value": null, "dep": "n", "prompt": "LIN", "cond": "y", "selects": [{"symbol": "XMC4_USCI_LIN", "cond": "y"}], "help": "Configure USIC1 Channel 1 as a LIN UART"}, {"type": 3, "name": "XMC4_USIC1_CHAN1_ISSPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "y", "selects": [{"symbol": "XMC4_USCI_SPI", "cond": "y"}], "help": "Configure USIC1 Channel 1 for SPI communications"}, {"type": 3, "name": "XMC4_USIC1_CHAN1_ISI2C", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C", "cond": "y", "selects": [{"symbol": "XMC4_USCI_I2C", "cond": "y"}], "help": "Configure USIC1 Channel 1 for I2C communications"}, {"type": 3, "name": "XMC4_USIC1_CHAN1_ISI2S", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S", "cond": "y", "selects": [{"symbol": "XMC4_USCI_I2S", "cond": "y"}], "help": "Configure USIC1 Channel 1 for I2S audio"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USIC2 Channel 0 Configuration", "cond": "XMC4_USIC2 && XMC4_USIC && ARCH_CHIP_XMC4 && ARCH_ARM", "defaults": [{"name": "XMC4_USIC2_CHAN0_ISUART", "default": "n", "cond": "XMC4_USIC2 && XMC4_USIC && ARCH_CHIP_XMC4 && ARCH_ARM"}], "children": [{"type": 3, "name": "XMC4_USIC2_CHAN0_NONE", "value": "n", "user_value": null, "dep": "n", "prompt": "Not used", "cond": "y", "help": "USIC0 Channel 0 will not be enabled"}, {"type": 3, "name": "XMC4_USIC2_CHAN0_ISUART", "value": "n", "user_value": null, "dep": "n", "prompt": "UART4", "cond": "y", "selects": [{"symbol": "UART4_SERIALDRIVER", "cond": "y"}, {"symbol": "XMC4_USCI_UART", "cond": "y"}], "help": "Configure USIC2 Channel 0 as a UART"}, {"type": 3, "name": "XMC4_USIC2_CHAN0_ISLIN", "value": "n", "user_value": null, "dep": "n", "prompt": "LIN", "cond": "y", "selects": [{"symbol": "XMC4_USCI_LIN", "cond": "y"}], "help": "Configure USIC2 Channel 0 as a LIN UART"}, {"type": 3, "name": "XMC4_USIC2_CHAN0_ISSPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "y", "selects": [{"symbol": "XMC4_USCI_SPI", "cond": "y"}], "help": "Configure USIC2 Channel 0 for SPI communications"}, {"type": 3, "name": "XMC4_USIC2_CHAN0_ISI2C", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C", "cond": "y", "selects": [{"symbol": "XMC4_USCI_I2C", "cond": "y"}], "help": "Configure USIC2 Channel 0 for I2C communications"}, {"type": 3, "name": "XMC4_USIC2_CHAN0_ISI2S", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S", "cond": "y", "selects": [{"symbol": "XMC4_USCI_I2S", "cond": "y"}], "help": "Configure USIC2 Channel 0 for I2S audio"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USIC2 Channel 1 Configuration", "cond": "XMC4_USIC2 && XMC4_USIC && ARCH_CHIP_XMC4 && ARCH_ARM", "defaults": [{"name": "XMC4_USIC2_CHAN1_ISUART", "default": "n", "cond": "XMC4_USIC2 && XMC4_USIC && ARCH_CHIP_XMC4 && ARCH_ARM"}], "children": [{"type": 3, "name": "XMC4_USIC2_CHAN1_NONE", "value": "n", "user_value": null, "dep": "n", "prompt": "Not used", "cond": "y", "help": "USIC0 Channel 1 will not be enabled"}, {"type": 3, "name": "XMC4_USIC2_CHAN1_ISUART", "value": "n", "user_value": null, "dep": "n", "prompt": "UART5", "cond": "y", "selects": [{"symbol": "UART5_SERIALDRIVER", "cond": "y"}, {"symbol": "XMC4_USCI_UART", "cond": "y"}], "help": "Configure USIC2 Channel 1 as a UART"}, {"type": 3, "name": "XMC4_USIC2_CHAN1_ISLIN", "value": "n", "user_value": null, "dep": "n", "prompt": "LIN", "cond": "y", "selects": [{"symbol": "XMC4_USCI_LIN", "cond": "y"}], "help": "Configure USIC2 Channel 1 as a LIN UART"}, {"type": 3, "name": "XMC4_USIC2_CHAN1_ISSPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "y", "selects": [{"symbol": "XMC4_USCI_SPI", "cond": "y"}], "help": "Configure USIC2 Channel 1 for SPI communications"}, {"type": 3, "name": "XMC4_USIC2_CHAN1_ISI2C", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C", "cond": "y", "selects": [{"symbol": "XMC4_USCI_I2C", "cond": "y"}], "help": "Configure USIC2 Channel 1 for I2C communications"}, {"type": 3, "name": "XMC4_USIC2_CHAN1_ISI2S", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S", "cond": "y", "selects": [{"symbol": "XMC4_USCI_I2S", "cond": "y"}], "help": "Configure USIC2 Channel 1 for I2S audio"}]}]}, {"type": 6, "dep": "y", "prompt": "CXD56xx Configuration Options", "cond": "ARCH_CHIP_CXD56XX && ARCH_ARM"}, {"type": 3, "name": "CXD56_ARCH_OPTS", "value": "y", "user_value": 2, "dep": "y", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_CXD56XX && ARCH_ARM"}], "selects": [{"symbol": "ARCH_DMA", "cond": "ARCH_CHIP_CXD56XX && ARCH_ARM"}, {"symbol": "SDIO_DMA", "cond": "MMCSD && ARCH_CHIP_CXD56XX && ARCH_ARM"}]}, {"type": 31, "dep": "y", "prompt": "CXD56xx Peripheral Support", "cond": "ARCH_CHIP_CXD56XX && ARCH_ARM", "children": [{"type": 3, "name": "CXD56_UART1", "value": "y", "user_value": 2, "dep": "y", "prompt": "UART1", "cond": "ARCH_CHIP_CXD56XX && ARCH_ARM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_CXD56XX && ARCH_ARM"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_CXD56XX && ARCH_ARM"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_CXD56XX && ARCH_ARM"}], "help": "UART interface in the communication subsystem. This doesn't have any\nhardware flow control, and is mainly used for debug console."}, {"type": 3, "name": "CXD56_UART2", "value": "y", "user_value": 2, "dep": "y", "prompt": "UART2", "cond": "ARCH_CHIP_CXD56XX && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_CXD56XX && ARCH_ARM"}], "selects": [{"symbol": "UART2_SERIALDRIVER", "cond": "ARCH_CHIP_CXD56XX && ARCH_ARM"}], "help": "UART interface with hardware flow control in the application subsystem."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Atmel AVR chip selection", "cond": "ARCH_AVR", "defaults": [{"name": "ARCH_CHIP_AT32UC3B0256", "default": "n", "cond": "ARCH_AVR"}], "children": [{"type": 3, "name": "ARCH_CHIP_ATMEGA", "value": "n", "user_value": null, "dep": "n", "prompt": "ATMega family", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_AVR", "cond": "y"}, {"symbol": "MM_SMALL", "cond": "y"}], "help": "Atmel ATMega family of 8-bit AVRs."}, {"type": 3, "name": "ARCH_CHIP_AT90USB", "value": "n", "user_value": null, "dep": "n", "prompt": "AT90USB family", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_AVR", "cond": "y"}, {"symbol": "MM_SMALL", "cond": "y"}], "help": "Atmel AT90USB family of 8-bit AVRs."}, {"type": 3, "name": "ARCH_CHIP_AT32UC3", "value": "n", "user_value": null, "dep": "n", "prompt": "AVR32 AT32UC3* family", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_AVR32", "cond": "y"}], "help": "Atmel AT32UC3A/B/C family of 32-bit AVR32s."}]}, {"type": 3, "name": "ARCH_FAMILY_AVR", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_ATMEGA && y) || (ARCH_CHIP_AT90USB && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_AVR"}], "selects": [{"symbol": "ARCH_HAVE_STACKCHECK", "cond": "ARCH_AVR"}]}, {"type": 3, "name": "ARCH_FAMILY_AVR32", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_AT32UC3 && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_AVR"}]}, {"type": 47, "name": "ARCH_FAMILY", "value": "armv7-m", "user_value": "armv7-m", "dep": "n", "defaults": [{"name": "avr", "default": "avr", "cond": "ARCH_FAMILY_AVR && ARCH_AVR"}, {"name": "avr32", "default": "avr32", "cond": "ARCH_FAMILY_AVR32 && ARCH_AVR"}]}, {"type": 47, "name": "ARCH_CHIP", "value": "cxd56xx", "user_value": "cxd56xx", "dep": "n", "defaults": [{"name": "atmega", "default": "atmega", "cond": "ARCH_CHIP_ATMEGA && ARCH_AVR"}, {"name": "at90usb", "default": "at90usb", "cond": "ARCH_CHIP_AT90USB && ARCH_AVR"}, {"name": "at32uc3", "default": "at32uc3", "cond": "ARCH_CHIP_AT32UC3 && ARCH_AVR"}]}, {"type": 6, "dep": "n", "prompt": "AVR Configuration Options", "cond": "ARCH_FAMILY_AVR && ARCH_FAMILY_AVR && ARCH_AVR"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Toolchain", "cond": "ARCH_FAMILY_AVR && ARCH_FAMILY_AVR && ARCH_AVR", "defaults": [{"name": "AVR_WINAVR_TOOLCHAIN", "default": "n", "cond": "TOOLCHAIN_WINDOWS && ARCH_FAMILY_AVR && ARCH_FAMILY_AVR && ARCH_AVR"}, {"name": "AVR_BUILDROOT_TOOLCHAIN", "default": "n", "cond": "HOST_LINUX && ARCH_FAMILY_AVR && ARCH_FAMILY_AVR && ARCH_AVR"}, {"name": "AVR_CROSSPACK_TOOLCHAIN", "default": "n", "cond": "HOST_OSX && ARCH_FAMILY_AVR && ARCH_FAMILY_AVR && ARCH_AVR"}], "children": [{"type": 3, "name": "AVR_WINAVR_TOOLCHAIN", "value": "n", "user_value": null, "dep": "n", "prompt": "WinAVR", "cond": "TOOLCHAIN_WINDOWS && y", "help": "For Cygwin development environment on Windows machines, you\ncan use WinAVR: http://sourceforge.net/projects/winavr/files/\n\nWARNING: There is an incompatible version of cygwin.dll in\nthe WinAVR/bin directory! Make sure that the path to the\ncorrect cygwin.dll file precedes the path to the WinAVR\nbinaries!"}, {"type": 3, "name": "AVR_ATMEL_AVR_TOOLCHAIN", "value": "n", "user_value": null, "dep": "n", "prompt": "Atmel AVR Toolchain", "cond": "TOOLCHAIN_WINDOWS && y", "help": "Atmel provides GNU Toolchain for AVR development. It can\nbe obtained by installing Atmel Studio 6 and later or\nas standalone package from Atmel."}, {"type": 3, "name": "AVR_LINUXGCC_TOOLCHAIN", "value": "n", "user_value": null, "dep": "n", "prompt": "Linux GCC", "cond": "HOST_LINUX && y", "help": "For Linux, there are widely available avr-gcc packages. On\nUbuntu, use: sudo apt-get install gcc-avr gdb-avr avr-libc"}, {"type": 3, "name": "AVR_CROSSPACK_TOOLCHAIN", "value": "n", "user_value": null, "dep": "n", "prompt": "CrossPack-AVR", "cond": "HOST_OSX && y", "help": "For OS X, the AVR CrossPack toolchain is supported:\nhttp://www.obdev.at/products/crosspack/index.html"}, {"type": 3, "name": "AVR_BUILDROOT_TOOLCHAIN", "value": "n", "user_value": null, "dep": "n", "prompt": "Buildroot", "cond": "y", "help": "There is a DIY buildroot version for the AVR boards here:\nhttp://sourceforge.net/projects/nuttx/files/buildroot/. See\nthe following section for details on building this toolchain."}]}, {"type": 31, "dep": "n", "prompt": "Atmel AVR Toolchain options", "cond": "AVR_ATMEL_AVR_TOOLCHAIN && ARCH_FAMILY_AVR && ARCH_FAMILY_AVR && ARCH_AVR", "children": [{"type": 3, "name": "AVR_HAS_MEMX_PTR", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable in-flash static const stings", "cond": "AVR_ATMEL_AVR_TOOLCHAIN && AVR_ATMEL_AVR_TOOLCHAIN && ARCH_FAMILY_AVR && ARCH_FAMILY_AVR && ARCH_AVR", "defaults": [{"name": "y", "default": "y", "cond": "AVR_ATMEL_AVR_TOOLCHAIN && AVR_ATMEL_AVR_TOOLCHAIN && ARCH_FAMILY_AVR && ARCH_FAMILY_AVR && ARCH_AVR"}], "selects": [{"symbol": "ARCH_DEBUG_H", "cond": "AVR_ATMEL_AVR_TOOLCHAIN && AVR_ATMEL_AVR_TOOLCHAIN && ARCH_FAMILY_AVR && ARCH_FAMILY_AVR && ARCH_AVR"}], "help": "Enabling this option (recommended) will place all constant\nstrings used for debugging and assertion in program memory\nand allow the corresponding routines to get the strings\ndirectly from there. This will dramatically decrease amount\nof RAM needed to hold this static data."}]}, {"type": 6, "dep": "n", "prompt": "AT90USB Configuration Options", "cond": "ARCH_CHIP_AT90USB && ARCH_FAMILY_AVR && ARCH_AVR"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Atmel ATmega chip selection", "cond": "ARCH_CHIP_AT90USB && ARCH_FAMILY_AVR && ARCH_AVR", "defaults": [{"name": "ARCH_CHIP_AT90USB646", "default": "n", "cond": "ARCH_CHIP_AT90USB && ARCH_FAMILY_AVR && ARCH_AVR"}], "children": [{"type": 3, "name": "ARCH_CHIP_AT90USB646", "value": "n", "user_value": null, "dep": "n", "prompt": "AT90USB646", "cond": "y", "help": "Atmel AT90USB646 8-bit AVR."}, {"type": 3, "name": "ARCH_CHIP_AT90USB647", "value": "n", "user_value": null, "dep": "n", "prompt": "AT90USB647", "cond": "y", "help": "Atmel AT90USB647 8-bit AVR."}, {"type": 3, "name": "ARCH_CHIP_AT90USB1286", "value": "n", "user_value": null, "dep": "n", "prompt": "AT90USB1286", "cond": "y", "help": "Atmel AT90USB1286 8-bit AVR."}, {"type": 3, "name": "ARCH_CHIP_AT90USB1287", "value": "n", "user_value": null, "dep": "n", "prompt": "AT90USB1287", "cond": "y", "help": "Atmel AT90USB1287 8-bit AVR."}]}, {"type": 31, "dep": "n", "prompt": "AT90USB Peripheral Selections", "cond": "ARCH_CHIP_AT90USB && ARCH_FAMILY_AVR && ARCH_AVR", "children": [{"type": 3, "name": "AVR_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI", "cond": "ARCH_CHIP_AT90USB && ARCH_FAMILY_AVR && ARCH_AVR", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_AT90USB && ARCH_FAMILY_AVR && ARCH_AVR"}]}, {"type": 3, "name": "AVR_USART1", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1", "cond": "ARCH_CHIP_AT90USB && ARCH_FAMILY_AVR && ARCH_AVR", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_AT90USB && ARCH_FAMILY_AVR && ARCH_AVR"}], "selects": [{"symbol": "USART1_SERIALDRIVER", "cond": "ARCH_CHIP_AT90USB && ARCH_FAMILY_AVR && ARCH_AVR"}]}, {"type": 3, "name": "AVR_USBDEV", "value": "n", "user_value": null, "dep": "n", "prompt": "USB device", "cond": "ARCH_CHIP_AT90USB && ARCH_FAMILY_AVR && ARCH_AVR", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_AT90USB && ARCH_FAMILY_AVR && ARCH_AVR"}]}, {"type": 3, "name": "AVR_WDT", "value": "n", "user_value": null, "dep": "n", "prompt": "Watchdog", "cond": "ARCH_CHIP_AT90USB && ARCH_FAMILY_AVR && ARCH_AVR", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_AT90USB && ARCH_FAMILY_AVR && ARCH_AVR"}]}]}, {"type": 3, "name": "AVR_GPIOIRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIO pin interrupts", "cond": "ARCH_CHIP_AT90USB && ARCH_FAMILY_AVR && ARCH_AVR", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_AT90USB && ARCH_FAMILY_AVR && ARCH_AVR"}], "help": "Enable support for interrupting GPIO pins"}, {"type": 6, "dep": "n", "prompt": "ATMega Configuration Options", "cond": "ARCH_CHIP_ATMEGA && ARCH_FAMILY_AVR && ARCH_AVR"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Atmel ATmega chip selection", "cond": "ARCH_CHIP_ATMEGA && ARCH_FAMILY_AVR && ARCH_AVR", "defaults": [{"name": "ARCH_CHIP_ATMEGA128", "default": "n", "cond": "ARCH_CHIP_ATMEGA && ARCH_FAMILY_AVR && ARCH_AVR"}], "children": [{"type": 3, "name": "ARCH_CHIP_ATMEGA128", "value": "n", "user_value": null, "dep": "n", "prompt": "ATMega128", "cond": "y", "help": "Atmel ATMega128 8-bit AVR."}, {"type": 3, "name": "ARCH_CHIP_ATMEGA1284P", "value": "n", "user_value": null, "dep": "n", "prompt": "ATMega1284P", "cond": "y", "help": "Atmel ATMega1284P 8-bit AVR."}, {"type": 3, "name": "ARCH_CHIP_ATMEGA2560", "value": "n", "user_value": null, "dep": "n", "prompt": "ATMega2560", "cond": "y", "help": "Atmel ATMega2560 8-bit AVR."}]}, {"type": 31, "dep": "n", "prompt": "ATMega Peripheral Selections", "cond": "ARCH_CHIP_ATMEGA && ARCH_FAMILY_AVR && ARCH_AVR", "children": [{"type": 3, "name": "AVR_USART0", "value": "n", "user_value": null, "dep": "n", "prompt": "USART0", "cond": "ARCH_CHIP_ATMEGA && ARCH_FAMILY_AVR && ARCH_AVR", "selects": [{"symbol": "USART0_SERIALDRIVER", "cond": "ARCH_CHIP_ATMEGA && ARCH_FAMILY_AVR && ARCH_AVR"}]}, {"type": 3, "name": "AVR_USART1", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1", "cond": "ARCH_CHIP_ATMEGA && ARCH_FAMILY_AVR && ARCH_AVR", "selects": [{"symbol": "USART1_SERIALDRIVER", "cond": "ARCH_CHIP_ATMEGA && ARCH_FAMILY_AVR && ARCH_AVR"}]}]}, {"type": 31, "dep": "n", "prompt": "Low level USART driver options", "cond": "(AVR_USART0 || AVR_USART1) && ARCH_CHIP_ATMEGA && ARCH_FAMILY_AVR && ARCH_AVR", "children": [{"type": 3, "name": "SERIAL_TERMIOS", "value": "y", "user_value": 2, "dep": "n", "prompt": "Serial driver TERMIOS supported", "cond": "(AVR_USART0 || AVR_USART1) && (AVR_USART0 || AVR_USART1) && ARCH_CHIP_ATMEGA && ARCH_FAMILY_AVR && ARCH_AVR", "defaults": [{"name": "n", "default": "n", "cond": "(AVR_USART0 || AVR_USART1) && (AVR_USART0 || AVR_USART1) && ARCH_CHIP_ATMEGA && ARCH_FAMILY_AVR && ARCH_AVR"}], "help": "Serial driver supports termios.h interfaces (tcsetattr, tcflush, etc.).\nIf this is not defined, then the terminal settings (baud, parity, etc).\nare not configurable at runtime; serial streams cannot be flushed, etc.."}]}, {"type": 6, "dep": "n", "prompt": "AVR32 Configuration Options", "cond": "ARCH_FAMILY_AVR32 && ARCH_FAMILY_AVR32 && ARCH_AVR"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Toolchain", "cond": "ARCH_FAMILY_AVR32 && ARCH_FAMILY_AVR32 && ARCH_AVR", "defaults": [{"name": "AVR32_AVRTOOLSW", "default": "n", "cond": "TOOLCHAIN_WINDOWS && ARCH_FAMILY_AVR32 && ARCH_FAMILY_AVR32 && ARCH_AVR"}, {"name": "AVR32_AVRTOOLSL", "default": "n", "cond": "HOST_LINUX && ARCH_FAMILY_AVR32 && ARCH_FAMILY_AVR32 && ARCH_AVR"}], "children": [{"type": 3, "name": "AVR32_AVRTOOLSW", "value": "n", "user_value": null, "dep": "n", "prompt": "AVR tools for Windows", "cond": "TOOLCHAIN_WINDOWS && y"}, {"type": 3, "name": "AVR32_AVRTOOLSL", "value": "n", "user_value": null, "dep": "n", "prompt": "AVR tools for Linux", "cond": "HOST_LINUX && y"}]}, {"type": 6, "dep": "n", "prompt": "AT32U3 Configuration Options", "cond": "ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "AT32U3 Processor Selection", "cond": "ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR", "defaults": [{"name": "ARCH_CHIP_AT32UC3B0256", "default": "n", "cond": "ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR"}], "children": [{"type": 3, "name": "ARCH_CHIP_AT32UC3B064", "value": "n", "user_value": null, "dep": "n", "prompt": "AT32UC3B064", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_AT32UC3B", "cond": "y"}, {"symbol": "ARCH_CHIP_AT32UC3B0", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_AT32UC3B0128", "value": "n", "user_value": null, "dep": "n", "prompt": "AT32UC3B0128", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_AT32UC3B", "cond": "y"}, {"symbol": "ARCH_CHIP_AT32UC3B0", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_AT32UC3B0256", "value": "n", "user_value": null, "dep": "n", "prompt": "AT32UC3B0256", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_AT32UC3B", "cond": "y"}, {"symbol": "ARCH_CHIP_AT32UC3B0", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_AT32UC3B0512", "value": "n", "user_value": null, "dep": "n", "prompt": "AT32UC3B0512", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_AT32UC3B", "cond": "y"}, {"symbol": "ARCH_CHIP_AT32UC3B0", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_AT32UC3B164", "value": "n", "user_value": null, "dep": "n", "prompt": "AT32UC3B164", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_AT32UC3B", "cond": "y"}, {"symbol": "ARCH_CHIP_AT32UC3B1", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_AT32UC3B1128", "value": "n", "user_value": null, "dep": "n", "prompt": "AT32UC3B1128", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_AT32UC3B", "cond": "y"}, {"symbol": "ARCH_CHIP_AT32UC3B1", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_AT32UC3B1256", "value": "n", "user_value": null, "dep": "n", "prompt": "AT32UC3B1256", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_AT32UC3B", "cond": "y"}, {"symbol": "ARCH_CHIP_AT32UC3B1", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_AT32UC3B1512", "value": "n", "user_value": null, "dep": "n", "prompt": "AT32UC3B1512", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_AT32UC3B", "cond": "y"}, {"symbol": "ARCH_CHIP_AT32UC3B1", "cond": "y"}]}]}, {"type": 3, "name": "ARCH_CHIP_AT32UC3A", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR"}]}, {"type": 3, "name": "ARCH_CHIP_AT32UC3B", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_AT32UC3B064 && y) || (ARCH_CHIP_AT32UC3B0128 && y) || (ARCH_CHIP_AT32UC3B0256 && y) || (ARCH_CHIP_AT32UC3B0512 && y) || (ARCH_CHIP_AT32UC3B164 && y) || (ARCH_CHIP_AT32UC3B1128 && y) || (ARCH_CHIP_AT32UC3B1256 && y) || (ARCH_CHIP_AT32UC3B1512 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR"}]}, {"type": 3, "name": "ARCH_CHIP_AT32UC3B0", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_AT32UC3B064 && y) || (ARCH_CHIP_AT32UC3B0128 && y) || (ARCH_CHIP_AT32UC3B0256 && y) || (ARCH_CHIP_AT32UC3B0512 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR"}]}, {"type": 3, "name": "ARCH_CHIP_AT32UC3B1", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_AT32UC3B164 && y) || (ARCH_CHIP_AT32UC3B1128 && y) || (ARCH_CHIP_AT32UC3B1256 && y) || (ARCH_CHIP_AT32UC3B1512 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR"}]}, {"type": 31, "dep": "n", "prompt": "AT32U3 Peripheral Selections", "cond": "ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR", "children": [{"type": 3, "name": "AVR32_USART0", "value": "n", "user_value": null, "dep": "n", "prompt": "USART0", "cond": "ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR"}]}, {"type": 3, "name": "AVR32_USART1", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1", "cond": "ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR"}]}, {"type": 3, "name": "AVR32_USART2", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2", "cond": "ARCH_CHIP_AT32UC3B0 && ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_AT32UC3B0 && ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USART0 Function", "cond": "AVR32_USART0 && ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR", "defaults": [{"name": "AVR32_USART0_RS232", "default": "n", "cond": "AVR32_USART0 && ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR"}], "children": [{"type": 3, "name": "AVR32_USART0_IRDA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART0 is IRDA", "cond": "y"}, {"type": 3, "name": "AVR32_USART0_ISO786", "value": "n", "user_value": null, "dep": "n", "prompt": "USART0 is ISO786", "cond": "y"}, {"type": 3, "name": "AVR32_USART0_MAN", "value": "n", "user_value": null, "dep": "n", "prompt": "USART0 is Manchester", "cond": "y"}, {"type": 3, "name": "AVR32_USART0_MODEM", "value": "n", "user_value": null, "dep": "n", "prompt": "USART0 is Modem", "cond": "y"}, {"type": 3, "name": "AVR32_USART0_RS232", "value": "n", "user_value": null, "dep": "n", "prompt": "USART0 is RS-232", "cond": "y", "selects": [{"symbol": "USART0_SERIALDRIVER", "cond": "y"}]}, {"type": 3, "name": "AVR32_USART0_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "USART0 is RS-485", "cond": "y"}, {"type": 3, "name": "AVR32_USART0_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "USART0 is SPI", "cond": "y", "selects": [{"symbol": "SPI", "cond": "y"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USART1 Function", "cond": "AVR32_USART1 && ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR", "defaults": [{"name": "AVR32_USART1_RS232", "default": "n", "cond": "AVR32_USART1 && ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR"}], "children": [{"type": 3, "name": "AVR32_USART1_IRDA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1 is IRDA", "cond": "y"}, {"type": 3, "name": "AVR32_USART1_ISO786", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1 is ISO786", "cond": "y"}, {"type": 3, "name": "AVR32_USART1_MAN", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1 is Manchester", "cond": "y"}, {"type": 3, "name": "AVR32_USART1_MODEM", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1 is Modem", "cond": "y"}, {"type": 3, "name": "AVR32_USART1_RS232", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1 is RS-232", "cond": "y", "selects": [{"symbol": "USART1_SERIALDRIVER", "cond": "y"}]}, {"type": 3, "name": "AVR32_USART1_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1 is RS-485", "cond": "y"}, {"type": 3, "name": "AVR32_USART1_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1 is SPI", "cond": "y", "selects": [{"symbol": "SPI", "cond": "y"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USART2 Function", "cond": "AVR32_USART2 && ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR", "defaults": [{"name": "AVR32_USART2_RS232", "default": "n", "cond": "AVR32_USART2 && ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR"}], "children": [{"type": 3, "name": "AVR32_USART2_IRDA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2 is IRDA", "cond": "y"}, {"type": 3, "name": "AVR32_USART2_ISO786", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2 is ISO786", "cond": "y"}, {"type": 3, "name": "AVR32_USART2_MAN", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2 is Manchester", "cond": "y"}, {"type": 3, "name": "AVR32_USART2_MODEM", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2 is Modem", "cond": "y"}, {"type": 3, "name": "AVR32_USART2_RS232", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2 is RS-232", "cond": "y", "selects": [{"symbol": "USART2_SERIALDRIVER", "cond": "y"}]}, {"type": 3, "name": "AVR32_USART2_RS485", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2 is RS-485", "cond": "y"}, {"type": 3, "name": "AVR32_USART2_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2 is SPI", "cond": "y", "selects": [{"symbol": "SPI", "cond": "y"}]}]}, {"type": 3, "name": "AVR32_GPIOIRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIO IRQ support", "cond": "ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR"}], "children": [{"type": 24, "name": "AVR32_GPIOIRQSETA", "value": "", "user_value": null, "dep": "n", "prompt": "GPIO IRQ set A", "cond": "AVR32_GPIOIRQ && ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR", "defaults": [{"name": "0x0", "default": "0x0", "cond": "AVR32_GPIOIRQ && ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR"}]}, {"type": 24, "name": "AVR32_GPIOIRQSETB", "value": "", "user_value": null, "dep": "n", "prompt": "GPIO IRQ set B", "cond": "AVR32_GPIOIRQ && ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR", "defaults": [{"name": "0x0", "default": "0x0", "cond": "AVR32_GPIOIRQ && ARCH_CHIP_AT32UC3 && ARCH_FAMILY_AVR32 && ARCH_AVR"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "HC chip selection", "cond": "ARCH_HC", "defaults": [{"name": "ARCH_CHIP_MCS92S12NEC64", "default": "n", "cond": "ARCH_HC"}], "children": [{"type": 3, "name": "ARCH_CHIP_MCS92S12NEC64", "value": "n", "user_value": null, "dep": "n", "prompt": "MCS92S12NEC64", "cond": "y", "selects": [{"symbol": "ARCH_HSC12", "cond": "y"}, {"symbol": "MM_SMALL", "cond": "y"}], "help": "Motorola/Freescale MCS92S12NEC64 (M9S12)"}]}, {"type": 3, "name": "ARCH_HSC12", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_MCS92S12NEC64 && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HC"}]}, {"type": 47, "name": "ARCH_CHIP", "value": "cxd56xx", "user_value": "cxd56xx", "dep": "n", "defaults": [{"name": "m9s12", "default": "m9s12", "cond": "ARCH_CHIP_MCS92S12NEC64 && ARCH_HC"}]}, {"type": 6, "dep": "n", "prompt": "M9S12 Configuration Options", "cond": "ARCH_HSC12 && ARCH_HC"}, {"type": 31, "dep": "n", "prompt": "M9S12 Peripheral Selection", "cond": "ARCH_HSC12 && ARCH_HC", "children": [{"type": 3, "name": "HCS12_SCI0", "value": "n", "user_value": null, "dep": "n", "prompt": "SCI0", "cond": "ARCH_HSC12 && ARCH_HC", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HSC12 && ARCH_HC"}], "selects": [{"symbol": "SCI0_SERIALDRIVER", "cond": "ARCH_HSC12 && ARCH_HC"}]}, {"type": 3, "name": "HCS12_SCI1", "value": "n", "user_value": null, "dep": "n", "prompt": "SCI1", "cond": "ARCH_HSC12 && ARCH_HC", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HSC12 && ARCH_HC"}], "selects": [{"symbol": "SCI1_SERIALDRIVER", "cond": "ARCH_HSC12 && ARCH_HC"}]}]}, {"type": 31, "dep": "n", "prompt": "HSC12 Build Options", "cond": "ARCH_HSC12 && ARCH_HC", "children": [{"type": 3, "name": "HCS12_SERIALMON", "value": "n", "user_value": null, "dep": "n", "prompt": "Freescale serial bootloader", "cond": "ARCH_HSC12 && ARCH_HC", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HSC12 && ARCH_HC"}], "help": "Indicates that the target systems uses the Freescale serial\nbootloader."}, {"type": 3, "name": "HCS12_NONBANKED", "value": "n", "user_value": null, "dep": "n", "prompt": "Non-banked", "cond": "ARCH_HSC12 && ARCH_HC", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HSC12 && ARCH_HC"}], "help": "Indicates that the target systems does not support banking.\nOnly short calls are made; one fixed page is presented in the\npaging window.  Only 48Kb of FLASH is usable in this configuration:\npages 3e, 3d, then 3f will appear as a contiguous address space\nin memory."}]}, {"type": 3, "name": "HCS12_GPIOIRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIO interrupt support", "cond": "EXPERIMENTAL && ARCH_HSC12 && ARCH_HC", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_HSC12 && ARCH_HC"}], "help": "Enable support for GPIO interrupts (not implemented)"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "MIPS chip selection", "cond": "ARCH_MIPS", "defaults": [{"name": "ARCH_CHIP_PIC32MX", "default": "n", "cond": "ARCH_MIPS"}], "children": [{"type": 3, "name": "ARCH_CHIP_PIC32MX", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX", "cond": "y", "selects": [{"symbol": "ARCH_MIPS32", "cond": "y"}, {"symbol": "ARCH_HAVE_IRQPRIO", "cond": "y"}, {"symbol": "ARCH_VECNOTIRQ", "cond": "y"}, {"symbol": "ARCH_HAVE_RAMFUNCS", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}], "help": "Microchip PIC32MX (MIPS32)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MZ", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MZ", "cond": "y", "selects": [{"symbol": "ARCH_MIPS32", "cond": "y"}, {"symbol": "ARCH_HAVE_IRQPRIO", "cond": "y"}, {"symbol": "ARCH_VECNOTIRQ", "cond": "y"}, {"symbol": "ARCH_HAVE_RAMFUNCS", "cond": "y"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "y"}], "help": "Microchip PIC32MZ (MIPS32)"}]}, {"type": 3, "name": "ARCH_MIPS32", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_PIC32MX && y) || (ARCH_CHIP_PIC32MZ && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_MIPS"}], "selects": [{"symbol": "ARCH_HAVE_VFORK", "cond": "ARCH_MIPS"}]}, {"type": 3, "name": "ARCH_MIPS_24KC", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_PIC32MX1 && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (ARCH_CHIP_PIC32MX2 && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (ARCH_CHIP_PIC32MX3 && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (ARCH_CHIP_PIC32MX4 && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (ARCH_CHIP_PIC32MX5 && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (ARCH_CHIP_PIC32MX6 && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (ARCH_CHIP_PIC32MX7 && ARCH_CHIP_PIC32MX && ARCH_MIPS)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_MIPS"}]}, {"type": 3, "name": "ARCH_MIPS_M14K", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_PIC32MZEC && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_MIPS"}], "selects": [{"symbol": "ARCH_HAVE_MICROMIPS", "cond": "ARCH_MIPS"}]}, {"type": 3, "name": "ARCH_HAVE_MICROMIPS", "value": "n", "user_value": null, "rev_dep": "ARCH_MIPS_M14K && ARCH_MIPS", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_MIPS"}]}, {"type": 3, "name": "MIPS_MICROMIPS", "value": "n", "user_value": null, "dep": "n", "prompt": "Use microMIPS ISA", "cond": "ARCH_HAVE_MICROMIPS && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_MICROMIPS && ARCH_MIPS"}], "help": "The processor supports both the MIPS32 ISA and the microMIPS ISA.\nIf this option is selected, the microMIPS ISA will be used.\nOtherwise, the MIPS32 ISA will be used."}, {"type": 47, "name": "ARCH_FAMILY", "value": "armv7-m", "user_value": "armv7-m", "dep": "n", "defaults": [{"name": "mips32", "default": "mips32", "cond": "ARCH_MIPS32 && ARCH_MIPS"}]}, {"type": 47, "name": "ARCH_CHIP", "value": "cxd56xx", "user_value": "cxd56xx", "dep": "n", "defaults": [{"name": "pic32mx", "default": "pic32mx", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}, {"name": "pic32mz", "default": "pic32mz", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 6, "dep": "n", "prompt": "MIPS32 Configuration Options", "cond": "ARCH_MIPS32 && ARCH_MIPS"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Toolchain Selection", "cond": "ARCH_MIPS32 && ARCH_MIPS", "defaults": [{"name": "MIPS32_TOOLCHAIN_MICROCHIPW_LITE", "default": "n", "cond": "TOOLCHAIN_WINDOWS && ARCH_MIPS32 && ARCH_MIPS"}, {"name": "MIPS32_TOOLCHAIN_GNU_ELF", "default": "n", "cond": "!TOOLCHAIN_WINDOWS && ARCH_MIPS32 && ARCH_MIPS"}], "children": [{"type": 3, "name": "MIPS32_TOOLCHAIN_GNU_ELF", "value": "n", "user_value": null, "dep": "n", "prompt": "Generic GNU ELF toolchain", "cond": "y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "y"}], "help": "This option should work for any modern GNU toolchain (GCC 4.5 or newer)\nconfigured for mips32-elf."}, {"type": 3, "name": "MIPS32_TOOLCHAIN_MICROCHIPL_XC32", "value": "n", "user_value": null, "dep": "n", "prompt": "Microchip XC32 toolchain under Linux", "cond": "HOST_LINUX && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "HOST_LINUX && y"}]}, {"type": 3, "name": "MIPS32_TOOLCHAIN_MICROCHIPL", "value": "n", "user_value": null, "dep": "n", "prompt": "Microchip C32 toolchain under Linux", "cond": "HOST_LINUX && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "HOST_LINUX && y"}]}, {"type": 3, "name": "MIPS32_TOOLCHAIN_MICROCHIPL_LITE", "value": "n", "user_value": null, "dep": "n", "prompt": "Microchip C32 toolchain under Linux (Lite edition)", "cond": "HOST_LINUX && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "HOST_LINUX && y"}]}, {"type": 3, "name": "MIPS32_TOOLCHAIN_MICROCHIPW_XC32", "value": "n", "user_value": null, "dep": "n", "prompt": "Microchip XC32 toolchain under Windows", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}]}, {"type": 3, "name": "MIPS32_TOOLCHAIN_MICROCHIPW", "value": "n", "user_value": null, "dep": "n", "prompt": "Microchip C32 toolchain under Windows", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}]}, {"type": 3, "name": "MIPS32_TOOLCHAIN_MICROCHIPW_LITE", "value": "n", "user_value": null, "dep": "n", "prompt": "Microchip C32 toolchain under Windows (Lite edition)", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}]}, {"type": 3, "name": "MIPS32_TOOLCHAIN_MICROCHIPOPENL", "value": "n", "user_value": null, "dep": "n", "prompt": "microchipOpen toolchain under Linux", "cond": "HOST_LINUX && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "HOST_LINUX && y"}]}, {"type": 3, "name": "MIPS32_TOOLCHAIN_PINGUINOW", "value": "n", "user_value": null, "dep": "n", "prompt": "Pinguino mips-elf toolchain under Windows", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}]}, {"type": 3, "name": "MIPS32_TOOLCHAIN_PINGUINOL", "value": "n", "user_value": null, "dep": "n", "prompt": "Pinguino mips-elf toolchain under OS X or Linux", "cond": "(HOST_LINUX || HOST_OSX) && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "(HOST_LINUX || HOST_OSX) && y"}]}]}, {"type": 3, "name": "MIPS32_TOOLCHAIN_MICROCHIP_XC32_LICENSED", "value": "n", "user_value": null, "dep": "n", "prompt": "Licensed Microchip XC32 toolchain", "cond": "(MIPS32_TOOLCHAIN_MICROCHIPL_XC32 || MIPS32_TOOLCHAIN_MICROCHIPW_XC32) && ARCH_MIPS32 && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "(MIPS32_TOOLCHAIN_MICROCHIPL_XC32 || MIPS32_TOOLCHAIN_MICROCHIPW_XC32) && ARCH_MIPS32 && ARCH_MIPS"}], "help": "The free, unlicensed XC32 compiler will not support either\noptimization or the microMIPs ISA.  If you are using a licensed,\nXC32 compiler then select this option so that the build system will\nsuppport higher levels of optimization."}, {"type": 3, "name": "MIPS32_FRAMEPOINTER", "value": "n", "user_value": null, "dep": "n", "prompt": "ABI Uses Frame Pointer", "cond": "ARCH_HAVE_VFORK && ARCH_MIPS32 && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_VFORK && ARCH_MIPS32 && ARCH_MIPS"}], "help": "Register r30 may be a frame pointer in some ABIs.  Or may just be\nsaved register s8.  It makes a difference for vfork handling."}, {"type": 6, "dep": "n", "prompt": "PIC32MX Configuration Options", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "PIC32MX chip selection", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "ARCH_CHIP_PIC32MX460F512L", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "children": [{"type": 3, "name": "ARCH_CHIP_PIC32MX110F016B", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX110F016B", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX1", "cond": "y"}], "help": "Microchip PIC32MX110F016B (MPS32 24KC)\nARCH_CHIP_PIC32MX1"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX110F016C", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX110F016C", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX1", "cond": "y"}], "help": "Microchip PIC32MX110F016C (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX110F016D", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX110F016D", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX1", "cond": "y"}], "help": "Microchip PIC32MX110F016D (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX120F032B", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX120F032B", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX1", "cond": "y"}], "help": "Microchip PIC32MX120F032B (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX120F032C", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX120F032C", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX1", "cond": "y"}], "help": "Microchip PIC32MX120F032C (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX120F032D", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX120F032D", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX1", "cond": "y"}], "help": "Microchip PIC32MX120F032D (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX130F064B", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX130F064B", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX1", "cond": "y"}], "help": "Microchip PIC32MX130F064B (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX130F064C", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX130F064C", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX1", "cond": "y"}], "help": "Microchip PIC32MX130F064C (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX130F064D", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX130F064D", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX1", "cond": "y"}], "help": "Microchip PIC32MX130F064D (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX150F128B", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX150F128B", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX1", "cond": "y"}], "help": "Microchip PIC32MX150F128B (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX150F128C", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX150F128C", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX1", "cond": "y"}], "help": "Microchip PIC32MX150F128C (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX150F128D", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX150F128D", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX1", "cond": "y"}], "help": "Microchip PIC32MX150F128D (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX210F016B", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX210F016B", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX2", "cond": "y"}], "help": "Microchip PIC32MX210F016B (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX210F016C", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX210F016C", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX2", "cond": "y"}], "help": "Microchip PIC32MX210F016C (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX210F016D", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX210F016D", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX2", "cond": "y"}], "help": "Microchip PIC32MX210F016D (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX220F032B", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX220F032B", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX2", "cond": "y"}], "help": "Microchip PIC32MX220F032B (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX220F032C", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX220F032C", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX2", "cond": "y"}], "help": "Microchip PIC32MX220F032C (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX220F032D", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX220F032D", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX2", "cond": "y"}], "help": "Microchip PIC32MX220F032D (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX230F064B", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX230F064B", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX2", "cond": "y"}], "help": "Microchip PIC32MX230F064B (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX230F064C", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX230F064C", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX2", "cond": "y"}], "help": "Microchip PIC32MX230F064C (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX230F064D", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX230F064D", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX2", "cond": "y"}], "help": "Microchip PIC32MX230F064D (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX250F128B", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX250F128B", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX2", "cond": "y"}], "help": "Microchip PIC32MX250F128B (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX250F128C", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX250F128C", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX2", "cond": "y"}], "help": "Microchip PIC32MX250F128C (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX250F128D", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX250F128D", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX2", "cond": "y"}], "help": "Microchip PIC32MX250F128D (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX320F032H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX320F032H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX3", "cond": "y"}], "help": "Microchip PIC32MX320F032H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX320F064H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX320F064H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX3", "cond": "y"}], "help": "Microchip PIC32MX320F064H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX320F128H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX320F128H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX3", "cond": "y"}], "help": "Microchip PIC32MX320F128H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX320F128L", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX320F128L", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX3", "cond": "y"}], "help": "Microchip PIC32MX320F128L (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX340F128H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX340F128H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX3", "cond": "y"}], "help": "Microchip PIC32MX340F128H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX340F256H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX340F256H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX3", "cond": "y"}], "help": "Microchip PIC32MX340F256H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX340F512H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX340F512H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX3", "cond": "y"}], "help": "Microchip PIC32MX340F512H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX340F128L", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX340F128L", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX3", "cond": "y"}], "help": "Microchip PIC32MX340F128L (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX360F256L", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX360F256L", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX3", "cond": "y"}], "help": "Microchip PIC32MX360F256L (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX360F512L", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX360F512L", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX3", "cond": "y"}], "help": "Microchip PIC32MX360F512L (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX420F032H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX420F032H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX4", "cond": "y"}], "help": "Microchip PIC32MX420F032H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX440F128H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX440F128H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX4", "cond": "y"}], "help": "Microchip PIC32MX440F128H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX440F128L", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX440F128L", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX4", "cond": "y"}], "help": "Microchip PIC32MX440F128L (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX440F256H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX440F256H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX4", "cond": "y"}], "help": "Microchip PIC32MX440F256H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX440F512H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX440F512H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX4", "cond": "y"}], "help": "Microchip PIC32MX440F512H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX460F256L", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX460F256L", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX4", "cond": "y"}], "help": "Microchip PIC32MX460F256L (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX460F512L", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX460F512L", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX4", "cond": "y"}], "help": "Microchip PIC32MX460F512L (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX534F064H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX534F064H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX5", "cond": "y"}], "help": "Microchip PIC32MX534F064H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX534F064L", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX534F064L", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX5", "cond": "y"}], "help": "Microchip PIC32MX534F064L (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX564F064H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX564F064H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX5", "cond": "y"}], "help": "Microchip PIC32MX564F064H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX564F064L", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX564F064L", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX5", "cond": "y"}], "help": "Microchip PIC32MX564F064L (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX564F128H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX564F128H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX5", "cond": "y"}], "help": "Microchip PIC32MX564F128H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX564F128L", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX564F128L", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX5", "cond": "y"}], "help": "Microchip PIC32MX564F128L (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX575F256H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX575F256H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX5", "cond": "y"}], "help": "Microchip PIC32MX575F256H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX575F256L", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX575F256L", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX5", "cond": "y"}], "help": "Microchip PIC32MX575F256L (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX575F512H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX575F512H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX5", "cond": "y"}], "help": "Microchip PIC32MX575F512H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX575F512L", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX575F512L", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX5", "cond": "y"}], "help": "Microchip PIC32MX575F512L (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX664F064H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX664F064H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX6", "cond": "y"}], "help": "Microchip PIC32MX664F064H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX664F064L", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX664F064L", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX6", "cond": "y"}], "help": "Microchip PIC32MX664F064L (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX664F128H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX664F128H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX6", "cond": "y"}], "help": "Microchip PIC32MX664F128H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX664F128L", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX664F128L", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX6", "cond": "y"}], "help": "Microchip PIC32MX664F128L (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX675F256H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX675F256H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX6", "cond": "y"}], "help": "Microchip PIC32MX675F256H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX675F256L", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX675F256L", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX6", "cond": "y"}], "help": "Microchip PIC32MX675F256L (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX675F512H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX675F512H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX6", "cond": "y"}], "help": "Microchip PIC32MX675F512H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX675F512L", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX675F512L", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX6", "cond": "y"}], "help": "Microchip PIC32MX675F512L (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX695F512H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX695F512H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX6", "cond": "y"}], "help": "Microchip PIC32MX695F512H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX695F512L", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX695F512L", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX6", "cond": "y"}], "help": "Microchip PIC32MX695F512L (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX764F128H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX764F128H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX7", "cond": "y"}], "help": "Microchip PIC32MX764F128H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX764F128L", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX764F128L", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX7", "cond": "y"}], "help": "Microchip PIC32MX764F128L (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX775F256H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX775F256H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX7", "cond": "y"}], "help": "Microchip PIC32MX775F256H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX775F256L", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX775F256L", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX7", "cond": "y"}], "help": "Microchip PIC32MX775F256L (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX775F512H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX775F512H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX7", "cond": "y"}], "help": "Microchip PIC32MX775F512H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX775F512L", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX775F512L", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX7", "cond": "y"}], "help": "Microchip PIC32MX775F512L (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX795F512H", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX795F512H", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX7", "cond": "y"}], "help": "Microchip PIC32MX795F512H (MPS32 24KC)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MX795F512L", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MX795F512L", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MX7", "cond": "y"}], "help": "Microchip PIC32MX795F512L (MPS32 24KC)"}]}, {"type": 3, "name": "ARCH_CHIP_PIC32MX1", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_PIC32MX110F016B && y) || (ARCH_CHIP_PIC32MX110F016C && y) || (ARCH_CHIP_PIC32MX110F016D && y) || (ARCH_CHIP_PIC32MX120F032B && y) || (ARCH_CHIP_PIC32MX120F032C && y) || (ARCH_CHIP_PIC32MX120F032D && y) || (ARCH_CHIP_PIC32MX130F064B && y) || (ARCH_CHIP_PIC32MX130F064C && y) || (ARCH_CHIP_PIC32MX130F064D && y) || (ARCH_CHIP_PIC32MX150F128B && y) || (ARCH_CHIP_PIC32MX150F128C && y) || (ARCH_CHIP_PIC32MX150F128D && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "selects": [{"symbol": "ARCH_MIPS_24KC", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "ARCH_CHIP_PIC32MX2", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_PIC32MX210F016B && y) || (ARCH_CHIP_PIC32MX210F016C && y) || (ARCH_CHIP_PIC32MX210F016D && y) || (ARCH_CHIP_PIC32MX220F032B && y) || (ARCH_CHIP_PIC32MX220F032C && y) || (ARCH_CHIP_PIC32MX220F032D && y) || (ARCH_CHIP_PIC32MX230F064B && y) || (ARCH_CHIP_PIC32MX230F064C && y) || (ARCH_CHIP_PIC32MX230F064D && y) || (ARCH_CHIP_PIC32MX250F128B && y) || (ARCH_CHIP_PIC32MX250F128C && y) || (ARCH_CHIP_PIC32MX250F128D && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "selects": [{"symbol": "ARCH_MIPS_24KC", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "ARCH_CHIP_PIC32MX3", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_PIC32MX320F032H && y) || (ARCH_CHIP_PIC32MX320F064H && y) || (ARCH_CHIP_PIC32MX320F128H && y) || (ARCH_CHIP_PIC32MX320F128L && y) || (ARCH_CHIP_PIC32MX340F128H && y) || (ARCH_CHIP_PIC32MX340F256H && y) || (ARCH_CHIP_PIC32MX340F512H && y) || (ARCH_CHIP_PIC32MX340F128L && y) || (ARCH_CHIP_PIC32MX360F256L && y) || (ARCH_CHIP_PIC32MX360F512L && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "selects": [{"symbol": "ARCH_MIPS_24KC", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "ARCH_CHIP_PIC32MX4", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_PIC32MX420F032H && y) || (ARCH_CHIP_PIC32MX440F128H && y) || (ARCH_CHIP_PIC32MX440F128L && y) || (ARCH_CHIP_PIC32MX440F256H && y) || (ARCH_CHIP_PIC32MX440F512H && y) || (ARCH_CHIP_PIC32MX460F256L && y) || (ARCH_CHIP_PIC32MX460F512L && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "selects": [{"symbol": "ARCH_MIPS_24KC", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "ARCH_CHIP_PIC32MX5", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_PIC32MX534F064H && y) || (ARCH_CHIP_PIC32MX534F064L && y) || (ARCH_CHIP_PIC32MX564F064H && y) || (ARCH_CHIP_PIC32MX564F064L && y) || (ARCH_CHIP_PIC32MX564F128H && y) || (ARCH_CHIP_PIC32MX564F128L && y) || (ARCH_CHIP_PIC32MX575F256H && y) || (ARCH_CHIP_PIC32MX575F256L && y) || (ARCH_CHIP_PIC32MX575F512H && y) || (ARCH_CHIP_PIC32MX575F512L && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "selects": [{"symbol": "ARCH_MIPS_24KC", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "ARCH_CHIP_PIC32MX6", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_PIC32MX664F064H && y) || (ARCH_CHIP_PIC32MX664F064L && y) || (ARCH_CHIP_PIC32MX664F128H && y) || (ARCH_CHIP_PIC32MX664F128L && y) || (ARCH_CHIP_PIC32MX675F256H && y) || (ARCH_CHIP_PIC32MX675F256L && y) || (ARCH_CHIP_PIC32MX675F512H && y) || (ARCH_CHIP_PIC32MX675F512L && y) || (ARCH_CHIP_PIC32MX695F512H && y) || (ARCH_CHIP_PIC32MX695F512L && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "selects": [{"symbol": "ARCH_MIPS_24KC", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "ARCH_CHIP_PIC32MX7", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_PIC32MX764F128H && y) || (ARCH_CHIP_PIC32MX764F128L && y) || (ARCH_CHIP_PIC32MX775F256H && y) || (ARCH_CHIP_PIC32MX775F256L && y) || (ARCH_CHIP_PIC32MX775F512H && y) || (ARCH_CHIP_PIC32MX775F512L && y) || (ARCH_CHIP_PIC32MX795F512H && y) || (ARCH_CHIP_PIC32MX795F512L && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "selects": [{"symbol": "ARCH_MIPS_24KC", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_MVEC", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_SPI", "value": "n", "user_value": null, "rev_dep": "(PIC32MX_SPI1 && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (PIC32MX_SPI2 && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (PIC32MX_SPI3 && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (PIC32MX_SPI4 && ARCH_CHIP_PIC32MX && ARCH_MIPS)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_T1", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 31, "dep": "n", "prompt": "PIC32MX Peripheral Support", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "children": [{"type": 3, "name": "PIC32MX_WDT", "value": "n", "user_value": null, "dep": "n", "prompt": "Watchdog timer (WDT)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_T2", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 2 (T2)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_T3", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 3 (T3)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_T4", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 4 (T4)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_T5", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 5 (T5)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_IC1", "value": "n", "user_value": null, "dep": "n", "prompt": "Input Capture 1 (IC1)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_IC2", "value": "n", "user_value": null, "dep": "n", "prompt": "Input Capture 2 (IC2)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_IC3", "value": "n", "user_value": null, "dep": "n", "prompt": "Input Capture 3 (IC3)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_IC4", "value": "n", "user_value": null, "dep": "n", "prompt": "Input Capture 4 (IC4)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_IC5", "value": "n", "user_value": null, "dep": "n", "prompt": "Input Capture 5 (IC5)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_OC1", "value": "n", "user_value": null, "dep": "n", "prompt": "Output Compare 1 (OC1)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_OC2", "value": "n", "user_value": null, "dep": "n", "prompt": "Output Compare 2 (OC2)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_OC3", "value": "n", "user_value": null, "dep": "n", "prompt": "Output Compare 3 (OC3)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_OC4", "value": "n", "user_value": null, "dep": "n", "prompt": "Output Compare 4 (OC4)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_OC5", "value": "n", "user_value": null, "dep": "n", "prompt": "Output Compare 5 (OC5)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_I2C1", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C1", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_I2C2", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C2", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_I2C3", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C3", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_I2C4", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C4", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_I2C5", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C5", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_SPI1", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI1", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "selects": [{"symbol": "PIC32MX_SPI", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_SPI2", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI2", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "selects": [{"symbol": "PIC32MX_SPI", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_SPI3", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI3", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "selects": [{"symbol": "PIC32MX_SPI", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_SPI4", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI4", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "selects": [{"symbol": "PIC32MX_SPI", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_UART2", "value": "n", "user_value": null, "dep": "n", "prompt": "UART2", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "selects": [{"symbol": "UART2_SERIALDRIVER", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_UART3", "value": "n", "user_value": null, "dep": "n", "prompt": "UART3", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "selects": [{"symbol": "UART3_SERIALDRIVER", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_UART4", "value": "n", "user_value": null, "dep": "n", "prompt": "UART4", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "selects": [{"symbol": "UART4_SERIALDRIVER", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_UART5", "value": "n", "user_value": null, "dep": "n", "prompt": "UART5", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "selects": [{"symbol": "UART5_SERIALDRIVER", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_UART6", "value": "n", "user_value": null, "dep": "n", "prompt": "UART6", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "selects": [{"symbol": "UART6_SERIALDRIVER", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC1", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_PMP", "value": "n", "user_value": null, "dep": "n", "prompt": "Parallel Master Port (PMP)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_CM1", "value": "n", "user_value": null, "dep": "n", "prompt": "Comparator 1 (CM1)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_CM2", "value": "n", "user_value": null, "dep": "n", "prompt": "Comparator 2 (CM2)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_CM3", "value": "n", "user_value": null, "dep": "n", "prompt": "Comparator 3 (CM3)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_RTCC", "value": "n", "user_value": null, "dep": "n", "prompt": "Real-Time Clock and Calendar (RTCC)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "selects": [{"symbol": "ARCH_DMA", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_FLASH", "value": "n", "user_value": null, "dep": "n", "prompt": "FLASH", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_USBDEV", "value": "n", "user_value": null, "dep": "n", "prompt": "USB device", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_USBHOST", "value": "n", "user_value": null, "dep": "n", "prompt": "USB host", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_CAN1", "value": "n", "user_value": null, "dep": "n", "prompt": "Controller area network 1 (CAN1)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_CAN2", "value": "n", "user_value": null, "dep": "n", "prompt": "Controller area network 2 (CAN2)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_ETHERNET", "value": "n", "user_value": null, "dep": "n", "prompt": "Ethernet", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "selects": [{"symbol": "NETDEVICES", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}, {"symbol": "ARCH_HAVE_PHY", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}, {"symbol": "ARCH_HAVE_NETDEV_STATISTICS", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_CTMU", "value": "n", "user_value": null, "dep": "n", "prompt": "Charge Time Measurement Unit (CMTU)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}]}, {"type": 31, "dep": "n", "prompt": "PIC32MX Peripheral Interrupt Priorities", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "children": [{"type": 27, "name": "PIC32MX_CTPRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Core Timer Interrupt (CT)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Core Timer Interrupt.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_CS0PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Core Software Interrupt 0 (CS0)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Core Software Interrupt 0.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_CS1PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Core Software Interrupt 1 (CS1)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Core Software Interrupt 1.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_INT0PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "External Interrupt 0 (INT0)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "External Interrupt 0.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_INT1PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "External Interrupt 1 (INT1)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "External Interrupt 1.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_INT2PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "External Interrupt 2 (INT2)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "External Interrupt 2.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_INT3PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "External Interrupt 3 (INT3)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "External Interrupt 3.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_INT4PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "External Interrupt 4 (INT4)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "External Interrupt 4.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_FSCMPRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Fail-Safe Clock Monitor (FSCM)", "cond": "PIC32MX_ && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_ && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Fail-Safe Clock Monitor.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_T1PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Timer 1 (T1)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Timer 1 (System timer) priority.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_T2PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Timer 2 (T2)", "cond": "PIC32MX_T2 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_T2 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Timer 2 priority.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_T3PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Timer 3 (T3)", "cond": "PIC32MX_T3 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_T3 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Timer 3 priority.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_T4PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Timer 4 (T4)", "cond": "PIC32MX_T4 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_T4 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Timer 4 priority.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_T5PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Timer 5 (T5)", "cond": "PIC32MX_ && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_ && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Timer 5 priority.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_IC1PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Input Capture 1 (IC1)", "cond": "PIC32MX_IC1 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_IC1 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Input Capture 1.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_IC2PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Input Capture 2 (IC2)", "cond": "PIC32MX_IC2 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_IC2 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Input Capture 2.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_IC3PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Input Capture 3 (IC3)", "cond": "PIC32MX_IC3 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_IC3 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Input Capture 3.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_IC4PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Input Capture 4 (IC4)", "cond": "PIC32MX_IC4 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_IC4 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Input Capture 4.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_IC5PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Input Capture 5 (IC5)", "cond": "PIC32MX_IC5 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_IC5 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Input Capture 5.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_OC1PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Output Compare 1 (OC1)", "cond": "PIC32MX_OC1 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_OC1 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Output Compare 1.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_OC2PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Output Compare 2 (OC2)", "cond": "PIC32MX_OC2 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_OC2 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Output Compare 2.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_OC3PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Output Compare 3 (OC3)", "cond": "PIC32MX_OC3 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_OC3 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Output Compare 3.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_OC4PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Output Compare 4 (OC4)", "cond": "PIC32MX_OC4 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_OC4 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Output Compare 4.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_OC5PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Output Compare 5 (OC5)", "cond": "PIC32MX_OC5 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_OC5 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Output Compare 5.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_I2C1PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "I2C1", "cond": "PIC32MX_I2C1 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_I2C1 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "I2C 1.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_I2C2PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "I2C2", "cond": "PIC32MX_I2C3 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_I2C3 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "I2C 2.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_I2C3PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "I2C3", "cond": "PIC32MX_I2C3 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_I2C3 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "I2C 3.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_I2C4PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "I2C4", "cond": "PIC32MX_I2C4 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_I2C4 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "I2C 4.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_I2C5PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "I2C5", "cond": "PIC32MX_I2C5 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_I2C5 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "I2C 5.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_SPI1PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "SPI1", "cond": "PIC32MX_SPI1 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_SPI1 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "SPI 2"}, {"type": 27, "name": "PIC32MX_SPI2PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "SPI2", "cond": "PIC32MX_SPI2 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_SPI2 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "SPI 2"}, {"type": 27, "name": "PIC32MX_UART1PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "PIC32MX_UART1 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_UART1 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "UART 1.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_UART2PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "UART2", "cond": "PIC32MX_UART2 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_UART2 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "UART 2.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_CNPRIO", "value": "", "user_value": null, "dep": "n", "prompt": "CN", "cond": "PIC32MX_CN && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_CN && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Input Change Interrupt.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_ADCPRIO", "value": "", "user_value": null, "dep": "n", "prompt": "ADC1", "cond": "PIC32MX_ADC1 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_ADC1 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "ADC1 Convert Done.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_PMPPRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Parallel Master Port (PMP)", "cond": "PIC32MX_PMP && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_PMP && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Parallel Master Port.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_CM1PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Comparator 1 (CM1)", "cond": "PIC32MX_CM1 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_CM1 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Comparator 1.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_CM2PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Comparator 2 (CM2)", "cond": "PIC32MX_CM2 && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_CM2 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Comparator 2.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_RTCCPRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Real-Time Clock and Calendar (RTCC)", "cond": "PIC32MX_RTCC && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_RTCC && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Real-Time Clock and Calendar.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_DMA0PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "DMA0", "cond": "PIC32MX_DMA && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_DMA && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "DMA Channel 0.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_DMA1PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "DMA1", "cond": "PIC32MX_DMA && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_DMA && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "DMA Channel 1.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_DMA2PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "DMA2", "cond": "PIC32MX_DMA && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_DMA && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "DMA Channel 2.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_DMA3PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "DMA3", "cond": "PIC32MX_DMA && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_DMA && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "DMA Channel 3.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_DMA4PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "DMA4", "cond": "PIC32MX_DMA && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_DMA && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "DMA Channel 4.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_DMA5PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "DMA5", "cond": "PIC32MX_DMA && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_DMA && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "DMA Channel 5.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_DMA6PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "DMA6", "cond": "PIC32MX_DMA && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_DMA && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "DMA Channel 6.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_DMA7PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "DMA7", "cond": "PIC32MX_DMA && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_DMA && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "DMA Channel 7.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_FCEPRIO", "value": "", "user_value": null, "dep": "n", "prompt": "FCE", "cond": "PIC32MX_FLASH && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "PIC32MX_FLASH && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Flash Control Event.  Range 4-31, Default 16."}, {"type": 27, "name": "PIC32MX_USBPRIO", "value": "", "user_value": null, "dep": "n", "prompt": "USB", "cond": "(PIC32MX_USBDEV || PIC32MX_USBHOST) && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "16", "default": "16", "cond": "(PIC32MX_USBDEV || PIC32MX_USBHOST) && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "USB.  Range 4-31, Default 16."}]}, {"type": 3, "name": "PIC32MX_GPIOIRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIO Interrupt", "cond": "EXPERIMENTAL && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Build in support for interrupts based on GPIO inputs from IOPorts"}, {"type": 31, "dep": "n", "prompt": "SPI Driver Configuration", "cond": "PIC32MX_SPI && ARCH_CHIP_PIC32MX && ARCH_MIPS", "children": [{"type": 3, "name": "PIC32MX_SPI_INTERRUPTS", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI Interrupt Driven", "cond": "EXPERIMENTAL && PIC32MX_SPI && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && PIC32MX_SPI && ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_SPI_ENHBUF", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI Enhanced Buffer Mode", "cond": "EXPERIMENTAL && PIC32MX_SPI && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && PIC32MX_SPI && ARCH_CHIP_PIC32MX && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MX_SPI_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI Register level debug", "cond": "DEBUG_INFO && PIC32MX_SPI && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && PIC32MX_SPI && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Output detailed register-level SPI device debug information.\nRequires also CONFIG_DEBUG_FEATURES."}]}, {"type": 31, "dep": "n", "prompt": "PIC32MX PHY/Ethernet device driver settings", "cond": "PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS", "children": [{"type": 3, "name": "PHY_AUTONEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Auto-negotion", "cond": "PIC32MX_ETHERNET && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "y", "default": "y", "cond": "PIC32MX_ETHERNET && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Enable auto-negotion"}, {"type": 3, "name": "PHY_SPEED100", "value": "n", "user_value": null, "dep": "n", "prompt": "100Mbps spped", "cond": "PIC32MX_ETHERNET && !PHY_AUTONEG && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "PIC32MX_ETHERNET && !PHY_AUTONEG && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Select 100Mbit vs. 10Mbit speed."}, {"type": 3, "name": "PHY_FDUPLEX", "value": "n", "user_value": null, "dep": "n", "prompt": "Full duplex", "cond": "PIC32MX_ETHERNET && !PHY_AUTONEG && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "PIC32MX_ETHERNET && !PHY_AUTONEG && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Select full (vs. half) duplex"}, {"type": 27, "name": "NET_NTXDESC", "value": "", "user_value": null, "dep": "n", "prompt": "Number Tx descriptors", "cond": "PIC32MX_ETHERNET && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "2", "default": "2", "cond": "PIC32MX_ETHERNET && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Configured number of Tx descriptors. Default: 2"}, {"type": 27, "name": "NET_NRXDESC", "value": "", "user_value": null, "dep": "n", "prompt": "Number Rx descriptors", "cond": "PIC32MX_ETHERNET && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "4", "default": "4", "cond": "PIC32MX_ETHERNET && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Configured number of Rx descriptors. Default: 4"}, {"type": 27, "name": "NET_PRIORITY", "value": "", "user_value": null, "dep": "n", "prompt": "", "cond": "PIC32MX_ETHERNET && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "28", "default": "28", "cond": "PIC32MX_ETHERNET && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Ethernet interrupt priority.  The is default is the higest priority."}, {"type": 3, "name": "NET_WOL", "value": "n", "user_value": null, "dep": "n", "prompt": "Wake-up on LAN", "cond": "PIC32MX_ETHERNET && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "PIC32MX_ETHERNET && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Enable Wake-up on LAN (not fully implemented)."}, {"type": 3, "name": "NET_HASH", "value": "n", "user_value": null, "dep": "n", "prompt": "Hash", "cond": "PIC32MX_ETHERNET && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "PIC32MX_ETHERNET && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Enable receipt of near-perfect match frames."}, {"type": 3, "name": "PIC32MX_MULTICAST", "value": "n", "user_value": null, "dep": "n", "prompt": "Multicast", "cond": "PIC32MX_ETHERNET && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "y", "default": "y", "cond": "NET_IGMP && PIC32MX_ETHERNET && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Enable receipt of multicast (and unicast) frames. Automatically set if\nNET_IGMP is selected."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "PIC32MX_ETHERNET_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS"}, {"name": "PIC32MX_ETHERNET_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Work queue support is required to use the Ethernet driver.  If the\nlow priority work queue is available, then it should be used by the\ndriver.", "children": [{"type": 3, "name": "PIC32MX_ETHERNET_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "PIC32MX_ETHERNET_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}, {"type": 3, "name": "NET_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register level debug", "cond": "PIC32MX_ETHERNET && DEBUG_NET_INFO && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "PIC32MX_ETHERNET && DEBUG_NET_INFO && PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Enabled low level register debug.  Also needs CONFIG_DEBUG_FEATURES."}]}, {"type": 31, "dep": "n", "prompt": "Device Configuration 0 (DEVCFG0)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "children": [{"type": 27, "name": "PIC32MX_DEBUGGER", "value": "", "user_value": null, "dep": "n", "prompt": "Debugger", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "3", "default": "3", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Background Debugger Enable. Default 3 (disabled). The value 2 enables."}, {"type": 27, "name": "PIC32MX_ICESEL", "value": "", "user_value": null, "dep": "n", "prompt": "ICE channel", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "1", "default": "1", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "In-Circuit Emulator/Debugger Communication Channel Select. Default 1 (PG2)"}, {"type": 24, "name": "PIC32MX_PROGFLASHWP", "value": "", "user_value": null, "dep": "n", "prompt": "Program FLASH write protect", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "0x3ff", "default": "0x3ff", "cond": "(ARCH_CHIP_PIC32MX1 || ARCH_CHIP_PIC32MX2) && ARCH_CHIP_PIC32MX && ARCH_MIPS"}, {"name": "0xff", "default": "0xff", "cond": "!ARCH_CHIP_PIC32MX1 && !ARCH_CHIP_PIC32MX2 && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Program FLASH write protect.  Default 0xff (disabled)"}, {"type": 27, "name": "PIC32MX_BOOTFLASHWP", "value": "", "user_value": null, "dep": "n", "prompt": "Boot FLASH write protect", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "1", "default": "1", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Default 1 (disabled)"}, {"type": 27, "name": "PIC32MX_CODEWP", "value": "", "user_value": null, "dep": "n", "prompt": "Code write protect", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "1", "default": "1", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Default 1 (disabled)"}]}, {"type": 31, "dep": "n", "prompt": "Device Configuration 1 (DEVCFG1)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "children": [{"type": 27, "name": "PIC32MX_OSCOUT", "value": "", "user_value": null, "dep": "n", "prompt": "USB ID", "cond": "(ARCH_CHIP_PIC32MX1 || ARCH_CHIP_PIC32MX2) && ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "0", "default": "0", "cond": "(ARCH_CHIP_PIC32MX1 || ARCH_CHIP_PIC32MX2) && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "USB USBID Selection.  Default 1 if USB enabled (USBID pin is controlled by the USB\nmodule), but 0 (GPIO) otherwise."}]}, {"type": 31, "dep": "n", "prompt": "Device Configuration 3 (DEVCFG3)", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "children": [{"type": 27, "name": "PIC32MX_USBIDO", "value": "", "user_value": null, "dep": "n", "prompt": "USB ID", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "1", "default": "1", "cond": "PIC32MX_USB && ARCH_CHIP_PIC32MX && ARCH_MIPS"}, {"name": "0", "default": "0", "cond": "!PIC32MX_USB && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "USB USBID Selection.  Default 1 if USB enabled (USBID pin is controlled by the USB\nmodule), but 0 (GPIO) otherwise."}, {"type": 27, "name": "PIC32MX_VBUSIO", "value": "", "user_value": null, "dep": "n", "prompt": "USB VBUSON", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "1", "default": "1", "cond": "PIC32MX_USB && ARCH_CHIP_PIC32MX && ARCH_MIPS"}, {"name": "0", "default": "0", "cond": "!PIC32MX_USB && ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "USB VBUSON Selection (Default 1 if USB enabled (VBUSON pin is controlled by the USB\nmodule, but 0 (GPIO) otherwise."}, {"type": 3, "name": "PIC32MX_WDENABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Watchdog enable", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "0", "default": "0", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Enabled watchdog on power up.  Default 0 (watchdog can be enabled later by software)."}, {"type": 27, "name": "PIC32MX_FETHIO", "value": "", "user_value": null, "dep": "n", "prompt": "Ethernet I/O pins", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "1", "default": "1", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Ethernet I/O Pin Selection bit:\n\n1 = Default Ethernet I/O Pins\n0 = Alternate Ethernet I/O Pins"}, {"type": 27, "name": "PIC32MX_FMIIEN", "value": "", "user_value": null, "dep": "n", "prompt": "Ethernet MII", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS", "defaults": [{"name": "1", "default": "1", "cond": "ARCH_CHIP_PIC32MX && ARCH_MIPS"}], "help": "Ethernet MII Enable bit\n\n1 = MII enabled\n0 = RMII enabled"}]}, {"type": 6, "dep": "n", "prompt": "PIC32MZ Configuration Options", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "PIC32MZ chip selection", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "ARCH_CHIP_PIC32MZ460F512L", "default": "ARCH_CHIP_PIC32MZ460F512L", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "children": [{"type": 3, "name": "ARCH_CHIP_PIC32MZ2048ECH", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MZ2048ECH", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MZEC", "cond": "y"}], "help": "Microchip PIC32MZ2048ECH (MIPS32 M14K)"}, {"type": 3, "name": "ARCH_CHIP_PIC32MZ2048ECM", "value": "n", "user_value": null, "dep": "n", "prompt": "PIC32MZ2048ECM", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_PIC32MZEC", "cond": "y"}], "help": "Microchip PIC32MZ2048ECM with Crypto Engine (MIPS32 M14K)"}]}, {"type": 3, "name": "ARCH_CHIP_PIC32MZEC", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_PIC32MZ2048ECH && y) || (ARCH_CHIP_PIC32MZ2048ECM && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "selects": [{"symbol": "ARCH_MIPS_M14K", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_MVEC", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_SPI", "value": "n", "user_value": null, "rev_dep": "(PIC32MZ_SPI1 && ARCH_CHIP_PIC32MZ && ARCH_MIPS) || (PIC32MZ_SPI2 && ARCH_CHIP_PIC32MZ && ARCH_MIPS) || (PIC32MZ_SPI3 && ARCH_CHIP_PIC32MZ && ARCH_MIPS) || (PIC32MZ_SPI4 && ARCH_CHIP_PIC32MZ && ARCH_MIPS) || (PIC32MZ_SPI5 && ARCH_CHIP_PIC32MZ && ARCH_MIPS) || (PIC32MZ_SPI6 && ARCH_CHIP_PIC32MZ && ARCH_MIPS)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_T1", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 31, "dep": "n", "prompt": "PIC32MZ Peripheral Support", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "children": [{"type": 3, "name": "PIC32MZ_WDT", "value": "n", "user_value": null, "dep": "n", "prompt": "Watchdog timer (WDT)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_T2", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 2 (T2)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_T3", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 3 (T3)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_T4", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 4 (T4)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_T5", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 5 (T5)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_T6", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 6 (T6)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_T7", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 7 (T7)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_T8", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 8 (T8)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_T9", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 9 (T9)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_IC1", "value": "n", "user_value": null, "dep": "n", "prompt": "Input Capture 1 (IC1)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_IC2", "value": "n", "user_value": null, "dep": "n", "prompt": "Input Capture 2 (IC2)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_IC3", "value": "n", "user_value": null, "dep": "n", "prompt": "Input Capture 3 (IC3)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_IC4", "value": "n", "user_value": null, "dep": "n", "prompt": "Input Capture 4 (IC4)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_IC5", "value": "n", "user_value": null, "dep": "n", "prompt": "Input Capture 5 (IC5)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_OC1", "value": "n", "user_value": null, "dep": "n", "prompt": "Output Compare 1 (OC1)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_OC2", "value": "n", "user_value": null, "dep": "n", "prompt": "Output Compare 2 (OC2)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_OC3", "value": "n", "user_value": null, "dep": "n", "prompt": "Output Compare 3 (OC3)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_OC4", "value": "n", "user_value": null, "dep": "n", "prompt": "Output Compare 4 (OC4)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_OC5", "value": "n", "user_value": null, "dep": "n", "prompt": "Output Compare 5 (OC5)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_I2C1", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C1", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_I2C2", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C2", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_I2C3", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C3", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_I2C4", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C4", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_I2C5", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C5", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_SPI1", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI1", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "selects": [{"symbol": "PIC32MZ_SPI", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_SPI2", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI2", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "selects": [{"symbol": "PIC32MZ_SPI", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_SPI3", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI3", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "selects": [{"symbol": "PIC32MZ_SPI", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_SPI4", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI4", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "selects": [{"symbol": "PIC32MZ_SPI", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_SPI5", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI5", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "selects": [{"symbol": "PIC32MZ_SPI", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_SPI6", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI6", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "selects": [{"symbol": "PIC32MZ_SPI", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_UART2", "value": "n", "user_value": null, "dep": "n", "prompt": "UART2", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "selects": [{"symbol": "UART2_SERIALDRIVER", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_UART3", "value": "n", "user_value": null, "dep": "n", "prompt": "UART3", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "selects": [{"symbol": "UART3_SERIALDRIVER", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_UART4", "value": "n", "user_value": null, "dep": "n", "prompt": "UART4", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "selects": [{"symbol": "UART4_SERIALDRIVER", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_UART5", "value": "n", "user_value": null, "dep": "n", "prompt": "UART5", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "selects": [{"symbol": "UART5_SERIALDRIVER", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_UART6", "value": "n", "user_value": null, "dep": "n", "prompt": "UART6", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "selects": [{"symbol": "UART6_SERIALDRIVER", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_ADC", "value": "n", "user_value": null, "dep": "n", "prompt": "ADC1", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_PMP", "value": "n", "user_value": null, "dep": "n", "prompt": "Parallel Master Port (PMP)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_CM1", "value": "n", "user_value": null, "dep": "n", "prompt": "Comparator 1 (CM1)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_CM2", "value": "n", "user_value": null, "dep": "n", "prompt": "Comparator 2 (CM2)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_CM3", "value": "n", "user_value": null, "dep": "n", "prompt": "Comparator 3 (CM3)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_RTCC", "value": "n", "user_value": null, "dep": "n", "prompt": "Real-Time Clock and Calendar (RTCC)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "DMA", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "selects": [{"symbol": "ARCH_DMA", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_FLASH", "value": "n", "user_value": null, "dep": "n", "prompt": "FLASH", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_USBDEV", "value": "n", "user_value": null, "dep": "n", "prompt": "USB device", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_USBHOST", "value": "n", "user_value": null, "dep": "n", "prompt": "USB host", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_CAN1", "value": "n", "user_value": null, "dep": "n", "prompt": "Controller area network 1 (CAN1)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_CAN2", "value": "n", "user_value": null, "dep": "n", "prompt": "Controller area network 2 (CAN2)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_ETHERNET", "value": "n", "user_value": null, "dep": "n", "prompt": "Ethernet", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "selects": [{"symbol": "NETDEVICES", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}, {"symbol": "ARCH_HAVE_PHY", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}, {"symbol": "ARCH_HAVE_NETDEV_STATISTICS", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_CTMU", "value": "n", "user_value": null, "dep": "n", "prompt": "Charge Time Measurement Unit (CMTU)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}]}, {"type": 3, "name": "PIC32MZ_GPIOIRQ", "value": "n", "user_value": null, "menuconfig": true, "dep": "n", "prompt": "GPIO Interrupt Support", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "Build in support for interrupts based on GPIO inputs from IOPorts", "children": [{"type": 3, "name": "PIC32MZ_GPIOIRQ_PORTA", "value": "n", "user_value": null, "dep": "n", "prompt": "I/O PORTA Interrupt Support", "cond": "PIC32MZ_GPIOIRQ && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "PIC32MZ_GPIOIRQ && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_GPIOIRQ_PORTB", "value": "n", "user_value": null, "dep": "n", "prompt": "I/O PORTB Interrupt Support", "cond": "PIC32MZ_GPIOIRQ && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "PIC32MZ_GPIOIRQ && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_GPIOIRQ_PORTC", "value": "n", "user_value": null, "dep": "n", "prompt": "I/O PORTC Interrupt Support", "cond": "PIC32MZ_GPIOIRQ && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "PIC32MZ_GPIOIRQ && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_GPIOIRQ_PORTD", "value": "n", "user_value": null, "dep": "n", "prompt": "I/O PORTD Interrupt Support", "cond": "PIC32MZ_GPIOIRQ && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "PIC32MZ_GPIOIRQ && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_GPIOIRQ_PORTE", "value": "n", "user_value": null, "dep": "n", "prompt": "I/O PORTE Interrupt Support", "cond": "PIC32MZ_GPIOIRQ && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "PIC32MZ_GPIOIRQ && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_GPIOIRQ_PORTF", "value": "n", "user_value": null, "dep": "n", "prompt": "I/O PORTF Interrupt Support", "cond": "PIC32MZ_GPIOIRQ && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "PIC32MZ_GPIOIRQ && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_GPIOIRQ_PORTG", "value": "n", "user_value": null, "dep": "n", "prompt": "I/O PORTG Interrupt Support", "cond": "PIC32MZ_GPIOIRQ && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "PIC32MZ_GPIOIRQ && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_GPIOIRQ_PORTH", "value": "n", "user_value": null, "dep": "n", "prompt": "I/O PORTH Interrupt Support", "cond": "PIC32MZ_GPIOIRQ && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "PIC32MZ_GPIOIRQ && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_GPIOIRQ_PORTJ", "value": "n", "user_value": null, "dep": "n", "prompt": "I/O PORTJ Interrupt Support", "cond": "PIC32MZ_GPIOIRQ && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "PIC32MZ_GPIOIRQ && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_GPIOIRQ_PORTK", "value": "n", "user_value": null, "dep": "n", "prompt": "I/O PORTK Interrupt Support", "cond": "PIC32MZ_GPIOIRQ && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "PIC32MZ_GPIOIRQ && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}]}, {"type": 31, "dep": "n", "prompt": "SPI Driver Configuration", "cond": "PIC32MZ_SPI && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "children": [{"type": 3, "name": "PIC32MZ_SPI_INTERRUPTS", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI Interrupt Driven", "cond": "EXPERIMENTAL && PIC32MZ_SPI && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && PIC32MZ_SPI && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_SPI_ENHBUF", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI Enhanced Buffer Mode", "cond": "EXPERIMENTAL && PIC32MZ_SPI && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && PIC32MZ_SPI && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 3, "name": "PIC32MZ_SPI_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI Register level debug", "cond": "DEBUG_INFO && PIC32MZ_SPI && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && PIC32MZ_SPI && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "Output detailed register-level SPI device debug information.\nRequires also CONFIG_DEBUG_FEATURES."}]}, {"type": 3, "name": "PIC32MZ_T1_SOSC", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "PIC32MZ_T1 && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 31, "dep": "n", "prompt": "PIC32MZ PHY/Ethernet device driver settings", "cond": "PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "children": [{"type": 3, "name": "PHY_AUTONEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Auto-negotiation", "cond": "PIC32MZ_ETHERNET && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "y", "default": "y", "cond": "PIC32MZ_ETHERNET && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "Enable auto-negotiation"}, {"type": 3, "name": "PHY_SPEED100", "value": "n", "user_value": null, "dep": "n", "prompt": "100Mbps speed", "cond": "PIC32MZ_ETHERNET && !PHY_AUTONEG && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "PIC32MZ_ETHERNET && !PHY_AUTONEG && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "Select 100Mbit vs. 10Mbit speed."}, {"type": 3, "name": "PHY_FDUPLEX", "value": "n", "user_value": null, "dep": "n", "prompt": "Full duplex", "cond": "PIC32MZ_ETHERNET && !PHY_AUTONEG && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "PIC32MZ_ETHERNET && !PHY_AUTONEG && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "Select full (vs. half) duplex"}, {"type": 27, "name": "NET_NTXDESC", "value": "", "user_value": null, "dep": "n", "prompt": "Number Tx descriptors", "cond": "PIC32MZ_ETHERNET && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "2", "default": "2", "cond": "PIC32MZ_ETHERNET && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "Configured number of Tx descriptors. Default: 2"}, {"type": 27, "name": "NET_NRXDESC", "value": "", "user_value": null, "dep": "n", "prompt": "Number Rx descriptors", "cond": "PIC32MZ_ETHERNET && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "4", "default": "4", "cond": "PIC32MZ_ETHERNET && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "Configured number of Rx descriptors. Default: 4"}, {"type": 27, "name": "NET_PRIORITY", "value": "", "user_value": null, "dep": "n", "prompt": "", "cond": "PIC32MZ_ETHERNET && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "28", "default": "28", "cond": "PIC32MZ_ETHERNET && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "Ethernet interrupt priority.  The is default is the higest priority."}, {"type": 3, "name": "NET_WOL", "value": "n", "user_value": null, "dep": "n", "prompt": "Wake-up on LAN", "cond": "PIC32MZ_ETHERNET && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "PIC32MZ_ETHERNET && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "Enable Wake-up on LAN (not fully implemented)."}, {"type": 3, "name": "NET_HASH", "value": "n", "user_value": null, "dep": "n", "prompt": "Hash", "cond": "PIC32MZ_ETHERNET && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "PIC32MZ_ETHERNET && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "Enable receipt of near-perfect match frames."}, {"type": 3, "name": "PIC32MZ_MULTICAST", "value": "n", "user_value": null, "dep": "n", "prompt": "Multicast", "cond": "PIC32MZ_ETHERNET && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "y", "default": "y", "cond": "NET_IGMP && PIC32MZ_ETHERNET && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "Enable receipt of multicast (and unicast) frames. Automatically set if\nNET_IGMP is selected."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "PIC32MZ_ETHERNET_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}, {"name": "PIC32MZ_ETHERNET_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "Work queue support is required to use the Ethernet driver.  If the\nlow priority work queue is available, then it should be used by the\ndriver.", "children": [{"type": 3, "name": "PIC32MZ_ETHERNET_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "PIC32MZ_ETHERNET_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}, {"type": 3, "name": "NET_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register level debug", "cond": "PIC32MZ_ETHERNET && DEBUG_NET_INFO && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "PIC32MZ_ETHERNET && DEBUG_NET_INFO && PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "Enabled low level register debug.  Also needs CONFIG_DEBUG_FEATURES."}]}, {"type": 31, "dep": "n", "prompt": "Device Configuration 0 (DEVCFG0)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "children": [{"type": 3, "name": "PIC32MZ_DEBUGGER_ENABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Background debugger enable", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "y", "default": "y", "cond": "DEBUG_FEATURES && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}, {"name": "n", "default": "n", "cond": "!DEBUG_FEATURES && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "Background Debugger Enable"}, {"type": 3, "name": "PIC32MZ_JTAG_ENABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "JTAG enable", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "JTAG Enable"}, {"type": 3, "name": "PIC32MZ_ICESEL_CH2", "value": "n", "user_value": null, "dep": "n", "prompt": "ICE channel 2", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "In-Circuit Emulator/Debugger Communication Channel Select. Default: Channel (PG2)"}, {"type": 3, "name": "PIC32MZ_TRACE_ENABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Trace enable", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "y", "default": "y", "cond": "DEBUG_FEATURES && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}, {"name": "n", "default": "n", "cond": "!DEBUG_FEATURES && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "Trace Enable"}, {"type": 27, "name": "PIC32MZ_ECC_OPTION", "value": "", "user_value": null, "dep": "n", "prompt": "PIC32 ECC control", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "3", "default": "3", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "ranges": [{"min": "0", "max": "3", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "0: Flash ECC enabled (locked)\n1: Dynamic Flash ECC enabled (locked) */\n2: ECC / dynamic ECC disabled (locked) */\n3: ECC / dynamic ECC disabled (writable) */"}]}, {"type": 31, "dep": "n", "prompt": "Device Configuration 1 (DEVCFG1)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "children": [{"type": 27, "name": "PIC32MZ_OSCIOFNC", "value": "", "user_value": null, "dep": "n", "prompt": "CLKO Enable", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "1", "default": "1", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "ranges": [{"min": "0", "max": "1", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "Enable CLK0 output on power up.  Options:\n\n1: CLKO output disabled\n0: CLKO output signal active on the OSC2 pin"}, {"type": 3, "name": "PIC32MZ_WDTENABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Watchdog enable", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "0", "default": "0", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "Enabled watchdog on power up.\n\n1: Watchdog enabled, cannot be disabled\n0:  Watchdog disabled, can be enabled"}]}, {"type": 31, "dep": "n", "prompt": "Device Configuration 3 (DEVCFG3)", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "children": [{"type": 24, "name": "PIC32MZ_USERID", "value": "", "user_value": null, "dep": "n", "prompt": "User ID", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "0x584e", "default": "0x584e", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "User-provided ID visible in DEVCFG3"}, {"type": 27, "name": "PIC32MZ_FMIIEN", "value": "", "user_value": null, "dep": "n", "prompt": "Ethernet MII", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "1", "default": "1", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "ranges": [{"min": "0", "max": "1", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "Ethernet MII enable selection\n\n0 = RMII enabled\n1 = MII enabled"}, {"type": 27, "name": "PIC32MZ_PGL1WAY", "value": "", "user_value": null, "dep": "n", "defaults": [{"name": "0", "default": "0", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "ranges": [{"min": "0", "max": "1", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 27, "name": "PIC32MZ_PMDL1WAY", "value": "", "user_value": null, "dep": "n", "defaults": [{"name": "0", "default": "0", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "ranges": [{"min": "0", "max": "1", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 27, "name": "PIC32MZ_IOL1WAY", "value": "", "user_value": null, "dep": "n", "defaults": [{"name": "0", "default": "0", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "ranges": [{"min": "0", "max": "1", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}]}, {"type": 27, "name": "PIC32MZ_FETHIO", "value": "", "user_value": null, "dep": "n", "prompt": "Ethernet I/O pins", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "1", "default": "1", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "ranges": [{"min": "0", "max": "1", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "Ethernet I/O pin selection\n\n0 = Alternate Ethernet I/O pins\n1 = Default Ethernet I/O pins"}, {"type": 27, "name": "PIC32MZ_FUSBIDIO", "value": "", "user_value": null, "dep": "n", "prompt": "USB USBID selection", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS", "defaults": [{"name": "0", "default": "0", "cond": "!PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}, {"name": "1", "default": "1", "cond": "PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "ranges": [{"min": "0", "max": "1", "cond": "ARCH_CHIP_PIC32MZ && ARCH_MIPS"}], "help": "USB USBID selection\n\n0 = USBID pin is controlled by the port function\n1 = USBID pin is controlled by the USB module"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Misoc Chip Selection", "cond": "ARCH_MISOC", "defaults": [{"name": "ARCH_CHIP_LM32", "default": "n", "cond": "ARCH_MISOC"}], "children": [{"type": 3, "name": "ARCH_CHIP_LM32", "value": "n", "user_value": null, "dep": "n", "prompt": "LM32", "cond": "y", "selects": [{"symbol": "MISOC_HAVE_UART1", "cond": "y"}], "help": "LM32 Chip Selected"}, {"type": 3, "name": "ARCH_CHIP_MOR1K", "value": "n", "user_value": null, "dep": "n", "prompt": "MOR1K", "cond": "y", "help": "MOR1K Chip Selected"}]}, {"type": 47, "name": "ARCH_CHIP", "value": "cxd56xx", "user_value": "cxd56xx", "dep": "n", "defaults": [{"name": "lm32", "default": "lm32", "cond": "ARCH_CHIP_LM32 && ARCH_MISOC"}, {"name": "mor1k", "default": "mor1k", "cond": "ARCH_CHIP_MOR1K && ARCH_MISOC"}]}, {"type": 31, "dep": "n", "prompt": "MISOC Peripheral Support", "cond": "ARCH_MISOC", "children": [{"type": 3, "name": "MISOC_HAVE_UART1", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_LM32 && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_MISOC"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_MISOC"}]}, {"type": 3, "name": "MISOC_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "ARCH_MISOC", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_MISOC"}], "selects": [{"symbol": "ARCH_HAVE_UART1", "cond": "ARCH_MISOC"}, {"symbol": "MISOC_UART", "cond": "ARCH_MISOC"}]}, {"type": 3, "name": "MISOC_ETHERNET", "value": "n", "user_value": null, "dep": "n", "prompt": "Ethernet", "cond": "ARCH_MISOC", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_MISOC"}], "selects": [{"symbol": "NETDEVICES", "cond": "ARCH_MISOC"}, {"symbol": "ARCH_HAVE_PHY", "cond": "ARCH_MISOC"}, {"symbol": "ARCH_HAVE_NETDEV_STATISTICS", "cond": "ARCH_MISOC"}]}]}, {"type": 3, "name": "MISOC_UART", "value": "n", "user_value": null, "rev_dep": "MISOC_UART1 && ARCH_MISOC", "dep": "n"}, {"type": 27, "name": "MISOC_UART_RX_BUF_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "UART RX Bufer size", "cond": "MISOC_UART && ARCH_MISOC", "defaults": [{"name": "64", "default": "64", "cond": "MISOC_UART && ARCH_MISOC"}], "help": "Size of RX buffers for MISOC UARTs"}, {"type": 27, "name": "MISOC_UART_TX_BUF_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "UART TX Bufer size", "cond": "MISOC_UART && ARCH_MISOC", "defaults": [{"name": "64", "default": "64", "cond": "MISOC_UART && ARCH_MISOC"}], "help": "Size of TX buffers for MISOC UARTs"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Toolchain Selection", "cond": "ARCH_CHIP_LM32 && ARCH_CHIP_LM32 && ARCH_MISOC", "defaults": [{"name": "LM32_TOOLCHAIN_GNUW", "default": "n", "cond": "TOOLCHAIN_WINDOWS && ARCH_CHIP_LM32 && ARCH_CHIP_LM32 && ARCH_MISOC"}, {"name": "LM32_TOOLCHAIN_GNUL", "default": "n", "cond": "!TOOLCHAIN_WINDOWS && ARCH_CHIP_LM32 && ARCH_CHIP_LM32 && ARCH_MISOC"}], "children": [{"type": 3, "name": "LM32_TOOLCHAIN_BUILDROOT", "value": "n", "user_value": null, "dep": "n", "prompt": "Buildroot (Cygwin or Linux)", "cond": "!WINDOWS_NATIVE && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "!WINDOWS_NATIVE && y"}]}, {"type": 3, "name": "LM32_TOOLCHAIN_GNUL", "value": "n", "user_value": null, "dep": "n", "prompt": "Generic GNU toolchain under Linux (or other POSIX environment)", "cond": "y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "y"}], "help": "This option should work for any modern GNU toolchain (GCC 4.5 or newer)\nconfigured for lm32-elf-."}, {"type": 3, "name": "LM32_TOOLCHAIN_GNUW", "value": "n", "user_value": null, "dep": "n", "prompt": "Generic GNU toolchain under Windows", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}], "help": "This option should work for any modern GNU toolchain (GCC 4.5 or newer)\nconfigured for lm32-elf-."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Renesas chip selection", "cond": "ARCH_RENESAS", "defaults": [{"name": "ARCH_CHIP_SH7032", "default": "n", "cond": "ARCH_RENESAS"}], "children": [{"type": 3, "name": "ARCH_CHIP_SH7032", "value": "n", "user_value": null, "dep": "n", "prompt": "SH7032", "cond": "y", "selects": [{"symbol": "ARCH_SH1", "cond": "y"}], "help": "Hitachi/Renesas SH7032 (SH1)"}, {"type": 3, "name": "ARCH_CHIP_M30262F8", "value": "n", "user_value": null, "dep": "n", "prompt": "M30262F8", "cond": "y", "selects": [{"symbol": "ARCH_M16C", "cond": "y"}, {"symbol": "MM_SMALL", "cond": "y"}], "help": "Renesas M30262F8 (M16C)"}]}, {"type": 3, "name": "ARCH_SH1", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_SH7032 && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_RENESAS"}]}, {"type": 3, "name": "ARCH_M16C", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_M30262F8 && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_RENESAS"}]}, {"type": 47, "name": "ARCH_CHIP", "value": "cxd56xx", "user_value": "cxd56xx", "dep": "n", "defaults": [{"name": "sh1", "default": "sh1", "cond": "ARCH_SH1 && ARCH_RENESAS"}, {"name": "m16c", "default": "m16c", "cond": "ARCH_M16C && ARCH_RENESAS"}]}, {"type": 3, "name": "M16C_UART0", "value": "n", "user_value": null, "dep": "n", "prompt": "UART0", "cond": "ARCH_M16C && ARCH_RENESAS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_M16C && ARCH_RENESAS"}], "selects": [{"symbol": "UART0_SERIALDRIVER", "cond": "ARCH_M16C && ARCH_RENESAS"}]}, {"type": 3, "name": "M16C_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "ARCH_M16C && ARCH_RENESAS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_M16C && ARCH_RENESAS"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_M16C && ARCH_RENESAS"}]}, {"type": 3, "name": "M16C_UART2", "value": "n", "user_value": null, "dep": "n", "prompt": "UART2", "cond": "ARCH_M16C && ARCH_RENESAS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_M16C && ARCH_RENESAS"}], "selects": [{"symbol": "UART2_SERIALDRIVER", "cond": "ARCH_M16C && ARCH_RENESAS"}]}, {"type": 6, "dep": "n", "prompt": "SH-1 Configuration Options", "cond": "ARCH_SH1 && ARCH_RENESAS"}, {"type": 31, "dep": "n", "prompt": "SH-1 Peripheral Selections", "cond": "ARCH_SH1 && ARCH_RENESAS", "children": [{"type": 3, "name": "SH1_DMAC0", "value": "n", "user_value": null, "dep": "n", "prompt": "DMAC0", "cond": "ARCH_SH1 && ARCH_RENESAS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_SH1 && ARCH_RENESAS"}]}, {"type": 3, "name": "SH1_DMAC1", "value": "n", "user_value": null, "dep": "n", "prompt": "DMAC1", "cond": "ARCH_SH1 && ARCH_RENESAS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_SH1 && ARCH_RENESAS"}]}, {"type": 3, "name": "SH1_DMAC2", "value": "n", "user_value": null, "dep": "n", "prompt": "DMAC2", "cond": "ARCH_SH1 && ARCH_RENESAS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_SH1 && ARCH_RENESAS"}]}, {"type": 3, "name": "SH1_DMAC3", "value": "n", "user_value": null, "dep": "n", "prompt": "DMAC3", "cond": "ARCH_SH1 && ARCH_RENESAS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_SH1 && ARCH_RENESAS"}]}, {"type": 3, "name": "SH1_ITU1", "value": "n", "user_value": null, "dep": "n", "prompt": "ITU2", "cond": "ARCH_SH1 && ARCH_RENESAS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_SH1 && ARCH_RENESAS"}]}, {"type": 3, "name": "SH1_ITU2", "value": "n", "user_value": null, "dep": "n", "prompt": "ITU2", "cond": "ARCH_SH1 && ARCH_RENESAS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_SH1 && ARCH_RENESAS"}]}, {"type": 3, "name": "SH1_ITU3", "value": "n", "user_value": null, "dep": "n", "prompt": "ITU3", "cond": "ARCH_SH1 && ARCH_RENESAS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_SH1 && ARCH_RENESAS"}]}, {"type": 3, "name": "SH1_ITU4", "value": "n", "user_value": null, "dep": "n", "prompt": "ITU4", "cond": "ARCH_SH1 && ARCH_RENESAS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_SH1 && ARCH_RENESAS"}]}, {"type": 3, "name": "SH1_SCI0", "value": "n", "user_value": null, "dep": "n", "prompt": "SCI0", "cond": "ARCH_SH1 && ARCH_RENESAS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_SH1 && ARCH_RENESAS"}], "selects": [{"symbol": "SCI0_SERIALDRIVER", "cond": "ARCH_SH1 && ARCH_RENESAS"}]}, {"type": 3, "name": "SH1_SCI1", "value": "n", "user_value": null, "dep": "n", "prompt": "SCI1", "cond": "ARCH_SH1 && ARCH_RENESAS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_SH1 && ARCH_RENESAS"}], "selects": [{"symbol": "SCI1_SERIALDRIVER", "cond": "ARCH_SH1 && ARCH_RENESAS"}]}, {"type": 3, "name": "SH1_PCU", "value": "n", "user_value": null, "dep": "n", "prompt": "PCU", "cond": "ARCH_SH1 && ARCH_RENESAS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_SH1 && ARCH_RENESAS"}]}, {"type": 3, "name": "SH1_AD", "value": "n", "user_value": null, "dep": "n", "prompt": "AD", "cond": "ARCH_SH1 && ARCH_RENESAS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_SH1 && ARCH_RENESAS"}]}, {"type": 3, "name": "SH1_WDT", "value": "n", "user_value": null, "dep": "n", "prompt": "WDT", "cond": "ARCH_SH1 && ARCH_RENESAS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_SH1 && ARCH_RENESAS"}]}, {"type": 3, "name": "SH1_CMI", "value": "n", "user_value": null, "dep": "n", "prompt": "CMI", "cond": "ARCH_SH1 && ARCH_RENESAS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_SH1 && ARCH_RENESAS"}]}]}, {"type": 6, "dep": "n", "prompt": "RISC-V Options", "cond": "ARCH_RISCV"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "RISC-V chip selection", "cond": "ARCH_RISCV", "defaults": [{"name": "ARCH_CHIP_NR5M100", "default": "n", "cond": "ARCH_RISCV"}], "children": [{"type": 3, "name": "ARCH_CHIP_NR5", "value": "n", "user_value": null, "dep": "n", "prompt": "NEXT NanoRisc5", "cond": "y", "selects": [{"symbol": "ARCH_RV32IM", "cond": "y"}], "help": "NEXT RISC-V NR5Mxx architectures (RISC-V RV32IM cores)."}]}, {"type": 3, "name": "ARCH_RV32I", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_RISCV"}]}, {"type": 3, "name": "ARCH_RV32IM", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_NR5 && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_RISCV"}]}, {"type": 47, "name": "ARCH_FAMILY", "value": "armv7-m", "user_value": "armv7-m", "dep": "n", "defaults": [{"name": "rv32im", "default": "rv32im", "cond": "ARCH_RM32IM && ARCH_RISCV"}]}, {"type": 47, "name": "ARCH_CHIP", "value": "cxd56xx", "user_value": "cxd56xx", "dep": "n", "defaults": [{"name": "nr5m100", "default": "nr5m100", "cond": "ARCH_CHIP_NR5M100 && ARCH_RISCV"}]}, {"type": 3, "name": "NR5_MPU", "value": "n", "user_value": null, "dep": "n", "prompt": "MPU support", "cond": "ARCH_HAVE_MPU && ARCH_RISCV", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_MPU && ARCH_RISCV"}], "selects": [{"symbol": "ARCH_USE_MPU", "cond": "ARCH_HAVE_MPU && ARCH_RISCV"}], "help": "Build in support for the RISC-V Memory Protection Unit (MPU).\nCheck your chip specifications first; not all RISC-V architectures\nsupport the MPU."}, {"type": 6, "dep": "n", "prompt": "RV32IM Configuration Options", "cond": "ARCH_RV32IM && ARCH_RISCV"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Toolchain Selection", "cond": "ARCH_RV32IM && ARCH_RISCV", "defaults": [{"name": "RV32IM_TOOLCHAIN_GNU_RVGW", "default": "n", "cond": "TOOLCHAIN_WINDOWS && ARCH_RV32IM && ARCH_RISCV"}, {"name": "RV32IM_TOOLCHAIN_GNU_RVGL", "default": "n", "cond": "!TOOLCHAIN_WINDOWS && ARCH_RV32IM && ARCH_RISCV"}], "children": [{"type": 3, "name": "RV32IM_TOOLCHAIN_GNU_RVGL", "value": "n", "user_value": null, "dep": "n", "prompt": "Generic GNU RVG toolchain under Linux (or other POSIX environment)", "cond": "y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "y"}], "help": "This option should work for any modern GNU toolchain (GCC 5.2 or newer)\nconfigured for riscv32-unknown-elf."}, {"type": 3, "name": "RV32IM_TOOLCHAIN_GNU_RVGW", "value": "n", "user_value": null, "dep": "n", "prompt": "Generic GNU RVG toolchain under Windows", "cond": "TOOLCHAIN_WINDOWS && y", "selects": [{"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "TOOLCHAIN_WINDOWS && y"}], "help": "This option should work for any modern GNU toolchain (GCC 5.2 or newer)\nconfigured for riscv32-unknown-elf."}]}, {"type": 3, "name": "RV32IM_HW_MULDIV", "value": "n", "user_value": null, "dep": "n", "prompt": "Supports Hardware MUL and DIV", "cond": "ARCH_RV32IM && ARCH_RISCV", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_RV32IM && ARCH_RISCV"}], "help": "Specifies if the architecture supports hardware multiply and\nhardware division instructions.  Selecting this will cause the\ngenerated code to natively use mul / div instructions for any\nmath operations."}, {"type": 3, "name": "RV32IM_SYSTEM_CSRRS_SUPPORT", "value": "n", "user_value": null, "dep": "n", "prompt": "Supports RV core feature identification via CSRRS opcode", "cond": "ARCH_RV32IM && ARCH_RISCV", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_RV32IM && ARCH_RISCV"}], "help": "Specifies if the architecture supports the SYSTEM opcode for reading\nControl Status Registers to obtain the RV core option flags."}, {"type": 3, "name": "RV32IM_CUSTOM_IRQ_SUPPORT", "value": "n", "user_value": null, "dep": "n", "prompt": "Has custom implementation for IRQ handling", "cond": "ARCH_RV32IM && ARCH_RISCV", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_RV32IM && ARCH_RISCV"}], "help": "Allows overriding the standard IRQ processing as described\nin the RISC-V architecture documents.  This allows architecture\nspecific code to support non-standard IRQ processing in the core."}, {"type": 6, "dep": "n", "prompt": "NanoRisc5 Configuration Options", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "NR5 Chip Selection", "cond": "ARCH_CHIP_NR5 && ARCH_CHIP_NR5 && ARCH_RISCV", "defaults": [{"name": "ARCH_CHIP_NR5M100", "default": "n", "cond": "ARCH_CHIP_NR5 && ARCH_CHIP_NR5 && ARCH_RISCV"}], "children": [{"type": 3, "name": "ARCH_CHIP_NR5M100", "value": "n", "user_value": null, "dep": "n", "prompt": "NR5M100", "cond": "y", "selects": [{"symbol": "NR5_HAVE_UART1", "cond": "y"}, {"symbol": "NR5_HAVE_GPIOA", "cond": "y"}, {"symbol": "NR5_HAVE_GPIOB", "cond": "y"}, {"symbol": "NR5_HAVE_GPIOC", "cond": "y"}], "help": "NanoRisc5, RV32IM 128K PROGRAM SRAM, 128K DATA SRAM"}]}, {"type": 3, "name": "NR5_NR5M100", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}], "selects": [{"symbol": "NR5_NR5M1XX", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}, {"symbol": "NR5_HAVE_UART1", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}, {"symbol": "NR5_HAVE_TIMER1", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}]}, {"type": 3, "name": "NR5_NR5M1XX", "value": "n", "user_value": null, "rev_dep": "NR5_NR5M100 && ARCH_CHIP_NR5 && ARCH_RISCV", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}]}, {"type": 3, "name": "NR5_EPIC", "value": "n", "user_value": null, "dep": "n", "prompt": "Has Embedded Priority Interrupt Controller (EPIC)", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV", "help": "NanoRisc5 core can have either single vector interrupts or priority\nencoded interrupts.  Selects if the core was compiled with EPIC."}, {"type": 31, "dep": "n", "prompt": "NR5 Peripheral Support", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV", "children": [{"type": 3, "name": "NR5_HAVE_UART1", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_NR5M100 && y) || (NR5_NR5M100 && ARCH_CHIP_NR5 && ARCH_RISCV)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}]}, {"type": 3, "name": "NR5_HAVE_TIMER1", "value": "n", "user_value": null, "rev_dep": "NR5_NR5M100 && ARCH_CHIP_NR5 && ARCH_RISCV", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}]}, {"type": 3, "name": "NR5_HAVE_TIM2", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}]}, {"type": 3, "name": "NR5_HAVE_I2C1", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}]}, {"type": 3, "name": "NR5_HAVE_SPI1", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}]}, {"type": 3, "name": "NR5_I2C1", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C1", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}], "selects": [{"symbol": "NR5_I2C", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}]}, {"type": 3, "name": "NR5_SPI1", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI1", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}], "selects": [{"symbol": "SPI", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}, {"symbol": "NR5_SPI", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}]}, {"type": 3, "name": "NR5_TIMER1", "value": "n", "user_value": null, "dep": "n", "prompt": "TIMER1", "cond": "NR5_HAVE_TIMER1 && ARCH_CHIP_NR5 && ARCH_RISCV", "defaults": [{"name": "n", "default": "n", "cond": "NR5_HAVE_TIMER1 && ARCH_CHIP_NR5 && ARCH_RISCV"}]}, {"type": 3, "name": "NR5_TIMER2", "value": "n", "user_value": null, "dep": "n", "prompt": "TIMER2", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}]}, {"type": 3, "name": "NR5_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}], "selects": [{"symbol": "ARCH_HAVE_UART1", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}, {"symbol": "NR5_UART", "cond": "ARCH_CHIP_NR5 && ARCH_RISCV"}]}]}, {"type": 3, "name": "NR5_SPI", "value": "n", "user_value": null, "rev_dep": "NR5_SPI1 && ARCH_CHIP_NR5 && ARCH_RISCV", "dep": "n"}, {"type": 3, "name": "NR5_I2C", "value": "n", "user_value": null, "rev_dep": "NR5_I2C1 && ARCH_CHIP_NR5 && ARCH_RISCV", "dep": "n"}, {"type": 3, "name": "NR5_UART", "value": "n", "user_value": null, "rev_dep": "NR5_UART1 && ARCH_CHIP_NR5 && ARCH_RISCV", "dep": "n"}, {"type": 27, "name": "NR5_UART_RX_BUF_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "UART RX Bufer size", "cond": "NR5_UART && ARCH_CHIP_NR5 && ARCH_RISCV", "defaults": [{"name": "64", "default": "64", "cond": "NR5_UART && ARCH_CHIP_NR5 && ARCH_RISCV"}], "help": "Size of RX buffers for NR5 UARTs"}, {"type": 27, "name": "NR5_UART_TX_BUF_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "UART TX Bufer size", "cond": "NR5_UART && ARCH_CHIP_NR5 && ARCH_RISCV", "defaults": [{"name": "64", "default": "64", "cond": "NR5_UART && ARCH_CHIP_NR5 && ARCH_RISCV"}], "help": "Size of TX buffers for NR5 UARTs"}, {"type": 6, "dep": "n", "prompt": "Simulation Configuration Options", "cond": "ARCH_SIM"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Host CPU Type", "cond": "ARCH_SIM", "defaults": [{"name": "HOST_X86_64", "default": "n", "cond": "ARCH_SIM"}], "children": [{"type": 3, "name": "HOST_X86_64", "value": "n", "user_value": null, "dep": "n", "prompt": "x86_64", "cond": "y"}, {"type": 3, "name": "HOST_X86", "value": "n", "user_value": null, "dep": "n", "prompt": "x86", "cond": "y"}, {"type": 3, "name": "HOST_ARM", "value": "n", "user_value": null, "dep": "n", "prompt": "arm", "cond": "y"}]}, {"type": 3, "name": "SIM_M32", "value": "n", "user_value": null, "dep": "n", "prompt": "Build 32-bit simulation on 64-bit machine", "cond": "HOST_X86_64 && ARCH_SIM", "defaults": [{"name": "n", "default": "n", "cond": "HOST_X86_64 && ARCH_SIM"}], "help": "Simulation context switching is based on logic like setjmp and longjmp.  This\ncontext switching is only available for 32-bit targets.  On 64-bit machines,\nthis context switching will fail.\n\nThe workaround on 64-bit machines for now is to build for a 32-bit target on the\n64-bit machine.  The workaround for this issue has been included in NuttX 6.15 and\nbeyond.  For thoses versions, you must add SIM_M32=y to the .config file in\norder to enable building a 32-bit image on a 64-bit platform."}, {"type": 3, "name": "SIM_CYGWIN_DECORATED", "value": "n", "user_value": null, "dep": "n", "prompt": "Decorated Cygwin names", "cond": "WINDOWS_CYGWIN && ARCH_SIM", "defaults": [{"name": "n", "default": "n", "cond": "WINDOWS_CYGWIN && ARCH_SIM"}], "help": "Older versions of Cygwin tools decorated C symbol names by adding an\nunderscore to the beginning of the symbol name.  Newer versions of\nCygwin do not seem to do this.\n\nHow do you know if you need this option?  You could look at the generated\nsymbol tables to see if there are underscore characters at the beginning\nof the symbol names.  Or, if you need this option, the simulation will not\nrun:  It will crash early, probably in some function due to the failure to\nallocate memory."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "X64_64 ABI", "cond": "HOST_X86_64 && !SIM_32 && ARCH_SIM", "defaults": [{"name": "SIM_X8664_SYSTEMV", "default": "n", "cond": "HOST_LINUX && HOST_X86_64 && !SIM_32 && ARCH_SIM"}, {"name": "SIM_X8664_MICROSOFT", "default": "n", "cond": "HOST_WINDOWS && HOST_X86_64 && !SIM_32 && ARCH_SIM"}], "children": [{"type": 3, "name": "SIM_X8664_SYSTEMV", "value": "n", "user_value": null, "dep": "n", "prompt": "System V AMD64 ABI", "cond": "y", "help": "The calling convention of the System V AMD64 ABI is followed on Solaris,\nLinux, FreeBSD, Mac OS X, and other UNIX-like or POSIX-compliant operating\nsystems. The first six integer or pointer arguments are passed in registers\nRDI, RSI, RDX, RCX, R8, and R9, while XMM0, XMM1, XMM2, XMM3, XMM4, XMM5,\nXMM6 and XMM7 are used for floating point arguments. For system calls, R10\nis used instead of RCX.   As in the Microsoft x64 calling convention,\nadditional arguments are passed on the stack and the return value is stored\nin RAX.\n\nRegisters RBP, RBX, and R12-R15 are callee-save registers; all others must\nbe saved by the caller if they wish to preserve their values.\n\nUnlike the Microsoft calling convention, a shadow space is not provided; on\nfunction entry, the return address is adjacent to the seventh integer argument\non the stack."}, {"type": 3, "name": "SIM_X8664_MICROSOFT", "value": "n", "user_value": null, "dep": "n", "prompt": "Microsoft x64 calling convention", "cond": "y", "help": "The Microsoft x64 calling convention is followed on Microsoft Windows and\npre-boot UEFI (for long mode on x86-64). It uses registers RCX, RDX, R8,\nR9 for the first four integer or pointer arguments (in that order), and\nXMM0, XMM1, XMM2, XMM3 are used for floating point arguments. Additional\narguments are pushed onto the stack (right to left). Integer return\nvalues (similar to x86) are returned in RAX if 64 bits or less. Floating\npoint return values are returned in XMM0. Parameters less than 64 bits\nlong are not zero extended; the high bits are not zeroed."}]}, {"type": 3, "name": "SIM_WALLTIME", "value": "n", "user_value": null, "dep": "n", "prompt": "Execution simulation in near real-time", "cond": "ARCH_SIM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_SIM"}], "help": "NOTE:  In order to facility fast testing, the sim target's IDLE loop, by default,\ncalls the system timer \"interrupt handler\" as fast as possible.  As a result, there\nreally are no noticeable delays when a task sleeps.  However, the task really does\nsleep -- but the time scale is wrong.  If you want behavior that is closer to\nnormal timing, then you can define SIM_WALLTIME=y in your configuration\nfile.  This configuration setting will cause the sim target's IDLE loop to delay\non each call so that the system \"timer interrupt\" is called at a rate approximately\ncorrect for the system timer tick rate.  With this definition in the configuration,\nsleep() behavior is more or less normal."}, {"type": 3, "name": "SIM_NETDEV", "value": "n", "user_value": null, "dep": "n", "prompt": "Simulated Network Device", "cond": "NET && ARCH_SIM", "defaults": [{"name": "y", "default": "y", "cond": "NET && ARCH_SIM"}], "help": "Build in support for a simulated network device using a TAP device on Linux or\nWPCAP on Windows."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Simulation Network Type", "cond": "SIM_NETDEV && HOST_LINUX && ARCH_SIM", "defaults": [{"name": "SIM_NET_HOST_ROUTE", "default": "n", "cond": "SIM_NETDEV && HOST_LINUX && ARCH_SIM"}], "children": [{"type": 3, "name": "SIM_NET_HOST_ROUTE", "value": "n", "user_value": null, "dep": "n", "prompt": "Use local host route", "cond": "y", "help": "Add a host route for the simulation that points to the created tap device.  The\nsimulation will not be able to access the public network unless iptables is\nconfigured to masquerade for it.  See configs/sim/NETWORK-LINUX.txt for more\ninformation."}, {"type": 3, "name": "SIM_NET_BRIDGE", "value": "n", "user_value": null, "dep": "n", "prompt": "Attach to Linux bridge", "cond": "y", "help": "Add the created tap device to the specified bridge.  You will need to manually\nconfigure the bridge IP address (if any) and routes that point to the bridge.\nSee configs/sim/NETWORK-LINUX.txt for more information."}]}, {"type": 47, "name": "SIM_NET_BRIDGE_DEVICE", "value": "", "user_value": null, "dep": "n", "prompt": "Bridge device to attach", "cond": "SIM_NET_BRIDGE && ARCH_SIM", "defaults": [{"name": "nuttx0", "default": "nuttx0", "cond": "SIM_NET_BRIDGE && ARCH_SIM"}], "help": "The name of the bridge device (as passed to \"brctl create\") to which the simulation's\nTAP interface should be added."}, {"type": 3, "name": "SIM_LCDDRIVER", "value": "n", "user_value": null, "dep": "n", "prompt": "Build a simulated LCD driver", "cond": "NX && NX_LCDDRIVER && ARCH_SIM", "defaults": [{"name": "y", "default": "y", "cond": "NX && NX_LCDDRIVER && ARCH_SIM"}], "help": "Build a simulated LCD driver\""}, {"type": 3, "name": "SIM_FRAMEBUFFER", "value": "n", "user_value": null, "dep": "n", "prompt": "Build a simulated frame buffer driver", "cond": "!NX_LCDDRIVER && ARCH_SIM", "defaults": [{"name": "n", "default": "n", "cond": "!NX_LCDDRIVER && ARCH_SIM"}], "help": "Build a simulated frame buffer driver\"", "children": [{"type": 3, "name": "SIM_X11FB", "value": "n", "user_value": null, "dep": "n", "prompt": "Use X11 window", "cond": "SIM_FRAMEBUFFER && ARCH_SIM", "defaults": [{"name": "n", "default": "n", "cond": "SIM_FRAMEBUFFER && ARCH_SIM"}], "help": "Use an X11 graphics window to simulate the graphics device\"", "children": [{"type": 3, "name": "SIM_X11NOSHM", "value": "n", "user_value": null, "dep": "n", "prompt": "Don't use shared memory with X11", "cond": "SIM_X11FB && SIM_FRAMEBUFFER && ARCH_SIM", "defaults": [{"name": "n", "default": "n", "cond": "SIM_X11FB && SIM_FRAMEBUFFER && ARCH_SIM"}], "help": "Don't use shared memory with the X11 graphics device emulation.\""}]}, {"type": 27, "name": "SIM_FBHEIGHT", "value": "", "user_value": null, "dep": "n", "prompt": "Display height", "cond": "SIM_FRAMEBUFFER && ARCH_SIM", "defaults": [{"name": "240", "default": "240", "cond": "SIM_FRAMEBUFFER && ARCH_SIM"}], "help": "Simulated display height.  Default: 240"}, {"type": 27, "name": "SIM_FBWIDTH", "value": "", "user_value": null, "dep": "n", "prompt": "Display width", "cond": "SIM_FRAMEBUFFER && ARCH_SIM", "defaults": [{"name": "320", "default": "320", "cond": "SIM_LCDDRIVER && SIM_FRAMEBUFFER && ARCH_SIM"}, {"name": "480", "default": "480", "cond": "SIM_FRAMEBUFFER && SIM_FRAMEBUFFER && ARCH_SIM"}], "help": "Simulated width of the display.  Default: 320 or 480"}, {"type": 27, "name": "SIM_FBBPP", "value": "", "user_value": null, "dep": "n", "prompt": "Pixel depth in bits", "cond": "SIM_FRAMEBUFFER && ARCH_SIM", "defaults": [{"name": "8", "default": "8", "cond": "SIM_FRAMEBUFFER && ARCH_SIM"}], "help": "Pixel depth in bits.  Valid choices are 4, 8, 16, 24, or 32.\nIf you use the X11 display emulation, the selected BPP must match the BPP\nof your graphics hardware (probably 32 bits).  Default: 8"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "X11 Simulated Input Device", "cond": "SIM_X11FB && INPUT && ARCH_SIM", "defaults": [{"name": "SIM_NOINPUT", "default": "n", "cond": "SIM_X11FB && INPUT && ARCH_SIM"}], "children": [{"type": 3, "name": "SIM_TOUCHSCREEN", "value": "n", "user_value": null, "dep": "n", "prompt": "X11 mouse-based touchscreen emulation", "cond": "y", "help": "Support an X11 mouse-based touchscreen emulation.  Also needs INPUT=y"}, {"type": 3, "name": "SIM_AJOYSTICK", "value": "n", "user_value": null, "dep": "n", "prompt": "X11 mouse-based analog joystick emulation", "cond": "y", "help": "Support an X11 mouse-based anallog joystick emulation.  Also needs INPUT=y`"}, {"type": 3, "name": "SIM_NOINPUT", "value": "n", "user_value": null, "dep": "n", "prompt": "No input device", "cond": "y"}]}, {"type": 3, "name": "SIM_TCNWAITERS", "value": "n", "user_value": null, "dep": "n", "prompt": "Maximum number poll() waiters", "cond": "!POLL_DISABLE && SIM_TOUCHSCREEN && ARCH_SIM", "defaults": [{"name": "4", "default": "4", "cond": "!POLL_DISABLE && SIM_TOUCHSCREEN && ARCH_SIM"}], "help": "The maximum number of threads that can be waiting on poll() for a\ntouchscreen event. Default: 4"}, {"type": 3, "name": "SIM_IOEXPANDER", "value": "n", "user_value": null, "dep": "n", "prompt": "Simulated I/O Expander", "cond": "IOEXPANDER && ARCH_SIM", "defaults": [{"name": "n", "default": "n", "cond": "IOEXPANDER && ARCH_SIM"}], "selects": [{"symbol": "IOEXPANDER_INT_ENABLE", "cond": "IOEXPANDER && ARCH_SIM"}], "help": "Build a simple, simulated I/O Expander chip simulation (for testing\npurposes only).", "children": [{"type": 27, "name": "SIM_INT_NCALLBACKS", "value": "", "user_value": null, "dep": "n", "prompt": "Max number of interrupt callbacks", "cond": "SIM_IOEXPANDER && ARCH_SIM", "defaults": [{"name": "4", "default": "4", "cond": "SIM_IOEXPANDER && ARCH_SIM"}], "help": "This is the maximum number of interrupt callbacks supported"}, {"type": 27, "name": "SIM_INT_POLLDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "Interrupt poll delay (used)", "cond": "SIM_IOEXPANDER && ARCH_SIM", "defaults": [{"name": "500000", "default": "500000", "cond": "SIM_IOEXPANDER && ARCH_SIM"}], "help": "This microsecond delay defines the polling rate for missed interrupts."}]}, {"type": 3, "name": "SIM_SPIFLASH", "value": "n", "user_value": null, "dep": "n", "prompt": "Simulated SPI FLASH with SMARTFS", "cond": "ARCH_SIM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_SIM"}], "selects": [{"symbol": "FS_SMARTFS", "cond": "ARCH_SIM"}, {"symbol": "MTD_SMART", "cond": "ARCH_SIM"}], "help": "Adds a simulated SPI FLASH that responds to standard M25 style\ncommands on the SPI bus.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Simulated SPI FLASH Size", "cond": "SIM_SPIFLASH && ARCH_SIM", "defaults": [{"name": "SIM_SPIFLASH_1M", "default": "n", "cond": "SIM_SPIFLASH && ARCH_SIM"}], "children": [{"type": 3, "name": "SIM_SPIFLASH_1M", "value": "n", "user_value": null, "dep": "n", "prompt": "1 MBit (128K Byte)", "cond": "y"}, {"type": 3, "name": "SIM_SPIFLASH_8M", "value": "n", "user_value": null, "dep": "n", "prompt": "8 MBit (1M Byte)", "cond": "y"}, {"type": 3, "name": "SIM_SPIFLASH_32M", "value": "n", "user_value": null, "dep": "n", "prompt": "32 MBit (4M Byte)", "cond": "y"}, {"type": 3, "name": "SIM_SPIFLASH_64M", "value": "n", "user_value": null, "dep": "n", "prompt": "64 MBit (8M Byte)", "cond": "y"}, {"type": 3, "name": "SIM_SPIFLASH_128M", "value": "n", "user_value": null, "dep": "n", "prompt": "128 MBit (16M Byte)", "cond": "y"}]}, {"type": 27, "name": "SIM_SPIFLASH_SECTORSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "FLASH Sector Erase Size", "cond": "SIM_SPIFLASH && ARCH_SIM", "defaults": [{"name": "65536", "default": "65536", "cond": "SIM_SPIFLASH && ARCH_SIM"}], "help": "Sets the large sector erase size that the part simulates.\nThis driver simulates SPI devices that have both a large\nsector erase as well as a \"sub-sector\" (per the datasheet)\nerase size (typically 4K bytes)."}, {"type": 27, "name": "SIM_SPIFLASH_SUBSECTORSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "FLASH Sub-Sector Erase Size", "cond": "SIM_SPIFLASH && ARCH_SIM", "defaults": [{"name": "4096", "default": "4096", "cond": "SIM_SPIFLASH && ARCH_SIM"}], "help": "Sets the smaller sub-sector erase size supported by the\nFLASH emulation"}]}, {"type": 3, "name": "SIM_SPIFLASH_M25P", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable M25Pxx FLASH", "cond": "MTD_M25P && ARCH_SIM", "help": "Enables simulation of an M25P type FLASH"}, {"type": 3, "name": "SIM_SPIFLASH_SST26", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable SST26 FLASH", "cond": "MTD_SST26 && ARCH_SIM", "help": "Enables simulation of an SST26 type FLASH"}, {"type": 3, "name": "SIM_SPIFLASH_W25", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable W25 FLASH", "cond": "MTD_W25 && ARCH_SIM", "help": "Enables simulation of a W25 type FLASH"}, {"type": 3, "name": "SIM_SPIFLASH_CUSTOM", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Emulation of a Custom Manufacturer / ID FLASH", "cond": "SIM_SPIFLASH && ARCH_SIM", "help": "Enables simulation of FLASH with a custom Manufacturer, ID and Capacity", "children": [{"type": 24, "name": "SIM_SPIFLASH_MANUFACTURER", "value": "", "user_value": null, "dep": "n", "prompt": "Hex ID of the FLASH manufacturer code", "cond": "SIM_SPIFLASH_CUSTOM && ARCH_SIM", "defaults": [{"name": "0x20", "default": "0x20", "cond": "SIM_SPIFLASH_CUSTOM && ARCH_SIM"}], "help": "Allows the simulated FLASH Manufacturer ID to be set."}, {"type": 24, "name": "SIM_SPIFLASH_MEMORY_TYPE", "value": "", "user_value": null, "dep": "n", "prompt": "Hex ID of the FLASH Memory Type code", "cond": "SIM_SPIFLASH_CUSTOM && ARCH_SIM", "defaults": [{"name": "0x20", "default": "0x20", "cond": "SIM_SPIFLASH_CUSTOM && ARCH_SIM"}], "help": "Allows the simulated FLASH Memory Type code to be set."}, {"type": 24, "name": "SIM_SPIFLASH_CAPACITY", "value": "", "user_value": null, "dep": "n", "prompt": "Hex ID of the FLASH capacity code", "cond": "SIM_SPIFLASH_CUSTOM && ARCH_SIM", "defaults": [{"name": "0x14", "default": "0x14", "cond": "SIM_SPIFLASH_CUSTOM && ARCH_SIM"}], "help": "Allows the simulated FLASH Memory Capacity code to be set."}]}, {"type": 27, "name": "SIM_SPIFLASH_PAGESIZE", "value": "", "user_value": null, "dep": "n", "prompt": "FLASH Write / Program Page Size", "cond": "SIM_SPIFLASH && ARCH_SIM", "defaults": [{"name": "256", "default": "256", "cond": "SIM_SPIFLASH && ARCH_SIM"}], "help": "Sets the size of a page program operation.  The page size\nrepresents the maximum number of bytes that can be sent\nfor a program operation.  If more bytes than this are\nsent on a single Page Program, then the address will\n\"wrap\" causing the initial data sent to be overwritten.\nThis is consistent with standard SPI FLASH operation."}, {"type": 3, "name": "SIM_QSPIFLASH", "value": "n", "user_value": null, "dep": "n", "prompt": "Simulated QSPI FLASH with SMARTFS", "cond": "ARCH_SIM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_SIM"}], "selects": [{"symbol": "FS_SMARTFS", "cond": "ARCH_SIM"}, {"symbol": "MTD_SMART", "cond": "ARCH_SIM"}], "help": "Adds a simulated QSPI FLASH that responds to N25QXXX style\ncommands on the QSPI bus.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Simulated QSPI FLASH Size", "cond": "SIM_QSPIFLASH && ARCH_SIM", "defaults": [{"name": "SIM_QSPIFLASH_1M", "default": "n", "cond": "SIM_QSPIFLASH && ARCH_SIM"}], "children": [{"type": 3, "name": "SIM_QSPIFLASH_1M", "value": "n", "user_value": null, "dep": "n", "prompt": "1 MBit (128K Byte)", "cond": "y"}, {"type": 3, "name": "SIM_QSPIFLASH_8M", "value": "n", "user_value": null, "dep": "n", "prompt": "8 MBit (1M Byte)", "cond": "y"}, {"type": 3, "name": "SIM_QSPIFLASH_32M", "value": "n", "user_value": null, "dep": "n", "prompt": "32 MBit (4M Byte)", "cond": "y"}, {"type": 3, "name": "SIM_QSPIFLASH_64M", "value": "n", "user_value": null, "dep": "n", "prompt": "64 MBit (8M Byte)", "cond": "y"}, {"type": 3, "name": "SIM_QSPIFLASH_128M", "value": "n", "user_value": null, "dep": "n", "prompt": "128 MBit (16M Byte)", "cond": "y"}]}, {"type": 24, "name": "SIM_QSPIFLASH_MANUFACTURER", "value": "", "user_value": null, "dep": "n", "prompt": "Hex ID of the FLASH manufacturer code", "cond": "SIM_QSPIFLASH && ARCH_SIM", "defaults": [{"name": "0x20", "default": "0x20", "cond": "SIM_QSPIFLASH && ARCH_SIM"}], "help": "Allows the simulated FLASH Manufacturer ID to be set."}, {"type": 24, "name": "SIM_QSPIFLASH_MEMORY_TYPE", "value": "", "user_value": null, "dep": "n", "prompt": "Hex ID of the FLASH Memory Type code", "cond": "SIM_QSPIFLASH && ARCH_SIM", "defaults": [{"name": "0xba", "default": "0xba", "cond": "SIM_QSPIFLASH && ARCH_SIM"}], "help": "Allows the simulated FLASH Memory Type code to be set."}, {"type": 27, "name": "SIM_QSPIFLASH_SECTORSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "FLASH Sector Erase Size", "cond": "SIM_QSPIFLASH && ARCH_SIM", "defaults": [{"name": "65536", "default": "65536", "cond": "SIM_QSPIFLASH && ARCH_SIM"}], "help": "Sets the large sector erase size that the part simulates.\nThis driver simulates QSPI devices that have both a large\nsector erase as well as a \"sub-sector\" (per the datasheet)\nerase size (typically 4K bytes)."}, {"type": 27, "name": "SIM_QSPIFLASH_SUBSECTORSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "FLASH Sub-Sector Erase Size", "cond": "SIM_QSPIFLASH && ARCH_SIM", "defaults": [{"name": "4096", "default": "4096", "cond": "SIM_QSPIFLASH && ARCH_SIM"}], "help": "Sets the smaller sub-sector erase size supported by the\nFLASH emulation"}, {"type": 27, "name": "SIM_QSPIFLASH_PAGESIZE", "value": "", "user_value": null, "dep": "n", "prompt": "FLASH Write / Program Page Size", "cond": "SIM_QSPIFLASH && ARCH_SIM", "defaults": [{"name": "256", "default": "256", "cond": "SIM_QSPIFLASH && ARCH_SIM"}], "help": "Sets the size of a page program operation.  The page size\nrepresents the maximum number of bytes that can be sent\nfor a program operation.  If more bytes than this are\nsent on a single Page Program, then the address will\n\"wrap\" causing the initial data sent to be overwritten.\nThis is consistent with standard SPI FLASH operation."}]}, {"type": 6, "dep": "n", "prompt": "x86 Configuration Options", "cond": "ARCH_X86"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "x86 chip selection", "cond": "ARCH_X86", "defaults": [{"name": "ARCH_I486", "default": "n", "cond": "ARCH_X86"}], "children": [{"type": 3, "name": "ARCH_I486", "value": "n", "user_value": null, "dep": "n", "prompt": "i486", "cond": "y", "selects": [{"symbol": "ARCH_X86_HAVE_32BIT", "cond": "y"}], "help": "Intel i486 architecture"}]}, {"type": 3, "name": "ARCH_CHIP_QEMU", "value": "n", "user_value": null, "dep": "n", "prompt": "Qemu x86 emulation", "cond": "ARCH_X86", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_X86"}], "help": "Intel i486 architecture"}, {"type": 47, "name": "ARCH_CHIP", "value": "cxd56xx", "user_value": "cxd56xx", "dep": "n", "defaults": [{"name": "qemu", "default": "qemu", "cond": "ARCH_CHIP_QEMU && ARCH_X86"}]}, {"type": 3, "name": "ARCH_X86_HAVE_32BIT", "value": "n", "user_value": null, "rev_dep": "ARCH_I486 && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_X86"}]}, {"type": 3, "name": "ARCH_X86_M32", "value": "n", "user_value": null, "dep": "n", "prompt": "Build 32-bit system with a 64-bit machine", "cond": "ARCH_X86_HAVE_32BIT && ARCH_X86", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_X86_HAVE_32BIT && ARCH_X86"}], "help": "If you are building for a 32-bit target using a native 64-bit\ntoolchain, then you need to add compilation options to select the\n32-bit target.  Selecting this option will add the -m32 option to\nthe compiler command line."}, {"type": 6, "dep": "n", "prompt": "Common Configuration Options", "cond": "ARCH_X86 && ARCH_X86"}, {"type": 6, "dep": "n", "prompt": "i486 Configuration Options", "cond": "ARCH_I486 && ARCH_I486 && ARCH_X86"}, {"type": 6, "dep": "n", "prompt": "QEMU Configuration Options", "cond": "ARCH_CHIP_QEMU && ARCH_CHIP_QEMU && ARCH_X86"}, {"type": 3, "name": "QEMU_KEYPAD", "value": "n", "user_value": null, "dep": "n", "prompt": "QEMU Keypad", "cond": "ARCH_CHIP_QEMU && ARCH_CHIP_QEMU && ARCH_X86", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_QEMU && ARCH_CHIP_QEMU && ARCH_X86"}], "help": "Enable support for the QEMU keypad.  See qemu_keypad.h for\ninterfaces."}, {"type": 3, "name": "QEMU_VGA", "value": "n", "user_value": null, "dep": "n", "prompt": "QEMU VGA", "cond": "ARCH_CHIP_QEMU && ARCH_CHIP_QEMU && ARCH_X86", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_QEMU && ARCH_CHIP_QEMU && ARCH_X86"}], "help": "Enable support for the QEMU VGA.  See qemu_vga.h for interfaces.\n\nNOTE:  This VGA driver exports a character driver that can be used\nto write into the VGA framebuffer. It does *NOT* support a NuttX\nframebuffer interfaces and, hence, cannot be used with the NuttX\ngraphics subsystem.  Such a conversion to the standard NuttX\nframebuffer interface would, however, not be a big job."}, {"type": 3, "name": "QEMU_GPIOIRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIO interrupt support", "cond": "EXPERIMENTAL && ARCH_CHIP_QEMU && ARCH_CHIP_QEMU && ARCH_X86", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_QEMU && ARCH_CHIP_QEMU && ARCH_X86"}], "help": "Enable support for GPIO interrupts (not implemented)"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "XTENSA architecture selection", "cond": "ARCH_XTENSA", "defaults": [{"name": "ARCH_CHIP_ESP32", "default": "n", "cond": "ARCH_XTENSA"}], "children": [{"type": 3, "name": "ARCH_CHIP_ESP32", "value": "n", "user_value": null, "dep": "n", "prompt": "Expressif ESP32", "cond": "y", "selects": [{"symbol": "ARCH_FAMILY_LX6", "cond": "y"}, {"symbol": "XTENSA_HAVE_INTERRUPTS", "cond": "y"}, {"symbol": "ARCH_HAVE_MULTICPU", "cond": "y"}, {"symbol": "ARCH_TOOLCHAIN_GNU", "cond": "y"}], "help": "The ESP32 is a dual-core system from Expressif with two Harvard\narchitecture Xtensa LX6 CPUs. All embedded memory, external memory\nand peripherals are located on the data bus and/or the instruction\nbus of these CPUs. With some minor exceptions, the address mapping\nof two CPUs is symmetric, meaning they use the same addresses to\naccess the same memory.\n\nThe two CPUs are named \"PRO_CPU\" and \"APP_CPU\" (for \"protocol\" and\n\"application\"), however for most purposes the two CPUs are\ninterchangeable."}]}, {"type": 3, "name": "ARCH_FAMILY_LX6", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_ESP32 && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_XTENSA"}], "help": "Cadence\u00ae Tensilica\u00ae Xtensa\u00ae LX6 data plane processing unit (DPU).\nThe LX6 is a configurable and extensible processor core."}, {"type": 47, "name": "ARCH_CHIP", "value": "cxd56xx", "user_value": "cxd56xx", "dep": "n", "defaults": [{"name": "esp32", "default": "esp32", "cond": "ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}, {"type": 3, "name": "XTENSA_CP_LAZY", "value": "n", "user_value": null, "dep": "n", "prompt": "Lazy co-processor state restoration", "cond": "EXPERIMENTAL && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_XTENSA"}], "help": "NuttX logic saves and restores the co-processor enabled (CPENABLE)\nregister on each context switch.  This has disadvantages in that (1)\nco-processor context will be saved and restored even if the co-\nprocessor was never used, and (2) tasks must explicitly enable and\ndisable co-processors.\n\nAn alternative, \"lazy\" co-processor state restore is enabled with\nthis option.  That logic works like as follows:\n\na. CPENABLE is set to zero on each context switch, disabling all co-\n   processors.\nb. If/when the task attempts to use the disabled co-processor, an\n   exception occurs\nc. The co-processor exception handler re-enables the co-processor."}, {"type": 3, "name": "XTENSA_USE_OVLY", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_XTENSA"}], "help": "Enable code overlay support. This option is currently unsupported."}, {"type": 24, "name": "XTENSA_CP_INITSET", "value": "", "user_value": null, "dep": "n", "prompt": "Default co-processor enables", "cond": "!XTENSA_CP_LAZY && ARCH_XTENSA", "defaults": [{"name": "0x0001", "default": "0x0001", "cond": "!XTENSA_CP_LAZY && ARCH_XTENSA"}], "ranges": [{"min": "0", "max": "0xffff", "cond": "!XTENSA_CP_LAZY && ARCH_XTENSA"}], "help": "Co-processors may be enabled on a thread by calling xtensa_coproc_enable()\nand disabled by calling xtensa_coproc_disable().  Some co-processors\nshould be enabled on all threads by default.  That set of co-processors\nis provided by CONFIG_XTENSA_CP_INITSET.  Each bit corresponds to one\ncoprocessor with the same bit layout as for the CPENABLE register."}, {"type": 31, "dep": "n", "prompt": "ESP32 Peripheral Selection", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "children": [{"type": 3, "name": "ESP32_UART", "value": "n", "user_value": null, "rev_dep": "(ESP32_UART0 && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA) || (ESP32_UART1 && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA) || (ESP32_UART2 && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}, {"type": 3, "name": "ESP32_BT", "value": "n", "user_value": null, "dep": "n", "prompt": "Bluetooth", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "ESP32_EMAC", "value": "n", "user_value": null, "dep": "n", "prompt": "Ethernet MAC", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "ESP32_I2C", "value": "n", "user_value": null, "dep": "n", "prompt": "I2C", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "ESP32_I2S0", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S 0", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "ESP32_I2S1", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S 2", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "ESP32_LEDC", "value": "n", "user_value": null, "dep": "n", "prompt": "LED PWM (LEDC)", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "ESP32_PCNT", "value": "n", "user_value": null, "dep": "n", "prompt": "Pulse Count Module (PCNT)", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "ESP32_RMT", "value": "n", "user_value": null, "dep": "n", "prompt": "Remote Control Module (RMT)", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "ESP32_SDIO_SAVE", "value": "n", "user_value": null, "dep": "n", "prompt": "SDIO Slave", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "ESP32_SDMMC", "value": "n", "user_value": null, "dep": "n", "prompt": "SD/MMC card support", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "ESP32_SPI0", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI 0", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "ESP32_SPI1", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI 1", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "ESP32_SPI2", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI 2", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "XTENSA_TIMER1", "value": "n", "user_value": null, "dep": "n", "prompt": "Xtensa Timer 1", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}, {"type": 3, "name": "XTENSA_TIMER2", "value": "n", "user_value": null, "dep": "n", "prompt": "Xtensa Timer 2", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}, {"type": 3, "name": "ESP32_TIMER0", "value": "n", "user_value": null, "rev_dep": "ESP32_MWDT0 && EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "dep": "n", "prompt": "64-bit Timer 0", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "ESP32_TIMER1", "value": "n", "user_value": null, "rev_dep": "ESP32_MWDT1 && EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "dep": "n", "prompt": "64-bit Timer 1", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "ESP32_TIMER2", "value": "n", "user_value": null, "rev_dep": "ESP32_MWDT2 && EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "dep": "n", "prompt": "64-bit Timer 2", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "ESP32_TIMER3", "value": "n", "user_value": null, "rev_dep": "ESP32_MWDT3 && EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "dep": "n", "prompt": "64-bit Timer 3", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "ESP32_MWDT0", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 0 Watchdog", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "selects": [{"symbol": "ESP32_TIMER0", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "ESP32_MWDT1", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 1 Watchdog", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "selects": [{"symbol": "ESP32_TIMER1", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "ESP32_MWDT2", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 2 Watchdog", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "selects": [{"symbol": "ESP32_TIMER2", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "ESP32_MWDT3", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 3 Watchdog", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "selects": [{"symbol": "ESP32_TIMER3", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "ESP32_RWDT", "value": "n", "user_value": null, "dep": "n", "prompt": "RTC Watchdog", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}, {"type": 3, "name": "ESP32_UART0", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 0", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "selects": [{"symbol": "ESP32_UART", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}, {"symbol": "UART0_SERIALDRIVER", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}, {"type": 3, "name": "ESP32_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 1", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "selects": [{"symbol": "ESP32_UART", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}, {"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}, {"type": 3, "name": "ESP32_UART2", "value": "n", "user_value": null, "dep": "n", "prompt": "UART 2", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "selects": [{"symbol": "ESP32_UART", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}, {"symbol": "UART2_SERIALDRIVER", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}, {"type": 3, "name": "ESP32_WIRELESS", "value": "n", "user_value": null, "dep": "n", "prompt": "Wireless", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "help": "No yet implemented"}]}, {"type": 31, "dep": "n", "prompt": "Memory Configuration", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "children": [{"type": 27, "name": "ESP32_BT_RESERVE_DRAM", "value": "", "user_value": null, "dep": "n", "prompt": "Reserved BT DRAM", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "0", "default": "0", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}, {"type": 27, "name": "ESP32_TRACEMEM_RESERVE_DRAM", "value": "", "user_value": null, "dep": "n", "prompt": "Reserved trace memory DRAM", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "0", "default": "0", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}, {"type": 27, "name": "ESP32_ULP_COPROC_RESERVE_MEM", "value": "", "user_value": null, "dep": "n", "prompt": "Reserved ULP co-processor DRAM", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "0", "default": "0", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}]}, {"type": 3, "name": "ESP32_GPIO_IRQ", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIO pin interrupts", "cond": "ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "help": "Enable support for interrupting GPIO pins"}, {"type": 31, "dep": "n", "prompt": "UART configuration", "cond": "ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "children": [{"type": 27, "name": "ESP32_UART0_TXPIN", "value": "", "user_value": null, "dep": "n", "prompt": "UART0 Tx Pin", "cond": "ESP32_UART0 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "1", "default": "1", "cond": "ESP32_UART0 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "ranges": [{"min": "0", "max": "39", "cond": "ESP32_UART0 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}, {"type": 27, "name": "ESP32_UART0_RXPIN", "value": "", "user_value": null, "dep": "n", "prompt": "UART0 Rx Pin", "cond": "ESP32_UART0 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "3", "default": "3", "cond": "ESP32_UART0 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "ranges": [{"min": "0", "max": "39", "cond": "ESP32_UART0 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}, {"type": 27, "name": "ESP32_UART0_RTSPIN", "value": "", "user_value": null, "dep": "n", "prompt": "UART0 RTS Pin", "cond": "(SERIAL_IFLOWCONTROL || SERIAL_OFLOWCONTROL) && ESP32_UART0 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "22", "default": "22", "cond": "(SERIAL_IFLOWCONTROL || SERIAL_OFLOWCONTROL) && ESP32_UART0 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "ranges": [{"min": "0", "max": "39", "cond": "(SERIAL_IFLOWCONTROL || SERIAL_OFLOWCONTROL) && ESP32_UART0 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}, {"type": 27, "name": "ESP32_UART0_CTSPIN", "value": "", "user_value": null, "dep": "n", "prompt": "UART0 CTS Pin", "cond": "(SERIAL_IFLOWCONTROL || SERIAL_OFLOWCONTROL) && ESP32_UART0 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "19", "default": "19", "cond": "(SERIAL_IFLOWCONTROL || SERIAL_OFLOWCONTROL) && ESP32_UART0 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "ranges": [{"min": "0", "max": "39", "cond": "(SERIAL_IFLOWCONTROL || SERIAL_OFLOWCONTROL) && ESP32_UART0 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}, {"type": 27, "name": "ESP32_UART1_TXPIN", "value": "", "user_value": null, "dep": "n", "prompt": "UART1 Tx Pin", "cond": "ESP32_UART1 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "10", "default": "10", "cond": "ESP32_UART1 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "ranges": [{"min": "0", "max": "39", "cond": "ESP32_UART1 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}, {"type": 27, "name": "ESP32_UART1_RXPIN", "value": "", "user_value": null, "dep": "n", "prompt": "UART1 Rx Pin", "cond": "ESP32_UART1 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "9", "default": "9", "cond": "ESP32_UART1 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "ranges": [{"min": "0", "max": "39", "cond": "ESP32_UART1 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}, {"type": 27, "name": "ESP32_UART1_RTSPIN", "value": "", "user_value": null, "dep": "n", "prompt": "UART1 RTS Pin", "cond": "(SERIAL_IFLOWCONTROL || SERIAL_OFLOWCONTROL) && ESP32_UART1 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "11", "default": "11", "cond": "(SERIAL_IFLOWCONTROL || SERIAL_OFLOWCONTROL) && ESP32_UART1 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "ranges": [{"min": "0", "max": "39", "cond": "(SERIAL_IFLOWCONTROL || SERIAL_OFLOWCONTROL) && ESP32_UART1 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}, {"type": 27, "name": "ESP32_UART1_CTSPIN", "value": "", "user_value": null, "dep": "n", "prompt": "UART1 CTS Pin", "cond": "(SERIAL_IFLOWCONTROL || SERIAL_OFLOWCONTROL) && ESP32_UART1 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "6", "default": "6", "cond": "(SERIAL_IFLOWCONTROL || SERIAL_OFLOWCONTROL) && ESP32_UART1 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "ranges": [{"min": "0", "max": "39", "cond": "(SERIAL_IFLOWCONTROL || SERIAL_OFLOWCONTROL) && ESP32_UART1 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}, {"type": 27, "name": "ESP32_UART2_TXPIN", "value": "", "user_value": null, "dep": "n", "prompt": "UART2 Tx Pin", "cond": "ESP32_UART2 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "17", "default": "17", "cond": "ESP32_UART2 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "ranges": [{"min": "0", "max": "39", "cond": "ESP32_UART2 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}, {"type": 27, "name": "ESP32_UART2_RXPIN", "value": "", "user_value": null, "dep": "n", "prompt": "UART2 Rx Pin", "cond": "ESP32_UART2 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "16", "default": "16", "cond": "ESP32_UART2 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "ranges": [{"min": "0", "max": "39", "cond": "ESP32_UART2 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}, {"type": 27, "name": "ESP32_UART2_RTSPIN", "value": "", "user_value": null, "dep": "n", "prompt": "UART2 RTS Pin", "cond": "(SERIAL_IFLOWCONTROL || SERIAL_OFLOWCONTROL) && ESP32_UART2 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "7", "default": "7", "cond": "(SERIAL_IFLOWCONTROL || SERIAL_OFLOWCONTROL) && ESP32_UART2 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "ranges": [{"min": "0", "max": "39", "cond": "(SERIAL_IFLOWCONTROL || SERIAL_OFLOWCONTROL) && ESP32_UART2 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}, {"type": 27, "name": "ESP32_UART2_CTSPIN", "value": "", "user_value": null, "dep": "n", "prompt": "UART2 CTS Pin", "cond": "(SERIAL_IFLOWCONTROL || SERIAL_OFLOWCONTROL) && ESP32_UART2 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA", "defaults": [{"name": "8", "default": "8", "cond": "(SERIAL_IFLOWCONTROL || SERIAL_OFLOWCONTROL) && ESP32_UART2 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}], "ranges": [{"min": "0", "max": "39", "cond": "(SERIAL_IFLOWCONTROL || SERIAL_OFLOWCONTROL) && ESP32_UART2 && ESP32_UART && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA"}]}]}, {"type": 6, "dep": "n", "prompt": "Z16 Configuration Options", "cond": "ARCH_Z16"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "ZNEO chip selection", "cond": "ARCH_Z16", "defaults": [{"name": "ARCH_CHIP_Z16F2811", "default": "n", "cond": "ARCH_Z16"}], "children": [{"type": 3, "name": "ARCH_CHIP_Z16F2810", "value": "n", "user_value": null, "dep": "n", "prompt": "Z16F2810", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z16F", "cond": "y"}, {"symbol": "ARCH_HAVE_IRQPRIO", "cond": "y"}], "help": "ZiLOG Z16F2810"}, {"type": 3, "name": "ARCH_CHIP_Z16F2811", "value": "n", "user_value": null, "dep": "n", "prompt": "Z16F2811", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z16F", "cond": "y"}, {"symbol": "ARCH_HAVE_IRQPRIO", "cond": "y"}], "help": "ZiLOG Z16F2811"}, {"type": 3, "name": "ARCH_CHIP_Z16F3211", "value": "n", "user_value": null, "dep": "n", "prompt": "Z16F3211", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z16F", "cond": "y"}, {"symbol": "ARCH_HAVE_IRQPRIO", "cond": "y"}], "help": "ZiLOG Z16F321"}, {"type": 3, "name": "ARCH_CHIP_Z16F6411", "value": "n", "user_value": null, "dep": "n", "prompt": "Z16F6411", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z16F", "cond": "y"}, {"symbol": "ARCH_HAVE_IRQPRIO", "cond": "y"}], "help": "ZiLOG Z16F6411"}]}, {"type": 3, "name": "ARCH_CHIP_Z16F", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_Z16F2810 && y) || (ARCH_CHIP_Z16F2811 && y) || (ARCH_CHIP_Z16F3211 && y) || (ARCH_CHIP_Z16F6411 && y)", "dep": "n"}, {"type": 47, "name": "ARCH_CHIP", "value": "cxd56xx", "user_value": "cxd56xx", "dep": "n", "defaults": [{"name": "z16f", "default": "z16f", "cond": "ARCH_CHIP_Z16F && ARCH_Z16"}]}, {"type": 6, "dep": "n", "prompt": "Common Configuration Options", "cond": "ARCH_Z16 && ARCH_Z16"}, {"type": 6, "dep": "n", "prompt": "Z16F Configuration Options", "cond": "ARCH_CHIP_Z16F && ARCH_Z16"}, {"type": 31, "dep": "n", "prompt": "Z16F Peripheral Selection", "cond": "ARCH_CHIP_Z16F && ARCH_Z16", "children": [{"type": 3, "name": "Z16F_ESPI", "value": "n", "user_value": null, "dep": "n", "prompt": "ESPI", "cond": "ARCH_CHIP_Z16F && ARCH_Z16", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_Z16F && ARCH_Z16"}], "selects": [{"symbol": "SPI", "cond": "ARCH_CHIP_Z16F && ARCH_Z16"}]}, {"type": 3, "name": "Z16F_UART0", "value": "n", "user_value": null, "dep": "n", "prompt": "UART0", "cond": "ARCH_CHIP_Z16F && ARCH_Z16", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_Z16F && ARCH_Z16"}], "selects": [{"symbol": "UART0_SERIALDRIVER", "cond": "ARCH_CHIP_Z16F && ARCH_Z16"}]}, {"type": 3, "name": "Z16F_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "ARCH_CHIP_Z16F && ARCH_Z16", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_Z16F && ARCH_Z16"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_Z16F && ARCH_Z16"}]}]}, {"type": 31, "dep": "n", "prompt": "Z16F ESPI Configuration", "cond": "Z16F_ESPI && ARCH_CHIP_Z16F && ARCH_Z16", "children": [{"type": 3, "name": "Z16F_ESPI_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "ESPI register-level debug", "cond": "DEBUG_FEATURES && Z16F_ESPI && ARCH_CHIP_Z16F && ARCH_Z16", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && Z16F_ESPI && ARCH_CHIP_Z16F && ARCH_Z16"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "ZiLOG 8-bit MCU", "cond": "ARCH_Z80", "defaults": [{"name": "ARCH_CHIP_Z80", "default": "n", "cond": "ARCH_Z80"}], "children": [{"type": 3, "name": "ARCH_CHIP_Z80", "value": "n", "user_value": null, "dep": "n", "prompt": "Classic z80", "cond": "y", "selects": [{"symbol": "ARCH_NOINTC", "cond": "y"}, {"symbol": "MM_SMALL", "cond": "y"}], "help": "Classic ZiLOG z80 chip"}, {"type": 3, "name": "ARCH_CHIP_Z8018006VSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018006VSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80180", "cond": "y"}], "help": "Z180: 68-pin PLCC Z80180"}, {"type": 3, "name": "ARCH_CHIP_Z8018010VSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018010VSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80180", "cond": "y"}], "help": "Z180: 68-pin PLCC Z80180"}, {"type": 3, "name": "ARCH_CHIP_Z8018008VSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018008VSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80180", "cond": "y"}], "help": "Z180: 68-pin PLCC Z80180"}, {"type": 3, "name": "ARCH_CHIP_Z8018010FSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018010FSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80180", "cond": "y"}], "help": "Z180: 80-pin QFP (11 pins N/C) Z80180"}, {"type": 3, "name": "ARCH_CHIP_Z8018008VEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018008VEG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80180", "cond": "y"}], "help": "Z180: 68-pin PLCC Z80180"}, {"type": 3, "name": "ARCH_CHIP_Z8018006VEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018006VEG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80180", "cond": "y"}], "help": "Z180: 68-pin PLCC Z80180"}, {"type": 3, "name": "ARCH_CHIP_Z8018006PSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018006PSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80180", "cond": "y"}], "help": "Z180: 64-pin DIP 6 MHz 5V Z80180"}, {"type": 3, "name": "ARCH_CHIP_Z8018008FSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018008FSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80180", "cond": "y"}], "help": "Z180: 80-pin QFP (11 pins N/C) 8MHz 5V Z80180"}, {"type": 3, "name": "ARCH_CHIP_Z8018010PSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018010PSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80180", "cond": "y"}], "help": "Z180: 64-pin DIP 10MHz 5V Z80180"}, {"type": 3, "name": "ARCH_CHIP_Z8018006PEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018006PEG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80180", "cond": "y"}], "help": "Z180: 64-pin DIP 6MHz 5V Z80180"}, {"type": 3, "name": "ARCH_CHIP_Z8018010VEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018010VEG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80180", "cond": "y"}], "help": "68-pin PLCC 10MHz 5V Z80180"}, {"type": 3, "name": "ARCH_CHIP_Z8018010PEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018010PEG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80180", "cond": "y"}], "help": "Z180: 64-pin DIP 10MHz 5V Z80180"}, {"type": 3, "name": "ARCH_CHIP_Z8018008PSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018008PSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80180", "cond": "y"}], "help": "Z180: 64-pin DIP 8MHz 5V Z80180"}, {"type": 3, "name": "ARCH_CHIP_Z8018006FSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018006FSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80180", "cond": "y"}], "help": "Z180: 80-pin QFP (11 pins N/C) 6MHz 5V Z80180"}, {"type": 3, "name": "ARCH_CHIP_Z8018000XSO", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018000XSO", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80180", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_Z8018010FEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018010FEG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80180", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_Z8018000WSO", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018000WSO", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80180", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_Z8018008PEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018008PEG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80180", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_Z8018110FEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018110FEG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80181", "cond": "y"}], "help": "Z180: 100-pin QFP Z80181"}, {"type": 3, "name": "ARCH_CHIP_Z8018233FSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018233FSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80182", "cond": "y"}], "help": "100-pin QFP Z80182"}, {"type": 3, "name": "ARCH_CHIP_Z8018220AEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018220AEG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80182", "cond": "y"}], "help": "Z180: 100-pin LQFP 20MHz 5V Z80182"}, {"type": 3, "name": "ARCH_CHIP_Z8018216FSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018216FSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80182", "cond": "y"}], "help": "Z180: 100-pin QFP 16MHz 5V Z80182"}, {"type": 3, "name": "ARCH_CHIP_Z8018216ASG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018216ASG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80182", "cond": "y"}], "help": "Z180: 100-pin LQFP Z80182"}, {"type": 3, "name": "ARCH_CHIP_Z8018233ASG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8018233ASG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80182", "cond": "y"}], "help": "Z180: 100-pin LQFP 33MHz 5V Z80182"}, {"type": 3, "name": "ARCH_CHIP_Z8019520FSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8019520FSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80195", "cond": "y"}], "help": "Z180: 100-pin QFP 20MHz 5V Z80195"}, {"type": 3, "name": "ARCH_CHIP_Z8019533FSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8019533FSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z80195", "cond": "y"}], "help": "Z180: 100-pin QFP 33MHz 5V Z80195"}, {"type": 3, "name": "ARCH_CHIP_Z8L18020VSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8L18020VSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8L180", "cond": "y"}], "help": "Z180: 68-pinn PLCC Z8L180"}, {"type": 3, "name": "ARCH_CHIP_Z8L18020FSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8L18020FSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8L180", "cond": "y"}], "help": "Z180: 80-pin GFP 20MHz 3.3V Z8L180"}, {"type": 3, "name": "ARCH_CHIP_Z8L18020PSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8L18020PSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8L180", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_Z8L18220ASG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8L18220ASG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8L182", "cond": "y"}], "help": "Z180: 100-pin LQFP Z8L182"}, {"type": 3, "name": "ARCH_CHIP_Z8L18220FSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8L18220FSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8L182", "cond": "y"}], "help": "100-pin QFP 20MHz 3.3V Z8L182"}, {"type": 3, "name": "ARCH_CHIP_Z8L18220AEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8L18220AEG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8L182", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_Z8S18020VSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8S18020VSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8S180", "cond": "y"}], "help": "Z180: 68-pin PLCC Z8S180"}, {"type": 3, "name": "ARCH_CHIP_Z8S18020VSG1960", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8S18020VSG1960", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8S180", "cond": "y"}], "help": "Z180: 68-pin PLCC Z8S180"}, {"type": 3, "name": "ARCH_CHIP_Z8S18033VSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8S18033VSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8S180", "cond": "y"}], "help": "Z180: 68-pin PLCC Z8S180"}, {"type": 3, "name": "ARCH_CHIP_Z8S18010FSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8S18010FSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8S180", "cond": "y"}], "help": "80-pin QFP Z8S180"}, {"type": 3, "name": "ARCH_CHIP_Z8S18010VEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8S18010VEG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8S180", "cond": "y"}], "help": "Z180: 68-pin PLCC Z8S180"}, {"type": 3, "name": "ARCH_CHIP_Z8S18020VEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8S18020VEG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8S180", "cond": "y"}], "help": "Z180: 68-pin PLCC Z8S180"}, {"type": 3, "name": "ARCH_CHIP_Z8S18010VSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8S18010VSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8S180", "cond": "y"}], "help": "Z180: 68-pin PLCC Z8S180"}, {"type": 3, "name": "ARCH_CHIP_Z8S18020PSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8S18020PSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8S180", "cond": "y"}], "help": "64-pin DIP 10Mhz 5V Z8S180"}, {"type": 3, "name": "ARCH_CHIP_Z8S18033FSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8S18033FSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8S180", "cond": "y"}], "help": "Z180: 80-pin QFP 33MHz 5V Z8S180"}, {"type": 3, "name": "ARCH_CHIP_Z8S18033FEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8S18033FEG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8S180", "cond": "y"}], "help": "Z180: 80-pin QFP 33MHz 5V Z8S180"}, {"type": 3, "name": "ARCH_CHIP_Z8S18020FSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8S18020FSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8S180", "cond": "y"}], "help": "Z180: 80-pin QFP 20MHz 5V Z8S180"}, {"type": 3, "name": "ARCH_CHIP_Z8S18033VEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8S18033VEG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8S180", "cond": "y"}], "help": "Z180: 68-pin PLCC 33MHz 5V Z8S180"}, {"type": 3, "name": "ARCH_CHIP_Z8S18010PSG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8S18010PSG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8S180", "cond": "y"}], "help": "Z180: 64-pin DIP 10MHz 5V Z8S180"}, {"type": 3, "name": "ARCH_CHIP_Z8S18020FEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8S18020FEG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8S180", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_Z8S18010PEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8S18010PEG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8S180", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_Z8S18010FEG", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8S18010FEG", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z180", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8S180", "cond": "y"}]}, {"type": 3, "name": "ARCH_CHIP_Z8F6403", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8F6403", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z8", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8F640X", "cond": "y"}, {"symbol": "ENDIAN_BIG", "cond": "y"}, {"symbol": "HAVE_LOWSERIALINIT", "cond": "y"}], "help": "ZiLOG Z8F6403 (z8 Encore)"}, {"type": 3, "name": "ARCH_CHIP_Z8F6423", "value": "n", "user_value": null, "dep": "n", "prompt": "Z8F6423", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_Z8", "cond": "y"}, {"symbol": "ARCH_CHIP_Z8F642X", "cond": "y"}, {"symbol": "ENDIAN_BIG", "cond": "y"}, {"symbol": "HAVE_LOWSERIALINIT", "cond": "y"}], "help": "ZiLOG Z8F6423 (z8 Encore)"}, {"type": 3, "name": "ARCH_CHIP_EZ80F91", "value": "n", "user_value": null, "dep": "n", "prompt": "EZ80F91", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_EZ80", "cond": "y"}], "help": "ZiLOG EZ80F91 (ez80 Acclaim)"}, {"type": 3, "name": "ARCH_CHIP_EZ80F92", "value": "n", "user_value": null, "dep": "n", "prompt": "EZ80F92", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_EZ80", "cond": "y"}], "help": "ZiLOG EZ80F92 (ez80 Acclaim)"}, {"type": 3, "name": "ARCH_CHIP_EZ80F93", "value": "n", "user_value": null, "dep": "n", "prompt": "EZ80F93", "cond": "y", "selects": [{"symbol": "ARCH_CHIP_EZ80", "cond": "y"}], "help": "ZiLOG EZ80F93 (ez80 Acclaim)"}]}, {"type": 3, "name": "ARCH_CHIP_Z8F642X", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_Z8F6423 && y", "dep": "n"}, {"type": 3, "name": "ARCH_CHIP_Z8F640X", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_Z8F6403 && y", "dep": "n"}, {"type": 3, "name": "ARCH_CHIP_Z180", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_Z8018006VSG && y) || (ARCH_CHIP_Z8018010VSG && y) || (ARCH_CHIP_Z8018008VSG && y) || (ARCH_CHIP_Z8018010FSG && y) || (ARCH_CHIP_Z8018008VEG && y) || (ARCH_CHIP_Z8018006VEG && y) || (ARCH_CHIP_Z8018006PSG && y) || (ARCH_CHIP_Z8018008FSG && y) || (ARCH_CHIP_Z8018010PSG && y) || (ARCH_CHIP_Z8018006PEG && y) || (ARCH_CHIP_Z8018010VEG && y) || (ARCH_CHIP_Z8018010PEG && y) || (ARCH_CHIP_Z8018008PSG && y) || (ARCH_CHIP_Z8018006FSG && y) || (ARCH_CHIP_Z8018000XSO && y) || (ARCH_CHIP_Z8018010FEG && y) || (ARCH_CHIP_Z8018000WSO && y) || (ARCH_CHIP_Z8018008PEG && y) || (ARCH_CHIP_Z8018110FEG && y) || (ARCH_CHIP_Z8018233FSG && y) || (ARCH_CHIP_Z8018220AEG && y) || (ARCH_CHIP_Z8018216FSG && y) || (ARCH_CHIP_Z8018216ASG && y) || (ARCH_CHIP_Z8018233ASG && y) || (ARCH_CHIP_Z8019520FSG && y) || (ARCH_CHIP_Z8019533FSG && y) || (ARCH_CHIP_Z8L18020VSG && y) || (ARCH_CHIP_Z8L18020FSG && y) || (ARCH_CHIP_Z8L18020PSG && y) || (ARCH_CHIP_Z8L18220ASG && y) || (ARCH_CHIP_Z8L18220FSG && y) || (ARCH_CHIP_Z8L18220AEG && y) || (ARCH_CHIP_Z8S18020VSG && y) || (ARCH_CHIP_Z8S18020VSG1960 && y) || (ARCH_CHIP_Z8S18033VSG && y) || (ARCH_CHIP_Z8S18010FSG && y) || (ARCH_CHIP_Z8S18010VEG && y) || (ARCH_CHIP_Z8S18020VEG && y) || (ARCH_CHIP_Z8S18010VSG && y) || (ARCH_CHIP_Z8S18020PSG && y) || (ARCH_CHIP_Z8S18033FSG && y) || (ARCH_CHIP_Z8S18033FEG && y) || (ARCH_CHIP_Z8S18020FSG && y) || (ARCH_CHIP_Z8S18033VEG && y) || (ARCH_CHIP_Z8S18010PSG && y) || (ARCH_CHIP_Z8S18020FEG && y) || (ARCH_CHIP_Z8S18010PEG && y) || (ARCH_CHIP_Z8S18010FEG && y)", "dep": "n", "selects": [{"symbol": "MM_SMALL", "cond": "ARCH_Z80"}, {"symbol": "ARCH_NOINTC", "cond": "ARCH_Z80"}, {"symbol": "ARCH_HAVE_ADDRENV", "cond": "ARCH_Z80"}, {"symbol": "ARCH_ADDRENV", "cond": "ARCH_Z80"}, {"symbol": "HAVE_LOWSERIALINIT", "cond": "ARCH_Z80"}]}, {"type": 3, "name": "ARCH_CHIP_Z80180", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_Z8018006VSG && y) || (ARCH_CHIP_Z8018010VSG && y) || (ARCH_CHIP_Z8018008VSG && y) || (ARCH_CHIP_Z8018010FSG && y) || (ARCH_CHIP_Z8018008VEG && y) || (ARCH_CHIP_Z8018006VEG && y) || (ARCH_CHIP_Z8018006PSG && y) || (ARCH_CHIP_Z8018008FSG && y) || (ARCH_CHIP_Z8018010PSG && y) || (ARCH_CHIP_Z8018006PEG && y) || (ARCH_CHIP_Z8018010VEG && y) || (ARCH_CHIP_Z8018010PEG && y) || (ARCH_CHIP_Z8018008PSG && y) || (ARCH_CHIP_Z8018006FSG && y) || (ARCH_CHIP_Z8018000XSO && y) || (ARCH_CHIP_Z8018010FEG && y) || (ARCH_CHIP_Z8018000WSO && y) || (ARCH_CHIP_Z8018008PEG && y)", "dep": "n"}, {"type": 3, "name": "ARCH_CHIP_Z80181", "value": "n", "user_value": null, "rev_dep": "ARCH_CHIP_Z8018110FEG && y", "dep": "n"}, {"type": 3, "name": "ARCH_CHIP_Z80182", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_Z8018233FSG && y) || (ARCH_CHIP_Z8018220AEG && y) || (ARCH_CHIP_Z8018216FSG && y) || (ARCH_CHIP_Z8018216ASG && y) || (ARCH_CHIP_Z8018233ASG && y)", "dep": "n"}, {"type": 3, "name": "ARCH_CHIP_Z80195", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_Z8019520FSG && y) || (ARCH_CHIP_Z8019533FSG && y)", "dep": "n"}, {"type": 3, "name": "ARCH_CHIP_Z8L180", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_Z8L18020VSG && y) || (ARCH_CHIP_Z8L18020FSG && y) || (ARCH_CHIP_Z8L18020PSG && y)", "dep": "n"}, {"type": 3, "name": "ARCH_CHIP_Z8L182", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_Z8L18220ASG && y) || (ARCH_CHIP_Z8L18220FSG && y) || (ARCH_CHIP_Z8L18220AEG && y)", "dep": "n"}, {"type": 3, "name": "ARCH_CHIP_Z8S180", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_Z8S18020VSG && y) || (ARCH_CHIP_Z8S18020VSG1960 && y) || (ARCH_CHIP_Z8S18033VSG && y) || (ARCH_CHIP_Z8S18010FSG && y) || (ARCH_CHIP_Z8S18010VEG && y) || (ARCH_CHIP_Z8S18020VEG && y) || (ARCH_CHIP_Z8S18010VSG && y) || (ARCH_CHIP_Z8S18020PSG && y) || (ARCH_CHIP_Z8S18033FSG && y) || (ARCH_CHIP_Z8S18033FEG && y) || (ARCH_CHIP_Z8S18020FSG && y) || (ARCH_CHIP_Z8S18033VEG && y) || (ARCH_CHIP_Z8S18010PSG && y) || (ARCH_CHIP_Z8S18020FEG && y) || (ARCH_CHIP_Z8S18010PEG && y) || (ARCH_CHIP_Z8S18010FEG && y)", "dep": "n"}, {"type": 3, "name": "ARCH_CHIP_Z8", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_Z8F6403 && y) || (ARCH_CHIP_Z8F6423 && y)", "dep": "n", "selects": [{"symbol": "MM_SMALL", "cond": "ARCH_Z80"}]}, {"type": 3, "name": "ARCH_CHIP_EZ80", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_EZ80F91 && y) || (ARCH_CHIP_EZ80F92 && y) || (ARCH_CHIP_EZ80F93 && y)", "dep": "n", "selects": [{"symbol": "MM_SMALL", "cond": "EZ80_Z80MODE && ARCH_Z80"}, {"symbol": "HAVE_LOWSERIALINIT", "cond": "ARCH_Z80"}, {"symbol": "ARCH_HAVE_PHY", "cond": "ARCH_Z80"}]}, {"type": 3, "name": "HAVE_LOWSERIALINIT", "value": "n", "user_value": null, "rev_dep": "(ARCH_CHIP_Z8F6403 && y) || (ARCH_CHIP_Z8F6423 && y) || (ARCH_CHIP_Z180 && ARCH_Z80) || (ARCH_CHIP_EZ80 && ARCH_Z80)", "dep": "n"}, {"type": 47, "name": "ARCH_CHIP", "value": "cxd56xx", "user_value": "cxd56xx", "dep": "n", "defaults": [{"name": "z80", "default": "z80", "cond": "ARCH_CHIP_Z80 && ARCH_Z80"}, {"name": "z180", "default": "z180", "cond": "ARCH_CHIP_Z180 && ARCH_Z80"}, {"name": "z8", "default": "z8", "cond": "ARCH_CHIP_Z8 && ARCH_Z80"}, {"name": "ez80", "default": "ez80", "cond": "ARCH_CHIP_EZ80 && ARCH_Z80"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Toolchain Selection", "cond": "ARCH_CHIP_Z80 && ARCH_Z80", "defaults": [{"name": "Z80_TOOLCHAIN_SDCCW", "default": "n", "cond": "TOOLCHAIN_WINDOWS && ARCH_CHIP_Z80 && ARCH_Z80"}, {"name": "Z80_TOOLCHAIN_SDCCL", "default": "n", "cond": "!TOOLCHAIN_WINDOWS && ARCH_CHIP_Z80 && ARCH_Z80"}], "children": [{"type": 3, "name": "Z80_TOOLCHAIN_SDCCL", "value": "n", "user_value": null, "dep": "n", "prompt": "SDCC for Linux, MAC OSX, or Cygwin", "cond": "!WINDOWS_NATIVE && y"}, {"type": 3, "name": "Z80_TOOLCHAIN_SDCCW", "value": "n", "user_value": null, "dep": "n", "prompt": "SDCC for Windows", "cond": "TOOLCHAIN_WINDOWS && y"}]}, {"type": 24, "name": "LINKER_HOME_AREA", "value": "", "user_value": null, "dep": "n", "prompt": "Start of _HOME area", "cond": "ARCH_CHIP_Z80 && ARCH_Z80", "defaults": [{"name": "0x0000", "default": "0x0000", "cond": "ARCH_CHIP_Z80 && ARCH_Z80"}], "help": "Start of the linker HOME area.  Default: 0x0000"}, {"type": 24, "name": "LINKER_CODE_AREA", "value": "", "user_value": null, "dep": "n", "prompt": "Start of _CODE area", "cond": "ARCH_CHIP_Z80 && ARCH_Z80", "defaults": [{"name": "0x0200", "default": "0x0200", "cond": "ARCH_CHIP_Z80 && ARCH_Z80"}], "help": "Start of the linker _CODE area.  Default: 0x0200"}, {"type": 24, "name": "LINKER_DATA_AREA", "value": "", "user_value": null, "dep": "n", "prompt": "Start of _DATA area", "cond": "ARCH_CHIP_Z80 && ARCH_Z80", "defaults": [{"name": "0x8000", "default": "0x8000", "cond": "ARCH_CHIP_Z80 && ARCH_Z80"}], "help": "Start of the linker _DATA area.  Default: 0x8000"}, {"type": 3, "name": "LINKER_ROM_AT_0000", "value": "n", "user_value": null, "dep": "n", "prompt": "ROM at 0x0000", "cond": "ARCH_CHIP_Z80 && ARCH_Z80", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_Z80 && ARCH_Z80"}], "help": "Some architectures may have ROM located at address zero.  In this\ncase, a special version of the \"head\" file must be used."}, {"type": 3, "name": "ARCH_HAVEHEAD", "value": "n", "user_value": null, "dep": "n", "prompt": "Board-specific Head File", "cond": "ARCH_CHIP_Z80 && ARCH_Z80", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_Z80 && ARCH_Z80"}], "help": "Use a board-specific version of the \"head\" file in the\nconfigs/<board-name>/src directory"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Toolchain Selection", "cond": "ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "Z180_TOOLCHAIN_SDCCW", "default": "n", "cond": "TOOLCHAIN_WINDOWS && ARCH_CHIP_Z180 && ARCH_Z80"}, {"name": "Z180_TOOLCHAIN_SDCCL", "default": "n", "cond": "!TOOLCHAIN_WINDOWS && ARCH_CHIP_Z180 && ARCH_Z80"}], "children": [{"type": 3, "name": "Z180_TOOLCHAIN_SDCCL", "value": "n", "user_value": null, "dep": "n", "prompt": "SDCC for Linux, MAC OSX, or Cygwin", "cond": "!WINDOWS_NATIVE && y"}, {"type": 3, "name": "Z180_TOOLCHAIN_SDCCW", "value": "n", "user_value": null, "dep": "n", "prompt": "SDCC for Windows", "cond": "TOOLCHAIN_WINDOWS && y"}]}, {"type": 24, "name": "LINKER_HOME_AREA", "value": "", "user_value": null, "dep": "n", "prompt": "Physical start of _HOME area", "cond": "ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "0x0000", "default": "0x0000", "cond": "ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Physical address of the start of the linker HOME area.  Default: 0x0000"}, {"type": 24, "name": "LINKER_CODE_AREA", "value": "", "user_value": null, "dep": "n", "prompt": "Physical start of _CODE area", "cond": "ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "0x0200", "default": "0x0200", "cond": "ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Physical address of the start of the linker _CODE area.  Default: 0x0200"}, {"type": 24, "name": "LINKER_DATA_AREA", "value": "", "user_value": null, "dep": "n", "prompt": "Physical start of _DATA area", "cond": "ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "0x8000", "default": "0x8000", "cond": "ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Physical address of the start of the linker _DATA area.  Default: 0x8000"}, {"type": 3, "name": "LINKER_ROM_AT_0000", "value": "n", "user_value": null, "dep": "n", "prompt": "ROM at Physical 0x0000", "cond": "ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Some architectures may have ROM located at physical address zero.  In this\ncase, a special version of the \"head\" file must be used."}, {"type": 24, "name": "Z180_BANKAREA_VIRTBASE", "value": "", "user_value": null, "dep": "n", "prompt": "Virtual Start of Bank Area", "cond": "ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "0x8000", "default": "0x8000", "cond": "ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "This setting provides the virtual address of the start of the Bank Area.\nNOTE that 0x0000 <= Z180_BANKAREA_BASE <= Z180_COMMONAREA_BASE is required!\nDefault: 0x8000\n\nNuttX Memory Organization:\n\nCommon Area 0:  This area holds the common NuttX code that is\ndirectly call-able from all application threads.  Common Area\nalways starts at virtual address 0x0000 and extends to the\nBank Area\n\nBase Area: This area holds the common NuttX data (including the\nshare-able heap) that is accessible from all applications and\nextends to Common Area 1.\n\nNOTE:  That is execution from RAM, the common NuttX code and\ndata may be contiguous and lie in the same region (either\nCommon Area 0 or the Bank Area).  The two regions above would\napply in a ROM'ed system, where Common Area 1 is ROM and the\nBase Area is RAM.\n\nCommon Area 1:  This area holds the code and data that is unique\nto a particular task.  his area extends to the end of the virtual\naddress space.  All tasks share the same virtual Common Area 2\nvirtual address (but each has a unique mapping to different,\nunderlying physical addresses)."}, {"type": 24, "name": "Z180_BANKAREA_PHYSBASE", "value": "", "user_value": null, "dep": "n", "prompt": "Physical Start of Bank Area", "cond": "ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "0x08000", "default": "0x08000", "cond": "ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "This setting provides the physical address of the start of the Bank Area.\nDefault: 0x08000"}, {"type": 24, "name": "Z180_COMMON1AREA_VIRTBASE", "value": "", "user_value": null, "dep": "n", "prompt": "Virtual Start of Common Area 1", "cond": "ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "0xc000", "default": "0xc000", "cond": "ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "This setting provides the virtual address of the start of the Common\nArea 1. NOTE that 0x0000 <= Z180_BANKAREA_BASE <= Z180_COMMONAREA_BASE\nis required! Default: 0xc000\n\nNuttX Memory Organization:\n\nCommon Area 0:  This area holds the common NuttX code that is\ndirectly call-able from all application threads.  Common Area\nalways starts at virtual address 0x0000 and extends to the\nBank Area\n\nBase Area: This area holds the common NuttX data (including the\nshare-able heap) that is accessible from all applications and\nextends to Common Area 1.\n\nNOTE:  That is execution from RAM, the common NuttX code and\ndata may be contiguous and lie in the same region (either\nCommon Area 0 or the Bank Area).  The two regions above would\napply in a ROM'ed system, where Common Area 1 is ROM and the\nBase Area is RAM.\n\nCommon Area 1:  This area holds the code and data that is unique\nto a particular task.  his area extends to the end of the virtual\naddress space.  All tasks share the same virtual Common Area 2\nvirtual address (but each has a unique mapping to different,\nunderlying physical addresses)."}, {"type": 24, "name": "Z180_PHYSHEAP_START", "value": "", "user_value": null, "dep": "n", "prompt": "Physical Start of Free Memory", "cond": "ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "0x0c000", "default": "0x0c000", "cond": "ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "This setting provides the physical address of the start of free physical\nmemory that will be used to allocate memory for tasks (Common Area 1).\nDefault: 0x0c000"}, {"type": 24, "name": "Z180_PHYSHEAP_END", "value": "", "user_value": null, "dep": "n", "prompt": "Physical End(+1) of Free Memory", "cond": "ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "0x100000", "default": "0x100000", "cond": "ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "This setting provides the physical address of the end(+1) of free physical\nmemory that will be used to allocate memory for tasks (Common Area 1).\nDefault: 0x100000"}, {"type": 3, "name": "ARCH_HAVEHEAD", "value": "n", "user_value": null, "dep": "n", "prompt": "Board-specific Head File", "cond": "ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Use a board-specific version of the \"head\" file in the\nconfigs/<board-name>/src directory"}, {"type": 31, "dep": "n", "prompt": "Z180 Peripheral Support", "cond": "ARCH_CHIP_Z180 && ARCH_Z80", "children": [{"type": 3, "name": "Z180_UART0", "value": "n", "user_value": null, "dep": "n", "prompt": "UART0", "cond": "ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Select to enable a serial port on UART0.  On the Z8x182, bits 0-4 of\nport B will not be available if ASCI channel 0 is selected."}, {"type": 3, "name": "Z180_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Select to enable a serial port on UART1.  On the Z8x182, bits 5-7 of\nport B will not be available if ASCI channel 0 is selected."}, {"type": 3, "name": "Z180_SCC", "value": "n", "user_value": null, "dep": "n", "prompt": "SCC", "cond": "(ARCH_CHIP_Z80181 || ARCH_CHIP_Z8L181) && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_Z80181 || ARCH_CHIP_Z8L181) && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Select to enable a serial port on the SCC"}, {"type": 3, "name": "Z180_ESCCA", "value": "n", "user_value": null, "dep": "n", "prompt": "ESCC Channel A", "cond": "(ARCH_CHIP_Z80182 || ARCH_CHIP_Z8L182) && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_Z80182 || ARCH_CHIP_Z8L182) && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Select to enable a serial port on ESCC Channel A.  Not available\nif port C is selected."}, {"type": 3, "name": "Z180_ESCCB", "value": "n", "user_value": null, "dep": "n", "prompt": "ESCC Channel B", "cond": "(ARCH_CHIP_Z80182 || ARCH_CHIP_Z8L182) && !Z180_MIMIC && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_Z80182 || ARCH_CHIP_Z8L182) && !Z180_MIMIC && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Select to enable a serial port on ESCC Channel B"}, {"type": 3, "name": "Z180_PRT1", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 1", "cond": "ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Select to enable a Programmable Reload Timer 1 (PRT1, PRT0 is used\nby NuttX as the system timer)"}, {"type": 3, "name": "Z180_PORTA", "value": "n", "user_value": null, "dep": "n", "prompt": "PORT A", "cond": "(ARCH_CHIP_Z80181 || ARCH_CHIP_Z8L181 || ARCH_CHIP_Z80182 || ARCH_CHIP_Z8L182) && !Z180_CTC && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_Z80181 || ARCH_CHIP_Z8L181 || ARCH_CHIP_Z80182 || ARCH_CHIP_Z8L182) && !Z180_CTC && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Select to enable a Port A (called PIA1 on the Z8x181)"}, {"type": 3, "name": "Z180_PORTB", "value": "n", "user_value": null, "dep": "n", "prompt": "PORT B", "cond": "(ARCH_CHIP_Z80181 || ARCH_CHIP_Z8L181 || ARCH_CHIP_Z80182 || ARCH_CHIP_Z8L182) && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_Z80181 || ARCH_CHIP_Z8L181 || ARCH_CHIP_Z80182 || ARCH_CHIP_Z8L182) && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Select to enable a Port B (called PIA2 on the Z8x181).  On the Z8x182,\nBits 5-7 will not be available if ASCI channel 1 is used; Bits 0-4 will\nnot be available if ASCI channel 0 is used."}, {"type": 3, "name": "Z180_PORTC", "value": "n", "user_value": null, "dep": "n", "prompt": "PORT C", "cond": "(ARCH_CHIP_Z80182 || ARCH_CHIP_Z8L182) && !Z180_ESCCA && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_Z80182 || ARCH_CHIP_Z8L182) && !Z180_ESCCA && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Select to enable a Port C.  Not available if ESCC channel A is selected."}, {"type": 3, "name": "Z180_CTC", "value": "n", "user_value": null, "dep": "n", "prompt": "CTC", "cond": "(ARCH_CHIP_Z80181 || ARCH_CHIP_Z8L181) && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_Z80181 || ARCH_CHIP_Z8L181) && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Select to enable the Counter/Timer (CTC)"}, {"type": 3, "name": "Z180_MIMIC", "value": "n", "user_value": null, "dep": "n", "prompt": "16550 MIMIC", "cond": "(ARCH_CHIP_Z80182 || ARCH_CHIP_Z8L182) && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "n", "default": "n", "cond": "(ARCH_CHIP_Z80182 || ARCH_CHIP_Z8L182) && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Select to enable the 16550 MIMIC"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Serial console", "cond": "DEV_CONSOLE && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "NO_SERIAL_CONSOLE", "default": "n", "cond": "DEV_CONSOLE && ARCH_CHIP_Z180 && ARCH_Z80"}], "children": [{"type": 3, "name": "Z180_UART0_SERIAL_CONSOLE", "value": "n", "user_value": null, "dep": "n", "prompt": "UART0", "cond": "Z180_UART0 && y"}, {"type": 3, "name": "Z180_UART1_SERIAL_CONSOLE", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "Z180_UART1 && y"}, {"type": 3, "name": "Z180_SCC_SERIAL_CONSOLE", "value": "n", "user_value": null, "dep": "n", "prompt": "SCC", "cond": "Z180_SCC && y"}, {"type": 3, "name": "Z180_ESCCA_SERIAL_CONSOLE", "value": "n", "user_value": null, "dep": "n", "prompt": "ESCC Channel A", "cond": "Z180_ESCCA && y"}, {"type": 3, "name": "Z180_ESCCB_SERIAL_CONSOLE", "value": "n", "user_value": null, "dep": "n", "prompt": "ESCC Channel B", "cond": "Z180_ESCCB && y"}]}, {"type": 31, "dep": "n", "prompt": "UART0 Configuration", "cond": "Z180_UART0 && ARCH_CHIP_Z180 && ARCH_Z80", "children": [{"type": 27, "name": "Z180_UART0_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive Buffer Size", "cond": "Z180_UART0 && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "64", "default": "64", "cond": "Z180_UART0 && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "Z180_UART0_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit Buffer Size", "cond": "Z180_UART0 && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "64", "default": "64", "cond": "Z180_UART0 && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "Z180_UART0_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "Baud Rate", "cond": "Z180_UART0 && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "9600", "default": "9600", "cond": "Z180_UART0 && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "The configured BAUD of the SCC."}, {"type": 27, "name": "Z180_UART0_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character Size", "cond": "Z180_UART0 && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "8", "default": "8", "cond": "Z180_UART0 && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "The number of bits in one character.  Must be either 5, 6, 7, or 8."}, {"type": 27, "name": "Z180_UART0_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity Setting", "cond": "Z180_UART0 && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "0", "default": "0", "cond": "Z180_UART0 && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "Z180_UART0_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "use 2 stop bits", "cond": "Z180_UART0 && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "0", "default": "0", "cond": "Z180_UART0 && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "1=Two stop bits"}]}, {"type": 31, "dep": "n", "prompt": "UART1 Configuration", "cond": "Z180_UART1 && ARCH_CHIP_Z180 && ARCH_Z80", "children": [{"type": 27, "name": "Z180_UART1_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive Buffer Size", "cond": "Z180_UART1 && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "64", "default": "64", "cond": "Z180_UART1 && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "Z180_UART1_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit Buffer Size", "cond": "Z180_UART1 && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "64", "default": "64", "cond": "Z180_UART1 && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "Z180_UART1_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "Baud Rate", "cond": "Z180_UART1 && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "9600", "default": "9600", "cond": "Z180_UART1 && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "The configured BAUD of the SCC."}, {"type": 27, "name": "Z180_UART1_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character Size", "cond": "Z180_UART1 && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "8", "default": "8", "cond": "Z180_UART1 && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "The number of bits in one character.  Must be either 5, 6, 7, or 8."}, {"type": 27, "name": "Z180_UART1_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity Setting", "cond": "Z180_UART1 && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "0", "default": "0", "cond": "Z180_UART1 && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "Z180_UART1_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "use 2 stop bits", "cond": "Z180_UART1 && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "0", "default": "0", "cond": "Z180_UART1 && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "1=Two stop bits"}]}, {"type": 31, "dep": "n", "prompt": "SCC Configuration", "cond": "Z180_SCC && ARCH_CHIP_Z180 && ARCH_Z80", "children": [{"type": 27, "name": "Z180_SCC_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive Buffer Size", "cond": "Z180_SCC && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "64", "default": "64", "cond": "Z180_SCC && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "Z180_SCC_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit Buffer Size", "cond": "Z180_SCC && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "64", "default": "64", "cond": "Z180_SCC && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "Z180_SCC_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "Baud Rate", "cond": "Z180_SCC && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "9600", "default": "9600", "cond": "Z180_SCC && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "The configured BAUD of the SCC."}, {"type": 27, "name": "Z180_SCC_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character Size", "cond": "Z180_SCC && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "8", "default": "8", "cond": "Z180_SCC && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "The number of bits in one character.  Must be either 5, 6, 7, or 8."}, {"type": 27, "name": "Z180_SCC_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity Setting", "cond": "Z180_SCC && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "0", "default": "0", "cond": "Z180_SCC && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "Z180_SCC_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "use 2 stop bits", "cond": "Z180_SCC && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "0", "default": "0", "cond": "Z180_SCC && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "1=Two stop bits"}]}, {"type": 31, "dep": "n", "prompt": "ESCC Channel A Configuration", "cond": "Z180_ESCCA && ARCH_CHIP_Z180 && ARCH_Z80", "children": [{"type": 27, "name": "Z180_ESCCA_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive Buffer Size", "cond": "Z180_ESCCA && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "64", "default": "64", "cond": "Z180_ESCCA && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "Z180_ESCCA_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit Buffer Size", "cond": "Z180_ESCCA && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "64", "default": "64", "cond": "Z180_ESCCA && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "Z180_ESCCA_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "Baud Rate", "cond": "Z180_ESCCA && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "9600", "default": "9600", "cond": "Z180_ESCCA && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "The configured BAUD of the SCC."}, {"type": 27, "name": "Z180_ESCCA_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character Size", "cond": "Z180_ESCCA && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "8", "default": "8", "cond": "Z180_ESCCA && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "The number of bits in one character.  Must be either 5, 6, 7, or 8."}, {"type": 27, "name": "Z180_ESCCA_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity Setting", "cond": "Z180_ESCCA && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "0", "default": "0", "cond": "Z180_ESCCA && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "Z180_ESCCA_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "use 2 stop bits", "cond": "Z180_ESCCA && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "0", "default": "0", "cond": "Z180_ESCCA && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "1=Two stop bits"}]}, {"type": 31, "dep": "n", "prompt": "ESCC Channel B Configuration", "cond": "Z180_ESCCB && ARCH_CHIP_Z180 && ARCH_Z80", "children": [{"type": 27, "name": "Z180_ESCCB_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive Buffer Size", "cond": "Z180_ESCCB && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "64", "default": "64", "cond": "Z180_ESCCB && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "Z180_ESCCB_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit Buffer Size", "cond": "Z180_ESCCB && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "64", "default": "64", "cond": "Z180_ESCCB && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "Z180_ESCCB_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "Baud Rate", "cond": "Z180_ESCCB && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "9600", "default": "9600", "cond": "Z180_ESCCB && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "The configured BAUD of the SCC."}, {"type": 27, "name": "Z180_ESCCB_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character Size", "cond": "Z180_ESCCB && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "8", "default": "8", "cond": "Z180_ESCCB && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "The number of bits in one character.  Must be either 5, 6, 7, or 8."}, {"type": 27, "name": "Z180_ESCCB_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity Setting", "cond": "Z180_ESCCB && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "0", "default": "0", "cond": "Z180_ESCCB && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "Z180_ESCCB_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "use 2 stop bits", "cond": "Z180_ESCCB && ARCH_CHIP_Z180 && ARCH_Z80", "defaults": [{"name": "0", "default": "0", "cond": "Z180_ESCCB && ARCH_CHIP_Z180 && ARCH_Z80"}], "help": "1=Two stop bits"}]}, {"type": 3, "name": "Z8_UART0", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_Z8 && ARCH_Z80"}], "selects": [{"symbol": "UART0_SERIALDRIVER", "cond": "ARCH_CHIP_Z8 && ARCH_Z80"}]}, {"type": 3, "name": "Z8_UART1", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_Z8 && ARCH_Z80"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_Z8 && ARCH_Z80"}]}, {"type": 3, "name": "Z8_TOOLCHAIN_ZDSII", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_Z8 && ARCH_CHIP_Z8 && ARCH_Z80"}, {"name": "n", "default": "n", "cond": "!ARCH_CHIP_Z8 && ARCH_CHIP_Z8 && ARCH_Z80"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "ZDS-II Toolchain version", "cond": "ARCH_CHIP_Z8 && ARCH_Z80", "defaults": [{"name": "EZ80_ZDSII_V521", "default": "n", "cond": "ARCH_CHIP_Z8 && ARCH_Z80"}], "children": [{"type": 3, "name": "Z8_ZDSII_V500", "value": "n", "user_value": null, "dep": "n", "prompt": "ZDS-II 5.0.0", "cond": "y"}, {"type": 3, "name": "Z8_ZDSII_V522", "value": "n", "user_value": null, "dep": "n", "prompt": "ZDS-II 5.2.2", "cond": "y"}]}, {"type": 31, "dep": "n", "prompt": "ez80 Peripheral Support", "cond": "ARCH_CHIP_EZ80 && ARCH_Z80", "children": [{"type": 3, "name": "EZ80_UART0", "value": "n", "user_value": null, "dep": "n", "prompt": "UART0", "cond": "ARCH_CHIP_EZ80 && ARCH_Z80", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EZ80 && ARCH_Z80"}], "selects": [{"symbol": "UART0_SERIALDRIVER", "cond": "ARCH_CHIP_EZ80 && ARCH_Z80"}]}, {"type": 3, "name": "EZ80_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "UART1", "cond": "ARCH_CHIP_EZ80 && ARCH_Z80", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EZ80 && ARCH_Z80"}], "selects": [{"symbol": "UART1_SERIALDRIVER", "cond": "ARCH_CHIP_EZ80 && ARCH_Z80"}]}, {"type": 3, "name": "EZ80_UART2", "value": "n", "user_value": null, "dep": "n", "prompt": "UART2", "cond": "ARCH_CHIP_EZ80 && ARCH_Z80", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EZ80 && ARCH_Z80"}], "selects": [{"symbol": "UART2_SERIALDRIVER", "cond": "ARCH_CHIP_EZ80 && ARCH_Z80"}]}, {"type": 3, "name": "EZ80_EMAC", "value": "n", "user_value": null, "dep": "n", "prompt": "Ethernet MAC", "cond": "ARCH_CHIP_EZ80 && ARCH_Z80", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EZ80 && ARCH_Z80"}], "selects": [{"symbol": "ARCH_HAVE_PHY", "cond": "ARCH_CHIP_EZ80 && ARCH_Z80"}, {"symbol": "ARCH_HAVE_NETDEV_STATISTICS", "cond": "ARCH_CHIP_EZ80 && ARCH_Z80"}], "help": "Enables support for ez80 EMAC driver."}]}, {"type": 3, "name": "EZ80_TOOLCHAIN_ZDSII", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_CHIP_EZ80 && ARCH_CHIP_EZ80 && ARCH_Z80"}, {"name": "n", "default": "n", "cond": "!ARCH_CHIP_EZ80 && ARCH_CHIP_EZ80 && ARCH_Z80"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "ZDS-II Toolchain version", "cond": "ARCH_CHIP_EZ80 && ARCH_Z80", "defaults": [{"name": "EZ80_ZDSII_V521", "default": "n", "cond": "ARCH_CHIP_EZ80 && ARCH_Z80"}], "children": [{"type": 3, "name": "EZ80_ZDSII_V511", "value": "n", "user_value": null, "dep": "n", "prompt": "ZDS-II 5.1.1", "cond": "y"}, {"type": 3, "name": "EZ80_ZDSII_V521", "value": "n", "user_value": null, "dep": "n", "prompt": "ZDS-II 5.2.1", "cond": "y"}]}, {"type": 24, "name": "EZ80_FIAD", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Address", "cond": "EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80", "defaults": [{"name": "0x1f", "default": "0x1f", "cond": "EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80"}], "ranges": [{"min": "0x00", "max": "0x1f", "cond": "EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80"}], "help": "Provides the MII address of the PHY device"}, {"type": 27, "name": "EZ80_PHYCONFIG", "value": "", "user_value": null, "dep": "n", "prompt": "PHY Configuration", "cond": "EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80", "defaults": [{"name": "0", "default": "0", "cond": "EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80"}], "help": "0:Autonegotiate, 1:100FD, 2:100HD, 3:10FD, 4:10HD"}, {"type": 24, "name": "EZ80_RAMADDR", "value": "", "user_value": null, "dep": "n", "prompt": "Address of internal SRAM", "cond": "EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80", "defaults": [{"name": "0xffc000", "default": "0xffc000", "cond": "EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80"}], "help": "Address of internal SRAM (default is 0xffc000)"}, {"type": 27, "name": "EZ80_PKTBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Packet Buffer Size", "cond": "EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80", "defaults": [{"name": "64", "default": "64", "cond": "EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80"}], "help": "The size of one packet buffer. EZ80_PKTBUFSIZE + (EZ80_NTXPKTBUFS+EZ80_NRXPKTBUFS)\nmust add up to exactly 8192 bytes."}, {"type": 27, "name": "EZ80_NTXPKTBUFS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of Tx Packets", "cond": "EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80", "defaults": [{"name": "64", "default": "64", "cond": "EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80"}], "help": "The number of Tx packets. EZ80_PKTBUFSIZE + (EZ80_NTXPKTBUFS+EZ80_NRXPKTBUFS)\nmust add up to exactly 8192 bytes."}, {"type": 27, "name": "EZ80_NRXPKTBUFS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of Rx Packets", "cond": "EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80", "defaults": [{"name": "64", "default": "64", "cond": "EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80"}], "help": "The number of Rx packets. EZ80_PKTBUFSIZE + (EZ80_NTXPKTBUFS+EZ80_NRXPKTBUFS)\nmust add up to exactly 8192 bytes."}, {"type": 27, "name": "EZ80_MDCDIV", "value": "", "user_value": null, "dep": "n", "prompt": "SCLK Divider", "cond": "EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80", "defaults": [{"name": "0", "default": "0", "cond": "EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80"}], "help": "The value to use for the divider to derive the MII MDC clock from SCLK.  Options\nare 1->4; 2->6; 3->8; 4->10; 5->14; 6->20; and 7->28"}, {"type": 27, "name": "EZ80_TXPOLLTIMERMS", "value": "", "user_value": null, "dep": "n", "prompt": "Tx Poll Milliseconds", "cond": "EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80", "defaults": [{"name": "10", "default": "10", "cond": "EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80"}], "help": "Specifies how often the EMAC controller should poll for a Tx packet (milliseconds)"}, {"type": 3, "name": "ARCH_MCFILTER", "value": "n", "user_value": null, "dep": "n", "prompt": "Multicast Filtering", "cond": "EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80", "defaults": [{"name": "n", "default": "n", "cond": "EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80"}], "help": "Enables multicast MAC address filtering (not fully implemented)"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80", "defaults": [{"name": "EZ80_EMAC_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80"}, {"name": "EZ80_EMAC_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80"}], "help": "Work queue support is required to use the Ethernet driver.  If the\nlow priority work queue is available, then it should be used by the\ndriver.", "children": [{"type": 3, "name": "EZ80_EMAC_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "EZ80_EMAC_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}, {"type": 3, "name": "ARCH_TIMERHOOK", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer Hook", "cond": "ARCH_CHIP_EZ80 && ARCH_Z80", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_EZ80 && ARCH_Z80"}], "help": "Select this option to enabled a direct call-out from the ez80 timer interrupt\nhandler.  If this is enabled, the ez80 timer interrupt interrupt will call a\nuser provided function called up_timerhook().  At present, this timer hook is\nonly used for driving the segment LED on board certain ez80 boards."}, {"type": 3, "name": "ARCH_TOOLCHAIN_IAR", "value": "n", "user_value": 0, "rev_dep": "(ARMV7M_TOOLCHAIN_IARW && TOOLCHAIN_WINDOWS && y) || (ARMV7M_TOOLCHAIN_IARL && HOST_LINUX && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_TOOLCHAIN_GNU", "value": "y", "user_value": 2, "rev_dep": "(ARMV6M_TOOLCHAIN_ATOLLIC && TOOLCHAIN_WINDOWS && y) || (ARMV6M_TOOLCHAIN_BUILDROOT && !WINDOWS_NATIVE && y) || (ARMV6M_TOOLCHAIN_CODEREDL && HOST_LINUX && y) || (ARMV6M_TOOLCHAIN_CODEREDW && TOOLCHAIN_WINDOWS && y) || (ARMV6M_TOOLCHAIN_CODESOURCERYL && HOST_LINUX && y) || (ARMV6M_TOOLCHAIN_CODESOURCERYW && TOOLCHAIN_WINDOWS && y) || (ARMV6M_TOOLCHAIN_DEVKITARM && TOOLCHAIN_WINDOWS && y) || (ARMV6M_TOOLCHAIN_GNU_EABIL && y) || (ARMV6M_TOOLCHAIN_GNU_EABIW && TOOLCHAIN_WINDOWS && y) || (ARMV7A_TOOLCHAIN_BUILDROOT && !WINDOWS_NATIVE && y) || (ARMV7A_TOOLCHAIN_CODESOURCERYL && HOST_LINUX && y) || (ARMV7A_TOOLCHAIN_CODESOURCERYW && TOOLCHAIN_WINDOWS && y) || (ARMV7A_TOOLCHAIN_DEVKITARM && TOOLCHAIN_WINDOWS && y) || (ARMV7A_TOOLCHAIN_GNU_EABIL && y) || (ARMV7A_TOOLCHAIN_GNU_EABIW && TOOLCHAIN_WINDOWS && y) || (ARMV7A_TOOLCHAIN_GNU_OABI && y) || (ARMV7M_TOOLCHAIN_ATOLLIC && TOOLCHAIN_WINDOWS && y) || (ARMV7M_TOOLCHAIN_BUILDROOT && !WINDOWS_NATIVE && y) || (ARMV7M_TOOLCHAIN_CODEREDL && HOST_LINUX && y) || (ARMV7M_TOOLCHAIN_CODEREDW && TOOLCHAIN_WINDOWS && y) || (ARMV7M_TOOLCHAIN_CODESOURCERYL && HOST_LINUX && y) || (ARMV7M_TOOLCHAIN_CODESOURCERYW && TOOLCHAIN_WINDOWS && y) || (ARMV7M_TOOLCHAIN_DEVKITARM && TOOLCHAIN_WINDOWS && y) || (ARMV7M_TOOLCHAIN_GNU_EABIL && !WINDOWS_NATIVE && y) || (ARMV7M_TOOLCHAIN_GNU_EABIW && TOOLCHAIN_WINDOWS && y) || (ARMV7M_TOOLCHAIN_CLANGL && !WINDOWS_NATIVE && y) || (ARMV7M_TOOLCHAIN_CLANGW && TOOLCHAIN_WINDOWS && y) || (ARMV7M_TOOLCHAIN_RAISONANCE && TOOLCHAIN_WINDOWS && y) || (ARMV7R_TOOLCHAIN_BUILDROOT && !WINDOWS_NATIVE && y) || (ARMV7R_TOOLCHAIN_CODESOURCERYL && HOST_LINUX && y) || (ARMV7R_TOOLCHAIN_CODESOURCERYW && TOOLCHAIN_WINDOWS && y) || (ARMV7R_TOOLCHAIN_DEVKITARM && TOOLCHAIN_WINDOWS && y) || (ARMV7R_TOOLCHAIN_GNU_EABIL && y) || (ARMV7R_TOOLCHAIN_GNU_EABIW && TOOLCHAIN_WINDOWS && y) || (ARMV7R_TOOLCHAIN_GNU_OABI && y) || (MIPS32_TOOLCHAIN_GNU_ELF && y) || (MIPS32_TOOLCHAIN_MICROCHIPL_XC32 && HOST_LINUX && y) || (MIPS32_TOOLCHAIN_MICROCHIPL && HOST_LINUX && y) || (MIPS32_TOOLCHAIN_MICROCHIPL_LITE && HOST_LINUX && y) || (MIPS32_TOOLCHAIN_MICROCHIPW_XC32 && TOOLCHAIN_WINDOWS && y) || (MIPS32_TOOLCHAIN_MICROCHIPW && TOOLCHAIN_WINDOWS && y) || (MIPS32_TOOLCHAIN_MICROCHIPW_LITE && TOOLCHAIN_WINDOWS && y) || (MIPS32_TOOLCHAIN_MICROCHIPOPENL && HOST_LINUX && y) || (MIPS32_TOOLCHAIN_PINGUINOW && TOOLCHAIN_WINDOWS && y) || (MIPS32_TOOLCHAIN_PINGUINOL && (HOST_LINUX || HOST_OSX) && y) || (LM32_TOOLCHAIN_BUILDROOT && !WINDOWS_NATIVE && y) || (LM32_TOOLCHAIN_GNUL && y) || (LM32_TOOLCHAIN_GNUW && TOOLCHAIN_WINDOWS && y) || (RV32IM_TOOLCHAIN_GNU_RVGL && y) || (RV32IM_TOOLCHAIN_GNU_RVGW && TOOLCHAIN_WINDOWS && y) || (ARCH_CHIP_ESP32 && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 6, "dep": "y", "prompt": "Architecture Options", "cond": "y"}, {"type": 3, "name": "ARCH_NOINTC", "value": "n", "user_value": 0, "rev_dep": "(ARCH_AVR && y) || (ARCH_HC && y) || (ARCH_RENESAS && y) || (ARCH_CHIP_Z80 && y) || (ARCH_CHIP_Z180 && ARCH_Z80)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_VECNOTIRQ", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_PIC32MX && y) || (ARCH_CHIP_PIC32MZ && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_DMA", "value": "y", "user_value": 2, "rev_dep": "(EFM32_DMA && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM) || (LC823450_SDC_DMA && LC823450_SDIF && ARCH_CHIP_LC823450 && ARCH_ARM) || (LC823450_SPI_DMA && ARCH_CHIP_LC823450 && ARCH_ARM) || (LPC17_GPDMA && ARCH_CHIP_LPC17XX && ARCH_ARM) || (SAMA5_DMAC0 && SAMA5_HAVE_DMA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_DMAC1 && SAMA5_HAVE_DMA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_XDMAC0 && SAMA5_HAVE_XDMA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_XDMAC1 && SAMA5_HAVE_XDMA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMDL_DMAC && SAMDL_HAVE_DMAC && EXPERIMENTAL && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM) || (SAM34_DMAC0 && (ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_PDCA && (ARCH_CHIP_SAM4L || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAMV7_XDMAC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STM32_DMA1 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_DMA2 && (!STM32_VALUELINE || (STM32_VALUELINE && STM32_HIGHDENSITY)) && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32F0_DMA1 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_DMA2 && (!STM32F0_VALUELINE || (STM32F0_VALUELINE && STM32F0_HIGHDENSITY)) && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F7_DMA1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_DMA2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32L4_DMA1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_DMA2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (CXD56_ARCH_OPTS && ARCH_CHIP_CXD56XX && ARCH_ARM) || (PIC32MX_DMA && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (PIC32MZ_DMA && ARCH_CHIP_PIC32MZ && ARCH_MIPS)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_HAVE_IRQPRIO", "value": "y", "user_value": 2, "rev_dep": "(ARCH_CHIP_A1X && y) || (ARCH_CHIP_SAMA5 && y) || (ARCH_CORTEXM0 && ARCH_ARM) || (ARCH_CORTEXM3 && ARCH_ARM) || (ARCH_CORTEXM4 && ARCH_ARM) || (ARCH_CORTEXM7 && ARCH_ARM) || (ARCH_CHIP_PIC32MX && y) || (ARCH_CHIP_PIC32MZ && y) || (ARCH_CHIP_Z16F2810 && y) || (ARCH_CHIP_Z16F2811 && y) || (ARCH_CHIP_Z16F3211 && y) || (ARCH_CHIP_Z16F6411 && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_L2CACHE", "value": "n", "user_value": 0, "rev_dep": "(ARMV7A_L2CC_PL310 && ARMV7A_HAVE_L2CC_PL310 && EXPERIMENTAL && ARMV7A_HAVE_L2CC && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM) || (ARMV7R_L2CC_PL310 && ARMV7R_HAVE_L2CC_PL310 && EXPERIMENTAL && ARMV7R_HAVE_L2CC && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEX74 || ARCH_CORTEXR7F) && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_HAVE_COHERENT_DCACHE", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CORTEXM7 && (ELF || MODULE) && ARCH_ARM) || (ARCH_CORTEXA5 && (ELF || MODULE) && ARCH_ARM) || (ARCH_CORTEXA8 && (ELF || MODULE) && ARCH_ARM) || (ARCH_CORTEXA9 && (ELF || MODULE) && ARCH_ARM) || (ARCH_CORTEXR4 && (ELF || MODULE) && ARCH_ARM) || (ARCH_CORTEXR4F && (ELF || MODULE) && ARCH_ARM) || (ARCH_CORTEXR5 && (ELF || MODULE) && ARCH_ARM) || (ARCH_CORTEXR5F && (ELF || MODULE) && ARCH_ARM) || (ARCH_CORTEXR7 && (ELF || MODULE) && ARCH_ARM) || (ARCH_CORTEXR7F && (ELF || MODULE) && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_HAVE_ADDRENV", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_A1X && y) || (ARCH_CHIP_IMX6 && y) || (ARCH_CHIP_SAMA5 && y) || (ARCH_CHIP_Z180 && ARCH_Z80)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_NEED_ADDRENV_MAPPING", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_A1X && y) || (ARCH_CHIP_IMX6 && y) || (ARCH_CHIP_SAMA5 && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_HAVE_MULTICPU", "value": "y", "user_value": 2, "rev_dep": "(ARCH_SIM && y) || (ARCH_CHIP_LC823450 && y) || (ARCH_CHIP_CXD56XX && y) || (ARCH_CHIP_IMX6_6DUALLITE && y) || (ARCH_CHIP_IMX6_6DUAL && y) || (ARCH_CHIP_IMX6_6QUAD && y) || (ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_ESP32 && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_HAVE_VFORK", "value": "y", "user_value": 2, "rev_dep": "(ARCH_ARM && y) || (ARCH_MIPS32 && ARCH_MIPS)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_HAVE_MMU", "value": "n", "user_value": 0, "rev_dep": "(ARCH_ARM926EJS && ARCH_ARM) || (ARCH_ARM920T && ARCH_ARM) || (ARCH_CORTEXA5 && ARCH_ARM) || (ARCH_CORTEXA8 && ARCH_ARM) || (ARCH_CORTEXA9 && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_HAVE_MPU", "value": "y", "user_value": 2, "rev_dep": "(ARCH_CHIP_KINETIS && y) || (ARCH_CHIP_LC823450 && y) || (ARCH_CHIP_LM && y) || (ARCH_CHIP_TIVA && y) || (ARCH_CHIP_LPC17XX && y) || (ARCH_CHIP_LPC43XX && y) || (ARCH_CHIP_SAM34 && y) || (ARCH_CHIP_SAMV7 && y) || (ARCH_CHIP_STM32 && y) || (ARCH_CHIP_STM32F7 && y) || (ARCH_CHIP_STM32L4 && y) || (ARCH_CHIP_XMC4 && y) || (ARCH_CHIP_CXD56XX && y) || (ARCH_CORTEXR4 && ARCH_ARM) || (ARCH_CORTEXR4F && ARCH_ARM) || (ARCH_CORTEXR5 && ARCH_ARM) || (ARCH_CORTEXR5F && ARCH_ARM) || (ARCH_CORTEXR7 && ARCH_ARM) || (ARCH_CORTEXR7F && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_NAND_HWECC", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_SAMA5D2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_SAMA5D4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (ARCH_CHIP_ATSAMA5D31 && y) || (ARCH_CHIP_ATSAMA5D33 && y) || (ARCH_CHIP_ATSAMA5D34 && y) || (ARCH_CHIP_ATSAMA5D35 && y) || (ARCH_CHIP_ATSAMA5D36 && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_HAVE_EXTCLK", "value": "n", "user_value": 0, "rev_dep": "(LPC43_TIMER && ARCH_CHIP_LPC43XX && ARCH_ARM) || (SAM34_TC && ARCH_CHIP_SAM34 && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_HAVE_POWEROFF", "value": "y", "user_value": 2, "rev_dep": "(ARCH_SIM && y) || (ARCH_BOARD_CXD56EVB && ARCH_CHIP_CXD56XX && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_HAVE_RESET", "value": "y", "user_value": 2, "rev_dep": "(ARCH_CHIP_MOXART && y) || (ARCH_CORTEXM0 && ARCH_ARM) || (ARCH_CORTEXM3 && ARCH_ARM) || (ARCH_CORTEXM4 && ARCH_ARM) || (ARCH_CORTEXM7 && ARCH_ARM) || (SAMV7_SYSTEMRESET && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_HAVE_RTC_SUBSECONDS", "value": "n", "user_value": 0, "rev_dep": "(STM32_HAVE_RTC_SUBSECONDS && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32F7_HAVE_RTC_SUBSECONDS && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_USE_MMU", "value": "n", "user_value": null, "rev_dep": "(ARCH_ARM926EJS && ARCH_ARM) || (ARCH_ARM920T && ARCH_ARM) || (ARCH_CORTEXA5 && ARCH_ARM) || (ARCH_CORTEXA8 && ARCH_ARM) || (ARCH_CORTEXA9 && ARCH_ARM)", "dep": "n", "prompt": "Enable MMU", "cond": "ARCH_HAVE_MMU", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_MMU"}], "help": "The architecture supports supports an MMU.  Enable this option in\norder to enable use of the MMU.  For most architectures, this is\nnot really an option:  It is required to use the MMU.  In those\ncases, this selection will always be forced."}, {"type": 3, "name": "ARCH_USE_MPU", "value": "n", "user_value": 0, "rev_dep": "(ARM_MPU && ARCH_HAVE_MPU && ARCH_ARM) || (SAMV7_QSPI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (NR5_MPU && ARCH_HAVE_MPU && ARCH_RISCV)", "dep": "y", "prompt": "Enable MPU", "cond": "ARCH_HAVE_MPU", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_MPU"}], "help": "The architecture supports supports an MPU.  Enable this option in\norder to enable use of the MPU.  For most architectures, this option\nis enabled by other, platform-specific logic.  In those cases, this\nselection will always be forced."}, {"type": 3, "name": "ARCH_ADDRENV", "value": "n", "user_value": null, "menuconfig": true, "rev_dep": "ARCH_CHIP_Z180 && ARCH_Z80", "dep": "n", "prompt": "Address environments", "cond": "ARCH_HAVE_ADDRENV", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_ADDRENV"}], "help": "Support per-task address environments using the MMU... i.e., support\n\"processes\"", "children": [{"type": 24, "name": "ARCH_TEXT_VBASE", "value": "", "user_value": null, "dep": "n", "prompt": "Virtual .text base", "cond": "ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING", "help": "The virtual address of the beginning the .text region"}, {"type": 24, "name": "ARCH_DATA_VBASE", "value": "", "user_value": null, "dep": "n", "prompt": "Virtual .bss/.data base", "cond": "ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING", "help": "The virtual address of the beginning of the .bss/.data region."}, {"type": 24, "name": "ARCH_HEAP_VBASE", "value": "", "user_value": null, "dep": "n", "prompt": "Virtual heap base", "cond": "ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING", "help": "The virtual address of the beginning of the heap region."}, {"type": 24, "name": "ARCH_SHM_VBASE", "value": "", "user_value": null, "dep": "n", "prompt": "Shared memory base", "cond": "MM_SHM && ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING", "help": "The virtual address of the beginning of the shared memory region."}, {"type": 27, "name": "ARCH_TEXT_NPAGES", "value": "", "user_value": null, "dep": "n", "prompt": "Max .text pages", "cond": "ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING", "defaults": [{"name": "1", "default": "1", "cond": "ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING"}], "help": "The maximum number of pages that can allocated for the .text region.\nThis, along with knowledge of the page size, determines the size of\nthe .text virtual address space. Default is 1."}, {"type": 27, "name": "ARCH_DATA_NPAGES", "value": "", "user_value": null, "dep": "n", "prompt": "Max .bss/.data pages", "cond": "ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING", "defaults": [{"name": "1", "default": "1", "cond": "ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING"}], "help": "The maximum number of pages that can allocated for the .bss/.data\nregion. This, along with knowledge of the page size, determines the\nsize of the .bss/.data virtual address space. Default is 1."}, {"type": 27, "name": "ARCH_HEAP_NPAGES", "value": "", "user_value": null, "dep": "n", "prompt": "Max heap pages", "cond": "ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING", "defaults": [{"name": "1", "default": "1", "cond": "ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING"}], "help": "The maximum number of pages that can allocated for the heap region.\nThis, along with knowledge of the page size, determines the size of\nthe heap virtual address space. Default is 1."}, {"type": 27, "name": "ARCH_SHM_MAXREGIONS", "value": "", "user_value": null, "dep": "n", "prompt": "Max shared memory regions", "cond": "MM_SHM && ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING", "defaults": [{"name": "1", "default": "1", "cond": "MM_SHM && ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING"}], "help": "The maximum number of regions that can allocated for the shared\nmemory space.  This hard-coded value permits static allocation of\nthe shared memory data structures and serves no other purpose.\nDefault is 1.\n\nThe size of the virtual shared memory address space is then\ndetermined by the product of the maximum number of regions, the\nmaximum number of pages per region, and the configured size of\neach page."}, {"type": 27, "name": "ARCH_SHM_NPAGES", "value": "", "user_value": null, "dep": "n", "prompt": "Max shared memory pages", "cond": "MM_SHM && ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING", "defaults": [{"name": "1", "default": "1", "cond": "MM_SHM && ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING"}], "help": "The maximum number of pages that can allocated per region for the shared memory\nregion. Default is 1.\n\nThe size of the virtual shared memory address space is then\ndetermined by the product of the maximum number of regions, the\nmaximum number of pages per region, and the configured size of\neach page."}, {"type": 3, "name": "ARCH_STACK_DYNAMIC", "value": "n", "user_value": null, "dep": "n", "prompt": "Dynamic user stack", "cond": "BUILD_KERNEL && EXPERIMENTAL && ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING", "defaults": [{"name": "n", "default": "n", "cond": "BUILD_KERNEL && EXPERIMENTAL && ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING"}], "help": "Select this option if the user process stack resides in its own\naddress space.  The naming of this selection implies that dynamic\nstack allocation is supported.  Certainly this option must be set if\ndynamic stack allocation is supported by a platform.  But the more\ngeneral meaning of this configuration environment is simply that the\nstack has its own address space.\n\nNOTE:  This option not yet fully implemented in the code base.\nHence, it is marked EXPERIMENTAL:  Do not enable it unless you plan\nfinish the implementation.", "children": [{"type": 24, "name": "ARCH_STACK_VBASE", "value": "", "user_value": null, "dep": "n", "prompt": "Virtual stack base", "cond": "ARCH_STACK_DYNAMIC && ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING", "help": "The virtual address of the beginning the stack region"}, {"type": 27, "name": "ARCH_STACK_NPAGES", "value": "", "user_value": null, "dep": "n", "prompt": "Max. stack pages", "cond": "ARCH_STACK_DYNAMIC && ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING", "defaults": [{"name": "1", "default": "1", "cond": "ARCH_STACK_DYNAMIC && ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING"}], "help": "The maximum number of pages that can allocated for the stack region.\nThis, along with knowledge of the page size, determines the size of\nthe stack virtual address space. Default is 1."}]}, {"type": 3, "name": "ARCH_KERNEL_STACK", "value": "n", "user_value": null, "dep": "n", "prompt": "Kernel process stack", "cond": "BUILD_KERNEL && ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING", "defaults": [{"name": "n", "default": "n", "cond": "!LIBC_EXECFUNCS && BUILD_KERNEL && ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING"}, {"name": "y", "default": "y", "cond": "LIBC_EXECFUNCS && BUILD_KERNEL && ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING"}], "help": "It this option is selected, then every user process will have two\nstacks:  A large, potentially dynamically sized user stack and small\nkernel stack that is used during system call process.\n\nIf this option is not selected, then kernel system calls will simply\nuse the caller's user stack.  So, in most cases, this option is not\nrequired.  However, this option is *required* if both BUILD_KERNEL\nand LIBC_EXECFUNCS are selected.  Why?  Because when we instantiate\nand initialize the address environment of the new user process, we\nwill temporarily lose the address environment of the old user\nprocess, including its stack contents.  The kernel C logic will\ncrash immediately with no valid stack in place.\n\nWhen this option is selected, the smaller kernel stack stays in\nplace during system call processing event though the original user\nstack may or may not be accessible.", "children": [{"type": 27, "name": "ARCH_KERNEL_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Kernel stack size", "cond": "ARCH_KERNEL_STACK && ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING", "defaults": [{"name": "1568", "default": "1568", "cond": "ARCH_KERNEL_STACK && ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING"}], "help": "The common size of each process' kernel stack"}]}, {"type": 3, "name": "ARCH_PGPOOL_MAPPING", "value": "n", "user_value": null, "dep": "n", "prompt": "Have page pool mapping", "cond": "ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING"}], "help": "If there is a MMU mapping in place for the page pool memory, then\nthis mapping can be utilized to simplify some page table operations.\nOtherwise, a temporary mapping will have to be established each time\nit is necessary to modify the contents of a page.", "children": [{"type": 24, "name": "ARCH_PGPOOL_PBASE", "value": "", "user_value": null, "dep": "n", "prompt": "Page pool physical address", "cond": "ARCH_PGPOOL_MAPPING && ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING", "defaults": [{"name": "0x0", "default": "0x0", "cond": "ARCH_PGPOOL_MAPPING && ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING"}], "help": "The physical address of the start of the page pool memory.  This\nsetting is probably equivalent to other platform specific definitions\nbut is required again in order to modularize the common address\nenvironment logic."}, {"type": 24, "name": "ARCH_PGPOOL_VBASE", "value": "", "user_value": null, "dep": "n", "prompt": "Page pool virtual address", "cond": "ARCH_PGPOOL_MAPPING && ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING", "defaults": [{"name": "0x0", "default": "0x0", "cond": "ARCH_PGPOOL_MAPPING && ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING"}], "help": "The virtual address of the start of the page pool memory.  This\nsetting is probably equivalent to other platform specific definitions\nbut is required again in order to modularize the common address\nenvironment logic."}, {"type": 27, "name": "ARCH_PGPOOL_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Page pool size (byes)", "cond": "ARCH_PGPOOL_MAPPING && ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING", "defaults": [{"name": "0", "default": "0", "cond": "ARCH_PGPOOL_MAPPING && ARCH_ADDRENV && ARCH_NEED_ADDRENV_MAPPING"}], "help": "The size of the page pool memory in bytes.  This setting is probably\nequivalent  to other platform specific definitions but is required again\nin order to modularize the common address environment logic."}]}]}, {"type": 3, "name": "PAGING", "value": "n", "user_value": null, "menuconfig": true, "dep": "n", "prompt": "On-demand paging", "cond": "ARCH_USE_MMU && !ARCH_ROMPGTABLE", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_USE_MMU && !ARCH_ROMPGTABLE"}], "help": "If set =y in your configation file, this setting will enable the on-demand\npaging feature as described in http://www.nuttx.org/NuttXDemandPaging.html.", "children": [{"type": 27, "name": "PAGING_PAGESIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Page size (bytes)", "cond": "PAGING", "defaults": [{"name": "4096", "default": "4096", "cond": "PAGING"}], "help": "The size of one managed page.  This must be a value supported by the\nprocessor's memory management unit"}, {"type": 27, "name": "PAGING_NLOCKED", "value": "", "user_value": null, "dep": "n", "prompt": "Number of locked pages", "cond": "PAGING", "defaults": [{"name": "48", "default": "48", "cond": "PAGING"}], "help": "This is the number of locked pages in the memory map."}, {"type": 3, "name": "PAGING_CUSTOM_BASE", "value": "n", "user_value": null, "dep": "n", "prompt": "Custom paging base address", "cond": "PAGING", "defaults": [{"name": "n", "default": "n", "cond": "PAGING"}], "help": "By default, the page begins at RAM_START/VSTART.  That base address\ncan be changed if this value is selected.", "children": [{"type": 24, "name": "PAGING_LOCKED_PBASE", "value": "", "user_value": null, "dep": "n", "prompt": "Physical base address", "cond": "PAGING_CUSTOM_BASE && PAGING"}, {"type": 24, "name": "PAGING_LOCKED_VBASE", "value": "", "user_value": null, "dep": "n", "prompt": "Virtual base address", "cond": "PAGING_CUSTOM_BASE && PAGING"}]}, {"type": 27, "name": "PAGING_NPPAGED", "value": "", "user_value": null, "dep": "n", "prompt": "Number of physical pages", "cond": "PAGING", "defaults": [{"name": "256", "default": "256", "cond": "PAGING"}], "help": "This is the number of physical pages available to support the paged\ntext region."}, {"type": 27, "name": "PAGING_NVPAGED", "value": "", "user_value": null, "dep": "n", "prompt": "Number of virtual pages", "cond": "PAGING", "defaults": [{"name": "1024", "default": "1024", "cond": "PAGING"}], "help": "This actual size of the virtual paged text region (in pages).  This\nis also the number of virtual pages required to span the entire\npaged region. The on-demand paging  feature is intended to support\nonly the case where the virtual paged text area is much larger the\navailable physical pages.  Otherwise, why would you enable on-demand paging?"}, {"type": 27, "name": "PAGING_NDATA", "value": "", "user_value": null, "dep": "n", "prompt": "Number of data pages", "cond": "PAGING", "defaults": [{"name": "256", "default": "256", "cond": "PAGING"}], "help": "This is the number of data pages in the memory map.  The data region\nwill extend to the end of RAM unless overridden by a setting in the\nconfiguration file.\n\nNOTE:  In some architectures, it may be necessary to take some memory\nfrom the end of RAM for page tables or other system usage.  The\nconfiguration settings and linker directives must be cognizant of\nthat: PAGING_NDATA should be defined to prevent the data region from\nextending all the way to the end of memory."}, {"type": 27, "name": "PAGING_DEFPRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Page fill worker thread priority", "cond": "PAGING", "defaults": [{"name": "100", "default": "100", "cond": "PAGING"}], "help": "The default, minimum priority of the page fill worker thread.  The\npriority of the page fill work thread will be boosted  boosted\ndynamically so that it matches the priority of the task on behalf\nof which it performs the fill.  This defines the minimum priority\nthat will be used. Default: 100."}, {"type": 27, "name": "PAGING_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Page fill worker thread stack size", "cond": "PAGING", "defaults": [{"name": "1024", "default": "1024", "cond": "PAGING"}], "help": "Defines the size of the allocated stack for the page fill worker\nthread. Default: 1024."}, {"type": 3, "name": "PAGING_BLOCKINGFILL", "value": "n", "user_value": null, "dep": "n", "prompt": "Blocking fill", "cond": "PAGING", "defaults": [{"name": "n", "default": "n", "cond": "PAGING"}], "help": "The architecture specific up_fillpage() function may be blocking\nor non-blocking.  If defined, this setting indicates that the\nup_fillpage() implementation will block until the transfer is\ncompleted. Default:  Undefined (non-blocking)."}, {"type": 27, "name": "PAGING_WORKPERIOD", "value": "", "user_value": null, "dep": "n", "prompt": "Work period (usec)", "cond": "PAGING", "defaults": [{"name": "500000", "default": "500000", "cond": "PAGING"}], "help": "The page fill worker thread will wake periodically even if there\nis no mapping to do.  This selection controls that wake-up period\n(in microseconds).  This wake-up a failsafe that will handle any\ncases where a single is lost (that would really be a bug and\nshouldn't happen!) and also supports timeouts for case of non-\nblocking, asynchronous fills (see CONFIG_PAGING_TIMEOUT_TICKS)."}, {"type": 3, "name": "PAGING_TIMEOUT", "value": "n", "user_value": null, "dep": "n", "prompt": "Paging timeout", "cond": "PAGING", "defaults": [{"name": "n", "default": "n", "cond": "PAGING"}], "help": "If defined, the implementation will monitor the (asynchronous) page\nfill logic.  If the fill takes longer than than a timeout value,\nthen a fatal error will be declared. Default: No timeouts monitored", "children": [{"type": 27, "name": "PAGING_TIMEOUT_TICKS", "value": "", "user_value": null, "dep": "n", "prompt": "Paging timeout ticks", "cond": "PAGING_TIMEOUT && PAGING", "defaults": [{"name": "10", "default": "10", "cond": "PAGING_TIMEOUT && PAGING"}], "help": "If PAGING_TIMEOUT is defined, then implementation will monitor the\n(asynchronous) page fill logic.  If the fill takes longer than this\nnumber if microseconds, then a fatal error will be declared.\nDefault: No timeouts monitored"}]}]}, {"type": 3, "name": "ARCH_IRQPRIO", "value": "n", "user_value": 0, "rev_dep": "ARCH_HIPRI_INTERRUPT && ARCH_HAVE_HIPRI_INTERRUPT && ARCH_HAVE_IRQPRIO", "dep": "y", "prompt": "Prioritized interrupt support", "cond": "ARCH_HAVE_IRQPRIO", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_IRQPRIO"}], "help": "Enable support for prioritized interrupts.\n\nNOTE: The use of interrupt priorities implies that you also have\nsupport for nested interrupts.  Most architectures do not support\nnesting of interrupts or, if they do, they only supported nested\ninterrupts with certain configuration options.  So this selection\nshould be used with caution."}, {"type": 3, "name": "ARCH_STACKDUMP", "value": "y", "user_value": 2, "dep": "y", "prompt": "Dump stack on assertions", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "selects": [{"symbol": "DEBUG_ALERT", "cond": "y"}], "help": "Enable to do stack dumps after assertions"}, {"type": 3, "name": "ARCH_USBDUMP", "value": "n", "user_value": null, "dep": "n", "prompt": "Dump USB trace data", "cond": "USBDEV_TRACE", "defaults": [{"name": "n", "default": "n", "cond": "USBDEV_TRACE"}], "help": "Enable to do USB trace after assertions"}, {"type": 3, "name": "ENDIAN_BIG", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_TMS570 && y) || (ARCH_CHIP_Z8F6403 && y) || (ARCH_CHIP_Z8F6423 && y)", "dep": "y", "prompt": "Big Endian Architecture", "cond": "!ARCH_RISCV", "defaults": [{"name": "n", "default": "n", "cond": "!ARCH_RISCV"}], "help": "Select if architecture operates using big-endian byte ordering."}, {"type": 3, "name": "ARCH_IDLE_CUSTOM", "value": "n", "user_value": 0, "dep": "y", "prompt": "Custom IDLE loop", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Each architecture provides a \"default\" IDLE loop that exits when the\nMCU has nothing else to do.  This default IDLE loop can be replaced\nby a custom, board-specific IDLE loop by setting this option.  Such\na custom IDLE loop may do things like a continuous built-in test or\nperhaps or IDLE low power operations.\n\nNOTE: As of this writing, this capability is only supported by the\nSTM32.  However, the implementation is trivial:  If CONFIG_ARCH_IDLE_CUSTOM,\nthen the default IDLE loop file is not included in the MCU-specific\nMake.defs file."}, {"type": 3, "name": "ARCH_CUSTOM_PMINIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Custom PM initialization", "cond": "PM", "defaults": [{"name": "n", "default": "n", "cond": "PM"}], "help": "Each architecture provides default power management (PM)\ninitialization that is called automatically when the system is\nstarted. This default PM initialization can be replaced by custom,\nboard-specific PM initialization by setting this option.  Such a\ncustom initialization may do additional PM-related initialization\nthat is unique to the board power management requirements.\n\nNOTE: As of this writing, this capability is only supported by the\nSTM32.  However, the implementation is trivial:  If CONFIG_ARCH_CUSTOM_PMINIT,\nthen the default PM initialization is not included in the MCU-specific\nMake.defs file."}, {"type": 3, "name": "ARCH_HAVE_RAMFUNCS", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_KINETIS && y) || (ARCH_CHIP_SAM34 && y) || (ARCH_CHIP_SAMV7 && y) || (ARCH_CHIP_TMS570 && y) || (ARCH_CHIP_XMC4 && y) || (EFM32_FLASHPROG && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM) || (SAMA5_BOOT_CS0FLASH && SAMA5_EBICS0_NOR && y) || (ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_CHIP_PIC32MX && y) || (ARCH_CHIP_PIC32MZ && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_RAMFUNCS", "value": "n", "user_value": null, "dep": "n", "prompt": "Copy functions to RAM on startup", "cond": "ARCH_HAVE_RAMFUNCS", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_HAVE_RAMFUNCS"}], "help": "Copy some functions to RAM at boot time.  This is done in some\narchitectures to improve performance.  In other cases, it is done\nso that FLASH can be reconfigured while the MCU executes out of\nSRAM."}, {"type": 3, "name": "ARCH_HAVE_RAMVECTORS", "value": "y", "user_value": 2, "rev_dep": "(ARCH_CORTEXM3 && ARCH_ARM) || (ARCH_CORTEXM4 && ARCH_ARM) || (ARCH_CORTEXM7 && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_RAMVECTORS", "value": "n", "user_value": 0, "dep": "y", "prompt": "Support RAM interrupt vectors", "cond": "ARCH_HAVE_RAMVECTORS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_RAMVECTORS"}], "help": "If ARCH_RAMVECTORS is defined, then the architecture will support\nmodifiable vectors in a RAM-based vector table."}, {"type": 3, "name": "ARCH_MINIMAL_VECTORTABLE", "value": "n", "user_value": 0, "dep": "y", "prompt": "Minimal RAM usage for vector table", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Use a minimum amount of RAM for the vector table.\n\nInstead of allowing irq_attach() to work for all interrupt vectors,\nrestrict to only working for a select few (defined in your board\nconfiguration). This can dramatically reduce the amount of RAM used\nbe your vector table.\n\nTo use this setting, you must have a file in your board config that\nprovides:\n\n  #include <nuttx/arch.h>\n  const irq_mapped_t g_irqmap[NR_IRQS] =\n  {\n    ... IRQ to index mapping values ...\n  };\n\nThis table is index by the hardware IRQ number and provides a value\nin the range of 0 to CONFIG_ARCH_NUSER_INTERRUPTS that is the new,\nmapped index into the vector table.  Unused, unmapped interrupts\nshould be set to IRQMAPPED_MAX.  So, for example, if g_irqmap[37]\n== 24, then the hardware interrupt vector 37 will be mapped to the\ninterrupt vector table at index 24.  if g_irqmap[42] ==\nIRQMAPPED_MAX, then hardware interrupt vector 42 is not used and\nif it occurs will result in an unexpected interrupt crash.", "children": [{"type": 27, "name": "ARCH_NUSER_INTERRUPTS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of interrupts", "cond": "ARCH_MINIMAL_VECTORTABLE", "defaults": [{"name": "0", "default": "0", "cond": "ARCH_MINIMAL_VECTORTABLE"}], "help": "If CONFIG_ARCH_MINIMAL_VECTORTABLE is defined, then this setting\ndefines the actual number of valid, mapped interrupts in g_irqmap.\nThis number will be the new size of the OS vector table"}]}, {"type": 6, "dep": "y", "prompt": "Board Settings", "cond": "y"}, {"type": 27, "name": "BOARD_LOOPSPERMSEC", "value": "5434", "user_value": "5434", "dep": "y", "prompt": "Delay loops per millisecond", "cond": "y", "defaults": [{"name": "5000", "default": "5000", "cond": "y"}], "help": "Simple delay loops are used by some logic, especially during boot-up,\ndriver initialization.  These delay loops must be calibrated for each\nboard in order to assure accurate timing by the delay loops."}, {"type": 3, "name": "ARCH_CALIBRATION", "value": "n", "user_value": 0, "dep": "y", "prompt": "Calibrate delay loop", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enables some built in instrumentation that causes a 100 second delay\nduring boot-up.  This 100 second delay serves no purpose other than it\nallows you to calibrate BOARD_LOOPSPERMSEC.  You simply use a stop\nwatch to measure the actual delay then adjust BOARD_LOOPSPERMSEC until\nthe actual delay is 100 seconds."}, {"type": 6, "dep": "y", "prompt": "Interrupt options", "cond": "y"}, {"type": 3, "name": "ARCH_HAVE_INTERRUPTSTACK", "value": "y", "user_value": 2, "rev_dep": "(ARCH_ARM && y) || (ARCH_AVR && y) || (ARCH_HC && y) || (ARCH_MIPS && y) || (ARCH_MISOC && y) || (ARCH_RENESAS && y) || (ARCH_RISCV && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 27, "name": "ARCH_INTERRUPTSTACK", "value": "2048", "user_value": "2048", "dep": "y", "prompt": "Interrupt Stack Size", "cond": "ARCH_HAVE_INTERRUPTSTACK", "defaults": [{"name": "0", "default": "0", "cond": "ARCH_HAVE_INTERRUPTSTACK"}], "help": "This architecture supports an interrupt stack. If defined, this symbol\nwill be the size of the interrupt stack in bytes.  If not defined (or\ndefined to be zero), the user task stacks will be used during interrupt\nhandling."}, {"type": 3, "name": "ARCH_HAVE_HIPRI_INTERRUPT", "value": "y", "user_value": 2, "rev_dep": "(ARCH_CORTEXM3 && ARCH_ARM) || (ARCH_CORTEXM4 && ARCH_ARM) || (ARCH_CORTEXM7 && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_HIPRI_INTERRUPT", "value": "n", "user_value": 0, "dep": "y", "prompt": "High priority interrupts", "cond": "ARCH_HAVE_HIPRI_INTERRUPT && ARCH_HAVE_IRQPRIO", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_HIPRI_INTERRUPT && ARCH_HAVE_IRQPRIO"}], "selects": [{"symbol": "ARMV7M_USEBASEPRI", "cond": "ARCH_HAVE_HIPRI_INTERRUPT && ARCH_HAVE_IRQPRIO"}, {"symbol": "ARCH_IRQPRIO", "cond": "ARCH_HAVE_HIPRI_INTERRUPT && ARCH_HAVE_IRQPRIO"}], "help": "NOTE: This description is currently unique to the Cortex-M family\nwhich is the only family that currently supports this feature.  The\ngeneral feature is not conceptually unique to the Cortex-M but it\nis extended to any other family, then this discussion will have to\nbe generalized.\n\nIf ARMV7M_USEBASEPRI is selected, then interrupts will be disabled\nby setting the BASEPRI register to NVIC_SYSH_DISABLE_PRIORITY so\nthat most interrupts will not have execution priority.  SVCall must\nhave execution priority in all cases.\n\nIn the normal cases, interrupts are not nest-able and all interrupts\nrun at an execution priority between NVIC_SYSH_PRIORITY_MIN and\nNVIC_SYSH_PRIORITY_MAX (with NVIC_SYSH_PRIORITY_MAX reserved for\nSVCall).\n\nIf, in addition, ARCH_HIPRI_INTERRUPT is defined, then special high\npriority interrupts are supported.  These are not \"nested\" in the\nnormal sense of the word.  These high priority interrupts can\ninterrupt normal processing but execute outside of OS (although they\ncan \"get back into the game\" via a PendSV interrupt).\n\nHow do you specify a high priority interrupt?  You need to do two\nthings:\n\n        1) You need to change the address in the vector table so that\n           the high priority interrupt vectors to your special C\n           interrupt handler.  There are two ways to do this:\n\n           a) If you select CONFIG_ARCH_RAMVECTORS, then vectors will\n              be kept in RAM and the system will support the interface:\n\n              int up_ramvec_attach(int irq, up_vector_t vector)\n\n              that can be used to attach your C interrupt handler to the\n              vector at run time.\n\n           b) Alternatively, you could keep your vectors in FLASH but in\n              order to this, you would have to develop your own custom\n              vector table.\n\n        2) Then set the priority of your interrupt to NVIC to\n           NVIC_SYSH_HIGH_PRIORITY using the standard interface:\n\n           int up_prioritize_irq(int irq, int priority)\n\nNOTE: ARCH_INTERRUPTSTACK must be set in kernel mode (BUILD_KERNEL).\nIn kernel mode without an interrupt stack, the interrupt handler\nwill set the MSP to the stack pointer of the interrupted thread.  If\nthe interrupted thread was a privileged thread, that will be the MSP\notherwise it will be the PSP.  If the PSP is used, then the value of\nthe MSP will be invalid when the interrupt handler returns because\nit will be a pointer to an old position in the unprivileged stack.\nThen when the high priority interrupt occurs and uses this stale MSP,\nthere will most likely be a system failure.\n\nIf the interrupt stack is selected, on the other hand, then the\ninterrupt handler will always set the MSP to the interrupt\nstack.  So when the high priority interrupt occurs, it will either\nuse the MSP of the last privileged thread to run or, in the case of\nthe nested interrupt, the interrupt stack if no privileged task has\nrun", "children": [{"type": 3, "name": "ARCH_INT_DISABLEALL", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable high priority interrupts", "cond": "ARCH_HIPRI_INTERRUPT && EXPERIMENTAL", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_HIPRI_INTERRUPT && EXPERIMENTAL"}], "help": "If ARCH_HIPRI_INTERRUPT is defined, then special high priority\ninterrupts are supported.  These are not \"nested\" in the normal\nsense of the word.  These high priority interrupts can interrupt\nnormal processing but execute outside of OS (although they can \"get\nback into the game\" via a PendSV interrupt).\n\nIn the normal course of things, interrupts must occasionally be\ndisabled using the up_irq_save() inline function to prevent contention\nin use of resources that may be shared between interrupt level and\nnon-interrupt level logic.  Now the question arises, if\nARCH_HIPRI_INTERRUPT, do we disable all interrupts (except SVCall),\nor do we only disable the \"normal\" interrupts.  Since the high\npriority interrupts cannot interact with the OS, you may want to\npermit the high priority interrupts even if interrupts are\ndisabled.  The setting ARCH_INT_DISABLEALL can be used to select\neither behavior:\n\n----------------------------+--------------+----------------------------\nCONFIG_ARCH_HIPRI_INTERRUPT |      NO      |             YES\n----------------------------+--------------+--------------+-------------\nCONFIG_ARCH_INT_DISABLEALL  |     N/A      |     YES      |      NO\n----------------------------+--------------+--------------+-------------\n                            |              |              |    SVCall\n                            |    SVCall    |    SVCall    |    HIGH\nDisable here and below --------> MAXNORMAL ---> HIGH --------> MAXNORMAL\n                            |              |    MAXNORMAL |\n----------------------------+--------------+--------------+-------------\n\nNOTE: This does not work now because interrupts get disabled in the\nstandard interrupt handling, prohibiting nesting.  Fix is simple:  Need\nto used more priority levels so that we can make a cleaner distinction\nwith the standard interrupt handler."}]}, {"type": 6, "dep": "y", "prompt": "Boot options", "cond": "y"}, {"type": 4, "user_value": 2, "dep": "y", "prompt": "Boot Mode", "cond": "y", "defaults": [{"name": "BOOT_RUNFROMFLASH", "default": "n", "cond": "y"}], "children": [{"type": 3, "name": "BOOT_RUNFROMEXTSRAM", "value": "n", "user_value": 0, "rev_dep": "IMX6_BOOT_SRAM && y", "dep": "y", "prompt": "Run from external SRAM", "cond": "y", "help": "Some configuration support booting and running from external SRAM."}, {"type": 3, "name": "BOOT_RUNFROMFLASH", "value": "n", "user_value": 0, "rev_dep": "IMX6_BOOT_NOR && y", "dep": "y", "prompt": "Boot and run from flash", "cond": "y", "help": "Most configurations support XIP operation from FLASH but must copy\ninitialized .data sections to RAM. (This is the default)."}, {"type": 3, "name": "BOOT_RUNFROMISRAM", "value": "y", "user_value": 2, "rev_dep": "IMX6_BOOT_OCRAM && y", "dep": "y", "prompt": "Boot and run from internal SRAM", "cond": "y", "help": "Some configuration support booting and running from internal SRAM."}, {"type": 3, "name": "BOOT_RUNFROMSDRAM", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_A1X && y) || (ARCH_CHIP_IMX6 && y) || (IMX6_BOOT_SDRAM && y)", "dep": "y", "prompt": "Boot and run from external SDRAM", "cond": "y", "help": "Some configuration support booting and running from external SDRAM."}, {"type": 3, "name": "BOOT_COPYTORAM", "value": "n", "user_value": 0, "dep": "y", "prompt": "Boot from FLASH but copy to ram", "cond": "y", "help": "Some configurations boot in FLASH but copy themselves entirely into\nRAM for better performance."}]}, {"type": 31, "dep": "y", "prompt": "Boot Memory Configuration", "cond": "y", "children": [{"type": 24, "name": "RAM_START", "value": "0x0d000000", "user_value": "0x0d000000", "dep": "y", "prompt": "Primary RAM start address (physical)", "cond": "y", "defaults": [{"name": "0x0", "default": "0x0", "cond": "y"}], "help": "The physical start address of primary installed RAM.  \"Primary\" RAM\nrefers to the RAM that you link program code into.  If program code\ndoes not execute out of RAM but from FLASH, then you may designate\nany block of RAM as \"primary.\""}, {"type": 24, "name": "RAM_VSTART", "value": "", "user_value": null, "dep": "n", "prompt": "Primary RAM start address (virtual)", "cond": "ARCH_USE_MMU", "defaults": [{"name": "0x0", "default": "0x0", "cond": "ARCH_USE_MMU"}], "help": "The virtual start address of installed primary RAM. \"Primary\" RAM\nrefers to the RAM that you link program code into.  If program code\ndoes not execute out of RAM but from FLASH, then you may designate\nany block of RAM as \"primary.\""}, {"type": 27, "name": "RAM_SIZE", "value": "1572864", "user_value": "1572864", "dep": "y", "prompt": "Primary RAM size", "cond": "y", "defaults": [{"name": "0", "default": "0", "cond": "y"}], "help": "The size in bytes of the installed primary RAM. \"Primary\" RAM\nrefers to the RAM that you link program code into.  If program code\ndoes not execute out of RAM but from FLASH, then you may designate\nany block of RAM as \"primary.\""}, {"type": 24, "name": "FLASH_START", "value": "", "user_value": null, "dep": "n", "prompt": "Boot FLASH start address (physical)", "cond": "BOOT_RUNFROMFLASH && ARCH_USE_MMU", "defaults": [{"name": "0x0", "default": "0x0", "cond": "BOOT_RUNFROMFLASH && ARCH_USE_MMU"}], "help": "The physical start address of installed boot FLASH.  \"Boot\" FLASH\nrefers to the FLASH that you link program code into."}, {"type": 24, "name": "FLASH_VSTART", "value": "", "user_value": null, "dep": "n", "prompt": "Boot FLASH start address (virtual)", "cond": "BOOT_RUNFROMFLASH && ARCH_USE_MMU", "defaults": [{"name": "0x0", "default": "0x0", "cond": "BOOT_RUNFROMFLASH && ARCH_USE_MMU"}], "help": "The virtual start address of installed boot FLASH.  \"Boot\" FLASH\nrefers to the FLASH that you link program code into."}, {"type": 27, "name": "FLASH_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Boot FLASH size", "cond": "BOOT_RUNFROMFLASH && ARCH_USE_MMU", "defaults": [{"name": "0", "default": "0", "cond": "BOOT_RUNFROMFLASH && ARCH_USE_MMU"}], "help": "The size in bytes of the installed boot FLASH.  \"Boot\" FLASH\nrefers to the FLASH that you link program code into."}, {"type": 3, "name": "ARCH_HAVE_SDRAM", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_A1X && y) || (ARCH_CHIP_IMX6 && y) || (LPC17_EXTDRAM && ARCH_HAVE_EXTDRAM && ARCH_CHIP_LPC17XX && ARCH_ARM) || (LPC31_EXTDRAM && ARCH_HAVE_EXTDRAM && ARCH_CHIP_LPC31XX && ARCH_ARM) || (SAMA5_DDRCS && SAMA5_MPDDRC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAM34_EXTDRAM && ARCH_HAVE_EXTDRAM && ARCH_CHIP_SAM34 && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "BOOT_SDRAM_DATA", "value": "n", "user_value": null, "dep": "n", "prompt": "Data in SDRAM", "cond": "ARCH_HAVE_SDRAM && !BOOT_RUNFROMSDRAM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_SDRAM && !BOOT_RUNFROMSDRAM"}], "help": "This selection should be set if data lies in SDRAM (vs. SRAM) and if\nSDRAM was not previously initialized by a loader.  Obviously, this\ndoes not apply if we booting from SDRAM because SDRAM must have been\ninitialized priority to loading NuttX into SDRAM.\n\nIn the case where SDRAM must be initialized by NuttX, the\ninitialization sequence is a little different: Normally, .data and\n.bss must be initialized before starting the system.  But in this\ncase SDRAM must be configured by board-specific logic before the\n.data and .bss sections can be initialized."}]}]}, {"type": 31, "dep": "y", "prompt": "Board Selection", "cond": "y", "children": [{"type": 4, "user_value": 2, "dep": "y", "prompt": "Select target board", "cond": "y", "defaults": [{"name": "ARCH_BOARD_CUSTOM", "default": "n", "cond": "y"}], "help": "Select the board hosting the architecture.  You must first select the\nexact MCU part number, then the boards supporting that part will\nbe available for selection.  Use ARCH_BOARD_CUSTOM to create a new\nboard configuration.", "children": [{"type": 3, "name": "ARCH_BOARD_AMBER", "value": "n", "user_value": 0, "dep": "n", "prompt": "Amber Web Server", "cond": "ARCH_CHIP_ATMEGA128 && y", "help": "This is placeholder for the SoC Robotics Amber Web Server that is based\non the Atmel AVR ATMega128 MCU.  There is not much there yet and what is\nthere is untested due to tool-related issues."}, {"type": 3, "name": "ARCH_BOARD_ARDUINO_MEGA2560", "value": "n", "user_value": 0, "dep": "n", "prompt": "Arduino Mega 2560", "cond": "ARCH_CHIP_ATMEGA2560 && y", "help": "This option selects the Arduino Mega 2560 board featuring the Atmel\nAtmega2560 MCU running at 16 MHz."}, {"type": 3, "name": "ARCH_BOARD_ARDUINO_DUE", "value": "n", "user_value": 0, "dep": "n", "prompt": "Arduino Due", "cond": "ARCH_CHIP_ATSAM3X8E && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_ATSAM3X8E && y"}], "help": "This options selects the Arduino DUE board featuring the Atmel\nATSAM3X8E MCU running at 84 MHz."}, {"type": 3, "name": "ARCH_BOARD_AVR32DEV1", "value": "n", "user_value": 0, "dep": "n", "prompt": "Atmel AVR32DEV1 board", "cond": "ARCH_CHIP_AT32UC3B0256 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_AT32UC3B0256 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_AT32UC3B0256 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_AT32UC3B0256 && y"}], "help": "This is a port of NuttX to the Atmel AVR32DEV1 board.  That board is\nbased on the Atmel AT32UC3B0256 MCU and uses a specially patched\nversion of the GNU toolchain:  The patches provide support for the\nAVR32 family.  That patched GNU toolchain is available only from the\nAtmel website.  STATUS: This port is functional but very basic.  There\nare configurations for NSH and the OS test."}, {"type": 3, "name": "ARCH_BOARD_C5471EVM", "value": "n", "user_value": 0, "dep": "n", "prompt": "Spectrum Digital C5471 evaluation board", "cond": "ARCH_CHIP_C5471 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_C5471 && y"}], "help": "This is a port to the Spectrum Digital C5471 evaluation board.  The\nTMS320C5471 is a dual core processor from TI with an ARM7TDMI general\npurpose processor and a c54 DSP.  It is also known as TMS320DA180 or just DA180.\nNuttX runs on the ARM core and is built with a GNU arm-nuttx-elf toolchain*.\nThis port is complete and verified."}, {"type": 3, "name": "ARCH_BOARD_CLICKER2_STM32", "value": "n", "user_value": 0, "dep": "n", "prompt": "Mikrow Clicker2 STM32", "cond": "ARCH_CHIP_STM32F407VG && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F407VG && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F407VG && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F407VG && y"}], "help": "Mikroe Clicker2 STM32 board based on the STMicro STM32F407VGT6 MCU."}, {"type": 3, "name": "ARCH_BOARD_CLOUDCTRL", "value": "n", "user_value": 0, "dep": "n", "prompt": "Darcy's CloudController stm32f10x board", "cond": "ARCH_CHIP_STM32F107VC && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F107VC && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F107VC && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F107VC && y"}], "help": "Small network relay development board. Based on the Shenzhou IV development\nboard design."}, {"type": 3, "name": "ARCH_BOARD_DEMOS92S12NEC64", "value": "n", "user_value": 0, "dep": "n", "prompt": "NXP/FreeScale DMO9S12NE64 board", "cond": "ARCH_CHIP_MCS92S12NEC64 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_MCS92S12NEC64 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_MCS92S12NEC64 && y"}], "help": "NXP/FreeScale DMO9S12NE64 board based on the MC9S12NE64 hcs12 cpu.  This\nport uses the m9s12x GCC toolchain.  STATUS:  (Still) under development; it\nis code complete but has not yet been verified."}, {"type": 3, "name": "ARCH_BOARD_DK_TM4C129X", "value": "n", "user_value": 0, "dep": "n", "prompt": "Tiva DK-TM4C129x Connected Development Kit", "cond": "ARCH_CHIP_TM4C129XNC && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_TM4C129XNC && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_TM4C129XNC && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_TM4C129XNC && y"}], "help": "Tiva DK-TM4C129x Connected Development Kit featuring the\nTM4C129XNCZAD MCU."}, {"type": 3, "name": "ARCH_BOARD_EA3131", "value": "n", "user_value": 0, "dep": "n", "prompt": "Embedded Artists EA3131 Development board", "cond": "ARCH_CHIP_LPC3131 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LPC3131 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_LPC3131 && y"}], "help": "Embedded Artists EA3131 Development board.  This board is based on the\nan NXP LPC3131 MCU. This OS is built with the arm-nuttx-elf toolchain*.\nSTATUS:  This port is complete and mature."}, {"type": 3, "name": "ARCH_BOARD_EA3152", "value": "n", "user_value": 0, "dep": "n", "prompt": "Embedded Artists EA3152 Development board", "cond": "ARCH_CHIP_LPC3152 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LPC3152 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_LPC3152 && y"}], "help": "Embedded Artists EA3152 Development board.  This board is based on the\nan NXP LPC3152 MCU. This OS is built with the arm-nuttx-elf toolchain*.\nSTATUS:  This port is has not be exercised well, but since it is\na simple derivative of the ea3131, it should be fully functional."}, {"type": 3, "name": "ARCH_BOARD_EAGLE100", "value": "n", "user_value": 0, "dep": "n", "prompt": "Micromint Eagle-100 Development board", "cond": "ARCH_CHIP_LM3S6918 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LM3S6918 && y"}], "help": "Micromint Eagle-100 Development board.  This board is based on the\nan ARM Cortex-M3 MCU, the Luminary LM3S6918. This OS is built with the\narm-nuttx-elf toolchain*.  STATUS:  This port is complete and mature."}, {"type": 3, "name": "ARCH_BOARD_EFM32G8XXSTK", "value": "n", "user_value": 0, "dep": "n", "prompt": "EFM32 Gecko Starter Kit", "cond": "ARCH_CHIP_EFM32G890F128 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_EFM32G890F128 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_EFM32G890F128 && y"}], "help": "This option selects the EFM32 Gecko Starter Kit (EFM32-G8XX-STK)."}, {"type": 3, "name": "ARCH_BOARD_EFM32GG_STK3700", "value": "n", "user_value": 0, "dep": "n", "prompt": "EFM32 Giant Gecko Starter Kit", "cond": "ARCH_CHIP_EFM32GG990F1024 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_EFM32GG990F1024 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_EFM32GG990F1024 && y"}], "help": "This option selects the EFM32 Giant Gecko Starter Kit (EFM32GG-STK3700)."}, {"type": 3, "name": "ARCH_BOARD_EKKLM3S9B96", "value": "n", "user_value": 0, "dep": "n", "prompt": "TI/Stellaris EKK-LM3S9B96", "cond": "ARCH_CHIP_LM3S9B96 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LM3S9B96 && y"}], "help": "TI/Stellaris EKK-LM3S9B96 board.  This board is based on the\nan EKK-LM3S9B96 which is a Cortex-M3."}, {"type": 3, "name": "ARCH_BOARD_ESP32CORE", "value": "n", "user_value": 0, "dep": "n", "prompt": "Expressif ESP32 Core board V2", "cond": "ARCH_CHIP_ESP32 && y", "help": "The ESP32 is a dual-core system from Expressif with two Harvard\narchitecture Xtensa LX6 CPUs. All embedded memory, external memory\nand peripherals are located on the data bus and/or the instruction\nbus of these CPUs. With some minor exceptions, the address mapping\nof two CPUs is symmetric, meaning they use the same addresses to\naccess the same memory."}, {"type": 3, "name": "ARCH_BOARD_EZ80F910200KITG", "value": "n", "user_value": 0, "dep": "n", "prompt": "ZiLOG ez80f910200kitg development kit", "cond": "ARCH_CHIP_EZ80F91 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_EZ80F91 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_EZ80F91 && y"}], "help": "ez80Acclaim! Microcontroller.  This port use the Zilog ez80f910200kitg\ndevelopment kit, eZ80F091 part, and the Zilog ZDS-II Windows command line\ntools.  The development environment is Cygwin under WinXP."}, {"type": 3, "name": "ARCH_BOARD_EZ80F910200ZCO", "value": "n", "user_value": 0, "dep": "n", "prompt": "ZiLOG ez80f910200zco development kit", "cond": "ARCH_CHIP_EZ80F91 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_EZ80F91 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_EZ80F91 && y"}], "help": "ez80Acclaim! Microcontroller.  This port use the Zilog ez80f910200zco\ndevelopment kit, eZ80F091 part, and the Zilog ZDS-II Windows command line\ntools.  The development environment is Cygwin under WinXP."}, {"type": 3, "name": "ARCH_BOARD_FIRE_STM32", "value": "n", "user_value": 0, "dep": "n", "prompt": "M3 Wildfire STM32 board", "cond": "ARCH_CHIP_STM32F103VE && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F103VE && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F103VE && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F103VE && y"}], "help": "Support for the M3 Wildfire STM32 board.  This board is based on the\nSTM32F103VET6 chip.  See http://firestm32.taobao.com .  Version 2\nand 3 of the boards are supported but only version 2 has been\ntested."}, {"type": 3, "name": "ARCH_BOARD_FREEDOM_K64F", "value": "n", "user_value": 0, "dep": "n", "prompt": "NXP Freedom-k64f development board", "cond": "ARCH_CHIP_MK64FN1M0VLL12 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_MK64FN1M0VLL12 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_MK64FN1M0VLL12 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_MK64FN1M0VLL12 && y"}], "help": "development board.\nThis port uses the NXP/FreeScale FREEDOM-K64F development board. This\nboard uses the Kinetis K64 MK64FN1M0VLL12 Cortex-M4 MCU."}, {"type": 3, "name": "ARCH_BOARD_FREEDOM_K66F", "value": "n", "user_value": 0, "dep": "n", "prompt": "NXP Freedom-k66f development board", "cond": "ARCH_CHIP_MK66FN2M0VMD18 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_MK66FN2M0VMD18 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_MK66FN2M0VMD18 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_MK66FN2M0VMD18 && y"}], "help": "development board.\nThis port uses the NXP/FreeScale FREEDOM-K66F development board. This\nboard uses the Kinetis K66 MK66FN2M0VMD18 Cortex-M4 MCU."}, {"type": 3, "name": "ARCH_BOARD_FREEDOM_KL25Z", "value": "n", "user_value": 0, "dep": "n", "prompt": "NXP/FreeScale Freedom KL25Z", "cond": "ARCH_CHIP_MKL25Z128 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_MKL25Z128 && y"}], "help": "This is the configuration for the NXP/FreeScale Freedom KL25Z board.  This\nboard has the K25Z120LE3AN chip with a built-in SDA debugger."}, {"type": 3, "name": "ARCH_BOARD_FREEDOM_KL26Z", "value": "n", "user_value": 0, "dep": "n", "prompt": "NXP/FreeScale Freedom KL26Z", "cond": "ARCH_CHIP_MKL26Z128 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_MKL26Z128 && y"}], "help": "This is the configuration for the NXP/FreeScale Freedom KL26Z board.  This\nboard has the K26Z128VLH4 chip with a built-in SDA debugger."}, {"type": 3, "name": "ARCH_BOARD_HYMINI_STM32V", "value": "n", "user_value": 0, "dep": "n", "prompt": "HY-Mini STM32v board", "cond": "ARCH_CHIP_STM32F103VC && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F103VC && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F103VC && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F103VC && y"}], "help": "A configuration for the HY-Mini STM32v board.  This board is based on the\nSTM32F103VCT6 chip."}, {"type": 3, "name": "ARCH_BOARD_LC823450_XGEVK", "value": "n", "user_value": 0, "dep": "n", "prompt": "ON Semiconductor LC823450-XGEVK development board", "cond": "ARCH_CHIP_LC823450 && y", "help": "This port uses the ON Semiconductor LC823450-XGEVK development board."}, {"type": 3, "name": "ARCH_BOARD_LINCOLN60", "value": "n", "user_value": 0, "dep": "n", "prompt": "Micromint Lincoln 60 board", "cond": "ARCH_CHIP_LPC1769 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LPC1769 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_LPC1769 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_LPC1769 && y"}], "help": "Micromint Lincoln 60 board using the NXP LPC1769 MCU."}, {"type": 3, "name": "ARCH_BOARD_KWIKSTIK_K40", "value": "n", "user_value": 0, "dep": "n", "prompt": "NXP/FreeScale KwikStik-K40 development board", "cond": "ARCH_CHIP_MK40X256VLQ100 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_MK40X256VLQ100 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_MK40X256VLQ100 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_MK40X256VLQ100 && y"}], "help": "Kinetis K40 Cortex-M4 MCU.  This port uses the NXP/FreeScale KwikStik-K40\ndevelopment board."}, {"type": 3, "name": "ARCH_BOARD_LAUNCHXL_TMS57004", "value": "n", "user_value": 0, "dep": "n", "prompt": "TI LaunchXL-TMS57004", "cond": "ARCH_CHIP_TMS570LS0432PZ && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_TMS570LS0432PZ && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_TMS570LS0432PZ && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_TMS570LS0432PZ && y"}], "help": "TI Hercules TMS570LS04x/03x LaunchPad Evaluation Kit (LAUNCHXL-\nTMS57004) featuring the Hercules TMS570LS0432PZ chip."}, {"type": 3, "name": "ARCH_BOARD_LM3S6432S2E", "value": "n", "user_value": 0, "dep": "n", "prompt": "Stellaris RDK-S2E Reference Design Kit", "cond": "ARCH_CHIP_LM3S6432 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LM3S6432 && y"}], "help": "Stellaris RDK-S2E Reference Design Kit and the MDL-S2E Ethernet to\nSerial module."}, {"type": 3, "name": "ARCH_BOARD_LM3S6965EK", "value": "n", "user_value": 0, "dep": "n", "prompt": "Stellaris LM3S6965 Evaluation Kit", "cond": "ARCH_CHIP_LM3S6965 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LM3S6965 && y"}], "help": "Stellaris LM3S6965 Evaluation Kit.  This board is based on the\nan ARM Cortex-M3 MCU, the Luminary/TI LM3S6965. This OS is built with the\narm-nuttx-elf toolchain*.  STATUS:  This port is complete and mature."}, {"type": 3, "name": "ARCH_BOARD_LM3S8962EK", "value": "n", "user_value": 0, "dep": "n", "prompt": "Stellaris LMS38962 Evaluation Kit", "cond": "ARCH_CHIP_LM3S8962 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LM3S8962 && y"}], "help": "Stellaris LMS38962 Evaluation Kit."}, {"type": 3, "name": "ARCH_BOARD_LM4F120_LAUNCHPAD", "value": "n", "user_value": 0, "dep": "n", "prompt": "Stellaris LM4F120 LaunchPad", "cond": "ARCH_CHIP_LM4F120 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LM4F120 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_LM4F120 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_LM4F120 && y"}], "help": "Stellaris LM4F120 LaunchPad."}, {"type": 3, "name": "ARCH_BOARD_LPCXPRESSO_LPC1115", "value": "n", "user_value": 0, "dep": "n", "prompt": "NXP LPCXpresso LPC1115", "cond": "ARCH_CHIP_LPC1115 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LPC1115 && y"}], "help": "The Embedded Artists LPCXpresso LPC1115 board featuring the NXP\nLPC1115 MCU."}, {"type": 3, "name": "ARCH_BOARD_LPCXPRESSO", "value": "n", "user_value": 0, "dep": "n", "prompt": "NXP LPCExpresso LPC1768", "cond": "ARCH_CHIP_LPC1768 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LPC1768 && y"}], "help": "Embedded Artists base board with NXP LPCExpresso LPC1768.  This board\nis based on the NXP LPC1768.  The Code Red toolchain is used by default."}, {"type": 3, "name": "ARCH_BOARD_BAMBINO_200E", "value": "n", "user_value": 0, "dep": "n", "prompt": "Micromint Bambino 200E", "cond": "ARCH_CHIP_LPC4330FBD144 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LPC4330FBD144 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_LPC4330FBD144 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_LPC4330FBD144 && y"}], "help": "Micromint Bambino board. This board is based on the LPC4330FBD144."}, {"type": 3, "name": "ARCH_BOARD_LPC4330_XPLORER", "value": "n", "user_value": 0, "dep": "n", "prompt": "NXG LPC4330-Xplorer", "cond": "ARCH_CHIP_LPC4330FET100 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LPC4330FET100 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_LPC4330FET100 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_LPC4330FET100 && y"}], "help": "NXG Technologies LPC4330 Xplorer board.  This board is based on the\nLPC4330FET100.  The Code Red toolchain is used by default."}, {"type": 3, "name": "ARCH_BOARD_LPC4337_WS", "value": "n", "user_value": 0, "dep": "n", "prompt": "WaveShare LPC4337-WS", "cond": "ARCH_CHIP_LPC4337JBD144 && y", "help": "The WaveShare LPC4337-ws board featuring the NXP LPC4337JBD144 MCU."}, {"type": 3, "name": "ARCH_BOARD_LPC4357_EVB", "value": "n", "user_value": 0, "dep": "n", "prompt": "NXP LPC4357-EVB", "cond": "ARCH_CHIP_LPC4357FET256 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LPC4357FET256 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_LPC4357FET256 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_LPC4357FET256 && y"}], "help": "NXP Technologies LPC4357 EVB board.  This board is based on the\nLPC4357FET256."}, {"type": 3, "name": "ARCH_BOARD_LPC4370_LINK2", "value": "n", "user_value": 0, "dep": "n", "prompt": "NXP LPC4370-Link2", "cond": "ARCH_CHIP_LPC4370FET100 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LPC4370FET100 && y"}], "help": "NXP LPC4370 Link2 board.  This board is based on the\nLPC4370FET100.  The Code Red toolchain is used by default."}, {"type": 3, "name": "ARCH_BOARD_MBED", "value": "n", "user_value": 0, "dep": "n", "prompt": "mbed LCP1768", "cond": "ARCH_CHIP_LPC1768 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LPC1768 && y"}], "help": "The configurations in this directory support the mbed board (http://mbed.org)\nthat features the NXP LPC1768 microcontroller. This OS is also built\nwith the arm-nuttx-elf toolchain*.  STATUS:  Contributed."}, {"type": 3, "name": "ARCH_BOARD_MCU123_LPC214X", "value": "n", "user_value": 0, "dep": "n", "prompt": "mcu123.com LPC2148 Development Board", "cond": "ARCH_CHIP_LPC214X && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LPC214X && y"}], "help": "This port is for the NXP LPC2148 as provided on the mcu123.com\nlpc214x development board. This OS is also built with the arm-nuttx-elf\ntoolchain*.  The port supports serial, timer0, spi, and usb."}, {"type": 3, "name": "ARCH_BOARD_MICROPENDOUS3", "value": "n", "user_value": 0, "dep": "n", "prompt": "Opendous Micropendous 3 board", "cond": "(ARCH_CHIP_AT90USB646 || ARCH_CHIP_AT90USB647 || ARCH_CHIP_AT90USB1286 || ARCH_CHIP_AT90USB1287) && y", "help": "This is a port to the Opendous Micropendous 3 board. This board may\nbe populated with either an AVR AT90USB646, 647, 1286, or 1287 MCU.\nSupport is configured for the AT90USB647."}, {"type": 3, "name": "ARCH_BOARD_MOTEINO_MEGA", "value": "n", "user_value": 0, "dep": "n", "prompt": "LowPowerLab MoteinoMEGA", "cond": "ARCH_CHIP_ATMEGA1284P && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_ATMEGA1284P && y"}], "help": "This is placeholder for the LowPowerLab MoteinoMEGA that is based\non the Atmel AVR ATMega1284P MCU.  There is not much there yet and what is\nthere is untested due to tool-related issues."}, {"type": 3, "name": "ARCH_BOARD_MX1ADS", "value": "n", "user_value": 0, "dep": "n", "prompt": "Motorola MX1ADS development board", "cond": "ARCH_CHIP_IMX1 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_IMX1 && y"}], "help": "This is a port to the Motorola MX1ADS development board.  That board\nis based on the NXP/FreeScale i.MX1 processor.  The i.MX1 is an ARM920T.\nSTATUS:  This port is nearly code complete but was never fully\nintegrated due to tool-related issues."}, {"type": 3, "name": "ARCH_BOARD_NE64BADGE", "value": "n", "user_value": 0, "dep": "n", "prompt": "FEG NE64 /PoE Badge board", "cond": "ARCH_CHIP_MCS92S12NEC64 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_MCS92S12NEC64 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_MCS92S12NEC64 && y"}], "help": "Future Electronics Group NE64 /PoE Badge board based on the\nMC9S12NE64 hcs12 cpu.  This port uses the m9s12x GCC toolchain.\nSTATUS:  Under development.  The port is code-complete but has\nnot yet been fully tested."}, {"type": 3, "name": "ARCH_BOARD_NTOSD_DM320", "value": "n", "user_value": 0, "dep": "n", "prompt": "Neuros OSD v1.0 Dev Board", "cond": "ARCH_CHIP_DM320 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_DM320 && y"}], "help": "This port uses the Neuros OSD v1.0 Dev Board with a GNU arm-nuttx-elf\ntoolchain*: see\n\nhttp://wiki.neurostechnology.com/index.php/OSD_1.0_Developer_Home\n\nThere are some differences between the Dev Board and the currently\navailable commercial v1.0 Boards.  See\n\nhttp://wiki.neurostechnology.com/index.php/OSD_Developer_Board_v1\n\nNuttX operates on the ARM9EJS of this dual core processor.\nSTATUS: This port is code complete, verified, and included in the\nNuttX 0.2.1 release."}, {"type": 3, "name": "ARCH_BOARD_LPC1766STK", "value": "n", "user_value": 0, "dep": "n", "prompt": "Olimex LPC1766-STK board", "cond": "ARCH_CHIP_LPC1766 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LPC1766 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_LPC1766 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_LPC1766 && y"}], "help": "This port uses the Olimex LPC1766-STK board and a GNU GCC toolchain* under\nLinux or Cygwin.  STATUS: Complete and mature."}, {"type": 3, "name": "ARCH_BOARD_MAPLE", "value": "n", "user_value": 0, "dep": "n", "prompt": "maple board", "cond": "(ARCH_CHIP_STM32F103RB || ARCH_CHIP_STM32F103CB) && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "(ARCH_CHIP_STM32F103RB || ARCH_CHIP_STM32F103CB) && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "(ARCH_CHIP_STM32F103RB || ARCH_CHIP_STM32F103CB) && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "(ARCH_CHIP_STM32F103RB || ARCH_CHIP_STM32F103CB) && y"}], "help": "A configuration for the LeafLab's Maple and Maple Mini boards.\nThese boards are based on the STM32F103RBT6 chip for the standard\nversion and on the STM32F103CBT6 for the mini version\n(See http://leaflabs.com/docs/hardware/maple.html)"}, {"type": 3, "name": "ARCH_BOARD_MIRTOO", "value": "n", "user_value": 0, "dep": "n", "prompt": "Mirtoo PIC32 Module from Dimitech", "cond": "ARCH_CHIP_PIC32MX250F128D && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_PIC32MX250F128D && y"}], "help": "This is the port to the DTX1-4000L \"Mirtoo\" module.  This module uses MicroChip\nPIC32MX250F128D.  See http://www.dimitech.com/ for further information."}, {"type": 3, "name": "ARCH_BOARD_MOXA", "value": "n", "user_value": 0, "dep": "n", "prompt": "Moxa board", "cond": "ARCH_CHIP_MOXART && y", "help": "Moxa"}, {"type": 3, "name": "ARCH_BOARD_NUTINY_NUC120", "value": "n", "user_value": 0, "dep": "n", "prompt": "Nuvoton NuTiny NUC120", "cond": "ARCH_CHIP_NUC120LE3AN && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_NUC120LE3AN && y"}], "help": "This is the port to the Nuvoton NuTiny EVB 120 board.  This board uses a\nNuvoton NUC120 chip, specifically the NUC120LE3AN.  See http://www.nuvoton.com/\nfor further information."}, {"type": 3, "name": "ARCH_BOARD_OLIMEX_EFM32G880F128_STK", "value": "n", "user_value": 0, "dep": "n", "prompt": "Olimex EFM32G880F128 STK", "cond": "ARCH_CHIP_EFM32G880F128 && y", "selects": [{"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_EFM32G880F128 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_EFM32G880F128 && y"}], "help": "This options selects the Olimex EFM32G880F128 STK"}, {"type": 3, "name": "ARCH_BOARD_OLIMEXLPC2378", "value": "n", "user_value": 0, "dep": "n", "prompt": "Olimex-lpc2378 board", "cond": "ARCH_CHIP_LPC2378 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LPC2378 && y"}], "help": "This port uses the Olimex-lpc2378 board and a GNU arm-nuttx-elf toolchain* under\nLinux or Cygwin.  STATUS: ostest and NSH configurations available.\nThis port for the NXP LPC2378 was contributed by Rommel Marcelo."}, {"type": 3, "name": "ARCH_BOARD_OLIMEX_LPC_H3131", "value": "n", "user_value": 0, "dep": "n", "prompt": "Olimex LPC-H3131 Development board", "cond": "ARCH_CHIP_LPC3131 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LPC3131 && y"}], "help": "Olimex LPC-H3131 development board.  This board is based on the\nNXP LPC3131 MCU."}, {"type": 3, "name": "ARCH_BOARD_OLIMEX_STRP711", "value": "n", "user_value": 0, "dep": "n", "prompt": "Olimex STR-P711 board", "cond": "ARCH_CHIP_STR71X && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STR71X && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STR71X && y"}], "help": "This port uses the Olimex STR-P711 board and a GNU arm-nuttx-elf toolchain* under\nLinux or Cygwin. See the http://www.olimex.com/dev/str-p711.html\" for\nfurther information.  STATUS: Configurations for the basic OS test and NSH\nare complete and verified."}, {"type": 3, "name": "ARCH_BOARD_OLIMEX_STM32H405", "value": "n", "user_value": 0, "dep": "n", "prompt": "Olimex STM32 H405 board", "cond": "ARCH_CHIP_STM32F405RG && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F405RG && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F405RG && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F405RG && y"}], "help": "This port uses the Olimex STM32 H405 board and a GNU arm-nuttx-elf\ntoolchain* under Linux or Cygwin. See the http://www.olimex.com for\nfurther information. This board features the STMicro STM32F405RGT6\nMCU."}, {"type": 3, "name": "ARCH_BOARD_OLIMEX_STM32H407", "value": "n", "user_value": 0, "dep": "n", "prompt": "Olimex STM32 H407 board", "cond": "ARCH_CHIP_STM32F407ZG && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F407ZG && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F407ZG && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F407ZG && y"}], "help": "This port uses the Olimex STM32 H407 board and a GNU arm-nuttx-elf\ntoolchain* under Linux or Cygwin. See the http://www.olimex.com for\nfurther information. This board features the STMicro STM32F407ZGT6 (144pins)."}, {"type": 3, "name": "ARCH_BOARD_OLIMEX_STM32E407", "value": "n", "user_value": 0, "dep": "n", "prompt": "Olimex STM32 E407 board", "cond": "ARCH_CHIP_STM32F407ZG && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F407ZG && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F407ZG && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F407ZG && y"}], "help": "Olimex STM32 E407 board based on the STMicro STM32F407ZGT6 (144pins)."}, {"type": 3, "name": "ARCH_BOARD_OLIMEX_STM32P107", "value": "n", "user_value": 0, "dep": "n", "prompt": "Olimex STM32 P107 board", "cond": "ARCH_CHIP_STM32F107VC && y", "help": "This port uses the Olimex STM32 P107 board and a GNU arm-nuttx-elf toolchain* under\nLinux or Cygwin. See the http://www.olimex.com for further information. This\nboard features the STMicro STM32F107VC MCU"}, {"type": 3, "name": "ARCH_BOARD_OLIMEX_STM32P207", "value": "n", "user_value": 0, "dep": "n", "prompt": "Olimex STM32 P207 board", "cond": "ARCH_CHIP_STM32F207ZE && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F207ZE && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F207ZE && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F207ZE && y"}], "help": "This port uses the Olimex STM32 P207 board and a GNU arm-nuttx-elf\ntoolchain under Linux or Cygwin. See the http://www.olimex.com for\nfurther information. This board features the STMicro STM32F207ZE MCU"}, {"type": 3, "name": "ARCH_BOARD_OLIMEX_STM32P407", "value": "n", "user_value": 0, "dep": "n", "prompt": "Olimex STM32 P407 board", "cond": "ARCH_CHIP_STM32F407ZG && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F407ZG && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F407ZG && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F407ZG && y"}], "help": "This port uses the Olimex STM32 P407 board and a GNU arm-nuttx-elf\ntoolchain under Linux or Cygwin. See the http://www.olimex.com for\nfurther information. This board features the STMicro STM32F407ZG MCU"}, {"type": 3, "name": "ARCH_BOARD_OLIMEXINO_STM32", "value": "n", "user_value": 0, "dep": "n", "prompt": "Olimexino STM32 board", "cond": "ARCH_CHIP_STM32F103RB && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F103RB && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F103RB && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F103RB && y"}], "help": "This port uses the Olimexino STM32 board and a GNU arm-nuttx-elf\ntoolchain under Linux or Cygwin. See the http://www.olimex.com for\nfurther information. This board features the STMicro STM32F103RBT6 MCU.\nContribued by David Sidrane."}, {"type": 3, "name": "ARCH_BOARD_OPEN1788", "value": "n", "user_value": 0, "dep": "n", "prompt": "Wave Share Open1788", "cond": "ARCH_CHIP_LPC1788 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LPC1788 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_LPC1788 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_LPC1788 && y"}], "help": "This port uses the Wave Share Open1788 board. See the\nhttp://wvshare.com/product/Open1788-Standard.htm for further\ninformation. This board features the NXP LPC1788 MCU"}, {"type": 3, "name": "ARCH_BOARD_P112", "value": "n", "user_value": 0, "dep": "n", "prompt": "P112 Z180-based platform", "cond": "ARCH_CHIP_Z8018216FSG && y", "help": "The P112 is notable because it was the first of the hobbyist single board\ncomputers to reach the production stage. The P112 hobbyist computers\nwere relatively widespread and inspired other hobbyist centered home brew\ncomputing projects such as N8VEM home brew computing project. The P112\nproject still maintains many devoted enthusiasts and has an online\nrepository of software and other information.\n\nThe P112 computer originated as a commercial product of \"D-X Designs Pty\nLtd\" of Australia. They describe the computer as \"The P112 is a stand-alone\n8-bit CPU board. Typically running CP/M (tm) or a similar operating system,\nit provides a Z80182 (Z-80 upgrade) CPU with up to 1MB of memory, serial,\nparallel and diskette IO, and realtime clock, in a 3.5-inch drive form factor.\nPowered solely from 5V, it draws 150mA (nominal: not including disk drives)\nwith a 16MHz CPU clock. Clock speeds up to 24.576MHz are possible.\"\n\nThe P112 board was last available new in 1996 by Dave Brooks. In late 2004\non the Usenet Newsgroup comp.os.cpm, talk about making another run of P112\nboards was discussed. David Griffith decided to produce additional P112 kits\nwith Dave Brooks blessing and the assistance of others. In addition Terry\nGulczynski makes additional P112 derivative hobbyist home brew computers.\nHal Bower was very active in the mid 1990's on the P112 project and ported\nthe \"Banked/Portable BIOS\"."}, {"type": 3, "name": "ARCH_BOARD_PCBLOGICPIC32MX", "value": "n", "user_value": 0, "dep": "n", "prompt": "PIC32MX board from PCB Logic Design Co", "cond": "ARCH_CHIP_PIC32MX460F512L && y", "help": "This is the port of NuttX to the PIC32MX board from PCB Logic Design Co.\nThis board features the MicroChip PIC32MX460F512L.\nThe board is a very simple -- little more than a carrier for the PIC32\nMCU plus voltage regulation, debug interface, and an OTG connector.\nSTATUS:  Code complete but testing has been stalled due to tool related problems\n(PICkit 2 does not work with the PIC32)."}, {"type": 3, "name": "ARCH_BOARD_PCDUINO_A10", "value": "n", "user_value": 0, "dep": "n", "prompt": "pcDuino A10", "cond": "ARCH_CHIP_A10 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_A10 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_A10 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_A10 && y"}], "help": "This is the port of NuttX to the Allwinner A10-based pcDuino v1\nboard.  See http://www.pcduino.com/ for information about pcDuino Lite, v1,\nand v2.  I have not compared these boards in detail, but I believe that\nthe differences are cosmetic.  This port was developed on the v1 board,\nbut the others may be compatible."}, {"type": 3, "name": "ARCH_BOARD_PIC32MX_STARTERKIT", "value": "n", "user_value": 0, "dep": "n", "prompt": "Microchip PIC32MX Ethernet Starter Kit (DM320004)", "cond": "ARCH_CHIP_PIC32MX795F512L && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_PIC32MX795F512L && y"}], "help": "This is the port of NuttX to the Microchip PIC32 Ethernet Starter Kit\n(DM320004) with the Multimedia Expansion Board (MEB, DM320005).\nSee www.microchip.com for further information."}, {"type": 3, "name": "ARCH_BOARD_PIC32MX7MMB", "value": "n", "user_value": 0, "dep": "n", "prompt": "Mikroelektronika PIC32MX7 MMB", "cond": "ARCH_CHIP_PIC32MX795F512L && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_PIC32MX795F512L && y"}], "help": "This is the port NuttX to the Mikroelektronika PIC32MX7 Multimedia Board\n(MMB).  See http://www.mikroe.com/ for further information."}, {"type": 3, "name": "ARCH_BOARD_PIC32MZ_STARTERKIT", "value": "n", "user_value": 0, "dep": "n", "prompt": "Microchip PIC32MZ Ethernet Starter Kit ((DM320006)", "cond": "(ARCH_CHIP_PIC32MZ2048ECH || ARCH_CHIP_PIC32MZ2048ECM) && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "(ARCH_CHIP_PIC32MZ2048ECH || ARCH_CHIP_PIC32MZ2048ECM) && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "(ARCH_CHIP_PIC32MZ2048ECH || ARCH_CHIP_PIC32MZ2048ECM) && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "PIC32MZ_GPIOIRQ_PORTB && (ARCH_CHIP_PIC32MZ2048ECH || ARCH_CHIP_PIC32MZ2048ECM) && y"}], "help": "This is the port of NuttX to the Microchip PIC32MZ Embedded\nConnectivity (EC) Starter Kit.  There are two configurations of the\nstarter kit:\n\n1) The PIC32MZ Embedded Connectivity Starter Kit based on the\n   PIC32MZ2048ECH144-I/PH chip (DM320006), and\n2) The PIC32MZ Embedded Connectivity Starter Kit based on the\n   PIC32MZ2048ECM144-I/PH w/Crypto Engine (DM320006-C)\n\nSee www.microchip.com for further information."}, {"type": 3, "name": "ARCH_BOARD_NR5M100_NEXYS4", "value": "n", "user_value": 0, "dep": "n", "prompt": "NEXT RISC-V NR5M100 on Nexys-4 board", "cond": "ARCH_CHIP_NR5M100 && y", "selects": [{"symbol": "UART_SERIALDRIVER", "cond": "ARCH_CHIP_NR5M100 && y"}], "help": "This is the port NuttX to the NEXT RISC-V processor runnining on a Digilent\nNexys-4 (non DDR version) FPGA board."}, {"type": 3, "name": "ARCH_BOARD_NUCLEO_144", "value": "n", "user_value": 0, "dep": "n", "prompt": "STMicro NUCLEO-144", "cond": "(ARCH_CHIP_STM32F746ZG || ARCH_CHIP_STM32F767ZI) && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "(ARCH_CHIP_STM32F746ZG || ARCH_CHIP_STM32F767ZI) && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "(ARCH_CHIP_STM32F746ZG || ARCH_CHIP_STM32F767ZI) && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "(ARCH_CHIP_STM32F746ZG || ARCH_CHIP_STM32F767ZI) && y"}], "help": "STMicro Nucleo-144 development board featuring STMicroelectronics\nF2, F3, F4, F7 and L4 MCU families.  The board is a \"Hardware pattern\"\nthat can be populated with the 144 pin package of the following MCUs:\n\n        Target STM32    Order code\n        STM32F207ZGT6   NUCLEO-F207ZG\n        STM32F303ZET6   NUCLEO-F303ZE\n        STM32F429ZIT6   NUCLEO-F429ZI\n        STM32F446ZET6   NUCLEO-F446ZE\n        STM32F746ZGT6   NUCLEO-F746ZG\n        STM32F767ZIT6   NUCLEO-F767ZI\n        STM32L496ZGT6   NUCLEO-L496ZG\n        STM32L496ZGT6P  NUCLEO-L496ZG-P\n\nSupported in this configuration are:\n\n        NUCLEO-F746ZG - STM32F746ZGT6 a 216MHz Cortex-M7, w/FPU -\n                1024KiB Flash memory and 320KiB SRAM.\n        NUCLEO-F767ZI - STM32F767ZIT6 a 216MHz Cortex-M7, w/DPFPU -\n                2048KiB Flash memory and 512KiB SRAM."}, {"type": 3, "name": "ARCH_BOARD_NUCLEO_L496ZG", "value": "n", "user_value": 0, "dep": "n", "prompt": "STM32L496 Nucleo L496ZG", "cond": "ARCH_CHIP_STM32L496ZG && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32L496ZG && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32L496ZG && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32L496ZG && y"}], "help": "STMicro Nucleo-144 development board featuring STMicroelectronics\nF2, F3, F4, F7 and L4 MCU families.  The board is a \"Hardware pattern\"\nthat can be populated with the 144 pin package of the following MCUs:\n\n        Target STM32    Order code\n        STM32F207ZGT6   NUCLEO-F207ZG\n        STM32F303ZET6   NUCLEO-F303ZE\n        STM32F429ZIT6   NUCLEO-F429ZI\n        STM32F446ZET6   NUCLEO-F446ZE\n        STM32F746ZGT6   NUCLEO-F746ZG\n        STM32F767ZIT6   NUCLEO-F767ZI\n        STM32L496ZGT6   NUCLEO-L496ZG\n        STM32L496ZGT6P  NUCLEO-L496ZG-P\n\nSupported in this configuration are:\n\n        NUCLEO-L496ZG - STM32L496ZGT6 a 80MHz Cortex-M4, w/FPU -\n                1024KiB Flash memory and 320KiB SRAM."}, {"type": 3, "name": "ARCH_BOARD_NUCLEO_F072RB", "value": "n", "user_value": 0, "dep": "n", "prompt": "STM32F072 Nucleo F072RB", "cond": "ARCH_CHIP_STM32F072RB && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F072RB && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F072RB && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F072RB && y"}], "help": "STMicro Nucleo F072RB board based on the STMicro STM32F072RBT6 MCU."}, {"type": 3, "name": "ARCH_BOARD_NUCLEO_F091RC", "value": "n", "user_value": 0, "dep": "n", "prompt": "STM32F091 Nucleo F091RC", "cond": "ARCH_CHIP_STM32F091RC && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F091RC && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F091RC && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F091RC && y"}], "help": "STMicro Nucleo F091RC board based on the STMicro STM32F091RCT6 MCU."}, {"type": 3, "name": "ARCH_BOARD_NUCLEO_F303RE", "value": "n", "user_value": 0, "dep": "n", "prompt": "STM32F303 Nucleo F303RE", "cond": "ARCH_CHIP_STM32F303RE && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F303RE && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F303RE && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F303RE && y"}], "help": "STMicro Nucleo F303RE board based on the STMicro STM32F303RET6 MCU."}, {"type": 3, "name": "ARCH_BOARD_NUCLEO_F334R8", "value": "n", "user_value": 0, "dep": "n", "prompt": "STM32F334 Nucleo F334R8", "cond": "ARCH_CHIP_STM32F334R8 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F334R8 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F334R8 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F334R8 && y"}], "help": "STMicro Nucleo F334R8 board based on the STMicro STM32F334R8 MCU."}, {"type": 3, "name": "ARCH_BOARD_NUCLEO_F401RE", "value": "n", "user_value": 0, "dep": "n", "prompt": "STM32F401 Nucleo F401RE", "cond": "ARCH_CHIP_STM32F401RE && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F401RE && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F401RE && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F401RE && y"}], "help": "This is a minimal configuration that supports low-level test of the\nNucleo F401RE in the NuttX source tree."}, {"type": 3, "name": "ARCH_BOARD_NUCLEO_F411RE", "value": "n", "user_value": 0, "dep": "n", "prompt": "STM32F411 Nucleo F411RE", "cond": "ARCH_CHIP_STM32F411RE && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F411RE && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F411RE && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F411RE && y"}], "help": "This is a minimal configuration that supports low-level test of the\nNucleo F411RE in the NuttX source tree."}, {"type": 3, "name": "ARCH_BOARD_NUCLEO_L432KC", "value": "n", "user_value": 0, "dep": "n", "prompt": "STM32L432 Nucleo-32 L432KC", "cond": "ARCH_CHIP_STM32L432KC && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32L432KC && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32L432KC && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32L432KC && y"}], "help": "STMicro Nucleo-32 L432KC board based on the STMicro STM32L432KCU6 MCU."}, {"type": 3, "name": "ARCH_BOARD_NUCLEO_L452RE", "value": "n", "user_value": 0, "dep": "n", "prompt": "STM32L452 Nucleo L452RE", "cond": "ARCH_CHIP_STM32L452RE && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32L452RE && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32L452RE && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32L452RE && y"}], "help": "STMicro Nucleo L452RE board based on the STMicro STM32L452RET6 MCU."}, {"type": 3, "name": "ARCH_BOARD_NUCLEO_L476RG", "value": "n", "user_value": 0, "dep": "n", "prompt": "STM32L476 Nucleo L476RG", "cond": "ARCH_CHIP_STM32L476RG && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32L476RG && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32L476RG && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32L476RG && y"}], "help": "STMicro Nucleo L476RG board based on the STMicro STM32L476RGT6 MCU."}, {"type": 3, "name": "ARCH_BOARD_QEMU_I486", "value": "n", "user_value": 0, "dep": "n", "prompt": "Qemu i486 Mode", "cond": "(ARCH_X86 || ARCH_I486) && y", "help": "Port of NuttX to QEMU in i486 mode.  This port will also run on real i486\nhardwared (Google the Bifferboard)."}, {"type": 3, "name": "ARCH_BOARD_SABRE_6QUAD", "value": "n", "user_value": 0, "dep": "n", "prompt": "NXP/Freescale i.MX6 Sabre-6Quad board", "cond": "ARCH_CHIP_IMX6_6QUAD && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_IMX6_6QUAD && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_IMX6_6QUAD && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_IMX6_6QUAD && y"}], "help": "This options selects support for NuttX on the NXP/Freescale Sabre\nboard featuring the iMX 6Quad CPU."}, {"type": 3, "name": "ARCH_BOARD_SAMA5D2_XULT", "value": "n", "user_value": 0, "dep": "n", "prompt": "Atmel SAMA5D2 Xplained Ultra development board", "cond": "ARCH_CHIP_ATSAMA5D27 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_ATSAMA5D27 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_ATSAMA5D27 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_ATSAMA5D27 && y"}], "help": "The port of NuttX to the Atmel SAMA5D2-XULT development board"}, {"type": 3, "name": "ARCH_BOARD_SAMA5D3X_EK", "value": "n", "user_value": 0, "dep": "n", "prompt": "Atmel SAMA5D3x-EK development board", "cond": "(ARCH_CHIP_ATSAMA5D31 || ARCH_CHIP_ATSAMA5D33 || ARCH_CHIP_ATSAMA5D34 || ARCH_CHIP_ATSAMA5D35) && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "(ARCH_CHIP_ATSAMA5D31 || ARCH_CHIP_ATSAMA5D33 || ARCH_CHIP_ATSAMA5D34 || ARCH_CHIP_ATSAMA5D35) && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "(ARCH_CHIP_ATSAMA5D31 || ARCH_CHIP_ATSAMA5D33 || ARCH_CHIP_ATSAMA5D34 || ARCH_CHIP_ATSAMA5D35) && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "(ARCH_CHIP_ATSAMA5D31 || ARCH_CHIP_ATSAMA5D33 || ARCH_CHIP_ATSAMA5D34 || ARCH_CHIP_ATSAMA5D35) && y"}, {"symbol": "ARCH_PHY_INTERRUPT", "cond": "NETDEVICES && (ARCH_CHIP_ATSAMA5D31 || ARCH_CHIP_ATSAMA5D33 || ARCH_CHIP_ATSAMA5D34 || ARCH_CHIP_ATSAMA5D35) && y"}], "help": "The port of NuttX to the Atmel SAMA5D3x-EK development board (where x=1,3,4, or 5)."}, {"type": 3, "name": "ARCH_BOARD_SAMA5D3_XPLAINED", "value": "n", "user_value": 0, "dep": "n", "prompt": "Atmel SAMA5D3 Xplained development board", "cond": "ARCH_CHIP_ATSAMA5D36 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_ATSAMA5D36 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_ATSAMA5D36 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_ATSAMA5D36 && y"}, {"symbol": "ARCH_PHY_INTERRUPT", "cond": "NETDEVICES && ARCH_CHIP_ATSAMA5D36 && y"}], "help": "The port of NuttX to the Atmel SAMA5D3 Xplained development board."}, {"type": 3, "name": "ARCH_BOARD_SAMA5D4_EK", "value": "n", "user_value": 0, "dep": "n", "prompt": "Atmel SAMA5D4-EK development board", "cond": "ARCH_CHIP_ATSAMA5D44 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_ATSAMA5D44 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_ATSAMA5D44 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_ATSAMA5D44 && y"}, {"symbol": "ARCH_PHY_INTERRUPT", "cond": "NETDEVICES && ARCH_CHIP_ATSAMA5D44 && y"}], "help": "The port of NuttX to the Atmel SAMA5D4-EK development board"}, {"type": 3, "name": "ARCH_BOARD_SAMD20_XPLAINED", "value": "n", "user_value": 0, "dep": "n", "prompt": "Atmel SAMD20-Xplained Pro development board", "cond": "ARCH_CHIP_SAMD20J18 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_SAMD20J18 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_SAMD20J18 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_SAMD20J18 && y"}], "help": "The port of NuttX to the Atmel SAMD20-Xplained Pro development board.\nThis board features the ATSAMD20J18A MCU (Cortex-M0+ with 256KB of FLASH\nand 32KB of SRAM)."}, {"type": 3, "name": "ARCH_BOARD_SAMD21_XPLAINED", "value": "n", "user_value": 0, "dep": "n", "prompt": "Atmel SAMD21-Xplained Pro development board", "cond": "ARCH_CHIP_SAMD21J18A && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_SAMD21J18A && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_SAMD21J18A && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_SAMD21J18A && y"}], "help": "The port of NuttX to the Atmel SAMD21-Xplained Pro development board.\nThis board features the ATSAMD21J18A MCU (Cortex-M0+ with 256KB of FLASH\nand 32KB of SRAM)."}, {"type": 3, "name": "ARCH_BOARD_SAML21_XPLAINED", "value": "n", "user_value": 0, "dep": "n", "prompt": "Atmel SAML21-Xplained Pro development board", "cond": "ARCH_CHIP_SAML21J18 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_SAML21J18 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_SAML21J18 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_SAML21J18 && y"}], "help": "The port of NuttX to the Atmel SAML21-Xplained Pro development board.\nThis board features the ATSAML21J18A MCU (Cortex-M0+ with 256KB of FLASH\nand 32KB of SRAM)."}, {"type": 3, "name": "ARCH_BOARD_SAM3UEK", "value": "n", "user_value": 0, "dep": "n", "prompt": "Atmel SAM3U-EK development board", "cond": "ARCH_CHIP_ATSAM3U4E && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_ATSAM3U4E && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_ATSAM3U4E && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_ATSAM3U4E && y"}], "help": "The port of NuttX to the Atmel SAM3U-EK development board."}, {"type": 3, "name": "ARCH_BOARD_SAM4CMP_DB", "value": "n", "user_value": 0, "dep": "n", "prompt": "Atmel SAM4CMP-DB development board", "cond": "ARCH_CHIP_ATSAM4CMP16B && y", "help": "The port of NuttX to the Atmel SAM4CMP-DB development board."}, {"type": 3, "name": "ARCH_BOARD_SAM4EEK", "value": "n", "user_value": 0, "dep": "n", "prompt": "Atmel SAM4E-EK development board", "cond": "ARCH_CHIP_ATSAM4E16E && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_ATSAM4E16E && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_ATSAM4E16E && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_ATSAM4E16E && y"}, {"symbol": "ARCH_PHY_INTERRUPT", "cond": "NETDEVICES && ARCH_CHIP_ATSAM4E16E && y"}], "help": "The port of NuttX to the Atmel SAM4E-EK development board.  This\nboard features the SAM4E16 MCU running at up to 120MHz."}, {"type": 3, "name": "ARCH_BOARD_SAM4L_XPLAINED", "value": "n", "user_value": 0, "dep": "n", "prompt": "Atmel SAM4L-Xplained Pro development board", "cond": "ARCH_CHIP_ATSAM4LC4C && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_ATSAM4LC4C && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_ATSAM4LC4C && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_ATSAM4LC4C && y"}], "help": "The port of NuttX to the Atmel SAM4L-Xplained Pro development board."}, {"type": 3, "name": "ARCH_BOARD_SAM4S_XPLAINED", "value": "n", "user_value": 0, "dep": "n", "prompt": "Atmel SAM4S-Xplained development board", "cond": "ARCH_CHIP_ATSAM4S16C && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_ATSAM4S16C && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_ATSAM4S16C && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_ATSAM4S16C && y"}], "help": "The port of NuttX to the Atmel SAM4S-Xplained development board."}, {"type": 3, "name": "ARCH_BOARD_SAM4S_XPLAINED_PRO", "value": "n", "user_value": 0, "dep": "n", "prompt": "Atmel SAM4S-Xplained Pro development board", "cond": "ARCH_CHIP_ATSAM4SD32C && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_ATSAM4SD32C && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_ATSAM4SD32C && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_ATSAM4SD32C && y"}], "help": "The port of NuttX to the Atmel SAM4S-Xplained Pro development board."}, {"type": 3, "name": "ARCH_BOARD_SAME70_XPLAINED", "value": "n", "user_value": 0, "dep": "n", "prompt": "Atmel SAME70 Xplained evaluation board", "cond": "ARCH_CHIP_SAME70Q21 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_SAME70Q21 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_SAME70Q21 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_SAME70Q21 && y"}, {"symbol": "ARCH_PHY_INTERRUPT", "cond": "NETDEVICES && ARCH_CHIP_SAME70Q21 && y"}], "help": "The port of NuttX to the Atmel SAME70 Xplained evaluation board."}, {"type": 3, "name": "ARCH_BOARD_SAMV71_XULT", "value": "n", "user_value": 0, "dep": "n", "prompt": "Atmel SAMV71 Xplained Ultra evaluation board", "cond": "ARCH_CHIP_SAMV71Q21 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_SAMV71Q21 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_SAMV71Q21 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_SAMV71Q21 && y"}, {"symbol": "ARCH_PHY_INTERRUPT", "cond": "NETDEVICES && ARCH_CHIP_SAMV71Q21 && y"}], "help": "The port of NuttX to the Atmel SAMV71 Xplained Ultra evaluation board."}, {"type": 3, "name": "ARCH_BOARD_SHENZHOU", "value": "n", "user_value": 0, "dep": "n", "prompt": "Shenzhou STM32F107 board", "cond": "ARCH_CHIP_STM32F107VC && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F107VC && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F107VC && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F107VC && y"}], "help": "This port uses the Shenzhou STM32 F107 board and a GNU arm-nuttx-elf toolchain* under\nLinux or Cygwin. See the http://www.armjishu.com for further information. This\nboard features the STMicro STM32F107VC MCU"}, {"type": 3, "name": "ARCH_BOARD_SKP16C26", "value": "n", "user_value": 0, "dep": "n", "prompt": "Renesas SKP16C26 StarterKit", "cond": "ARCH_CHIP_M30262F8 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_M30262F8 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_M30262F8 && y"}], "help": "Renesas M16C processor on the Renesas SKP16C26 StarterKit.  This port\nuses the GNU m32c toolchain.  STATUS:  The port is complete but untested\ndue to issues with compiler internal errors."}, {"type": 3, "name": "ARCH_BOARD_SPARK", "value": "n", "user_value": 0, "dep": "n", "prompt": "Spark Core", "cond": "ARCH_CHIP_STM32F103CB && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F103CB && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F103CB && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F103CB && y"}], "help": "A configuration for the Spark Core from Spark Devices\n(http://www.spark.io).  This board features the STM32103CBT6\nMCU from STMicro."}, {"type": 3, "name": "ARCH_BOARD_PHOTON", "value": "n", "user_value": 0, "dep": "n", "prompt": "Photon wifi board", "cond": "ARCH_CHIP_STM32F205RG && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F205RG && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F205RG && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F205RG && y"}], "help": "A configuration for the Photon from Particle Devices\n(https://www.particle.io). This board features the STM32F205RGY6\nMCU from STMicro."}, {"type": 3, "name": "ARCH_BOARD_STM32_BUTTERFLY2", "value": "n", "user_value": 0, "dep": "n", "prompt": "Kamami STM32Butterfly2 development board", "cond": "ARCH_CHIP_STM32F107VC && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F107VC && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F107VC && y"}], "help": "A configuration for the Kamami STM32Butterfly2 development board\nbased on STM32F107VC micro-controler chip with optional ETH\nboard.  See\nhttps://kamami.pl/zestawy-uruchomieniowe-stm32/178507-stm32butterfly2.html"}, {"type": 3, "name": "ARCH_BOARD_STM32_TINY", "value": "n", "user_value": 0, "dep": "n", "prompt": "STM32-Tiny board", "cond": "ARCH_CHIP_STM32F103C8 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F103C8 && y"}], "help": "A configuration for the STM32 Tiny board. This board is based on a\nSTM32F103C8T6 micro-controller chip, and is (always ?) bundled with\nan nRF24L01+ wireless module."}, {"type": 3, "name": "ARCH_BOARD_STM32F103_MINIMUM", "value": "n", "user_value": 0, "dep": "n", "prompt": "STM32F103C8T6 Minimum ARM Development Board", "cond": "ARCH_CHIP_STM32F103C8 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F103C8 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F103C8 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F103C8 && y"}], "help": "A configuration for the STM32F103 Minimum board."}, {"type": 3, "name": "ARCH_BOARD_STM3210E_EVAL", "value": "n", "user_value": 0, "dep": "n", "prompt": "STMicro STM3210E-EVAL development board", "cond": "ARCH_CHIP_STM32F103ZE && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F103ZE && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F103ZE && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F103ZE && y"}], "help": "STMicro STM3210E-EVAL development board based on the STMicro STM32F103ZET6\nmicrocontroller (ARM Cortex-M3).  This port uses the GNU Cortex-M3\ntoolchain."}, {"type": 3, "name": "ARCH_BOARD_STM3220G_EVAL", "value": "n", "user_value": 0, "dep": "n", "prompt": "STMicro STM3220G-EVAL development board", "cond": "ARCH_CHIP_STM32F207IG && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F207IG && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F207IG && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F207IG && y"}], "help": "STMicro STM3220G-EVAL development board based on the STMicro STM32F407IG\nmicrocontroller (ARM Cortex-M3)."}, {"type": 3, "name": "ARCH_BOARD_STM3240G_EVAL", "value": "n", "user_value": 0, "dep": "n", "prompt": "STMicro STM3240G-EVAL development board", "cond": "ARCH_CHIP_STM32F407IG && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F407IG && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F407IG && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F407IG && y"}], "help": "STMicro STM3240G-EVAL development board based on the STMicro STM32F103ZET6\nmicrocontroller (ARM Cortex-M4 with FPU).  This port uses a GNU Cortex-M4\ntoolchain (such as CodeSourcery)."}, {"type": 3, "name": "ARCH_BOARD_STM32F0_DISCOVERY", "value": "n", "user_value": 0, "dep": "n", "prompt": "STMicro STM32F0-Discovery board", "cond": "ARCH_CHIP_STM32F051R8 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F051R8 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F051R8 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F051R8 && y"}], "help": "STMicro STM32F-Discovery board based on the STMicro ARCH_CHIP_STM32F051R8 MCU."}, {"type": 3, "name": "ARCH_BOARD_STM32F3_DISCOVERY", "value": "n", "user_value": 0, "dep": "n", "prompt": "STMicro STM32F3-Discovery board", "cond": "ARCH_CHIP_STM32F303VC && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F303VC && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F303VC && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F303VC && y"}], "help": "STMicro STM32F3-Discovery board based on the STMicro STM32F303VCT6 MCU."}, {"type": 3, "name": "ARCH_BOARD_STM32F334_DISCO", "value": "n", "user_value": 0, "dep": "n", "prompt": "STMicro STM32F334-Discovery board", "cond": "ARCH_CHIP_STM32F334C8 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F334C8 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F334C8 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F334C8 && y"}], "help": "STMicro STM32F334-Discovery board based on the STMicro STM32F334C8T6 MCU."}, {"type": 3, "name": "ARCH_BOARD_STM32F4_DISCOVERY", "value": "n", "user_value": 0, "dep": "n", "prompt": "STMicro STM32F4-Discovery board", "cond": "ARCH_CHIP_STM32F407VG && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F407VG && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F407VG && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F407VG && y"}], "help": "STMicro STM32F4-Discovery board based on the STMicro STM32F407VGT6 MCU."}, {"type": 3, "name": "ARCH_BOARD_STM32F411E_DISCO", "value": "n", "user_value": 0, "dep": "n", "prompt": "STMicro STM32F411E-Discovery board", "cond": "ARCH_CHIP_STM32F411VE && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F411VE && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F411VE && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F411VE && y"}], "help": "This is a minimal configuration that supports low-level test of the\nSTMicro STM32F411E-Discovery Board."}, {"type": 3, "name": "ARCH_BOARD_STM32F429I_DISCO", "value": "n", "user_value": 0, "dep": "n", "prompt": "STMicro STM32F429I-Discovery board", "cond": "ARCH_CHIP_STM32F429Z && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F429Z && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F429Z && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F429Z && y"}], "help": "STMicro STM32F429I-Discovery board based on the STMicro STM32F429ZIT6 MCU."}, {"type": 3, "name": "ARCH_BOARD_STM32F746G_DISCO", "value": "n", "user_value": 0, "dep": "n", "prompt": "STMicro STM32F746G-Discovery board", "cond": "ARCH_CHIP_STM32F746NG && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F746NG && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F746NG && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F746NG && y"}], "help": "STMicro STM32F746G-DISCO development board featuring the STM32F746NGH6\nMCU. The STM32F746NGH6  is a 216MHz Cortex-M7 operation with 1024Kb Flash\nmemory and 320Kb SRAM."}, {"type": 3, "name": "ARCH_BOARD_STM32F769I_DISCO", "value": "n", "user_value": 0, "dep": "n", "prompt": "STMicro STM32F769I-Discovery board", "cond": "ARCH_CHIP_STM32F769NI && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F769NI && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F769NI && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F769NI && y"}], "help": "STMicro STM32F769I-DISCO development board featuring the STM32F769NIH6\nMCU. The STM32F769NIH6 is a 216MHz Cortex-M7 with 2048Kb Flash\nmemory and 512Kb SRAM."}, {"type": 3, "name": "ARCH_BOARD_STM32F746_WS", "value": "n", "user_value": 0, "dep": "n", "prompt": "Waveshare STM32F746 board", "cond": "ARCH_CHIP_STM32F746IG && y", "help": "Waveshare STM32F746 development board featuring the STM32F746IG MCU."}, {"type": 3, "name": "ARCH_BOARD_B_L475E_IOT01A", "value": "n", "user_value": 0, "dep": "n", "prompt": "STMicro IoT Discovery kit", "cond": "ARCH_CHIP_STM32L475VG && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32L475VG && y"}], "help": "STMicro IoT development board featuring the STM32L475VG\nMCU. The STM32L475VG is a Cortex-M4 optimised for low-power operation\nat up to 80MHz operation with 1024Kb Flash memory and 96+32Kb SRAM."}, {"type": 3, "name": "ARCH_BOARD_STM32L476VG_DISCO", "value": "n", "user_value": 0, "dep": "n", "prompt": "STMicro STM32L476VG -Discovery board", "cond": "ARCH_CHIP_STM32L476RG && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32L476RG && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32L476RG && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32L476RG && y"}], "help": "STMicro STM32L476VG_DISCO development board featuring the STM32L476VG\nMCU. The STM32L476VG  is a Cortex-M4 optimised for low-power operation\nat up to 80MHz operation with 1024Kb Flash memory and 96+32Kb SRAM."}, {"type": 3, "name": "ARCH_BOARD_STM32L476_MDK", "value": "n", "user_value": 0, "dep": "n", "prompt": "Motorola Mods Development Kit (MDK)", "cond": "ARCH_CHIP_STM32L476RG && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32L476RG && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32L476RG && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32L476RG && y"}], "help": "Motorola Mods Development Board (MDK) features  STM32L476ME MCU.\nThe STM32L476ME  is a Cortex-M4 optimised for low-power operation\nat up to 80MHz operation with 1024Kb Flash memory and 96+32Kb SRAM."}, {"type": 3, "name": "ARCH_BOARD_STM32L_DISCOVERY", "value": "n", "user_value": 0, "dep": "n", "prompt": "STMicro STM32L-Discovery board", "cond": "ARCH_CHIP_STM32L152RB && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32L152RB && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32L152RB && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32L152RB && y"}], "help": "STMicro STM32L-Discovery board based on the STMicro STM32L152RB MCU."}, {"type": 3, "name": "ARCH_BOARD_STM32VL_DISCOVERY", "value": "n", "user_value": 0, "dep": "n", "prompt": "STMicro STM32VL-Discovery board", "cond": "ARCH_CHIP_STM32F100RB && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_STM32F100RB && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_STM32F100RB && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_STM32F100RB && y"}], "help": "STMicro STM32VL-Discovery board based on the STMicro STM32F100RB MCU."}, {"type": 3, "name": "ARCH_BOARD_MIKROE_STM32F4", "value": "n", "user_value": 0, "dep": "n", "prompt": "MikroElektronika Mikromedia for STM32F4 board", "cond": "ARCH_CHIP_STM32F407VG && y", "help": "This is the port NuttX to the Mikroelektronika Mikromedia for STM32F4 Multimedia Board\n(MMB).  See http://www.mikroe.com/ for further information."}, {"type": 3, "name": "ARCH_BOARD_SUREPIC32MX", "value": "n", "user_value": 0, "dep": "n", "prompt": "Sure PIC32MX boards", "cond": "ARCH_CHIP_PIC32MX440F512H && y", "selects": [{"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_PIC32MX440F512H && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_PIC32MX440F512H && y"}], "help": "The \"Advanced USB Storage Demo Board,\" Model DB-DP11215, from Sure\nElectronics (http://www.sureelectronics.net/).  This board features\nthe MicroChip PIC32MX440F512H.  See also\nhttp://www.sureelectronics.net/goods.php?id=1168 for further\ninformation about the Sure DB-DP11215 board."}, {"type": 3, "name": "ARCH_BOARD_TEENSY_20", "value": "n", "user_value": 0, "dep": "n", "prompt": "PJRC Teensy++ 2.0 board", "cond": "ARCH_CHIP_AT90USB1286 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_AT90USB1286 && y"}], "help": "This is the port of NuttX to the PJRC Teensy++ 2.0 board.  This board is\ndeveloped by http://pjrc.com/teensy/.  The Teensy++ 2.0 is based\non an Atmel AT90USB1286 MCU."}, {"type": 3, "name": "ARCH_BOARD_TEENSY_3X", "value": "n", "user_value": 0, "dep": "n", "prompt": "PJRC Teensy++ 3.1 board", "cond": "(ARCH_CHIP_MK20DX256VLH7 || ARCH_CHIP_MK20DX128VLH5) && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "(ARCH_CHIP_MK20DX256VLH7 || ARCH_CHIP_MK20DX128VLH5) && y"}], "help": "This is the port of NuttX to the PJRC Teensy++ 2.0 board.  This board is\ndeveloped by http://pjrc.com/teensy/.  The Teensy++ 2.0 is based\non an Atmel AT90USB1286 MCU.\n\nThis is the port of NuttX to the Teensy-3.1 from PJRC\n(https://www.pjrc.com/).  The Teensy-3.1 features the Freescale\nMK30DX256VLH7 chip (now NXP).  The MK30DX256VLH7 is a 64-pin Cortex-M4\nrunning at 72MHz.  It has 256KiB of program FLASH memory and 64KiB of\nSRAM.  For more information about the Teensy 3.1, see\n\n        https://www.pjrc.com/teensy/teensy31.html\n        https://www.pjrc.com/store/teensy31.html\n\nThis board configuration can also be used with the older Teensy-3.0.  The\nTeensy-3.0 has the same schematic (although some pins are not used on the\nTeensy-3.0).  the primary difference is that the Teensy 3.0 has a\nMK20DX128VLH5 with slightly less capability."}, {"type": 3, "name": "ARCH_BOARD_TEENSY_LC", "value": "n", "user_value": 0, "dep": "n", "prompt": "Teensy LC", "cond": "ARCH_CHIP_MKL25Z64 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_MKL25Z64 && y"}], "help": "This is the configuration for the Teensy LC board.\nSee https://www.pjrc.com/teensy/teensyLC.html.  The\nTeensy LC is based on the Freescale KL25Z."}, {"type": 3, "name": "ARCH_BOARD_TM4C123G_LAUNCHPAD", "value": "n", "user_value": 0, "dep": "n", "prompt": "Tiva TM4C123G LaunchPad", "cond": "ARCH_CHIP_TM4C123GH6PMI && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_TM4C123GH6PMI && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_TM4C123GH6PMI && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_TM4C123GH6PMI && y"}], "help": "Tiva TM4C123G LaunchPad."}, {"type": 3, "name": "ARCH_BOARD_TM4C1294_LAUNCHPAD", "value": "n", "user_value": 0, "dep": "n", "prompt": "Tiva EK-TM4C1294XL LaunchPad", "cond": "ARCH_CHIP_TM4C1294NC && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_TM4C1294NC && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_TM4C1294NC && y"}], "help": "Tiva EK-TM4C1294XL LaunchPad."}, {"type": 3, "name": "ARCH_BOARD_CC3200_LAUNCHPAD", "value": "n", "user_value": 0, "dep": "n", "prompt": "Tiva CC3200 Launchpad", "cond": "ARCH_CHIP_CC3200 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_CC3200 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_CC3200 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_CC3200 && y"}, {"symbol": "TIVA_BOARD_EARLYINIT", "cond": "ARCH_CHIP_CC3200 && y"}], "help": "Tiva CC3200 Launchpad."}, {"type": 3, "name": "ARCH_BOARD_TWR_K60N512", "value": "n", "user_value": 0, "dep": "n", "prompt": "FreeScale TWR-K60N512 development board", "cond": "ARCH_CHIP_MK60N512VMD100 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_MK60N512VMD100 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_MK60N512VMD100 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_MK60N512VMD100 && y"}], "help": "Kinetis K60 Cortex-M4 MCU.  This port uses the FreeScale TWR-K60N512\ndevelopment board."}, {"type": 3, "name": "ARCH_BOARD_TWR_K64F120M", "value": "n", "user_value": 0, "dep": "n", "prompt": "Freescale TWR-K64F120M development board", "cond": "ARCH_CHIP_MK64FN1M0VMD12 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_MK64FN1M0VMD12 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_MK64FN1M0VMD12 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_MK64FN1M0VMD12 && y"}], "help": "Kinetis K64 Cortex-M4 MCU. This port uses the Freescale TWR-K64F120M\ndevelopment board."}, {"type": 3, "name": "ARCH_BOARD_U_BLOX_C027", "value": "n", "user_value": 0, "dep": "n", "prompt": "u-blox C027", "cond": "ARCH_CHIP_LPC1768 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LPC1768 && y"}], "help": "u-blox GSM and GPS module evaluation board with NXP LPCExpresso\nLPC1768.  The GSM module is one of LISA-C200, LISA-U200 or SARA-G350.\nThe GPS module is one of MAX-M7 or MAX-M8."}, {"type": 3, "name": "ARCH_BOARD_UBW32", "value": "n", "user_value": 0, "dep": "n", "prompt": "UBW32 v2.4 board from Sparkfun", "cond": "ARCH_CHIP_PIC32MX460F512L && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_PIC32MX460F512L && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_PIC32MX460F512L && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_PIC32MX460F512L && y"}], "help": "This is the port to the Sparkfun UBW32 board.  This port uses the original v2.4\nboard which is based on the MicroChip PIC32MX460F512L.  See\nhttp://www.sparkfun.com/products/8971.  This older version has been replaced\nwith this board http://www.sparkfun.com/products/9713. See also\nhttp://www.schmalzhaus.com/UBW32/."}, {"type": 3, "name": "ARCH_BOARD_US7032EVB1", "value": "n", "user_value": 0, "dep": "n", "prompt": "Hitachi SH-1/US7032EVB1 board", "cond": "ARCH_CHIP_SH7032 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_SH7032 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_SH7032 && y"}], "help": "This is a port of the Hitachi SH-1 on the Hitachi SH-1/US7032EVB1 board.\nSTATUS:  Work has just began on this port."}, {"type": 3, "name": "ARCH_BOARD_VIEWTOOL_STM32F107", "value": "n", "user_value": 0, "dep": "n", "prompt": "ViewTool STM32F103/F107", "cond": "(ARCH_CHIP_STM32F107VC || ARCH_CHIP_STM32F103VC) && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "(ARCH_CHIP_STM32F107VC || ARCH_CHIP_STM32F103VC) && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "(ARCH_CHIP_STM32F107VC || ARCH_CHIP_STM32F103VC) && y"}], "help": "This port uses the ViewTool STM32F103/F107 V1.2 board.  This\nboard may be fitted with either: (1) STM32F107VCT6 or (2) STM32F103VCT6.\nSee http://www.viewtool.com/ for further information."}, {"type": 3, "name": "ARCH_BOARD_XMC4500RELAX", "value": "n", "user_value": 0, "dep": "n", "prompt": "Infineon XMC4500 Relax", "cond": "ARCH_CHIP_XMC4500 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_XMC4500 && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_XMC4500 && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_XMC4500 && y"}], "help": "Infineon XMC4000 Relax Lite v1"}, {"type": 3, "name": "ARCH_BOARD_XTRS", "value": "n", "user_value": 0, "dep": "n", "prompt": "XTRS TRS80 Model 3 emulation", "cond": "ARCH_CHIP_Z80 && y", "selects": [{"symbol": "UART_SERIALDRIVER", "cond": "ARCH_CHIP_Z80 && y"}], "help": "TRS80 Model 3.  This port uses a vintage computer based on the Z80.\nAn emulator for this computer is available to run TRS80 programs on a\nlinux platform (http://www.tim-mann.org/xtrs.html)."}, {"type": 3, "name": "ARCH_BOARD_Z16F2800100ZCOG", "value": "n", "user_value": 0, "dep": "n", "prompt": "Zilog Z16F2800100ZCOG Development Kit", "cond": "ARCH_CHIP_Z16F2811 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_Z16F2811 && y"}], "help": "z16f Microcontroller.  This port use the ZiLIG z16f2800100zcog\ndevelopment kit and the Zilog ZDS-II Windows command line tools.  The\ndevelopment environment is Cygwin under WinXP."}, {"type": 3, "name": "ARCH_BOARD_Z80SIM", "value": "n", "user_value": 0, "dep": "n", "prompt": "Z80 Instruction Set Simulator", "cond": "ARCH_CHIP_Z80 && y", "selects": [{"symbol": "UART_SERIALDRIVER", "cond": "ARCH_CHIP_Z80 && y"}], "help": "z80 Microcontroller.  This port uses a Z80 instruction set simulator\ncalled z80sim.  This port also uses the SDCC toolchain\n(http://sdcc.sourceforge.net/\") (verified with version 2.6.0)."}, {"type": 3, "name": "ARCH_BOARD_Z8ENCORE000ZCO", "value": "n", "user_value": 0, "dep": "n", "prompt": "ZiLOG Z8ENCORE000ZCO Development Kit", "cond": "ARCH_CHIP_Z8F6403 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_Z8F6403 && y"}], "help": "z8Encore! Microcontroller.  This port use the ZiLOG Z8ENCORE000ZCO\ndevelopment kit, Z8F6403 part, and the Zilog ZDS-II Windows command line\ntools.  The development environment is Cygwin under WinXP."}, {"type": 3, "name": "ARCH_BOARD_Z8F64200100KIT", "value": "n", "user_value": 0, "dep": "n", "prompt": "ZiLOG Z8F64200100KIT Development Kit", "cond": "ARCH_CHIP_Z8F6423 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_Z8F6423 && y"}], "help": "z8Encore! Microcontroller.  This port use the Zilog Z8F64200100KIT\ndevelopment kit, Z8F6423 part, and the Zilog ZDS-II Windows command line\ntools.  The development environment is Cygwin under WinXP."}, {"type": 3, "name": "ARCH_BOARD_ZP214XPA", "value": "n", "user_value": 0, "dep": "n", "prompt": "The0.net LPC2148 Development Board", "cond": "ARCH_CHIP_LPC214X && y", "help": "This port is for the NXP LPC2148 as provided on the The0.net\nZPA213X/4XPA development board. Includes support for the\nUG-2864AMBAG01 OLED also from The0.net"}, {"type": 3, "name": "ARCH_BOARD_ZKITARM", "value": "n", "user_value": 0, "dep": "n", "prompt": "Zilogic ZKit-ARM-1769 Development Kit", "cond": "ARCH_CHIP_LPC1768 && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_LPC1768 && y"}], "help": "Zilogic System's ARM development Kit, ZKIT-ARM-1769.  This board is based\non the NXP LPC1769.  The Nuttx Buildroot toolchain is used by default."}, {"type": 3, "name": "ARCH_BOARD_SIM", "value": "n", "user_value": 0, "dep": "n", "prompt": "User mode simulation", "cond": "ARCH_SIM && y", "help": "A user-mode port of NuttX to the x86 Linux/Cygwin platform is available.\nThe purpose of this port is primarily to support OS feature development.\nThis port does not support interrupts or a real timer (and hence no\nround robin scheduler)  Otherwise, it is complete."}, {"type": 3, "name": "ARCH_BOARD_CUSTOM", "value": "n", "user_value": 0, "dep": "y", "prompt": "Custom development board", "cond": "y", "help": "Select this option if there is no directory for the board under configs/.\n\nDon't see the board you want?  You must first select the exact MCU part\nnumber, then the boards supporting that part will be available for selection."}, {"type": 3, "name": "ARCH_BOARD_CXD56EVB", "value": "y", "user_value": 2, "dep": "y", "prompt": "CXD5602 Reference board", "cond": "ARCH_CHIP_CXD56XX && y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_CHIP_CXD56XX && y"}, {"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_CHIP_CXD56XX && y"}, {"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "ARCH_CHIP_CXD56XX && y"}, {"symbol": "ARCH_HAVE_POWEROFF", "cond": "ARCH_CHIP_CXD56XX && y"}], "help": "none"}]}, {"type": 31, "dep": "n", "prompt": "Custom Board Configuration", "cond": "ARCH_BOARD_CUSTOM", "children": [{"type": 47, "name": "ARCH_BOARD_CUSTOM_NAME", "value": "", "user_value": null, "dep": "n", "prompt": "Custom board name", "cond": "ARCH_BOARD_CUSTOM", "defaults": [{"name": "", "default": "", "cond": "ARCH_BOARD_CUSTOM"}], "help": "This is a name for the board.  It is not used except to return the\ninformation via the NSH uname command."}, {"type": 47, "name": "ARCH_BOARD_CUSTOM_DIR", "value": "", "user_value": null, "dep": "n", "prompt": "Custom board directory", "cond": "ARCH_BOARD_CUSTOM", "defaults": [{"name": "", "default": "", "cond": "ARCH_BOARD_CUSTOM"}], "help": "If the custom board configuration is selected, then it is necessary\nto also tell the build system where it can find the board directory\nfor the custom board.\n\nIn this case, the board directory is assume to lie outside the\nNuttX directory.  The provided path must then be a full, absolute\npath to some location outside of the NuttX source tree (like\n\"~/projects/myboard\")."}, {"type": 3, "name": "ARCH_BOARD_CUSTOM_DIR_RELPATH", "value": "n", "user_value": null, "dep": "n", "prompt": "Relative custom board directory", "cond": "ARCH_BOARD_CUSTOM", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_BOARD_CUSTOM"}], "help": "Specifies that the board directory is relative to the NuttX directory."}, {"type": 3, "name": "BOARD_CUSTOM_LEDS", "value": "n", "user_value": null, "dep": "n", "prompt": "Custom board LEDs", "cond": "ARCH_BOARD_CUSTOM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_CUSTOM"}], "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "ARCH_BOARD_CUSTOM"}]}, {"type": 3, "name": "BOARD_CUSTOM_BUTTONS", "value": "n", "user_value": null, "dep": "n", "prompt": "Custom board buttons", "cond": "ARCH_BOARD_CUSTOM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_CUSTOM"}], "selects": [{"symbol": "ARCH_HAVE_BUTTONS", "cond": "ARCH_BOARD_CUSTOM"}, {"symbol": "ARCH_BUTTONS", "cond": "ARCH_BOARD_CUSTOM"}], "children": [{"type": 3, "name": "BOARD_CUSTOM_IRQBUTTONS", "value": "n", "user_value": null, "dep": "n", "prompt": "Custom Board IRQ buttons", "cond": "BOARD_CUSTOM_BUTTONS && ARCH_BOARD_CUSTOM", "defaults": [{"name": "n", "default": "n", "cond": "BOARD_CUSTOM_BUTTONS && ARCH_BOARD_CUSTOM"}], "selects": [{"symbol": "ARCH_HAVE_IRQBUTTONS", "cond": "BOARD_CUSTOM_BUTTONS && ARCH_BOARD_CUSTOM"}, {"symbol": "ARCH_IRQBUTTONS", "cond": "BOARD_CUSTOM_BUTTONS && ARCH_BOARD_CUSTOM"}]}]}, {"type": 3, "name": "BOARD_CUSTOM_INTERRUPT", "value": "n", "user_value": null, "dep": "n", "prompt": "Custom board PHY interrupts", "cond": "NETDEVICES && ARCH_BOARD_CUSTOM", "defaults": [{"name": "n", "default": "n", "cond": "NETDEVICES && ARCH_BOARD_CUSTOM"}], "selects": [{"symbol": "ARCH_PHY_INTERRUPT", "cond": "NETDEVICES && NETDEVICES && ARCH_BOARD_CUSTOM"}]}]}, {"type": 47, "name": "ARCH_BOARD", "value": "cxd56evb", "user_value": "cxd56evb", "dep": "y", "defaults": [{"name": "amber", "default": "amber", "cond": "ARCH_BOARD_AMBER"}, {"name": "arduino-mega2560", "default": "arduino-mega2560", "cond": "ARCH_BOARD_ARDUINO_MEGA2560"}, {"name": "arduino-due", "default": "arduino-due", "cond": "ARCH_BOARD_ARDUINO_DUE"}, {"name": "avr32dev1", "default": "avr32dev1", "cond": "ARCH_BOARD_AVR32DEV1"}, {"name": "bambino-200e", "default": "bambino-200e", "cond": "ARCH_BOARD_BAMBINO_200E"}, {"name": "c5471evm", "default": "c5471evm", "cond": "ARCH_BOARD_C5471EVM"}, {"name": "clicker2-stm32", "default": "clicker2-stm32", "cond": "ARCH_BOARD_CLICKER2_STM32"}, {"name": "cloudctrl", "default": "cloudctrl", "cond": "ARCH_BOARD_CLOUDCTRL"}, {"name": "demo9s12ne64", "default": "demo9s12ne64", "cond": "ARCH_BOARD_DEMOS92S12NEC64"}, {"name": "dk-tm4c129x", "default": "dk-tm4c129x", "cond": "ARCH_BOARD_DK_TM4C129X"}, {"name": "ea3131", "default": "ea3131", "cond": "ARCH_BOARD_EA3131"}, {"name": "ea3152", "default": "ea3152", "cond": "ARCH_BOARD_EA3152"}, {"name": "eagle100", "default": "eagle100", "cond": "ARCH_BOARD_EAGLE100"}, {"name": "efm32-g8xx-stk", "default": "efm32-g8xx-stk", "cond": "ARCH_BOARD_EFM32G8XXSTK"}, {"name": "efm32gg-stk3700", "default": "efm32gg-stk3700", "cond": "ARCH_BOARD_EFM32GG_STK3700"}, {"name": "ekk-lm3s9b96", "default": "ekk-lm3s9b96", "cond": "ARCH_BOARD_EKKLM3S9B96"}, {"name": "esp32-core", "default": "esp32-core", "cond": "ARCH_BOARD_ESP32CORE"}, {"name": "ez80f910200kitg", "default": "ez80f910200kitg", "cond": "ARCH_BOARD_EZ80F910200KITG"}, {"name": "ez80f910200zco", "default": "ez80f910200zco", "cond": "ARCH_BOARD_EZ80F910200ZCO"}, {"name": "fire-stm32v2", "default": "fire-stm32v2", "cond": "ARCH_BOARD_FIRE_STM32"}, {"name": "freedom-k64f", "default": "freedom-k64f", "cond": "ARCH_BOARD_FREEDOM_K64F"}, {"name": "freedom-k66f", "default": "freedom-k66f", "cond": "ARCH_BOARD_FREEDOM_K66F"}, {"name": "freedom-kl25z", "default": "freedom-kl25z", "cond": "ARCH_BOARD_FREEDOM_KL25Z"}, {"name": "freedom-kl26z", "default": "freedom-kl26z", "cond": "ARCH_BOARD_FREEDOM_KL26Z"}, {"name": "hymini-stm32v", "default": "hymini-stm32v", "cond": "ARCH_BOARD_HYMINI_STM32V"}, {"name": "kwikstik-k40", "default": "kwikstik-k40", "cond": "ARCH_BOARD_KWIKSTIK_K40"}, {"name": "launchxl-tms57004", "default": "launchxl-tms57004", "cond": "ARCH_BOARD_LAUNCHXL_TMS57004"}, {"name": "lc823450-xgevk", "default": "lc823450-xgevk", "cond": "ARCH_BOARD_LC823450_XGEVK"}, {"name": "lincoln60", "default": "lincoln60", "cond": "ARCH_BOARD_LINCOLN60"}, {"name": "lm3s6432-s2e", "default": "lm3s6432-s2e", "cond": "ARCH_BOARD_LM3S6432S2E"}, {"name": "lm3s6965-ek", "default": "lm3s6965-ek", "cond": "ARCH_BOARD_LM3S6965EK"}, {"name": "lm3s8962-ek", "default": "lm3s8962-ek", "cond": "ARCH_BOARD_LM3S8962EK"}, {"name": "lm4f120-launchpad", "default": "lm4f120-launchpad", "cond": "ARCH_BOARD_LM4F120_LAUNCHPAD"}, {"name": "lpc4330-xplorer", "default": "lpc4330-xplorer", "cond": "ARCH_BOARD_LPC4330_XPLORER"}, {"name": "lpc4337-ws", "default": "lpc4337-ws", "cond": "ARCH_BOARD_LPC4337_WS"}, {"name": "lpc4357-evb", "default": "lpc4357-evb", "cond": "ARCH_BOARD_LPC4357_EVB"}, {"name": "lpc4370-link2", "default": "lpc4370-link2", "cond": "ARCH_BOARD_LPC4370_LINK2"}, {"name": "lpcxpresso-lpc1115", "default": "lpcxpresso-lpc1115", "cond": "ARCH_BOARD_LPCXPRESSO_LPC1115"}, {"name": "lpcxpresso-lpc1768", "default": "lpcxpresso-lpc1768", "cond": "ARCH_BOARD_LPCXPRESSO"}, {"name": "maple", "default": "maple", "cond": "ARCH_BOARD_MAPLE"}, {"name": "mbed", "default": "mbed", "cond": "ARCH_BOARD_MBED"}, {"name": "mcu123-lpc214x", "default": "mcu123-lpc214x", "cond": "ARCH_BOARD_MCU123_LPC214X"}, {"name": "micropendous3", "default": "micropendous3", "cond": "ARCH_BOARD_MICROPENDOUS3"}, {"name": "mirtoo", "default": "mirtoo", "cond": "ARCH_BOARD_MIRTOO"}, {"name": "moteino-mega", "default": "moteino-mega", "cond": "ARCH_BOARD_MOTEINO_MEGA"}, {"name": "mx1ads", "default": "mx1ads", "cond": "ARCH_BOARD_MX1ADS"}, {"name": "ne64badge", "default": "ne64badge", "cond": "ARCH_BOARD_NE64BADGE"}, {"name": "ntosd-dm320", "default": "ntosd-dm320", "cond": "ARCH_BOARD_NTOSD_DM320"}, {"name": "nutiny-nuc120", "default": "nutiny-nuc120", "cond": "ARCH_BOARD_NUTINY_NUC120"}, {"name": "nr5m100-nexys4", "default": "nr5m100-nexys4", "cond": "ARCH_BOARD_NR5M100_NEXYS4"}, {"name": "olimex-efm32g880f128-stk", "default": "olimex-efm32g880f128-stk", "cond": "ARCH_BOARD_OLIMEX_EFM32G880F128_STK"}, {"name": "olimex-lpc1766stk", "default": "olimex-lpc1766stk", "cond": "ARCH_BOARD_LPC1766STK"}, {"name": "olimex-lpc2378", "default": "olimex-lpc2378", "cond": "ARCH_BOARD_OLIMEXLPC2378"}, {"name": "olimex-lpc-h3131", "default": "olimex-lpc-h3131", "cond": "ARCH_BOARD_OLIMEX_LPC_H3131"}, {"name": "olimex-stm32-h405", "default": "olimex-stm32-h405", "cond": "ARCH_BOARD_OLIMEX_STM32H405"}, {"name": "olimex-stm32-h407", "default": "olimex-stm32-h407", "cond": "ARCH_BOARD_OLIMEX_STM32H407"}, {"name": "olimex-stm32-e407", "default": "olimex-stm32-e407", "cond": "ARCH_BOARD_OLIMEX_STM32E407"}, {"name": "olimex-stm32-p107", "default": "olimex-stm32-p107", "cond": "ARCH_BOARD_OLIMEX_STM32P107"}, {"name": "olimex-stm32-p207", "default": "olimex-stm32-p207", "cond": "ARCH_BOARD_OLIMEX_STM32P207"}, {"name": "olimex-stm32-p407", "default": "olimex-stm32-p407", "cond": "ARCH_BOARD_OLIMEX_STM32P407"}, {"name": "olimex-strp711", "default": "olimex-strp711", "cond": "ARCH_BOARD_OLIMEX_STRP711"}, {"name": "olimexino-stm32", "default": "olimexino-stm32", "cond": "ARCH_BOARD_OLIMEXINO_STM32"}, {"name": "open1788", "default": "open1788", "cond": "ARCH_BOARD_OPEN1788"}, {"name": "p112", "default": "p112", "cond": "ARCH_BOARD_P112"}, {"name": "pcblogic-pic32mx", "default": "pcblogic-pic32mx", "cond": "ARCH_BOARD_PCBLOGICPIC32MX"}, {"name": "pcduino-a10", "default": "pcduino-a10", "cond": "ARCH_BOARD_PCDUINO_A10"}, {"name": "pic32mx-starterkit", "default": "pic32mx-starterkit", "cond": "ARCH_BOARD_PIC32MX_STARTERKIT"}, {"name": "pic32mx7mmb", "default": "pic32mx7mmb", "cond": "ARCH_BOARD_PIC32MX7MMB"}, {"name": "pic32mz-starterkit", "default": "pic32mz-starterkit", "cond": "ARCH_BOARD_PIC32MZ_STARTERKIT"}, {"name": "nucleo-144", "default": "nucleo-144", "cond": "ARCH_BOARD_NUCLEO_144"}, {"name": "nucleo-f072rb", "default": "nucleo-f072rb", "cond": "ARCH_BOARD_NUCLEO_F072RB"}, {"name": "nucleo-f091rc", "default": "nucleo-f091rc", "cond": "ARCH_BOARD_NUCLEO_F091RC"}, {"name": "nucleo-f303re", "default": "nucleo-f303re", "cond": "ARCH_BOARD_NUCLEO_F303RE"}, {"name": "nucleo-f334r8", "default": "nucleo-f334r8", "cond": "ARCH_BOARD_NUCLEO_F334R8"}, {"name": "nucleo-f4x1re", "default": "nucleo-f4x1re", "cond": "ARCH_BOARD_NUCLEO_F401RE || ARCH_BOARD_NUCLEO_F411RE"}, {"name": "nucleo-l432kc", "default": "nucleo-l432kc", "cond": "ARCH_BOARD_NUCLEO_L432KC"}, {"name": "nucleo-l452re", "default": "nucleo-l452re", "cond": "ARCH_BOARD_NUCLEO_L452RE"}, {"name": "nucleo-l476rg", "default": "nucleo-l476rg", "cond": "ARCH_BOARD_NUCLEO_L476RG"}, {"name": "nucleo-l496zg", "default": "nucleo-l496zg", "cond": "ARCH_BOARD_NUCLEO_L496ZG"}, {"name": "qemu-i486", "default": "qemu-i486", "cond": "ARCH_BOARD_QEMU_I486"}, {"name": "sabre-6quad", "default": "sabre-6quad", "cond": "ARCH_BOARD_SABRE_6QUAD"}, {"name": "sama5d2-xult", "default": "sama5d2-xult", "cond": "ARCH_BOARD_SAMA5D2_XULT"}, {"name": "sama5d3x-ek", "default": "sama5d3x-ek", "cond": "ARCH_BOARD_SAMA5D3X_EK"}, {"name": "sama5d3-xplained", "default": "sama5d3-xplained", "cond": "ARCH_BOARD_SAMA5D3_XPLAINED"}, {"name": "sama5d4-ek", "default": "sama5d4-ek", "cond": "ARCH_BOARD_SAMA5D4_EK"}, {"name": "samd20-xplained", "default": "samd20-xplained", "cond": "ARCH_BOARD_SAMD20_XPLAINED"}, {"name": "samd21-xplained", "default": "samd21-xplained", "cond": "ARCH_BOARD_SAMD21_XPLAINED"}, {"name": "saml21-xplained", "default": "saml21-xplained", "cond": "ARCH_BOARD_SAML21_XPLAINED"}, {"name": "sam3u-ek", "default": "sam3u-ek", "cond": "ARCH_BOARD_SAM3UEK"}, {"name": "sam4cmp-db", "default": "sam4cmp-db", "cond": "ARCH_BOARD_SAM4CMP_DB"}, {"name": "sam4e-ek", "default": "sam4e-ek", "cond": "ARCH_BOARD_SAM4EEK"}, {"name": "sam4l-xplained", "default": "sam4l-xplained", "cond": "ARCH_BOARD_SAM4L_XPLAINED"}, {"name": "sam4s-xplained", "default": "sam4s-xplained", "cond": "ARCH_BOARD_SAM4S_XPLAINED"}, {"name": "sam4s-xplained-pro", "default": "sam4s-xplained-pro", "cond": "ARCH_BOARD_SAM4S_XPLAINED_PRO"}, {"name": "same70-xplained", "default": "same70-xplained", "cond": "ARCH_BOARD_SAME70_XPLAINED"}, {"name": "samv71-xult", "default": "samv71-xult", "cond": "ARCH_BOARD_SAMV71_XULT"}, {"name": "shenzhou", "default": "shenzhou", "cond": "ARCH_BOARD_SHENZHOU"}, {"name": "skp16c26", "default": "skp16c26", "cond": "ARCH_BOARD_SKP16C26"}, {"name": "spark", "default": "spark", "cond": "ARCH_BOARD_SPARK"}, {"name": "photon", "default": "photon", "cond": "ARCH_BOARD_PHOTON"}, {"name": "stm32butterfly2", "default": "stm32butterfly2", "cond": "ARCH_BOARD_STM32_BUTTERFLY2"}, {"name": "stm32_tiny", "default": "stm32_tiny", "cond": "ARCH_BOARD_STM32_TINY"}, {"name": "stm32f0discovery", "default": "stm32f0discovery", "cond": "ARCH_BOARD_STM32F0_DISCOVERY"}, {"name": "stm32f103-minimum", "default": "stm32f103-minimum", "cond": "ARCH_BOARD_STM32F103_MINIMUM"}, {"name": "stm3210e-eval", "default": "stm3210e-eval", "cond": "ARCH_BOARD_STM3210E_EVAL"}, {"name": "stm3220g-eval", "default": "stm3220g-eval", "cond": "ARCH_BOARD_STM3220G_EVAL"}, {"name": "stm3240g-eval", "default": "stm3240g-eval", "cond": "ARCH_BOARD_STM3240G_EVAL"}, {"name": "stm32f3discovery", "default": "stm32f3discovery", "cond": "ARCH_BOARD_STM32F3_DISCOVERY"}, {"name": "stm32f334-disco", "default": "stm32f334-disco", "cond": "ARCH_BOARD_STM32F334_DISCO"}, {"name": "stm32f4discovery", "default": "stm32f4discovery", "cond": "ARCH_BOARD_STM32F4_DISCOVERY"}, {"name": "stm32f411e-disco", "default": "stm32f411e-disco", "cond": "ARCH_BOARD_STM32F411E_DISCO"}, {"name": "stm32f429i-disco", "default": "stm32f429i-disco", "cond": "ARCH_BOARD_STM32F429I_DISCO"}, {"name": "stm32f746g-disco", "default": "stm32f746g-disco", "cond": "ARCH_BOARD_STM32F746G_DISCO"}, {"name": "stm32f769i-disco", "default": "stm32f769i-disco", "cond": "ARCH_BOARD_STM32F769I_DISCO"}, {"name": "stm32f746-ws", "default": "stm32f746-ws", "cond": "ARCH_BOARD_STM32F746_WS"}, {"name": "b-l475e-iot01a", "default": "b-l475e-iot01a", "cond": "ARCH_BOARD_B_L475E_IOT01A"}, {"name": "stm32l476vg-disco", "default": "stm32l476vg-disco", "cond": "ARCH_BOARD_STM32L476VG_DISCO"}, {"name": "stm32l476-mdk", "default": "stm32l476-mdk", "cond": "ARCH_BOARD_STM32L476_MDK"}, {"name": "stm32ldiscovery", "default": "stm32ldiscovery", "cond": "ARCH_BOARD_STM32L_DISCOVERY"}, {"name": "stm32vldiscovery", "default": "stm32vldiscovery", "cond": "ARCH_BOARD_STM32VL_DISCOVERY"}, {"name": "mikroe-stm32f4", "default": "mikroe-stm32f4", "cond": "ARCH_BOARD_MIKROE_STM32F4"}, {"name": "sure-pic32mx", "default": "sure-pic32mx", "cond": "ARCH_BOARD_SUREPIC32MX"}, {"name": "teensy-2.0", "default": "teensy-2.0", "cond": "ARCH_BOARD_TEENSY_20"}, {"name": "teensy-3.x", "default": "teensy-3.x", "cond": "ARCH_BOARD_TEENSY_3X"}, {"name": "teensy-lc", "default": "teensy-lc", "cond": "ARCH_BOARD_TEENSY_LC"}, {"name": "tm4c123g-launchpad", "default": "tm4c123g-launchpad", "cond": "ARCH_BOARD_TM4C123G_LAUNCHPAD"}, {"name": "tm4c1294-launchpad", "default": "tm4c1294-launchpad", "cond": "ARCH_BOARD_TM4C1294_LAUNCHPAD"}, {"name": "cc3200-launchpad", "default": "cc3200-launchpad", "cond": "ARCH_BOARD_CC3200_LAUNCHPAD"}, {"name": "twr-k60n512", "default": "twr-k60n512", "cond": "ARCH_BOARD_TWR_K60N512"}, {"name": "twr-k64f120m", "default": "twr-k64f120m", "cond": "ARCH_BOARD_TWR_K64F120M"}, {"name": "u-blox-c027", "default": "u-blox-c027", "cond": "ARCH_BOARD_U_BLOX_C027"}, {"name": "ubw32", "default": "ubw32", "cond": "ARCH_BOARD_UBW32"}, {"name": "us7032evb1", "default": "us7032evb1", "cond": "ARCH_BOARD_US7032EVB1"}, {"name": "viewtool-stm32f107", "default": "viewtool-stm32f107", "cond": "ARCH_BOARD_VIEWTOOL_STM32F107"}, {"name": "xmc4500-relax", "default": "xmc4500-relax", "cond": "ARCH_BOARD_XMC4500RELAX"}, {"name": "xtrs", "default": "xtrs", "cond": "ARCH_BOARD_XTRS"}, {"name": "z16f2800100zcog", "default": "z16f2800100zcog", "cond": "ARCH_BOARD_Z16F2800100ZCOG"}, {"name": "z80sim", "default": "z80sim", "cond": "ARCH_BOARD_Z80SIM"}, {"name": "z8encore000zco", "default": "z8encore000zco", "cond": "ARCH_BOARD_Z8ENCORE000ZCO"}, {"name": "z8f64200100kit", "default": "z8f64200100kit", "cond": "ARCH_BOARD_Z8F64200100KIT"}, {"name": "zp214xpa", "default": "zp214xpa", "cond": "ARCH_BOARD_ZP214XPA"}, {"name": "zkit-arm-1769", "default": "zkit-arm-1769", "cond": "ARCH_BOARD_ZKITARM"}, {"name": "sim", "default": "sim", "cond": "ARCH_BOARD_SIM"}, {"name": "moxa", "default": "moxa", "cond": "ARCH_BOARD_MOXA"}, {"name": "cxd56evb", "default": "cxd56evb", "cond": "ARCH_BOARD_CXD56EVB"}]}, {"type": 6, "dep": "y", "prompt": "Common Board Options", "cond": "y"}, {"type": 3, "name": "ARCH_HAVE_LEDS", "value": "y", "user_value": 2, "rev_dep": "(ARCH_BOARD_ARDUINO_DUE && ARCH_CHIP_ATSAM3X8E && y) || (ARCH_BOARD_AVR32DEV1 && ARCH_CHIP_AT32UC3B0256 && y) || (ARCH_BOARD_C5471EVM && ARCH_CHIP_C5471 && y) || (ARCH_BOARD_CLICKER2_STM32 && ARCH_CHIP_STM32F407VG && y) || (ARCH_BOARD_CLOUDCTRL && ARCH_CHIP_STM32F107VC && y) || (ARCH_BOARD_DEMOS92S12NEC64 && ARCH_CHIP_MCS92S12NEC64 && y) || (ARCH_BOARD_DK_TM4C129X && ARCH_CHIP_TM4C129XNC && y) || (ARCH_BOARD_EA3131 && ARCH_CHIP_LPC3131 && y) || (ARCH_BOARD_EA3152 && ARCH_CHIP_LPC3152 && y) || (ARCH_BOARD_EAGLE100 && ARCH_CHIP_LM3S6918 && y) || (ARCH_BOARD_EFM32G8XXSTK && ARCH_CHIP_EFM32G890F128 && y) || (ARCH_BOARD_EFM32GG_STK3700 && ARCH_CHIP_EFM32GG990F1024 && y) || (ARCH_BOARD_EKKLM3S9B96 && ARCH_CHIP_LM3S9B96 && y) || (ARCH_BOARD_EZ80F910200KITG && ARCH_CHIP_EZ80F91 && y) || (ARCH_BOARD_EZ80F910200ZCO && ARCH_CHIP_EZ80F91 && y) || (ARCH_BOARD_FIRE_STM32 && ARCH_CHIP_STM32F103VE && y) || (ARCH_BOARD_FREEDOM_K64F && ARCH_CHIP_MK64FN1M0VLL12 && y) || (ARCH_BOARD_FREEDOM_K66F && ARCH_CHIP_MK66FN2M0VMD18 && y) || (ARCH_BOARD_FREEDOM_KL25Z && ARCH_CHIP_MKL25Z128 && y) || (ARCH_BOARD_FREEDOM_KL26Z && ARCH_CHIP_MKL26Z128 && y) || (ARCH_BOARD_HYMINI_STM32V && ARCH_CHIP_STM32F103VC && y) || (ARCH_BOARD_LINCOLN60 && ARCH_CHIP_LPC1769 && y) || (ARCH_BOARD_KWIKSTIK_K40 && ARCH_CHIP_MK40X256VLQ100 && y) || (ARCH_BOARD_LAUNCHXL_TMS57004 && ARCH_CHIP_TMS570LS0432PZ && y) || (ARCH_BOARD_LM3S6432S2E && ARCH_CHIP_LM3S6432 && y) || (ARCH_BOARD_LM3S6965EK && ARCH_CHIP_LM3S6965 && y) || (ARCH_BOARD_LM3S8962EK && ARCH_CHIP_LM3S8962 && y) || (ARCH_BOARD_LM4F120_LAUNCHPAD && ARCH_CHIP_LM4F120 && y) || (ARCH_BOARD_LPCXPRESSO_LPC1115 && ARCH_CHIP_LPC1115 && y) || (ARCH_BOARD_LPCXPRESSO && ARCH_CHIP_LPC1768 && y) || (ARCH_BOARD_BAMBINO_200E && ARCH_CHIP_LPC4330FBD144 && y) || (ARCH_BOARD_LPC4330_XPLORER && ARCH_CHIP_LPC4330FET100 && y) || (ARCH_BOARD_LPC4357_EVB && ARCH_CHIP_LPC4357FET256 && y) || (ARCH_BOARD_LPC4370_LINK2 && ARCH_CHIP_LPC4370FET100 && y) || (ARCH_BOARD_MBED && ARCH_CHIP_LPC1768 && y) || (ARCH_BOARD_MCU123_LPC214X && ARCH_CHIP_LPC214X && y) || (ARCH_BOARD_MOTEINO_MEGA && ARCH_CHIP_ATMEGA1284P && y) || (ARCH_BOARD_MX1ADS && ARCH_CHIP_IMX1 && y) || (ARCH_BOARD_NE64BADGE && ARCH_CHIP_MCS92S12NEC64 && y) || (ARCH_BOARD_NTOSD_DM320 && ARCH_CHIP_DM320 && y) || (ARCH_BOARD_LPC1766STK && ARCH_CHIP_LPC1766 && y) || (ARCH_BOARD_MAPLE && (ARCH_CHIP_STM32F103RB || ARCH_CHIP_STM32F103CB) && y) || (ARCH_BOARD_MIRTOO && ARCH_CHIP_PIC32MX250F128D && y) || (ARCH_BOARD_NUTINY_NUC120 && ARCH_CHIP_NUC120LE3AN && y) || (ARCH_BOARD_OLIMEXLPC2378 && ARCH_CHIP_LPC2378 && y) || (ARCH_BOARD_OLIMEX_LPC_H3131 && ARCH_CHIP_LPC3131 && y) || (ARCH_BOARD_OLIMEX_STRP711 && ARCH_CHIP_STR71X && y) || (ARCH_BOARD_OLIMEX_STM32H405 && ARCH_CHIP_STM32F405RG && y) || (ARCH_BOARD_OLIMEX_STM32H407 && ARCH_CHIP_STM32F407ZG && y) || (ARCH_BOARD_OLIMEX_STM32E407 && ARCH_CHIP_STM32F407ZG && y) || (ARCH_BOARD_OLIMEX_STM32P207 && ARCH_CHIP_STM32F207ZE && y) || (ARCH_BOARD_OLIMEX_STM32P407 && ARCH_CHIP_STM32F407ZG && y) || (ARCH_BOARD_OLIMEXINO_STM32 && ARCH_CHIP_STM32F103RB && y) || (ARCH_BOARD_OPEN1788 && ARCH_CHIP_LPC1788 && y) || (ARCH_BOARD_PCDUINO_A10 && ARCH_CHIP_A10 && y) || (ARCH_BOARD_PIC32MX_STARTERKIT && ARCH_CHIP_PIC32MX795F512L && y) || (ARCH_BOARD_PIC32MX7MMB && ARCH_CHIP_PIC32MX795F512L && y) || (ARCH_BOARD_PIC32MZ_STARTERKIT && (ARCH_CHIP_PIC32MZ2048ECH || ARCH_CHIP_PIC32MZ2048ECM) && y) || (ARCH_BOARD_NUCLEO_144 && (ARCH_CHIP_STM32F746ZG || ARCH_CHIP_STM32F767ZI) && y) || (ARCH_BOARD_NUCLEO_L496ZG && ARCH_CHIP_STM32L496ZG && y) || (ARCH_BOARD_NUCLEO_F072RB && ARCH_CHIP_STM32F072RB && y) || (ARCH_BOARD_NUCLEO_F091RC && ARCH_CHIP_STM32F091RC && y) || (ARCH_BOARD_NUCLEO_F303RE && ARCH_CHIP_STM32F303RE && y) || (ARCH_BOARD_NUCLEO_F334R8 && ARCH_CHIP_STM32F334R8 && y) || (ARCH_BOARD_NUCLEO_F401RE && ARCH_CHIP_STM32F401RE && y) || (ARCH_BOARD_NUCLEO_F411RE && ARCH_CHIP_STM32F411RE && y) || (ARCH_BOARD_NUCLEO_L432KC && ARCH_CHIP_STM32L432KC && y) || (ARCH_BOARD_NUCLEO_L452RE && ARCH_CHIP_STM32L452RE && y) || (ARCH_BOARD_NUCLEO_L476RG && ARCH_CHIP_STM32L476RG && y) || (ARCH_BOARD_SABRE_6QUAD && ARCH_CHIP_IMX6_6QUAD && y) || (ARCH_BOARD_SAMA5D2_XULT && ARCH_CHIP_ATSAMA5D27 && y) || (ARCH_BOARD_SAMA5D3X_EK && (ARCH_CHIP_ATSAMA5D31 || ARCH_CHIP_ATSAMA5D33 || ARCH_CHIP_ATSAMA5D34 || ARCH_CHIP_ATSAMA5D35) && y) || (ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_CHIP_ATSAMA5D36 && y) || (ARCH_BOARD_SAMA5D4_EK && ARCH_CHIP_ATSAMA5D44 && y) || (ARCH_BOARD_SAMD20_XPLAINED && ARCH_CHIP_SAMD20J18 && y) || (ARCH_BOARD_SAMD21_XPLAINED && ARCH_CHIP_SAMD21J18A && y) || (ARCH_BOARD_SAML21_XPLAINED && ARCH_CHIP_SAML21J18 && y) || (ARCH_BOARD_SAM3UEK && ARCH_CHIP_ATSAM3U4E && y) || (ARCH_BOARD_SAM4EEK && ARCH_CHIP_ATSAM4E16E && y) || (ARCH_BOARD_SAM4L_XPLAINED && ARCH_CHIP_ATSAM4LC4C && y) || (ARCH_BOARD_SAM4S_XPLAINED && ARCH_CHIP_ATSAM4S16C && y) || (ARCH_BOARD_SAM4S_XPLAINED_PRO && ARCH_CHIP_ATSAM4SD32C && y) || (ARCH_BOARD_SAME70_XPLAINED && ARCH_CHIP_SAME70Q21 && y) || (ARCH_BOARD_SAMV71_XULT && ARCH_CHIP_SAMV71Q21 && y) || (ARCH_BOARD_SHENZHOU && ARCH_CHIP_STM32F107VC && y) || (ARCH_BOARD_SKP16C26 && ARCH_CHIP_M30262F8 && y) || (ARCH_BOARD_SPARK && ARCH_CHIP_STM32F103CB && y) || (ARCH_BOARD_PHOTON && ARCH_CHIP_STM32F205RG && y) || (ARCH_BOARD_STM32_BUTTERFLY2 && ARCH_CHIP_STM32F107VC && y) || (ARCH_BOARD_STM32_TINY && ARCH_CHIP_STM32F103C8 && y) || (ARCH_BOARD_STM32F103_MINIMUM && ARCH_CHIP_STM32F103C8 && y) || (ARCH_BOARD_STM3210E_EVAL && ARCH_CHIP_STM32F103ZE && y) || (ARCH_BOARD_STM3220G_EVAL && ARCH_CHIP_STM32F207IG && y) || (ARCH_BOARD_STM3240G_EVAL && ARCH_CHIP_STM32F407IG && y) || (ARCH_BOARD_STM32F0_DISCOVERY && ARCH_CHIP_STM32F051R8 && y) || (ARCH_BOARD_STM32F3_DISCOVERY && ARCH_CHIP_STM32F303VC && y) || (ARCH_BOARD_STM32F334_DISCO && ARCH_CHIP_STM32F334C8 && y) || (ARCH_BOARD_STM32F4_DISCOVERY && ARCH_CHIP_STM32F407VG && y) || (ARCH_BOARD_STM32F411E_DISCO && ARCH_CHIP_STM32F411VE && y) || (ARCH_BOARD_STM32F429I_DISCO && ARCH_CHIP_STM32F429Z && y) || (ARCH_BOARD_STM32F746G_DISCO && ARCH_CHIP_STM32F746NG && y) || (ARCH_BOARD_STM32F769I_DISCO && ARCH_CHIP_STM32F769NI && y) || (ARCH_BOARD_B_L475E_IOT01A && ARCH_CHIP_STM32L475VG && y) || (ARCH_BOARD_STM32L476VG_DISCO && ARCH_CHIP_STM32L476RG && y) || (ARCH_BOARD_STM32L476_MDK && ARCH_CHIP_STM32L476RG && y) || (ARCH_BOARD_STM32L_DISCOVERY && ARCH_CHIP_STM32L152RB && y) || (ARCH_BOARD_STM32VL_DISCOVERY && ARCH_CHIP_STM32F100RB && y) || (ARCH_BOARD_TEENSY_20 && ARCH_CHIP_AT90USB1286 && y) || (ARCH_BOARD_TEENSY_3X && (ARCH_CHIP_MK20DX256VLH7 || ARCH_CHIP_MK20DX128VLH5) && y) || (ARCH_BOARD_TEENSY_LC && ARCH_CHIP_MKL25Z64 && y) || (ARCH_BOARD_TM4C123G_LAUNCHPAD && ARCH_CHIP_TM4C123GH6PMI && y) || (ARCH_BOARD_TM4C1294_LAUNCHPAD && ARCH_CHIP_TM4C1294NC && y) || (ARCH_BOARD_CC3200_LAUNCHPAD && ARCH_CHIP_CC3200 && y) || (ARCH_BOARD_TWR_K60N512 && ARCH_CHIP_MK60N512VMD100 && y) || (ARCH_BOARD_TWR_K64F120M && ARCH_CHIP_MK64FN1M0VMD12 && y) || (ARCH_BOARD_U_BLOX_C027 && ARCH_CHIP_LPC1768 && y) || (ARCH_BOARD_UBW32 && ARCH_CHIP_PIC32MX460F512L && y) || (ARCH_BOARD_US7032EVB1 && ARCH_CHIP_SH7032 && y) || (ARCH_BOARD_VIEWTOOL_STM32F107 && (ARCH_CHIP_STM32F107VC || ARCH_CHIP_STM32F103VC) && y) || (ARCH_BOARD_XMC4500RELAX && ARCH_CHIP_XMC4500 && y) || (ARCH_BOARD_Z16F2800100ZCOG && ARCH_CHIP_Z16F2811 && y) || (ARCH_BOARD_Z8ENCORE000ZCO && ARCH_CHIP_Z8F6403 && y) || (ARCH_BOARD_Z8F64200100KIT && ARCH_CHIP_Z8F6423 && y) || (ARCH_BOARD_ZKITARM && ARCH_CHIP_LPC1768 && y) || (ARCH_BOARD_CXD56EVB && ARCH_CHIP_CXD56XX && y) || (BOARD_CUSTOM_LEDS && ARCH_BOARD_CUSTOM) || (ARCH_DBDP11215 && y)", "dep": "y"}, {"type": 3, "name": "ARCH_LEDS", "value": "n", "user_value": 0, "dep": "y", "prompt": "Board LED Status support", "cond": "ARCH_HAVE_LEDS", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_HAVE_LEDS"}], "help": "Use board LEDs to show NuttX execution status state. Unique to boards that have LEDs"}, {"type": 3, "name": "ARCH_HAVE_BUTTONS", "value": "y", "user_value": 2, "rev_dep": "(ARCH_BOARD_AVR32DEV1 && ARCH_CHIP_AT32UC3B0256 && y) || (ARCH_BOARD_CLICKER2_STM32 && ARCH_CHIP_STM32F407VG && y) || (ARCH_BOARD_CLOUDCTRL && ARCH_CHIP_STM32F107VC && y) || (ARCH_BOARD_DEMOS92S12NEC64 && ARCH_CHIP_MCS92S12NEC64 && y) || (ARCH_BOARD_DK_TM4C129X && ARCH_CHIP_TM4C129XNC && y) || (ARCH_BOARD_EA3131 && ARCH_CHIP_LPC3131 && y) || (ARCH_BOARD_EA3152 && ARCH_CHIP_LPC3152 && y) || (ARCH_BOARD_EFM32G8XXSTK && ARCH_CHIP_EFM32G890F128 && y) || (ARCH_BOARD_EFM32GG_STK3700 && ARCH_CHIP_EFM32GG990F1024 && y) || (ARCH_BOARD_EZ80F910200KITG && ARCH_CHIP_EZ80F91 && y) || (ARCH_BOARD_EZ80F910200ZCO && ARCH_CHIP_EZ80F91 && y) || (ARCH_BOARD_FIRE_STM32 && ARCH_CHIP_STM32F103VE && y) || (ARCH_BOARD_FREEDOM_K64F && ARCH_CHIP_MK64FN1M0VLL12 && y) || (ARCH_BOARD_FREEDOM_K66F && ARCH_CHIP_MK66FN2M0VMD18 && y) || (ARCH_BOARD_HYMINI_STM32V && ARCH_CHIP_STM32F103VC && y) || (ARCH_BOARD_LINCOLN60 && ARCH_CHIP_LPC1769 && y) || (ARCH_BOARD_KWIKSTIK_K40 && ARCH_CHIP_MK40X256VLQ100 && y) || (ARCH_BOARD_LAUNCHXL_TMS57004 && ARCH_CHIP_TMS570LS0432PZ && y) || (ARCH_BOARD_LM4F120_LAUNCHPAD && ARCH_CHIP_LM4F120 && y) || (ARCH_BOARD_BAMBINO_200E && ARCH_CHIP_LPC4330FBD144 && y) || (ARCH_BOARD_LPC4330_XPLORER && ARCH_CHIP_LPC4330FET100 && y) || (ARCH_BOARD_LPC4357_EVB && ARCH_CHIP_LPC4357FET256 && y) || (ARCH_BOARD_NE64BADGE && ARCH_CHIP_MCS92S12NEC64 && y) || (ARCH_BOARD_LPC1766STK && ARCH_CHIP_LPC1766 && y) || (ARCH_BOARD_MAPLE && (ARCH_CHIP_STM32F103RB || ARCH_CHIP_STM32F103CB) && y) || (ARCH_BOARD_OLIMEX_EFM32G880F128_STK && ARCH_CHIP_EFM32G880F128 && y) || (ARCH_BOARD_OLIMEX_STRP711 && ARCH_CHIP_STR71X && y) || (ARCH_BOARD_OLIMEX_STM32H405 && ARCH_CHIP_STM32F405RG && y) || (ARCH_BOARD_OLIMEX_STM32H407 && ARCH_CHIP_STM32F407ZG && y) || (ARCH_BOARD_OLIMEX_STM32E407 && ARCH_CHIP_STM32F407ZG && y) || (ARCH_BOARD_OLIMEX_STM32P207 && ARCH_CHIP_STM32F207ZE && y) || (ARCH_BOARD_OLIMEX_STM32P407 && ARCH_CHIP_STM32F407ZG && y) || (ARCH_BOARD_OLIMEXINO_STM32 && ARCH_CHIP_STM32F103RB && y) || (ARCH_BOARD_OPEN1788 && ARCH_CHIP_LPC1788 && y) || (ARCH_BOARD_PCDUINO_A10 && ARCH_CHIP_A10 && y) || (ARCH_BOARD_PIC32MZ_STARTERKIT && (ARCH_CHIP_PIC32MZ2048ECH || ARCH_CHIP_PIC32MZ2048ECM) && y) || (ARCH_BOARD_NUCLEO_144 && (ARCH_CHIP_STM32F746ZG || ARCH_CHIP_STM32F767ZI) && y) || (ARCH_BOARD_NUCLEO_L496ZG && ARCH_CHIP_STM32L496ZG && y) || (ARCH_BOARD_NUCLEO_F072RB && ARCH_CHIP_STM32F072RB && y) || (ARCH_BOARD_NUCLEO_F091RC && ARCH_CHIP_STM32F091RC && y) || (ARCH_BOARD_NUCLEO_F303RE && ARCH_CHIP_STM32F303RE && y) || (ARCH_BOARD_NUCLEO_F334R8 && ARCH_CHIP_STM32F334R8 && y) || (ARCH_BOARD_NUCLEO_F401RE && ARCH_CHIP_STM32F401RE && y) || (ARCH_BOARD_NUCLEO_F411RE && ARCH_CHIP_STM32F411RE && y) || (ARCH_BOARD_NUCLEO_L432KC && ARCH_CHIP_STM32L432KC && y) || (ARCH_BOARD_NUCLEO_L452RE && ARCH_CHIP_STM32L452RE && y) || (ARCH_BOARD_NUCLEO_L476RG && ARCH_CHIP_STM32L476RG && y) || (ARCH_BOARD_SABRE_6QUAD && ARCH_CHIP_IMX6_6QUAD && y) || (ARCH_BOARD_SAMA5D2_XULT && ARCH_CHIP_ATSAMA5D27 && y) || (ARCH_BOARD_SAMA5D3X_EK && (ARCH_CHIP_ATSAMA5D31 || ARCH_CHIP_ATSAMA5D33 || ARCH_CHIP_ATSAMA5D34 || ARCH_CHIP_ATSAMA5D35) && y) || (ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_CHIP_ATSAMA5D36 && y) || (ARCH_BOARD_SAMA5D4_EK && ARCH_CHIP_ATSAMA5D44 && y) || (ARCH_BOARD_SAMD20_XPLAINED && ARCH_CHIP_SAMD20J18 && y) || (ARCH_BOARD_SAMD21_XPLAINED && ARCH_CHIP_SAMD21J18A && y) || (ARCH_BOARD_SAML21_XPLAINED && ARCH_CHIP_SAML21J18 && y) || (ARCH_BOARD_SAM3UEK && ARCH_CHIP_ATSAM3U4E && y) || (ARCH_BOARD_SAM4EEK && ARCH_CHIP_ATSAM4E16E && y) || (ARCH_BOARD_SAM4L_XPLAINED && ARCH_CHIP_ATSAM4LC4C && y) || (ARCH_BOARD_SAM4S_XPLAINED && ARCH_CHIP_ATSAM4S16C && y) || (ARCH_BOARD_SAM4S_XPLAINED_PRO && ARCH_CHIP_ATSAM4SD32C && y) || (ARCH_BOARD_SAME70_XPLAINED && ARCH_CHIP_SAME70Q21 && y) || (ARCH_BOARD_SAMV71_XULT && ARCH_CHIP_SAMV71Q21 && y) || (ARCH_BOARD_SHENZHOU && ARCH_CHIP_STM32F107VC && y) || (ARCH_BOARD_SKP16C26 && ARCH_CHIP_M30262F8 && y) || (ARCH_BOARD_SPARK && ARCH_CHIP_STM32F103CB && y) || (ARCH_BOARD_PHOTON && ARCH_CHIP_STM32F205RG && y) || (ARCH_BOARD_STM32_BUTTERFLY2 && ARCH_CHIP_STM32F107VC && y) || (ARCH_BOARD_STM32F103_MINIMUM && ARCH_CHIP_STM32F103C8 && y) || (ARCH_BOARD_STM3210E_EVAL && ARCH_CHIP_STM32F103ZE && y) || (ARCH_BOARD_STM3220G_EVAL && ARCH_CHIP_STM32F207IG && y) || (ARCH_BOARD_STM3240G_EVAL && ARCH_CHIP_STM32F407IG && y) || (ARCH_BOARD_STM32F0_DISCOVERY && ARCH_CHIP_STM32F051R8 && y) || (ARCH_BOARD_STM32F3_DISCOVERY && ARCH_CHIP_STM32F303VC && y) || (ARCH_BOARD_STM32F334_DISCO && ARCH_CHIP_STM32F334C8 && y) || (ARCH_BOARD_STM32F4_DISCOVERY && ARCH_CHIP_STM32F407VG && y) || (ARCH_BOARD_STM32F411E_DISCO && ARCH_CHIP_STM32F411VE && y) || (ARCH_BOARD_STM32F429I_DISCO && ARCH_CHIP_STM32F429Z && y) || (ARCH_BOARD_STM32F746G_DISCO && ARCH_CHIP_STM32F746NG && y) || (ARCH_BOARD_STM32F769I_DISCO && ARCH_CHIP_STM32F769NI && y) || (ARCH_BOARD_STM32L476VG_DISCO && ARCH_CHIP_STM32L476RG && y) || (ARCH_BOARD_STM32L476_MDK && ARCH_CHIP_STM32L476RG && y) || (ARCH_BOARD_STM32L_DISCOVERY && ARCH_CHIP_STM32L152RB && y) || (ARCH_BOARD_STM32VL_DISCOVERY && ARCH_CHIP_STM32F100RB && y) || (ARCH_BOARD_SUREPIC32MX && ARCH_CHIP_PIC32MX440F512H && y) || (ARCH_BOARD_TM4C123G_LAUNCHPAD && ARCH_CHIP_TM4C123GH6PMI && y) || (ARCH_BOARD_TM4C1294_LAUNCHPAD && ARCH_CHIP_TM4C1294NC && y) || (ARCH_BOARD_CC3200_LAUNCHPAD && ARCH_CHIP_CC3200 && y) || (ARCH_BOARD_TWR_K60N512 && ARCH_CHIP_MK60N512VMD100 && y) || (ARCH_BOARD_TWR_K64F120M && ARCH_CHIP_MK64FN1M0VMD12 && y) || (ARCH_BOARD_UBW32 && ARCH_CHIP_PIC32MX460F512L && y) || (ARCH_BOARD_US7032EVB1 && ARCH_CHIP_SH7032 && y) || (ARCH_BOARD_VIEWTOOL_STM32F107 && (ARCH_CHIP_STM32F107VC || ARCH_CHIP_STM32F103VC) && y) || (ARCH_BOARD_XMC4500RELAX && ARCH_CHIP_XMC4500 && y) || (ARCH_BOARD_CXD56EVB && ARCH_CHIP_CXD56XX && y) || (BOARD_CUSTOM_BUTTONS && ARCH_BOARD_CUSTOM)", "dep": "y"}, {"type": 3, "name": "ARCH_BUTTONS", "value": "n", "user_value": 0, "rev_dep": "BOARD_CUSTOM_BUTTONS && ARCH_BOARD_CUSTOM", "dep": "y", "prompt": "Board button support", "cond": "ARCH_HAVE_BUTTONS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_BUTTONS"}], "help": "\"Support interfaces to use buttons provided by the board.\""}, {"type": 3, "name": "ARCH_HAVE_IRQBUTTONS", "value": "y", "user_value": 2, "rev_dep": "(ARCH_BOARD_AVR32DEV1 && ARCH_CHIP_AT32UC3B0256 && y) || (ARCH_BOARD_CLICKER2_STM32 && ARCH_CHIP_STM32F407VG && y) || (ARCH_BOARD_CLOUDCTRL && ARCH_CHIP_STM32F107VC && y) || (ARCH_BOARD_DK_TM4C129X && ARCH_CHIP_TM4C129XNC && y) || (ARCH_BOARD_FIRE_STM32 && ARCH_CHIP_STM32F103VE && y) || (ARCH_BOARD_FREEDOM_K64F && ARCH_CHIP_MK64FN1M0VLL12 && y) || (ARCH_BOARD_FREEDOM_K66F && ARCH_CHIP_MK66FN2M0VMD18 && y) || (ARCH_BOARD_HYMINI_STM32V && ARCH_CHIP_STM32F103VC && y) || (ARCH_BOARD_LINCOLN60 && ARCH_CHIP_LPC1769 && y) || (ARCH_BOARD_KWIKSTIK_K40 && ARCH_CHIP_MK40X256VLQ100 && y) || (ARCH_BOARD_LAUNCHXL_TMS57004 && ARCH_CHIP_TMS570LS0432PZ && y) || (ARCH_BOARD_LM4F120_LAUNCHPAD && ARCH_CHIP_LM4F120 && y) || (ARCH_BOARD_BAMBINO_200E && ARCH_CHIP_LPC4330FBD144 && y) || (ARCH_BOARD_LPC4330_XPLORER && ARCH_CHIP_LPC4330FET100 && y) || (ARCH_BOARD_LPC4357_EVB && ARCH_CHIP_LPC4357FET256 && y) || (ARCH_BOARD_LPC1766STK && ARCH_CHIP_LPC1766 && y) || (ARCH_BOARD_MAPLE && (ARCH_CHIP_STM32F103RB || ARCH_CHIP_STM32F103CB) && y) || (ARCH_BOARD_OLIMEX_EFM32G880F128_STK && ARCH_CHIP_EFM32G880F128 && y) || (ARCH_BOARD_OLIMEX_STM32H405 && ARCH_CHIP_STM32F405RG && y) || (ARCH_BOARD_OLIMEX_STM32H407 && ARCH_CHIP_STM32F407ZG && y) || (ARCH_BOARD_OLIMEX_STM32E407 && ARCH_CHIP_STM32F407ZG && y) || (ARCH_BOARD_OLIMEX_STM32P207 && ARCH_CHIP_STM32F207ZE && y) || (ARCH_BOARD_OLIMEX_STM32P407 && ARCH_CHIP_STM32F407ZG && y) || (ARCH_BOARD_OLIMEXINO_STM32 && ARCH_CHIP_STM32F103RB && y) || (ARCH_BOARD_OPEN1788 && ARCH_CHIP_LPC1788 && y) || (ARCH_BOARD_PCDUINO_A10 && ARCH_CHIP_A10 && y) || (ARCH_BOARD_PIC32MZ_STARTERKIT && PIC32MZ_GPIOIRQ_PORTB && (ARCH_CHIP_PIC32MZ2048ECH || ARCH_CHIP_PIC32MZ2048ECM) && y) || (ARCH_BOARD_NUCLEO_144 && (ARCH_CHIP_STM32F746ZG || ARCH_CHIP_STM32F767ZI) && y) || (ARCH_BOARD_NUCLEO_L496ZG && ARCH_CHIP_STM32L496ZG && y) || (ARCH_BOARD_NUCLEO_F072RB && ARCH_CHIP_STM32F072RB && y) || (ARCH_BOARD_NUCLEO_F091RC && ARCH_CHIP_STM32F091RC && y) || (ARCH_BOARD_NUCLEO_F303RE && ARCH_CHIP_STM32F303RE && y) || (ARCH_BOARD_NUCLEO_F334R8 && ARCH_CHIP_STM32F334R8 && y) || (ARCH_BOARD_NUCLEO_F401RE && ARCH_CHIP_STM32F401RE && y) || (ARCH_BOARD_NUCLEO_F411RE && ARCH_CHIP_STM32F411RE && y) || (ARCH_BOARD_NUCLEO_L432KC && ARCH_CHIP_STM32L432KC && y) || (ARCH_BOARD_NUCLEO_L452RE && ARCH_CHIP_STM32L452RE && y) || (ARCH_BOARD_NUCLEO_L476RG && ARCH_CHIP_STM32L476RG && y) || (ARCH_BOARD_SABRE_6QUAD && ARCH_CHIP_IMX6_6QUAD && y) || (ARCH_BOARD_SAMA5D2_XULT && ARCH_CHIP_ATSAMA5D27 && y) || (ARCH_BOARD_SAMA5D3X_EK && (ARCH_CHIP_ATSAMA5D31 || ARCH_CHIP_ATSAMA5D33 || ARCH_CHIP_ATSAMA5D34 || ARCH_CHIP_ATSAMA5D35) && y) || (ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_CHIP_ATSAMA5D36 && y) || (ARCH_BOARD_SAMA5D4_EK && ARCH_CHIP_ATSAMA5D44 && y) || (ARCH_BOARD_SAMD20_XPLAINED && ARCH_CHIP_SAMD20J18 && y) || (ARCH_BOARD_SAMD21_XPLAINED && ARCH_CHIP_SAMD21J18A && y) || (ARCH_BOARD_SAML21_XPLAINED && ARCH_CHIP_SAML21J18 && y) || (ARCH_BOARD_SAM3UEK && ARCH_CHIP_ATSAM3U4E && y) || (ARCH_BOARD_SAM4EEK && ARCH_CHIP_ATSAM4E16E && y) || (ARCH_BOARD_SAM4L_XPLAINED && ARCH_CHIP_ATSAM4LC4C && y) || (ARCH_BOARD_SAM4S_XPLAINED && ARCH_CHIP_ATSAM4S16C && y) || (ARCH_BOARD_SAM4S_XPLAINED_PRO && ARCH_CHIP_ATSAM4SD32C && y) || (ARCH_BOARD_SAME70_XPLAINED && ARCH_CHIP_SAME70Q21 && y) || (ARCH_BOARD_SAMV71_XULT && ARCH_CHIP_SAMV71Q21 && y) || (ARCH_BOARD_SHENZHOU && ARCH_CHIP_STM32F107VC && y) || (ARCH_BOARD_SPARK && ARCH_CHIP_STM32F103CB && y) || (ARCH_BOARD_PHOTON && ARCH_CHIP_STM32F205RG && y) || (ARCH_BOARD_STM32F103_MINIMUM && ARCH_CHIP_STM32F103C8 && y) || (ARCH_BOARD_STM3210E_EVAL && ARCH_CHIP_STM32F103ZE && y) || (ARCH_BOARD_STM3220G_EVAL && ARCH_CHIP_STM32F207IG && y) || (ARCH_BOARD_STM3240G_EVAL && ARCH_CHIP_STM32F407IG && y) || (ARCH_BOARD_STM32F0_DISCOVERY && ARCH_CHIP_STM32F051R8 && y) || (ARCH_BOARD_STM32F3_DISCOVERY && ARCH_CHIP_STM32F303VC && y) || (ARCH_BOARD_STM32F334_DISCO && ARCH_CHIP_STM32F334C8 && y) || (ARCH_BOARD_STM32F4_DISCOVERY && ARCH_CHIP_STM32F407VG && y) || (ARCH_BOARD_STM32F411E_DISCO && ARCH_CHIP_STM32F411VE && y) || (ARCH_BOARD_STM32F429I_DISCO && ARCH_CHIP_STM32F429Z && y) || (ARCH_BOARD_STM32F746G_DISCO && ARCH_CHIP_STM32F746NG && y) || (ARCH_BOARD_STM32F769I_DISCO && ARCH_CHIP_STM32F769NI && y) || (ARCH_BOARD_STM32L476VG_DISCO && ARCH_CHIP_STM32L476RG && y) || (ARCH_BOARD_STM32L476_MDK && ARCH_CHIP_STM32L476RG && y) || (ARCH_BOARD_STM32L_DISCOVERY && ARCH_CHIP_STM32L152RB && y) || (ARCH_BOARD_STM32VL_DISCOVERY && ARCH_CHIP_STM32F100RB && y) || (ARCH_BOARD_SUREPIC32MX && ARCH_CHIP_PIC32MX440F512H && y) || (ARCH_BOARD_TM4C123G_LAUNCHPAD && ARCH_CHIP_TM4C123GH6PMI && y) || (ARCH_BOARD_CC3200_LAUNCHPAD && ARCH_CHIP_CC3200 && y) || (ARCH_BOARD_TWR_K60N512 && ARCH_CHIP_MK60N512VMD100 && y) || (ARCH_BOARD_TWR_K64F120M && ARCH_CHIP_MK64FN1M0VMD12 && y) || (ARCH_BOARD_UBW32 && ARCH_CHIP_PIC32MX460F512L && y) || (ARCH_BOARD_XMC4500RELAX && ARCH_CHIP_XMC4500 && y) || (ARCH_BOARD_CXD56EVB && ARCH_CHIP_CXD56XX && y) || (BOARD_CUSTOM_IRQBUTTONS && BOARD_CUSTOM_BUTTONS && ARCH_BOARD_CUSTOM)", "dep": "y"}, {"type": 3, "name": "ARCH_IRQBUTTONS", "value": "n", "user_value": null, "rev_dep": "BOARD_CUSTOM_IRQBUTTONS && BOARD_CUSTOM_BUTTONS && ARCH_BOARD_CUSTOM", "dep": "n", "prompt": "Button interrupt support", "cond": "ARCH_BUTTONS && ARCH_HAVE_IRQBUTTONS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BUTTONS && ARCH_HAVE_IRQBUTTONS"}], "help": "\"Support interrupts on button presses and releases.\""}, {"type": 6, "dep": "y", "prompt": "Board-Specific Options", "cond": "y"}, {"type": 3, "name": "ADRUINO_DUE_REV3", "value": "n", "user_value": null, "dep": "n", "prompt": "Rev 3", "cond": "ARCH_BOARD_ARDUINO_DUE && ARCH_BOARD_ARDUINO_DUE", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_ARDUINO_DUE && ARCH_BOARD_ARDUINO_DUE"}], "help": "This port was performed on the Aduino Due Rev 2 board.  Differences\nwith the Arduino Due Rev 3 board have been reported.  This selection\nwill enable work arounds specifically for the Rev 3 board."}, {"type": 3, "name": "ARDUINO_ITHEAD_TFT", "value": "n", "user_value": null, "dep": "n", "prompt": "ITEAD 2.4 inch TFT w/Touch", "cond": "ARCH_BOARD_ARDUINO_DUE && ARCH_BOARD_ARDUINO_DUE", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_ARDUINO_DUE && ARCH_BOARD_ARDUINO_DUE"}], "help": "Select this option if you have the ITEAD 2.4\" TFT module installed.\nThis will enable support for the peripherals on that module\nincluding the SD card, TFT LCD, and touchscreen controller."}, {"type": 3, "name": "CLICKER2_STM32_MB1_SPI", "value": "n", "user_value": null, "rev_dep": "CLICKER2_STM32_MB1_BEE && IEEE802154_MRF24J40 && ARCH_BOARD_CLICKER2_STM32 && ARCH_BOARD_CLICKER2_STM32", "dep": "n", "prompt": "mikroBUS1 SPI", "cond": "ARCH_BOARD_CLICKER2_STM32 && ARCH_BOARD_CLICKER2_STM32", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_CLICKER2_STM32 && ARCH_BOARD_CLICKER2_STM32"}], "selects": [{"symbol": "STM32_SPI3", "cond": "ARCH_BOARD_CLICKER2_STM32 && ARCH_BOARD_CLICKER2_STM32"}], "help": "Enable SPI support on mikroBUS1 (STM32 SPI3)"}, {"type": 3, "name": "CLICKER2_STM32_MB2_SPI", "value": "n", "user_value": null, "rev_dep": "CLICKER2_STM32_MB2_BEE && IEEE802154_MRF24J40 && ARCH_BOARD_CLICKER2_STM32 && ARCH_BOARD_CLICKER2_STM32", "dep": "n", "prompt": "mikroBUS2 SPI", "cond": "ARCH_BOARD_CLICKER2_STM32 && ARCH_BOARD_CLICKER2_STM32", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_CLICKER2_STM32 && ARCH_BOARD_CLICKER2_STM32"}], "selects": [{"symbol": "STM32_SPI2", "cond": "ARCH_BOARD_CLICKER2_STM32 && ARCH_BOARD_CLICKER2_STM32"}], "help": "Enable SPI support on mikroBUS1 (STM32 SPI2)"}, {"type": 3, "name": "CLICKER2_STM32_MB1_BEE", "value": "n", "user_value": null, "dep": "n", "prompt": "mikroBUS1 MRF24J40 BEE", "cond": "IEEE802154_MRF24J40 && ARCH_BOARD_CLICKER2_STM32 && ARCH_BOARD_CLICKER2_STM32", "defaults": [{"name": "y", "default": "y", "cond": "IEEE802154_MRF24J40 && ARCH_BOARD_CLICKER2_STM32 && ARCH_BOARD_CLICKER2_STM32"}], "selects": [{"symbol": "CLICKER2_STM32_MB1_SPI", "cond": "IEEE802154_MRF24J40 && ARCH_BOARD_CLICKER2_STM32 && ARCH_BOARD_CLICKER2_STM32"}], "help": "Enable support for MRF24J40 BEE on mikroBUS1"}, {"type": 3, "name": "CLICKER2_STM32_MB2_BEE", "value": "n", "user_value": null, "dep": "n", "prompt": "mikroBUS2 MRF24J40 BEE", "cond": "IEEE802154_MRF24J40 && ARCH_BOARD_CLICKER2_STM32 && ARCH_BOARD_CLICKER2_STM32", "defaults": [{"name": "n", "default": "n", "cond": "IEEE802154_MRF24J40 && ARCH_BOARD_CLICKER2_STM32 && ARCH_BOARD_CLICKER2_STM32"}], "selects": [{"symbol": "CLICKER2_STM32_MB2_SPI", "cond": "IEEE802154_MRF24J40 && ARCH_BOARD_CLICKER2_STM32 && ARCH_BOARD_CLICKER2_STM32"}], "help": "Enable support for MRF24J40 BEE on mikroBUS2"}, {"type": 3, "name": "CLICKER2_STM32_MRF24J40LH_VERBOSE", "value": "n", "user_value": null, "dep": "n", "prompt": "Verbose MRF24J40 lowerhalf", "cond": "IEEE802154_MRF24J40 && DEBUG_WIRELESS_INFO && ARCH_BOARD_CLICKER2_STM32 && ARCH_BOARD_CLICKER2_STM32", "defaults": [{"name": "n", "default": "n", "cond": "IEEE802154_MRF24J40 && DEBUG_WIRELESS_INFO && ARCH_BOARD_CLICKER2_STM32 && ARCH_BOARD_CLICKER2_STM32"}], "help": "Enable verbose syslog for MRF24J40 lowerhalf"}, {"type": 3, "name": "DK_TM4C129X_TIMER", "value": "n", "user_value": null, "rev_dep": "(DK_TM4C129X_TIMER0 && TIVA_TIMER0 && y) || (DK_TM4C129X_TIMER1 && TIVA_TIMER1 && y) || (DK_TM4C129X_TIMER2 && TIVA_TIMER2 && y) || (DK_TM4C129X_TIMER3 && TIVA_TIMER3 && y) || (DK_TM4C129X_TIMER4 && TIVA_TIMER4 && y) || (DK_TM4C129X_TIMER5 && TIVA_TIMER5 && y) || (DK_TM4C129X_TIMER6 && TIVA_TIMER6 && y) || (DK_TM4C129X_TIMER7 && TIVA_TIMER7 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "TIMER && TIVA_TIMER32_PERIODIC && ARCH_BOARD_DK_TM4C129X && ARCH_BOARD_DK_TM4C129X"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Timer driver selection", "cond": "TIMER && TIVA_TIMER32_PERIODIC && ARCH_BOARD_DK_TM4C129X && ARCH_BOARD_DK_TM4C129X", "defaults": [{"name": "DK_TM4C129X_TIMER_NONE", "default": "n", "cond": "TIMER && TIVA_TIMER32_PERIODIC && ARCH_BOARD_DK_TM4C129X && ARCH_BOARD_DK_TM4C129X"}], "children": [{"type": 3, "name": "DK_TM4C129X_TIMER_NONE", "value": "n", "user_value": null, "dep": "n", "prompt": "None", "cond": "y"}, {"type": 3, "name": "DK_TM4C129X_TIMER0", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 0", "cond": "TIVA_TIMER0 && y", "selects": [{"symbol": "DK_TM4C129X_TIMER", "cond": "TIVA_TIMER0 && y"}]}, {"type": 3, "name": "DK_TM4C129X_TIMER1", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 1", "cond": "TIVA_TIMER1 && y", "selects": [{"symbol": "DK_TM4C129X_TIMER", "cond": "TIVA_TIMER1 && y"}]}, {"type": 3, "name": "DK_TM4C129X_TIMER2", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 2", "cond": "TIVA_TIMER2 && y", "selects": [{"symbol": "DK_TM4C129X_TIMER", "cond": "TIVA_TIMER2 && y"}]}, {"type": 3, "name": "DK_TM4C129X_TIMER3", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 3", "cond": "TIVA_TIMER3 && y", "selects": [{"symbol": "DK_TM4C129X_TIMER", "cond": "TIVA_TIMER3 && y"}]}, {"type": 3, "name": "DK_TM4C129X_TIMER4", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 4", "cond": "TIVA_TIMER4 && y", "selects": [{"symbol": "DK_TM4C129X_TIMER", "cond": "TIVA_TIMER4 && y"}]}, {"type": 3, "name": "DK_TM4C129X_TIMER5", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 5", "cond": "TIVA_TIMER5 && y", "selects": [{"symbol": "DK_TM4C129X_TIMER", "cond": "TIVA_TIMER5 && y"}]}, {"type": 3, "name": "DK_TM4C129X_TIMER6", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 6", "cond": "TIVA_TIMER6 && y", "selects": [{"symbol": "DK_TM4C129X_TIMER", "cond": "TIVA_TIMER6 && y"}]}, {"type": 3, "name": "DK_TM4C129X_TIMER7", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 7", "cond": "TIVA_TIMER7 && y", "selects": [{"symbol": "DK_TM4C129X_TIMER", "cond": "TIVA_TIMER7 && y"}]}]}, {"type": 47, "name": "DK_TM4C129X_TIMER_DEVNAME", "value": "", "user_value": null, "dep": "n", "prompt": "Timer device name", "cond": "DK_TM4C129X_TIMER && TIMER && TIVA_TIMER32_PERIODIC && ARCH_BOARD_DK_TM4C129X && ARCH_BOARD_DK_TM4C129X", "defaults": [{"name": "/dev/timer0", "default": "/dev/timer0", "cond": "DK_TM4C129X_TIMER && TIMER && TIVA_TIMER32_PERIODIC && ARCH_BOARD_DK_TM4C129X && ARCH_BOARD_DK_TM4C129X"}]}, {"type": 3, "name": "DK_TM4C129X_TIMER_ALTCLK", "value": "n", "user_value": null, "dep": "n", "prompt": "Use alternate clock source", "cond": "EXPERIMENTAL && DK_TM4C129X_TIMER && TIMER && TIVA_TIMER32_PERIODIC && ARCH_BOARD_DK_TM4C129X && ARCH_BOARD_DK_TM4C129X", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && DK_TM4C129X_TIMER && TIMER && TIVA_TIMER32_PERIODIC && ARCH_BOARD_DK_TM4C129X && ARCH_BOARD_DK_TM4C129X"}]}, {"type": 27, "name": "EA3131_PAGING_MINOR", "value": "", "user_value": null, "dep": "n", "prompt": "Page device minor number", "cond": "PAGING && ARCH_BOARD_EA3131 && ARCH_BOARD_EA3131", "defaults": [{"name": "0", "default": "0", "cond": "PAGING && ARCH_BOARD_EA3131 && ARCH_BOARD_EA3131"}]}, {"type": 47, "name": "EA3131_PAGING_MOUNTPT", "value": "", "user_value": null, "dep": "n", "prompt": "Page device mount point", "cond": "PAGING && ARCH_BOARD_EA3131 && ARCH_BOARD_EA3131", "defaults": [{"name": "/mnt/pgsrc", "default": "/mnt/pgsrc", "cond": "PAGING && ARCH_BOARD_EA3131 && ARCH_BOARD_EA3131"}]}, {"type": 27, "name": "EA3131_PAGING_BINOFFSET", "value": "", "user_value": null, "dep": "n", "prompt": "Volume offset", "cond": "PAGING && ARCH_BOARD_EA3131 && ARCH_BOARD_EA3131", "defaults": [{"name": "0", "default": "0", "cond": "PAGING && ARCH_BOARD_EA3131 && ARCH_BOARD_EA3131"}]}, {"type": 27, "name": "EA3131_PAGING_SDSLOT", "value": "", "user_value": null, "dep": "n", "prompt": "SD page device slot number", "cond": "MMCSD && PAGING && ARCH_BOARD_EA3131 && ARCH_BOARD_EA3131", "defaults": [{"name": "0", "default": "0", "cond": "MMCSD && PAGING && ARCH_BOARD_EA3131 && ARCH_BOARD_EA3131"}]}, {"type": 27, "name": "EA3131_PAGING_SPIPORT", "value": "", "user_value": null, "dep": "n", "prompt": "SD SPI port number", "cond": "SPI && PAGING && ARCH_BOARD_EA3131 && ARCH_BOARD_EA3131", "defaults": [{"name": "0", "default": "0", "cond": "SPI && PAGING && ARCH_BOARD_EA3131 && ARCH_BOARD_EA3131"}]}, {"type": 27, "name": "EA3152_PAGING_MINOR", "value": "", "user_value": null, "dep": "n", "prompt": "Page device minor number", "cond": "PAGING && ARCH_BOARD_EA3152 && ARCH_BOARD_EA3152", "defaults": [{"name": "0", "default": "0", "cond": "PAGING && ARCH_BOARD_EA3152 && ARCH_BOARD_EA3152"}]}, {"type": 47, "name": "EA3152_PAGING_MOUNTPT", "value": "", "user_value": null, "dep": "n", "prompt": "Page device mount point", "cond": "PAGING && ARCH_BOARD_EA3152 && ARCH_BOARD_EA3152", "defaults": [{"name": "/mnt/pgsrc", "default": "/mnt/pgsrc", "cond": "PAGING && ARCH_BOARD_EA3152 && ARCH_BOARD_EA3152"}]}, {"type": 27, "name": "EA3152_PAGING_BINOFFSET", "value": "", "user_value": null, "dep": "n", "prompt": "Volume offset", "cond": "PAGING && ARCH_BOARD_EA3152 && ARCH_BOARD_EA3152", "defaults": [{"name": "0", "default": "0", "cond": "PAGING && ARCH_BOARD_EA3152 && ARCH_BOARD_EA3152"}]}, {"type": 27, "name": "EA3152_PAGING_SDSLOT", "value": "", "user_value": null, "dep": "n", "prompt": "SD page device slot number", "cond": "MMCSD && PAGING && ARCH_BOARD_EA3152 && ARCH_BOARD_EA3152", "defaults": [{"name": "0", "default": "0", "cond": "MMCSD && PAGING && ARCH_BOARD_EA3152 && ARCH_BOARD_EA3152"}]}, {"type": 27, "name": "EA3152_PAGING_SPIPORT", "value": "", "user_value": null, "dep": "n", "prompt": "SD SPI port number", "cond": "SPI && PAGING && ARCH_BOARD_EA3152 && ARCH_BOARD_EA3152", "defaults": [{"name": "0", "default": "0", "cond": "SPI && PAGING && ARCH_BOARD_EA3152 && ARCH_BOARD_EA3152"}]}, {"type": 6, "dep": "n", "prompt": "EFM32 G8XX STK Hardware Configuration", "cond": "ARCH_BOARD_EFM32G8XXSTK && ARCH_BOARD_EFM32G8XXSTK"}, {"type": 3, "name": "EFM32G8STK_BCEN", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable BC_EN", "cond": "ARCH_BOARD_EFM32G8XXSTK && ARCH_BOARD_EFM32G8XXSTK", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_EFM32G8XXSTK && ARCH_BOARD_EFM32G8XXSTK"}], "help": "The control MCU acts as a board controller (BC). There is a UART\nconnection between the EFM and the BC. The connection is made by\nsetting the EFM_BC_EN (PD13) line high. The EFM can then use the\nBSP to send commands to the BC. When EFM_BC_EN is low, EFM_BC_TX\nand EFM_BC_RX can be used by other applications."}, {"type": 6, "dep": "n", "prompt": "EFM32GG-STK3700 Hardware Configuration", "cond": "ARCH_BOARD_EFM32GG_STK3700 && ARCH_BOARD_EFM32GG_STK3700"}, {"type": 3, "name": "EFM32GG_STK3700_BCEN", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable BC_EN", "cond": "ARCH_BOARD_EFM32GG_STK3700 && ARCH_BOARD_EFM32GG_STK3700", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_EFM32GG_STK3700 && ARCH_BOARD_EFM32GG_STK3700"}], "help": "The kit contains a board controller that is responsible for\nperforming various board level tasks, such as handling the debugger\nand the Advanced Energy Monitor. An interface is provided between\nthe EFM32 and the board controller in the form of a UART connection.\nThe connection is enabled by setting the EFM_BC_EN (PF7) line high,\nand using the lines EFM_BC_TX (PE0) and EFM_BC_RX (PE1) for\ncommunicating."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "On-board Crystal Frequency", "cond": "ARCH_BOARD_ESP32CORE && ARCH_BOARD_ESP32CORE", "defaults": [{"name": "ESP32CORE_XTAL_40MZ", "default": "n", "cond": "ARCH_BOARD_ESP32CORE && ARCH_BOARD_ESP32CORE"}], "children": [{"type": 3, "name": "ESP32CORE_XTAL_40MZ", "value": "n", "user_value": null, "dep": "n", "prompt": "40MHz", "cond": "y"}, {"type": 3, "name": "ESP32CORE_XTAL_26MHz", "value": "n", "user_value": null, "dep": "n", "prompt": "26MHz", "cond": "y"}]}, {"type": 3, "name": "ESP32CORE_RUN_IRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "Run from IRAM", "cond": "ARCH_BOARD_ESP32CORE && ARCH_BOARD_ESP32CORE", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_ESP32CORE && ARCH_BOARD_ESP32CORE"}], "help": "The default configuration is set up run from IRAM.  However, the\ncurrent (2016-11-14) OpenOCD for ESP32 does not support writing to\nFLASH.  This option sets up the linker scripts to support execution\nfrom IRAM.  In this case, OpenOCD can be used to load directly into\nIRAM.\n\nAt this stage the nuttx image is small enough to be entirely memory-\nresident.  Once board support is more mature you can add flash cache\nmapping code to run from SPI flash after initial boot. There are at\nleast two possible approaches you could take: You can add the flash\ncache mapping code into nuttx directly, so it is self-contained -\nearly nuttx initialisation runs from IRAM and enables flash cache,\nand then off you go. Or you can use the esp-idf software bootloader\nand partition table scheme and have nuttx be an esp-idf \"app\" which\nallows interoperability with the esp-idf system but makes you\nreliant on the esp-idf design for these parts. Both are possible."}, {"type": 6, "dep": "n", "prompt": "M3 Wildfire Configuration", "cond": "ARCH_BOARD_FIRE_STM32"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Select Wildfire STM32 version", "cond": "ARCH_BOARD_FIRE_STM32 && ARCH_BOARD_FIRE_STM32", "defaults": [{"name": "ARCH_BOARD_FIRE_STM32V2", "default": "n", "cond": "ARCH_BOARD_FIRE_STM32 && ARCH_BOARD_FIRE_STM32"}], "help": "This port has logic differences to support either the Version 2 or\nVersion 3 of the Wildfire board.", "children": [{"type": 3, "name": "ARCH_BOARD_FIRE_STM32V2", "value": "n", "user_value": null, "dep": "n", "prompt": "Wildfire STM32v2", "cond": "y", "help": "Selects the M3 Wildfire version 2."}, {"type": 3, "name": "ARCH_BOARD_FIRE_STM32V3", "value": "n", "user_value": null, "dep": "n", "prompt": "Wildfire STM32v3", "cond": "y", "help": "Selects the M3 Wildfire version 3."}]}, {"type": 3, "name": "FRDMK64F_SDHC_AUTOMOUNT", "value": "n", "user_value": null, "dep": "n", "prompt": "SDHC automounter", "cond": "FS_AUTOMOUNTER && KINETIS_SDHC && ARCH_BOARD_FREEDOM_K64F && ARCH_BOARD_FREEDOM_K64F", "defaults": [{"name": "n", "default": "n", "cond": "FS_AUTOMOUNTER && KINETIS_SDHC && ARCH_BOARD_FREEDOM_K64F && ARCH_BOARD_FREEDOM_K64F"}], "children": [{"type": 47, "name": "FRDMK64F_SDHC_AUTOMOUNT_FSTYPE", "value": "", "user_value": null, "dep": "n", "prompt": "SDHC file system type", "cond": "FRDMK64F_SDHC_AUTOMOUNT && ARCH_BOARD_FREEDOM_K64F && ARCH_BOARD_FREEDOM_K64F", "defaults": [{"name": "vfat", "default": "vfat", "cond": "FRDMK64F_SDHC_AUTOMOUNT && ARCH_BOARD_FREEDOM_K64F && ARCH_BOARD_FREEDOM_K64F"}]}, {"type": 47, "name": "FRDMK64F_SDHC_AUTOMOUNT_BLKDEV", "value": "", "user_value": null, "dep": "n", "prompt": "SDHC block device", "cond": "FRDMK64F_SDHC_AUTOMOUNT && ARCH_BOARD_FREEDOM_K64F && ARCH_BOARD_FREEDOM_K64F", "defaults": [{"name": "/dev/mmcsd0", "default": "/dev/mmcsd0", "cond": "FRDMK64F_SDHC_AUTOMOUNT && ARCH_BOARD_FREEDOM_K64F && ARCH_BOARD_FREEDOM_K64F"}]}, {"type": 47, "name": "FRDMK64F_SDHC_AUTOMOUNT_MOUNTPOINT", "value": "", "user_value": null, "dep": "n", "prompt": "SDHC mount point", "cond": "FRDMK64F_SDHC_AUTOMOUNT && ARCH_BOARD_FREEDOM_K64F && ARCH_BOARD_FREEDOM_K64F", "defaults": [{"name": "/mnt/sdcard", "default": "/mnt/sdcard", "cond": "FRDMK64F_SDHC_AUTOMOUNT && ARCH_BOARD_FREEDOM_K64F && ARCH_BOARD_FREEDOM_K64F"}]}, {"type": 27, "name": "FRDMK64F_SDHC_AUTOMOUNT_DDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "SDHC debounce delay (milliseconds)", "cond": "FRDMK64F_SDHC_AUTOMOUNT && ARCH_BOARD_FREEDOM_K64F && ARCH_BOARD_FREEDOM_K64F", "defaults": [{"name": "1000", "default": "1000", "cond": "FRDMK64F_SDHC_AUTOMOUNT && ARCH_BOARD_FREEDOM_K64F && ARCH_BOARD_FREEDOM_K64F"}]}, {"type": 27, "name": "FRDMK64F_SDHC_AUTOMOUNT_UDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "SDHC unmount retry delay (milliseconds)", "cond": "FRDMK64F_SDHC_AUTOMOUNT && ARCH_BOARD_FREEDOM_K64F && ARCH_BOARD_FREEDOM_K64F", "defaults": [{"name": "2000", "default": "2000", "cond": "FRDMK64F_SDHC_AUTOMOUNT && ARCH_BOARD_FREEDOM_K64F && ARCH_BOARD_FREEDOM_K64F"}]}]}, {"type": 3, "name": "FRDMK66F_SDHC_AUTOMOUNT", "value": "n", "user_value": null, "dep": "n", "prompt": "SDHC automounter", "cond": "FS_AUTOMOUNTER && KINETIS_SDHC && ARCH_BOARD_FREEDOM_K66F && ARCH_BOARD_FREEDOM_K66F", "defaults": [{"name": "n", "default": "n", "cond": "FS_AUTOMOUNTER && KINETIS_SDHC && ARCH_BOARD_FREEDOM_K66F && ARCH_BOARD_FREEDOM_K66F"}], "children": [{"type": 47, "name": "FRDMK66F_SDHC_AUTOMOUNT_FSTYPE", "value": "", "user_value": null, "dep": "n", "prompt": "SDHC file system type", "cond": "FRDMK66F_SDHC_AUTOMOUNT && ARCH_BOARD_FREEDOM_K66F && ARCH_BOARD_FREEDOM_K66F", "defaults": [{"name": "vfat", "default": "vfat", "cond": "FRDMK66F_SDHC_AUTOMOUNT && ARCH_BOARD_FREEDOM_K66F && ARCH_BOARD_FREEDOM_K66F"}]}, {"type": 47, "name": "FRDMK66F_SDHC_AUTOMOUNT_BLKDEV", "value": "", "user_value": null, "dep": "n", "prompt": "SDHC block device", "cond": "FRDMK66F_SDHC_AUTOMOUNT && ARCH_BOARD_FREEDOM_K66F && ARCH_BOARD_FREEDOM_K66F", "defaults": [{"name": "/dev/mmcsd0", "default": "/dev/mmcsd0", "cond": "FRDMK66F_SDHC_AUTOMOUNT && ARCH_BOARD_FREEDOM_K66F && ARCH_BOARD_FREEDOM_K66F"}]}, {"type": 47, "name": "FRDMK66F_SDHC_AUTOMOUNT_MOUNTPOINT", "value": "", "user_value": null, "dep": "n", "prompt": "SDHC mount point", "cond": "FRDMK66F_SDHC_AUTOMOUNT && ARCH_BOARD_FREEDOM_K66F && ARCH_BOARD_FREEDOM_K66F", "defaults": [{"name": "/mnt/sdcard", "default": "/mnt/sdcard", "cond": "FRDMK66F_SDHC_AUTOMOUNT && ARCH_BOARD_FREEDOM_K66F && ARCH_BOARD_FREEDOM_K66F"}]}, {"type": 27, "name": "FRDMK66F_SDHC_AUTOMOUNT_DDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "SDHC debounce delay (milliseconds)", "cond": "FRDMK66F_SDHC_AUTOMOUNT && ARCH_BOARD_FREEDOM_K66F && ARCH_BOARD_FREEDOM_K66F", "defaults": [{"name": "1000", "default": "1000", "cond": "FRDMK66F_SDHC_AUTOMOUNT && ARCH_BOARD_FREEDOM_K66F && ARCH_BOARD_FREEDOM_K66F"}]}, {"type": 27, "name": "FRDMK66F_SDHC_AUTOMOUNT_UDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "SDHC unmount retry delay (milliseconds)", "cond": "FRDMK66F_SDHC_AUTOMOUNT && ARCH_BOARD_FREEDOM_K66F && ARCH_BOARD_FREEDOM_K66F", "defaults": [{"name": "2000", "default": "2000", "cond": "FRDMK66F_SDHC_AUTOMOUNT && ARCH_BOARD_FREEDOM_K66F && ARCH_BOARD_FREEDOM_K66F"}]}]}, {"type": 3, "name": "LCD_R61505U", "value": "n", "user_value": null, "dep": "n", "prompt": "LCD Based on R61505U LCD Controller", "cond": "NX_LCDDRIVER && !LCD_SSD1289 && ARCH_BOARD_HYMINI_STM32V && ARCH_BOARD_HYMINI_STM32V", "defaults": [{"name": "n", "default": "n", "cond": "NX_LCDDRIVER && !LCD_SSD1289 && ARCH_BOARD_HYMINI_STM32V && ARCH_BOARD_HYMINI_STM32V"}], "help": "Enables HY-Mini STM32v support for any LCD based on the R61505U,\nLCD Controller."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Select board type", "cond": "ARCH_BOARD_MAPLE && ARCH_BOARD_MAPLE", "defaults": [{"name": "MAPLE_STANDARD", "default": "n", "cond": "ARCH_CHIP_STM32F103RB && ARCH_BOARD_MAPLE && ARCH_BOARD_MAPLE"}, {"name": "MAPLE_MINI", "default": "n", "cond": "ARCH_CHIP_STM32F103CB && ARCH_BOARD_MAPLE && ARCH_BOARD_MAPLE"}], "help": "Select the board hosting the architure.  You must first select the\nexact MCU part number, then the boards supporting that part will\nbe available for selection.  Use ARCH_BOARD_CUSTOM to create a new\nboard configuration.", "children": [{"type": 3, "name": "MAPLE_STANDARD", "value": "n", "user_value": null, "dep": "n", "prompt": "Maple", "cond": "ARCH_CHIP_STM32F103RB && y", "help": "This version is the standard maple board, with STM32F103RBT6."}, {"type": 3, "name": "MAPLE_MINI", "value": "n", "user_value": null, "dep": "n", "prompt": "Maple Mini", "cond": "ARCH_CHIP_STM32F103CB && y", "help": "This version is a mini layout of the normal one, with STM32F103CBT6.\nIt has different bootloader, memory size, and pin layout."}]}, {"type": 3, "name": "MIKROE_FLASH", "value": "n", "user_value": null, "dep": "n", "prompt": "MTD driver for onboard 1M FLASH", "cond": "ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}], "selects": [{"symbol": "MTD", "cond": "ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}, {"symbol": "MTD_M25P", "cond": "ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}, {"symbol": "MTD_SMART", "cond": "ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}, {"symbol": "FS_SMARTFS", "cond": "ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}, {"symbol": "STM32_SPI3", "cond": "ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}, {"symbol": "MTD_BYTE_WRITE", "cond": "ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}], "help": "Configures an MTD device for use with the onboard flash", "children": [{"type": 27, "name": "MIKROE_FLASH_MINOR", "value": "", "user_value": null, "dep": "n", "prompt": "Minor number for the FLASH /dev/smart entry", "cond": "MIKROE_FLASH && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4", "defaults": [{"name": "0", "default": "0", "cond": "MIKROE_FLASH && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}], "help": "Sets the minor number for the FLASH MTD /dev entry"}, {"type": 3, "name": "MIKROE_FLASH_PART", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable partition support on FLASH", "cond": "MIKROE_FLASH && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4", "defaults": [{"name": "n", "default": "n", "cond": "MIKROE_FLASH && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}], "help": "Enables creation of partitions on the FLASH", "children": [{"type": 3, "name": "MIKROE_FLASH_CONFIG_PART", "value": "n", "user_value": null, "dep": "n", "prompt": "Create application config data partition on FLASH", "cond": "MIKROE_FLASH_PART && PLATFORM_CONFIGDATA && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4", "defaults": [{"name": "y", "default": "y", "cond": "MIKROE_FLASH_PART && PLATFORM_CONFIGDATA && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}], "help": "Enables creation of a /dev/config partition on the FLASH", "children": [{"type": 27, "name": "MIKROE_FLASH_CONFIG_PART_NUMBER", "value": "", "user_value": null, "dep": "n", "prompt": "Index number of config partition (in list below)", "cond": "MIKROE_FLASH_CONFIG_PART && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4", "defaults": [{"name": "0", "default": "0", "cond": "MIKROE_FLASH_CONFIG_PART && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}], "help": "Specifies the index number of the config data partition\nfrom the partition list."}]}, {"type": 47, "name": "MIKROE_FLASH_PART_LIST", "value": "", "user_value": null, "dep": "n", "prompt": "Flash partition size list", "cond": "MIKROE_FLASH_PART && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4", "defaults": [{"name": "8,248,768", "default": "8,248,768", "cond": "MIKROE_FLASH_PART && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}], "help": "Comma separated list of partition sizes in KB."}]}]}, {"type": 3, "name": "MIKROE_RAMMTD", "value": "n", "user_value": null, "dep": "n", "prompt": "MTD driver for SMARTFS RAM disk", "cond": "ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}], "selects": [{"symbol": "MTD", "cond": "ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}, {"symbol": "RAMMTD", "cond": "ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}], "help": "Configures an MTD based RAM device for use with SMARTFS.", "children": [{"type": 27, "name": "MIKROE_RAMMTD_MINOR", "value": "", "user_value": null, "dep": "n", "prompt": "Minor number for RAM /dev/smart entry", "cond": "MIKROE_RAMMTD && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4", "defaults": [{"name": "1", "default": "1", "cond": "MIKROE_RAMMTD && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}], "help": "Sets the minor number for the RAM MTD /dev entry"}, {"type": 27, "name": "MIKROE_RAMMTD_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Size in KB of the RAM device to create", "cond": "MIKROE_RAMMTD && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4", "defaults": [{"name": "32", "default": "32", "cond": "MIKROE_RAMMTD && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}], "help": "Sets the size of static RAM allocation for the SMART RAM device"}]}, {"type": 27, "name": "MIKROE_QETIMER", "value": "", "user_value": null, "dep": "n", "prompt": "Timer to use with QE encoder", "cond": "QENCODER && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4", "defaults": [{"name": "3", "default": "3", "cond": "QENCODER && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}]}, {"type": 27, "name": "PM_ALARM_SEC", "value": "", "user_value": null, "dep": "n", "prompt": "PM_STANDBY delay (seconds)", "cond": "PM && RTC_ALARM && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4", "defaults": [{"name": "15", "default": "15", "cond": "PM && RTC_ALARM && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}], "help": "Number of seconds to wait in PM_STANDBY before going to PM_STANDBY mode."}, {"type": 27, "name": "PM_ALARM_NSEC", "value": "", "user_value": null, "dep": "n", "prompt": "PM_STANDBY delay (nanoseconds)", "cond": "PM && RTC_ALARM && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4", "defaults": [{"name": "0", "default": "0", "cond": "PM && RTC_ALARM && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}], "help": "Number of additional nanoseconds to wait in PM_STANDBY before going to PM_STANDBY mode."}, {"type": 3, "name": "PM_SLEEP_WAKEUP", "value": "n", "user_value": null, "dep": "n", "prompt": "PM_SLEEP wake-up alarm", "cond": "PM && RTC_ALARM && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4", "defaults": [{"name": "n", "default": "n", "cond": "PM && RTC_ALARM && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}], "help": "Wake-up of PM_SLEEP mode after a delay and resume normal operation."}, {"type": 27, "name": "PM_SLEEP_WAKEUP_SEC", "value": "", "user_value": null, "dep": "n", "prompt": "PM_SLEEP delay (seconds)", "cond": "PM && RTC_ALARM && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4", "defaults": [{"name": "10", "default": "10", "cond": "PM && RTC_ALARM && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}], "help": "Number of seconds to wait in PM_SLEEP before going to PM_STANDBY mode."}, {"type": 27, "name": "PM_SLEEP_WAKEUP_NSEC", "value": "", "user_value": null, "dep": "n", "prompt": "PM_SLEEP delay (nanoseconds)", "cond": "PM && RTC_ALARM && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4", "defaults": [{"name": "0", "default": "0", "cond": "PM && RTC_ALARM && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4"}], "help": "Number of additional nanoseconds to wait in PM_SLEEP before going to PM_STANDBY mode."}, {"type": 27, "name": "MIRTOO_RELEASE", "value": "", "user_value": null, "dep": "n", "prompt": "Mirtoo release number", "cond": "ARCH_BOARD_MIRTOO && ARCH_BOARD_MIRTOO", "defaults": [{"name": "2", "default": "2", "cond": "ARCH_BOARD_MIRTOO && ARCH_BOARD_MIRTOO"}], "help": "Select the Mirtoo release number.  For example, 1 for release R1."}, {"type": 3, "name": "MOXA_NP51X0", "value": "n", "user_value": null, "dep": "n", "prompt": "NP51x0", "cond": "ARCH_BOARD_MOXA && ARCH_BOARD_MOXA", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_BOARD_MOXA && ARCH_BOARD_MOXA"}], "help": "Moxa NP51x0 series."}, {"type": 27, "name": "LPC1766STK_USBHOST_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "USB host waiter stack size", "cond": "USBHOST && ARCH_BOARD_LPC1766STK && ARCH_BOARD_LPC1766STK", "defaults": [{"name": "1536", "default": "1536", "cond": "USBHOST_HUB && USBHOST && ARCH_BOARD_LPC1766STK && ARCH_BOARD_LPC1766STK"}, {"name": "1024", "default": "1024", "cond": "!USBHOST_HUB && USBHOST && ARCH_BOARD_LPC1766STK && ARCH_BOARD_LPC1766STK"}]}, {"type": 27, "name": "LPC1766STK_USBHOST_PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "USB host waiter task priority", "cond": "USBHOST && ARCH_BOARD_LPC1766STK && ARCH_BOARD_LPC1766STK", "defaults": [{"name": "100", "default": "100", "cond": "USBHOST && ARCH_BOARD_LPC1766STK && ARCH_BOARD_LPC1766STK"}]}, {"type": 27, "name": "STM32F4DISCO_OLIMEXP407_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "USB host waiter stack size", "cond": "USBHOST && ARCH_BOARD_OLIMEX_STM32P407 && ARCH_BOARD_OLIMEX_STM32P407", "defaults": [{"name": "1024", "default": "1024", "cond": "USBHOST && ARCH_BOARD_OLIMEX_STM32P407 && ARCH_BOARD_OLIMEX_STM32P407"}]}, {"type": 27, "name": "STM32F4DISCO_OLIMEXP407_PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "USB host waiter task priority", "cond": "USBHOST && ARCH_BOARD_OLIMEX_STM32P407 && ARCH_BOARD_OLIMEX_STM32P407", "defaults": [{"name": "100", "default": "100", "cond": "USBHOST && ARCH_BOARD_OLIMEX_STM32P407 && ARCH_BOARD_OLIMEX_STM32P407"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Select Console wiring.", "cond": "ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144", "defaults": [{"name": "NUCLEO_CONSOLE_ARDUINO", "default": "n", "cond": "ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144"}], "help": "Select where you will connect the console.\n\nVirtual COM Port:\n\nAdvantage: Use the ST-Link as a console. No Extra wiring\nneded.\n\nDisdvantage: Not the best choice for initanl bring up.\n\nARDUINO Connector:\n\nAdvantage: You have a shield so it is\neasy.\n\nDisdvantage: You loose the use of the\nother functions on PC6, PC7\n\n                STM32F7\n        ARDUIONO FUNCTION  GPIO\n        -- ----- --------- ----\n        DO RX    USART6_RX PG9\n        D1 TX    USART6_TX PG14\n        -- ----- --------- ---\n\n                        OR\n\nMorpho Connector:\n\n                STM32F7\n        MORPHO   FUNCTION  GPIO\n        -------- --------- -----\n        CN12-64  USART8_RX PE0\n        CN11-61  USART8_TX PE1\n        -------- --------- -----", "children": [{"type": 3, "name": "NUCLEO_CONSOLE_ARDUINO", "value": "n", "user_value": null, "dep": "n", "prompt": "ARDUINO Connector", "cond": "y", "selects": [{"symbol": "STM32F7_USART6", "cond": "y"}, {"symbol": "USART6_SERIALDRIVER", "cond": "y"}, {"symbol": "USART6_SERIAL_CONSOLE", "cond": "y"}]}, {"type": 3, "name": "NUCLEO_CONSOLE_VIRTUAL", "value": "n", "user_value": null, "dep": "n", "prompt": "Virtual Comport", "cond": "y", "selects": [{"symbol": "STM32F7_USART3", "cond": "y"}, {"symbol": "USART3_SERIALDRIVER", "cond": "y"}, {"symbol": "USART3_SERIAL_CONSOLE", "cond": "y"}]}, {"type": 3, "name": "NUCLEO_CONSOLE_MORPHO", "value": "n", "user_value": null, "dep": "n", "prompt": "Morpho Connector", "cond": "y", "selects": [{"symbol": "STM32F7_UART8", "cond": "y"}, {"symbol": "UART8_SERIALDRIVER", "cond": "y"}, {"symbol": "UART8_SERIAL_CONSOLE", "cond": "y"}]}, {"type": 3, "name": "NUCLEO_CONSOLE_NONE", "value": "n", "user_value": null, "dep": "n", "prompt": "No Console", "cond": "y"}]}, {"type": 3, "name": "NUCLEO_SPI_TEST", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable SPI test", "cond": "ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144"}], "help": "Enable Spi test - initalize and configure SPI to send\nNUCLEO_SPI_TEST_MESSAGE text. The text is sent on the\nselected SPI Buses with the configured parameters.\nNote the CS lines will not be asserted.", "children": [{"type": 47, "name": "NUCLEO_SPI_TEST_MESSAGE", "value": "", "user_value": null, "dep": "n", "prompt": "Text to Send on SPI Bus(es)", "cond": "NUCLEO_SPI_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144", "defaults": [{"name": "Hello World", "default": "Hello World", "cond": "NUCLEO_SPI_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144"}], "help": "Text to sent on SPI bus(es)"}, {"type": 3, "name": "NUCLEO_SPI1_TEST", "value": "n", "user_value": null, "dep": "n", "prompt": "Test SPI bus 1", "cond": "NUCLEO_SPI_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144", "defaults": [{"name": "n", "default": "n", "cond": "NUCLEO_SPI_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144"}], "help": "Enable Spi test - on SPI BUS 1", "children": [{"type": 27, "name": "NUCLEO_SPI1_TEST_FREQ", "value": "", "user_value": null, "dep": "n", "prompt": "SPI 1 Clock Freq in Hz", "cond": "NUCLEO_SPI1_TEST && NUCLEO_SPI1_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144", "defaults": [{"name": "1000000", "default": "1000000", "cond": "NUCLEO_SPI1_TEST && NUCLEO_SPI1_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144"}], "help": "Sets SPI 1 Clock Freq"}, {"type": 27, "name": "NUCLEO_SPI1_TEST_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "SPI 1 number of bits", "cond": "NUCLEO_SPI1_TEST && NUCLEO_SPI1_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144", "defaults": [{"name": "8", "default": "8", "cond": "NUCLEO_SPI1_TEST && NUCLEO_SPI1_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144"}], "help": "Sets SPI 1 bit length"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SPI BUS 1 Clock Mode", "cond": "NUCLEO_SPI1_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144", "defaults": [{"name": "NUCLEO_SPI1_TEST_MODE3", "default": "n", "cond": "NUCLEO_SPI1_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144"}], "help": "Sets SPI 1 clock mode", "children": [{"type": 3, "name": "NUCLEO_SPI1_TEST_MODE0", "value": "n", "user_value": null, "dep": "n", "prompt": "CPOL=0 CHPHA=0", "cond": "y"}, {"type": 3, "name": "NUCLEO_SPI1_TEST_MODE1", "value": "n", "user_value": null, "dep": "n", "prompt": "CPOL=0 CHPHA=1", "cond": "y"}, {"type": 3, "name": "NUCLEO_SPI1_TEST_MODE2", "value": "n", "user_value": null, "dep": "n", "prompt": "CPOL=1 CHPHA=0", "cond": "y"}, {"type": 3, "name": "NUCLEO_SPI1_TEST_MODE3", "value": "n", "user_value": null, "dep": "n", "prompt": "CPOL=1 CHPHA=1", "cond": "y"}]}]}, {"type": 3, "name": "NUCLEO_SPI2_TEST", "value": "n", "user_value": null, "dep": "n", "prompt": "Test SPI bus 2", "cond": "NUCLEO_SPI_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144", "defaults": [{"name": "n", "default": "n", "cond": "NUCLEO_SPI_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144"}], "help": "Enable Spi test - on SPI BUS 2", "children": [{"type": 27, "name": "NUCLEO_SPI2_TEST_FREQ", "value": "", "user_value": null, "dep": "n", "prompt": "SPI 2 Clock Freq in Hz", "cond": "NUCLEO_SPI2_TEST && NUCLEO_SPI2_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144", "defaults": [{"name": "12000000", "default": "12000000", "cond": "NUCLEO_SPI2_TEST && NUCLEO_SPI2_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144"}], "help": "Sets SPI 2 Clock Freq"}, {"type": 27, "name": "NUCLEO_SPI2_TEST_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "SPI 2 number of bits", "cond": "NUCLEO_SPI2_TEST && NUCLEO_SPI2_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144", "defaults": [{"name": "8", "default": "8", "cond": "NUCLEO_SPI2_TEST && NUCLEO_SPI2_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144"}], "help": "Sets SPI 2 bit length"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SPI BUS 2 Clock Mode", "cond": "NUCLEO_SPI2_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144", "defaults": [{"name": "NUCLEO_SPI2_TEST_MODE3", "default": "n", "cond": "NUCLEO_SPI2_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144"}], "help": "Sets SPI 2 clock mode", "children": [{"type": 3, "name": "NUCLEO_SPI2_TEST_MODE0", "value": "n", "user_value": null, "dep": "n", "prompt": "CPOL=0 CHPHA=0", "cond": "y"}, {"type": 3, "name": "NUCLEO_SPI2_TEST_MODE1", "value": "n", "user_value": null, "dep": "n", "prompt": "CPOL=0 CHPHA=1", "cond": "y"}, {"type": 3, "name": "NUCLEO_SPI2_TEST_MODE2", "value": "n", "user_value": null, "dep": "n", "prompt": "CPOL=1 CHPHA=0", "cond": "y"}, {"type": 3, "name": "NUCLEO_SPI2_TEST_MODE3", "value": "n", "user_value": null, "dep": "n", "prompt": "CPOL=1 CHPHA=1", "cond": "y"}]}]}, {"type": 3, "name": "NUCLEO_SPI3_TEST", "value": "n", "user_value": null, "dep": "n", "prompt": "Test SPI bus 3", "cond": "NUCLEO_SPI_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144", "defaults": [{"name": "n", "default": "n", "cond": "NUCLEO_SPI_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144"}], "help": "Enable Spi test - on SPI BUS 3", "children": [{"type": 27, "name": "NUCLEO_SPI3_TEST_FREQ", "value": "", "user_value": null, "dep": "n", "prompt": "SPI 3 Clock Freq in Hz", "cond": "NUCLEO_SPI3_TEST && NUCLEO_SPI3_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144", "defaults": [{"name": "40000000", "default": "40000000", "cond": "NUCLEO_SPI3_TEST && NUCLEO_SPI3_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144"}], "help": "Sets SPI 3 Clock Freq"}, {"type": 27, "name": "NUCLEO_SPI3_TEST_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "SPI 3 number of bits", "cond": "NUCLEO_SPI3_TEST && NUCLEO_SPI3_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144", "defaults": [{"name": "8", "default": "8", "cond": "NUCLEO_SPI3_TEST && NUCLEO_SPI3_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144"}], "help": "Sets SPI 3 bit length"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SPI BUS 3 Clock Mode", "cond": "NUCLEO_SPI3_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144", "defaults": [{"name": "NUCLEO_SPI3_TEST_MODE3", "default": "n", "cond": "NUCLEO_SPI3_TEST && NUCLEO_SPI_TEST && ARCH_BOARD_NUCLEO_144 && ARCH_BOARD_NUCLEO_144"}], "help": "Sets SPI 3 clock mode", "children": [{"type": 3, "name": "NUCLEO_SPI3_TEST_MODE0", "value": "n", "user_value": null, "dep": "n", "prompt": "CPOL=0 CHPHA=0", "cond": "y"}, {"type": 3, "name": "NUCLEO_SPI3_TEST_MODE1", "value": "n", "user_value": null, "dep": "n", "prompt": "CPOL=0 CHPHA=1", "cond": "y"}, {"type": 3, "name": "NUCLEO_SPI3_TEST_MODE2", "value": "n", "user_value": null, "dep": "n", "prompt": "CPOL=1 CHPHA=0", "cond": "y"}, {"type": 3, "name": "NUCLEO_SPI3_TEST_MODE3", "value": "n", "user_value": null, "dep": "n", "prompt": "CPOL=1 CHPHA=1", "cond": "y"}]}]}]}, {"type": 27, "name": "NUCLEO_F401RE_QETIMER", "value": "", "user_value": null, "dep": "n", "prompt": "Timer to use with QE encoder", "cond": "QENCODER && ARCH_BOARD_NUCLEO_F401RE && (ARCH_BOARD_NUCLEO_F401RE || ARCH_BOARD_NUCLEO_F411RE)", "defaults": [{"name": "3", "default": "3", "cond": "QENCODER && ARCH_BOARD_NUCLEO_F401RE && (ARCH_BOARD_NUCLEO_F401RE || ARCH_BOARD_NUCLEO_F411RE)"}]}, {"type": 3, "name": "NUCLEO_F401RE_AJOY_MINBUTTONS", "value": "n", "user_value": null, "dep": "n", "prompt": "Minimal Joystick Buttons", "cond": "AJOYSTICK && ARCH_BOARD_NUCLEO_F401RE && (ARCH_BOARD_NUCLEO_F401RE || ARCH_BOARD_NUCLEO_F411RE)", "defaults": [{"name": "n", "default": "n", "cond": "!STM32_USART1 && AJOYSTICK && ARCH_BOARD_NUCLEO_F401RE && (ARCH_BOARD_NUCLEO_F401RE || ARCH_BOARD_NUCLEO_F411RE)"}, {"name": "y", "default": "y", "cond": "STM32_USART1 && AJOYSTICK && ARCH_BOARD_NUCLEO_F401RE && (ARCH_BOARD_NUCLEO_F401RE || ARCH_BOARD_NUCLEO_F411RE)"}], "help": "The Itead Joystick shield supports analog X/Y position and up to 5\nbuttons.  Some of these buttons may conflict with other resources\n(Button F, for example, conflicts with the default USART1 pin usage).\nSelecting this option will return the number of buttons to the\nminimal set:  SELECT (joystick down), FIRE (BUTTON B), and JUMP\n(BUTTON A)."}, {"type": 3, "name": "NUCLEO_L476RG_AJOY_MINBUTTONS", "value": "n", "user_value": null, "dep": "n", "prompt": "Minimal Joystick Buttons", "cond": "AJOYSTICK && ARCH_BOARD_NUCLEO_L476RG && ARCH_BOARD_NUCLEO_L476RG", "defaults": [{"name": "n", "default": "n", "cond": "!STM32_USART1 && AJOYSTICK && ARCH_BOARD_NUCLEO_L476RG && ARCH_BOARD_NUCLEO_L476RG"}, {"name": "y", "default": "y", "cond": "STM32_USART1 && AJOYSTICK && ARCH_BOARD_NUCLEO_L476RG && ARCH_BOARD_NUCLEO_L476RG"}], "help": "The Itead Joystick shield supports analog X/Y position and up to 5\nbuttons.  Some of these buttons may conflict with other resources\n(Button F, for example, conflicts with the default USART1 pin usage).\nSelecting this option will return the number of buttons to the\nminimal set:  SELECT (joystick down), FIRE (BUTTON B), and JUMP\n(BUTTON A)."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "CPU Frequency", "cond": "ARCH_BOARD_SAMA5D2_XULT && ARCH_BOARD_SAMA5D2_XULT", "defaults": [{"name": "SAMA5D2XULT_396MHZ", "default": "n", "cond": "ARCH_BOARD_SAMA5D2_XULT && ARCH_BOARD_SAMA5D2_XULT"}], "children": [{"type": 3, "name": "SAMA5D2XULT_384MHZ", "value": "n", "user_value": null, "dep": "n", "prompt": "384 MHz", "cond": "y"}, {"type": 3, "name": "SAMA5D2XULT_396MHZ", "value": "n", "user_value": null, "dep": "n", "prompt": "396 MHz", "cond": "y"}, {"type": 3, "name": "SAMA5D2XULT_528MHZ", "value": "n", "user_value": null, "dep": "n", "prompt": "528 MHz", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "CPU Frequency", "cond": "ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK", "defaults": [{"name": "SAMA5D3xEK_396MHZ", "default": "n", "cond": "ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "children": [{"type": 3, "name": "SAMA5D3xEK_384MHZ", "value": "n", "user_value": null, "dep": "n", "prompt": "384 MHz", "cond": "y"}, {"type": 3, "name": "SAMA5D3xEK_396MHZ", "value": "n", "user_value": null, "dep": "n", "prompt": "396 MHz", "cond": "y"}, {"type": 3, "name": "SAMA5D3xEK_528MHZ", "value": "n", "user_value": null, "dep": "n", "prompt": "528 MHz", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SAMA5D3x-EK DRAM Type", "cond": "SAMA5_DDRCS && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK", "defaults": [{"name": "SAMA5D3xEK_MT47H128M16RT", "default": "n", "cond": "SAMA5_DDRCS && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "children": [{"type": 3, "name": "SAMA5D3xEK_MT47H128M16RT", "value": "n", "user_value": null, "dep": "n", "prompt": "MT47H128M16RT", "cond": "y", "help": "Micron 2Gbit x16 DDR2-1066 128Mb"}, {"type": 3, "name": "SAMA5D3xEK_MT47H64M16HR", "value": "n", "user_value": null, "dep": "n", "prompt": "MT47H64M16HR", "cond": "y", "help": "Micron 1Gbit x16 DDR2-800 64Mb"}]}, {"type": 3, "name": "SAMA5D3xEK_NOREDLED", "value": "n", "user_value": null, "rev_dep": "SAMA5D3xEK_OV2640_DEMO && VIDEO_OV2640 && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK", "dep": "n", "prompt": "Red LED not available", "cond": "ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "help": "By default, both the blue LED and the red LED are used by the\nSAMA5D3x-EK board logic.  However, the PIO associated with the red\nLED (PE24) has other board functions.  For example, PE24 is also the\nISI_RST reset signal to the camera interface.  So when PE24 is not\navailable to control the red LED, this configuration variable should\nbe set so that the LED logic will only used the blue LED."}, {"type": 3, "name": "SAMA5D3xEK_NOR_MAIN", "value": "n", "user_value": null, "dep": "n", "prompt": "Build nor_main", "cond": "SAMA5_BOOT_ISRAM && BUILD_FLAT && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_BOOT_ISRAM && BUILD_FLAT && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "help": "nor_main is a tiny program that runs in ISRAM.  nor_main will enable\nNOR flash then either (1) jump to the program in NOR flash or (2)\nwait for you to break in with GDB to debug the NOR program.", "children": [{"type": 3, "name": "SAMA5D3xEK_NOR_START", "value": "n", "user_value": null, "dep": "n", "prompt": "Start NOR program", "cond": "SAMA5D3xEK_NOR_MAIN && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5D3xEK_NOR_MAIN && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "help": "The default behavior of the NOR boot program is to initialize the\nNOR FLASH at CS0, then patiently wait for you to break into the\nprogram with GDB.  An alternative behavior is enabled with this\noption:  If SAMA5D3xEK_NOR_START is defined, then it will not wait but\nwill, instead, immediately start the program in NOR FLASH."}]}, {"type": 3, "name": "SAMA5D3XEK_NAND_BLOCKMOUNT", "value": "n", "user_value": null, "dep": "n", "prompt": "NAND FLASH auto-mount", "cond": "NSH_ARCHINIT && SAMA5_EBICS3_NAND && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK", "defaults": [{"name": "n", "default": "n", "cond": "NSH_ARCHINIT && SAMA5_EBICS3_NAND && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "help": "Automatically initialize the NAND FLASH driver when NSH starts.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "NAND FLASH configuration", "cond": "SAMA5D3XEK_NAND_BLOCKMOUNT && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK", "defaults": [{"name": "SAMA5D3xEK_NAND_NXFFS", "default": "n", "cond": "SAMA5D3XEK_NAND_BLOCKMOUNT && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "children": [{"type": 3, "name": "SAMA5D3xEK_NAND_FTL", "value": "n", "user_value": null, "dep": "n", "prompt": "Create NAND FLASH block driver", "cond": "MTD && MTD_NAND && y", "help": "Create the MTD driver for the NAND and \"wrap\" the NAND as a standard\nblock driver that could then, for example, be mounted using FAT or\nany other file system.  Any file system may be used, but there will\nbe no wear-leveling.\n\nNOTE: This options is not currently recommended.  There is not now\nNuttX file system that can handle the NAND back blocks or performs\nwear-leveling other than NXFFS and NXFFS does not use a block driver\nbut, rather, operates directly upon the NAND MTD device."}, {"type": 3, "name": "SAMA5D3xEK_NAND_NXFFS", "value": "n", "user_value": null, "dep": "n", "prompt": "Create NAND FLASH NXFFS file system", "cond": "MTD && MTD_NAND && FS_NXFFS && NXFFS_NAND && y", "help": "Create the MTD driver for the NAND and mount the NAND device as\na wear-leveling, NuttX FLASH file system (NXFFS).  The downside of\nNXFFS is that it can be very slow.\n\nNOTE: NXFFS is recommended because (1) it can handle the NAND back\nblocks and (1) performs wear-leveling."}]}]}, {"type": 3, "name": "SAMA5D3xEK_AT25_BLOCKMOUNT", "value": "n", "user_value": null, "dep": "n", "prompt": "AT25 serial FLASH auto-mount", "cond": "NSH_ARCHINIT && SAMA5_SPI0 && MTD_AT25 && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK", "defaults": [{"name": "n", "default": "n", "cond": "NSH_ARCHINIT && SAMA5_SPI0 && MTD_AT25 && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "help": "Automatically initialize the AT25 SPI FLASH driver when NSH starts.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "AT25 serial FLASH configuration", "cond": "SAMA5D3xEK_AT25_BLOCKMOUNT && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK", "defaults": [{"name": "SAMA5D3xEK_AT25_FTL", "default": "n", "cond": "SAMA5D3xEK_AT25_BLOCKMOUNT && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "children": [{"type": 3, "name": "SAMA5D3xEK_AT25_FTL", "value": "n", "user_value": null, "dep": "n", "prompt": "Create AT25 Serial FLASH block driver", "cond": "y", "help": "Create the MTD driver for the AT25 and \"wrap\" the AT25 as a standard\nblock driver that could then, for example, be mounted using FAT or\nany other file system.  Any file system may be used, but there will\nbe no wear-leveling."}, {"type": 3, "name": "SAMA5D3xEK_AT25_NXFFS", "value": "n", "user_value": null, "dep": "n", "prompt": "Create AT25 serial FLASH NXFFS file system", "cond": "FS_NXFFS && y", "help": "Create the MTD driver for the AT25 and mount the AT25 device as\na wear-leveling, NuttX FLASH file system (NXFFS).  The downside of\nNXFFS is that it can be very slow."}]}]}, {"type": 3, "name": "SAMA5D3xEK_AT24_BLOCKMOUNT", "value": "n", "user_value": null, "dep": "n", "prompt": "AT24 Serial EEPROM auto-mount", "cond": "NSH_ARCHINIT && SAMA5_TWI0 && MTD_AT24XX && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK", "defaults": [{"name": "n", "default": "n", "cond": "NSH_ARCHINIT && SAMA5_TWI0 && MTD_AT24XX && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "help": "Automatically initialize the AT24 SPI EEPROM driver when NSH starts.\n\nThe Serial EEPROM was mounted on an external adaptor board and\nconnected to the SAMA5D3x-EK thusly:\n\n- VCC -- VCC\n- GND -- GND\n- TWCK0(PA31) -- SCL\n- TWD0(PA30)  -- SDA\n\nBy default, PA30 and PA31 are SWJ-DP pins, it can be used as a pin\nfor TWI peripheral in the end application.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "AT24 serial EPPROM configuration", "cond": "SAMA5D3xEK_AT24_BLOCKMOUNT && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK", "defaults": [{"name": "SAMA5D3xEK_AT24_FTL", "default": "n", "cond": "SAMA5D3xEK_AT24_BLOCKMOUNT && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "children": [{"type": 3, "name": "SAMA5D3xEK_AT24_FTL", "value": "n", "user_value": null, "dep": "n", "prompt": "Create AT24 block driver", "cond": "y", "help": "Create the MTD driver for the AT24 and \"wrap\" the AT24 as a standard\nblock driver that could then, for example, be mounted using FAT or\nany other file system.  Any file system may be used, but there will\nbe no wear-leveling."}, {"type": 3, "name": "SAMA5D3xEK_AT24_NXFFS", "value": "n", "user_value": null, "dep": "n", "prompt": "Create AT24 NXFFS file system", "cond": "FS_NXFFS && y", "help": "Create the MTD driver for the AT24 and mount the AT24 device as\na wear-leveling, NuttX FLASH file system (NXFFS).  The downside of\nNXFFS is that it can be very slow."}]}]}, {"type": 27, "name": "SAMA5D3xEK_USBHOST_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "USB host waiter stack size", "cond": "USBHOST && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK", "defaults": [{"name": "1536", "default": "1536", "cond": "USBHOST_HUB && USBHOST && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}, {"name": "1024", "default": "1024", "cond": "!USBHOST_HUB && USBHOST && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}]}, {"type": 27, "name": "SAMA5D3xEK_USBHOST_PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "USB host waiter task priority", "cond": "USBHOST && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK", "defaults": [{"name": "100", "default": "100", "cond": "USBHOST && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}]}, {"type": 27, "name": "SAMA5D3xEK_TSD_DEVMINOR", "value": "", "user_value": null, "dep": "n", "prompt": "Touchscreen device minor", "cond": "SAMA5_TSD && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_TSD && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "help": "This touchscreen will be register as /dev/inputN where the value of\nN is provided by this configuration setting."}, {"type": 27, "name": "SAMA5D3xEK_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "PWM channel number", "cond": "PWM && SAMA5_PWM && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_PWM_CHAN0 && PWM && SAMA5_PWM && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}, {"name": "1", "default": "1", "cond": "SAMA5_PWM_CHAN1 && PWM && SAMA5_PWM && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}, {"name": "2", "default": "2", "cond": "SAMA5_PWM_CHAN2 && PWM && SAMA5_PWM && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}, {"name": "3", "default": "3", "cond": "SAMA5_PWM_CHAN3 && PWM && SAMA5_PWM && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "ranges": [{"min": "0", "max": "3", "cond": "PWM && SAMA5_PWM && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "help": "Selects the PWM channel number that will be used to perform the PWM\ntest.  See apps/examples/pwm."}, {"type": 27, "name": "SAMA5D3xEK_SSC_PORT", "value": "", "user_value": null, "dep": "n", "prompt": "SSC port number", "cond": "SAMA5_SSC0 && SAMA5_SSC1 && AUDIO_I2SCHAR && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_SSC0 && SAMA5_SSC1 && AUDIO_I2SCHAR && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "ranges": [{"min": "0", "max": "1", "cond": "SAMA5_SSC0 && SAMA5_SSC1 && AUDIO_I2SCHAR && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "help": "Specify the I2S port to use, i.e., 0 for SSC0 or 1 for SSC1"}, {"type": 27, "name": "SAMA5D3xEK_SSC_PORT", "value": "", "user_value": null, "dep": "n", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_SSC0 && !SAMA5_SSC1 && AUDIO_I2SCHAR && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}]}, {"type": 27, "name": "SAMA5D3xEK_SSC_PORT", "value": "", "user_value": null, "dep": "n", "defaults": [{"name": "1", "default": "1", "cond": "!SAMA5_SSC0 && SAMA5_SSC1 && AUDIO_I2SCHAR && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}]}, {"type": 27, "name": "SAMA5D3xEK_I2SCHAR_MINOR", "value": "", "user_value": null, "dep": "n", "prompt": "I2S character driver minor number", "cond": "AUDIO_I2SCHAR && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK", "defaults": [{"name": "0", "default": "0", "cond": "AUDIO_I2SCHAR && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "help": "The minor device number to use when registering the I2S character\ndevice.  The driver will be registered at /dev/is2charN where N is\nthe value provided by this setting."}, {"type": 3, "name": "SAMA5D3xEK_OV2640_DEMO", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMA5 OV2640 camera demo", "cond": "VIDEO_OV2640 && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK", "defaults": [{"name": "n", "default": "n", "cond": "VIDEO_OV2640 && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "selects": [{"symbol": "SAMA5D3xEK_NOREDLED", "cond": "VIDEO_OV2640 && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "help": "Enable the SAMA5 OV2640 camera demo"}, {"type": 3, "name": "SAMA5D3xEK_SLOWCLOCK", "value": "n", "user_value": null, "rev_dep": "SAMA5D3xEK_WM8904_SRCMAIN && y", "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "SCHED_TICKLESS && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}, {"name": "n", "default": "n", "cond": "!SCHED_TICKLESS && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}]}, {"type": 27, "name": "SAMA5D3xEK_WM8904_I2CFREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "WM8904 I2C Frequency", "cond": "AUDIO_WM8904 && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK", "defaults": [{"name": "400000", "default": "400000", "cond": "AUDIO_WM8904 && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "ranges": [{"min": "1", "max": "400000", "cond": "AUDIO_WM8904 && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "help": "This option selects the I2C frequency to use when communicating with\nthe WM8904 device.  The default, 400KHz, is the maximum supported by\nthe WM8904.  If you have problems communicating with the WM8904,\nthen you might want to try lowering this rate."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "WM8904 MCLK source", "cond": "AUDIO_WM8904 && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK", "defaults": [{"name": "SAMA5D3xEK_WM8904_SRCMAIN", "default": "n", "cond": "AUDIO_WM8904 && ARCH_BOARD_SAMA5D3X_EK && ARCH_BOARD_SAMA5D3X_EK"}], "children": [{"type": 3, "name": "SAMA5D3xEK_WM8904_SRCMAIN", "value": "n", "user_value": null, "dep": "n", "prompt": "Main Clock (12MHz)", "cond": "y", "selects": [{"symbol": "SAMA5D3xEK_SLOWCLOCK", "cond": "y"}]}, {"type": 3, "name": "SAMA5D3xEK_WM8904_SRCSCK", "value": "n", "user_value": null, "dep": "n", "prompt": "Slow XTAL (32.768KHz)", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "CPU Frequency", "cond": "ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED", "defaults": [{"name": "SAMA5D3XPLAINED_396MHZ", "default": "n", "cond": "ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED"}], "children": [{"type": 3, "name": "SAMA5D3XPLAINED_384MHZ", "value": "n", "user_value": null, "dep": "n", "prompt": "384 MHz", "cond": "y"}, {"type": 3, "name": "SAMA5D3XPLAINED_396MHZ", "value": "n", "user_value": null, "dep": "n", "prompt": "396 MHz", "cond": "y"}, {"type": 3, "name": "SAMA5D3XPLAINED_528MHZ", "value": "n", "user_value": null, "dep": "n", "prompt": "528 MHz", "cond": "y"}]}, {"type": 3, "name": "SAMA5D3XPLAINED_SLOWCLOCK", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "SCHED_TICKLESS && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED"}, {"name": "n", "default": "n", "cond": "!SCHED_TICKLESS && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SAMA5D3-Xplained DRAM Type", "cond": "SAMA5_DDRCS && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED", "defaults": [{"name": "SAMA5D3XPLAINED_MT47H128M16RT", "default": "n", "cond": "SAMA5_DDRCS && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED"}], "children": [{"type": 3, "name": "SAMA5D3XPLAINED_MT47H128M16RT", "value": "n", "user_value": null, "dep": "n", "prompt": "MT47H128M16RT", "cond": "y", "help": "Micron 2Gbit x16 DDR2-1066 128Mb"}, {"type": 3, "name": "SAMA5D3XPLAINED_MT47H64M16HR", "value": "n", "user_value": null, "dep": "n", "prompt": "MT47H64M16HR", "cond": "y", "help": "Micron 1Gbit x16 DDR2-800 64Mb"}]}, {"type": 3, "name": "SAMA5D3XPLAINED_NAND_BLOCKMOUNT", "value": "n", "user_value": null, "dep": "n", "prompt": "NAND FLASH auto-mount", "cond": "NSH_ARCHINIT && SAMA5_EBICS3_NAND && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED", "defaults": [{"name": "n", "default": "n", "cond": "NSH_ARCHINIT && SAMA5_EBICS3_NAND && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED"}], "help": "Automatically initialize the NAND FLASH driver when NSH starts.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "NAND FLASH configuration", "cond": "SAMA5D3XPLAINED_NAND_BLOCKMOUNT && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED", "defaults": [{"name": "SAMA5D3XPLAINED_NAND_NXFFS", "default": "n", "cond": "SAMA5D3XPLAINED_NAND_BLOCKMOUNT && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED"}], "children": [{"type": 3, "name": "SAMA5D3XPLAINED_NAND_FTL", "value": "n", "user_value": null, "dep": "n", "prompt": "Create NAND FLASH block driver", "cond": "MTD && MTD_NAND && y", "help": "Create the MTD driver for the NAND and \"wrap\" the NAND as a standard\nblock driver that could then, for example, be mounted using FAT or\nany other file system.  Any file system may be used, but there will\nbe no wear-leveling.\n\nNOTE: This options is not currently recommended.  There is not now\nNuttX file system that can handle the NAND back blocks or performs\nwear-leveling other than NXFFS and NXFFS does not use a block driver\nbut, rather, operates directly upon the NAND MTD device."}, {"type": 3, "name": "SAMA5D3XPLAINED_NAND_NXFFS", "value": "n", "user_value": null, "dep": "n", "prompt": "Create NAND FLASH NXFFS file system", "cond": "MTD && MTD_NAND && FS_NXFFS && NXFFS_NAND && y", "help": "Create the MTD driver for the NAND and mount the NAND device as\na wear-leveling, NuttX FLASH file system (NXFFS).  The downside of\nNXFFS is that it can be very slow.\n\nNOTE: NXFFS is recommended because (1) it can handle the NAND back\nblocks and (1) performs wear-leveling."}]}]}, {"type": 3, "name": "SAMA5D3XPLAINED_AT25_AUTOMOUNT", "value": "n", "user_value": null, "dep": "n", "prompt": "AT25 serial FLASH auto-mount", "cond": "NSH_ARCHINIT && SAMA5_SPI0 && MTD_AT25 && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED", "defaults": [{"name": "n", "default": "n", "cond": "NSH_ARCHINIT && SAMA5_SPI0 && MTD_AT25 && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED"}], "help": "Automatically initialize the AT25 SPI FLASH driver when NSH starts.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "AT25 serial FLASH configuration", "cond": "SAMA5D3XPLAINED_AT25_AUTOMOUNT && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED", "defaults": [{"name": "SAMA5D3XPLAINED_AT25_FTL", "default": "n", "cond": "SAMA5D3XPLAINED_AT25_AUTOMOUNT && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED"}], "children": [{"type": 3, "name": "SAMA5D3XPLAINED_AT25_FTL", "value": "n", "user_value": null, "dep": "n", "prompt": "Create AT25 Serial FLASH block driver", "cond": "y", "help": "Create the MTD driver for the AT25 and \"wrap\" the AT25 as a standard\nblock driver that could then, for example, be mounted using FAT or\nany other file system.  Any file system may be used, but there will\nbe no wear-leveling."}, {"type": 3, "name": "SAMA5D3XPLAINED_AT25_NXFFS", "value": "n", "user_value": null, "dep": "n", "prompt": "Create AT25 serial FLASH NXFFS file system", "cond": "FS_NXFFS && y", "help": "Create the MTD driver for the AT25 and mount the AT25 device as\na wear-leveling, NuttX FLASH file system (NXFFS).  The downside of\nNXFFS is that it can be very slow."}]}]}, {"type": 27, "name": "SAMA5D3XPLAINED_USBHOST_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "USB host waiter stack size", "cond": "USBHOST && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED", "defaults": [{"name": "1536", "default": "1536", "cond": "USBHOST_HUB && USBHOST && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED"}, {"name": "1024", "default": "1024", "cond": "!USBHOST_HUB && USBHOST && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED"}]}, {"type": 27, "name": "SAMA5D3XPLAINED_USBHOST_PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "USB host waiter task priority", "cond": "USBHOST && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED", "defaults": [{"name": "100", "default": "100", "cond": "USBHOST && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED"}]}, {"type": 27, "name": "SAMA5D3XPLAINED_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "PWM channel number", "cond": "PWM && SAMA5_PWM && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_PWM_CHAN0 && PWM && SAMA5_PWM && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED"}, {"name": "1", "default": "1", "cond": "SAMA5_PWM_CHAN1 && PWM && SAMA5_PWM && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED"}, {"name": "2", "default": "2", "cond": "SAMA5_PWM_CHAN2 && PWM && SAMA5_PWM && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED"}, {"name": "3", "default": "3", "cond": "SAMA5_PWM_CHAN3 && PWM && SAMA5_PWM && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED"}], "ranges": [{"min": "0", "max": "3", "cond": "PWM && SAMA5_PWM && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED"}], "help": "Selects the PWM channel number that will be used to perform the PWM\ntest.  See apps/examples/pwm."}, {"type": 27, "name": "SAMA5D3XPLAINED_SSC_PORT", "value": "", "user_value": null, "dep": "n", "prompt": "SSC port number", "cond": "SAMA5_SSC0 && SAMA5_SSC1 && AUDIO_I2SCHAR && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_SSC0 && SAMA5_SSC1 && AUDIO_I2SCHAR && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED"}], "ranges": [{"min": "0", "max": "1", "cond": "SAMA5_SSC0 && SAMA5_SSC1 && AUDIO_I2SCHAR && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED"}], "help": "Specify the I2S port to use, i.e., 0 for SSC0 or 1 for SSC1"}, {"type": 27, "name": "SAMA5D3XPLAINED_SSC_PORT", "value": "", "user_value": null, "dep": "n", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_SSC0 && !SAMA5_SSC1 && AUDIO_I2SCHAR && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED"}]}, {"type": 27, "name": "SAMA5D3XPLAINED_SSC_PORT", "value": "", "user_value": null, "dep": "n", "defaults": [{"name": "1", "default": "1", "cond": "!SAMA5_SSC0 && SAMA5_SSC1 && AUDIO_I2SCHAR && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED"}]}, {"type": 27, "name": "SAMA5D3XPLAINED_I2SCHAR_MINOR", "value": "", "user_value": null, "dep": "n", "prompt": "I2S character driver minor number", "cond": "AUDIO_I2SCHAR && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED", "defaults": [{"name": "0", "default": "0", "cond": "AUDIO_I2SCHAR && (SAMA5_SSC0 || SAMA5_SSC1) && ARCH_BOARD_SAMA5D3_XPLAINED && ARCH_BOARD_SAMA5D3_XPLAINED"}], "help": "The minor device number to use when registering the I2S character\ndevice.  The driver will be registered at /dev/is2charN where N is\nthe value provided by this setting."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SAMA5D4-EK Board Version", "cond": "ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "SAMA5D4_MB_REVC", "default": "n", "cond": "ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "children": [{"type": 3, "name": "SAMA5D4_MB_REVC", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMA5D44-MB Rev. C", "cond": "y"}, {"type": 3, "name": "SAMA5D4_MB_REVE", "value": "n", "user_value": null, "dep": "n", "prompt": "SAMA5D44-MB Rev. E", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "CPU Frequency", "cond": "ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "SAMA5D4EK_396MHZ", "default": "n", "cond": "ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "children": [{"type": 3, "name": "SAMA5D4EK_384MHZ", "value": "n", "user_value": null, "dep": "n", "prompt": "384 MHz", "cond": "y"}, {"type": 3, "name": "SAMA5D4EK_396MHZ", "value": "n", "user_value": null, "dep": "n", "prompt": "396 MHz", "cond": "y"}, {"type": 3, "name": "SAMA5D4EK_528MHZ", "value": "n", "user_value": null, "dep": "n", "prompt": "528 MHz", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SAMA4D4-EK DRAM Type", "cond": "SAMA5_DDRCS && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "SAMA5D4EK_MT47H128M16RT", "default": "n", "cond": "SAMA5_DDRCS && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "children": [{"type": 3, "name": "SAMA5D4EK_MT47H128M16RT", "value": "n", "user_value": null, "dep": "n", "prompt": "MT47H128M16RT", "cond": "y", "help": "Micron 2Gbit x16 DDR2-1066 128Mb"}, {"type": 3, "name": "SAMA5D4EK_MT47H64M16HR", "value": "n", "user_value": null, "dep": "n", "prompt": "MT47H64M16HR", "cond": "y", "help": "Micron 1Gbit x16 DDR2-800 64Mb"}]}, {"type": 3, "name": "SAMA5D4EK_DRAM_MAIN", "value": "n", "user_value": null, "dep": "n", "prompt": "Build dram_main", "cond": "SAMA5_BOOT_ISRAM && BUILD_FLAT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_BOOT_ISRAM && BUILD_FLAT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "help": "dram_main is a tiny program that runs in ISRAM.  dram_main will\nenable SDRAM and load an Intel HEX program into SDRAM over the\nserial console. Then it will either (1) jump to the program in\nDRAM at address 0x2000:0000 (2) wait for you to break in with GDB to\ndebug the SDRAM program.  These different behaviors are controlled\nby SAMA5D4EK_DRAM_START.\n\nNOTE: If you use this boot loader, then your program must be built at\norigin 0x2000:0000, not at 0x2000:8000 as is customary with U-Boot.", "children": [{"type": 3, "name": "SAMA5D4EK_DRAM_START", "value": "n", "user_value": null, "dep": "n", "prompt": "Start DRAM program", "cond": "SAMA5D4EK_DRAM_MAIN && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5D4EK_DRAM_MAIN && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "help": "The default behavior of the DRAM boot program is to initialize the\nDRAM, then patiently wait for you to break into the program with GDB.\nAn alternative behavior is enabled with this option:  If\nSAMA5D4EK_DRAM_START is defined, then it will not wait but will,\ninstead, immediately start the program in DRAM."}]}, {"type": 3, "name": "SAMA5D4EK_AT25_MAIN", "value": "n", "user_value": null, "dep": "n", "prompt": "Build at25_main", "cond": "SAMA5_BOOT_ISRAM && BUILD_FLAT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_BOOT_ISRAM && BUILD_FLAT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "help": "at25_main is a tiny program that runs in ISRAM.  at25_main will\nenable SDRAM and configure the AT25 Serial FLASH.  It will prompt\nand then load an Intel HEX program into SDRAM over the serial\nconsole. If the program is successfully loaded in SDRAM, at25_main\nwill copy the program at the beginning of the AT26 Serial FLASH.\nIf the jumpering is set correctly, the SAMA5D4 RomBOOT loader will\nthen boot the program from the serial FLASH the next time that it\nreset.", "children": [{"type": 27, "name": "SAMA5D4EK_AT25_PROGSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "AT25 partition size", "cond": "SAMA5D4EK_AT25_MAIN && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "131072", "default": "131072", "cond": "SAMA5D4EK_AT25_MAIN && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "help": "This is the size of the partition at the beginning to the AT25\nserial FLASH that will be used to hold the boot program.  Since\nthis program must run from SRAM, there would be no purpose int\nmaking this size any larger than the size of the internal SRAM."}]}, {"type": 3, "name": "SAMA5D4EK_DRAM_BOOT", "value": "n", "user_value": null, "dep": "n", "prompt": "Using DRAM boot loader", "cond": "SAMA5_BOOT_SDRAM && !SAMA5D4EK_DRAM_MAIN && !SAMA5D4EK_AT25_MAIN && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "y", "default": "y", "cond": "SAMA5_BOOT_SDRAM && !SAMA5D4EK_DRAM_MAIN && !SAMA5D4EK_AT25_MAIN && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "help": "Select this option if you are going to boot using the sdram_main\nbootloader (created with SAMA5D4EK_DRAM_MAIN=y).  This selection\nwill simply origin your program at 0x2000:0000 as required by the\nsdram_main bootloader (vs. 0x2000:8000 as required by U-Boot)."}, {"type": 3, "name": "SAMA5D4EK_NAND_BLOCKMOUNT", "value": "n", "user_value": null, "dep": "n", "prompt": "NAND FLASH auto-mount", "cond": "NSH_ARCHINIT && SAMA5_EBICS3_NAND && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "n", "default": "n", "cond": "NSH_ARCHINIT && SAMA5_EBICS3_NAND && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "help": "Automatically initialize the NAND FLASH driver when NSH starts.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "NAND FLASH configuration", "cond": "SAMA5D4EK_NAND_BLOCKMOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "SAMA5D4EK_NAND_NXFFS", "default": "n", "cond": "SAMA5D4EK_NAND_BLOCKMOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "children": [{"type": 3, "name": "SAMA5D4EK_NAND_FTL", "value": "n", "user_value": null, "dep": "n", "prompt": "Create NAND FLASH block driver", "cond": "MTD && MTD_NAND && y", "help": "Create the MTD driver for the NAND and \"wrap\" the NAND as a standard\nblock driver that could then, for example, be mounted using FAT or\nany other file system.  Any file system may be used, but there will\nbe no wear-leveling.\n\nNOTE: This options is not currently recommended.  There is not now\nNuttX file system that can handle the NAND back blocks or performs\nwear-leveling other than NXFFS and NXFFS does not use a block driver\nbut, rather, operates directly upon the NAND MTD device."}, {"type": 3, "name": "SAMA5D4EK_NAND_NXFFS", "value": "n", "user_value": null, "dep": "n", "prompt": "Create NAND FLASH NXFFS file system", "cond": "MTD && MTD_NAND && FS_NXFFS && NXFFS_NAND && y", "help": "Create the MTD driver for the NAND and mount the NAND device as\na wear-leveling, NuttX FLASH file system (NXFFS).  The downside of\nNXFFS is that it can be very slow.\n\nNOTE: NXFFS is recommended because (1) it can handle the NAND back\nblocks and (1) performs wear-leveling."}]}]}, {"type": 3, "name": "SAMA5D4EK_AT25_BLOCKMOUNT", "value": "n", "user_value": null, "dep": "n", "prompt": "AT25 serial FLASH auto-mount", "cond": "(NSH_ARCHINIT || SAMA5D4EK_AT25_MAIN) && SAMA5_SPI0 && MTD_AT25 && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "n", "default": "n", "cond": "(NSH_ARCHINIT || SAMA5D4EK_AT25_MAIN) && SAMA5_SPI0 && MTD_AT25 && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "help": "Automatically initialize the AT25 SPI FLASH driver when NSH starts.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "AT25 serial FLASH configuration", "cond": "SAMA5D4EK_AT25_BLOCKMOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "SAMA5D4EK_AT25_FTL", "default": "n", "cond": "SAMA5D4EK_AT25_BLOCKMOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "children": [{"type": 3, "name": "SAMA5D4EK_AT25_FTL", "value": "n", "user_value": null, "dep": "n", "prompt": "Create AT25 Serial FLASH block driver", "cond": "y", "help": "Create the MTD driver for the AT25 and \"wrap\" the AT25 as a standard\nblock driver that could then, for example, be mounted using FAT or\nany other file system.  Any file system may be used, but there will\nbe no wear-leveling."}, {"type": 3, "name": "SAMA5D4EK_AT25_CHARDEV", "value": "n", "user_value": null, "dep": "n", "prompt": "Create AT25 Serial FLASH character driver", "cond": "y", "help": "Create the MTD driver for the AT25 and \"wrap\" the AT25 as a standard\ncharacter driver that could then, for example, via simple open, close,\nread, write file system operations.  There will be no wear-leveling\nin this configuration."}, {"type": 3, "name": "SAMA5D4EK_AT25_NXFFS", "value": "n", "user_value": null, "dep": "n", "prompt": "Create AT25 serial FLASH NXFFS file system", "cond": "FS_NXFFS && y", "help": "Create the MTD driver for the AT25 and mount the AT25 device as\na wear-leveling, NuttX FLASH file system (NXFFS).  The downside of\nNXFFS is that it can be very slow."}]}]}, {"type": 3, "name": "SAMA5D4EK_HSMCI0_AUTOMOUNT", "value": "n", "user_value": null, "dep": "n", "prompt": "HSMCI0 automounter", "cond": "SAMA5_HSMCI0 && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HSMCI0 && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "children": [{"type": 47, "name": "SAMA5D4EK_HSMCI0_AUTOMOUNT_FSTYPE", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI0 file system type", "cond": "SAMA5D4EK_HSMCI0_AUTOMOUNT && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "vfat", "default": "vfat", "cond": "SAMA5D4EK_HSMCI0_AUTOMOUNT && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}, {"type": 47, "name": "SAMA5D4EK_HSMCI0_AUTOMOUNT_BLKDEV", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI0 block device", "cond": "SAMA5D4EK_HSMCI0_AUTOMOUNT && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "/dev/mmcsd0", "default": "/dev/mmcsd0", "cond": "SAMA5D4EK_HSMCI0_AUTOMOUNT && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}, {"type": 47, "name": "SAMA5D4EK_HSMCI0_AUTOMOUNT_MOUNTPOINT", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI0 mount point", "cond": "SAMA5D4EK_HSMCI0_AUTOMOUNT && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "/mnt/sdcard0", "default": "/mnt/sdcard0", "cond": "SAMA5D4EK_HSMCI0_AUTOMOUNT && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}, {"type": 27, "name": "SAMA5D4EK_HSMCI0_AUTOMOUNT_DDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI0 debounce delay (milliseconds)", "cond": "SAMA5D4EK_HSMCI0_AUTOMOUNT && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "1000", "default": "1000", "cond": "SAMA5D4EK_HSMCI0_AUTOMOUNT && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}, {"type": 27, "name": "SAMA5D4EK_HSMCI0_AUTOMOUNT_UDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI0 unmount retry delay (milliseconds)", "cond": "SAMA5D4EK_HSMCI0_AUTOMOUNT && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "2000", "default": "2000", "cond": "SAMA5D4EK_HSMCI0_AUTOMOUNT && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}]}, {"type": 3, "name": "SAMA5D4EK_HSMCI1_AUTOMOUNT", "value": "n", "user_value": null, "dep": "n", "prompt": "HSMCI1 automounter", "cond": "SAMA5_HSMCI1 && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HSMCI1 && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "children": [{"type": 47, "name": "SAMA5D4EK_HSMCI1_AUTOMOUNT_FSTYPE", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI1 file system type", "cond": "SAMA5D4EK_HSMCI1_AUTOMOUNT && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "vfat", "default": "vfat", "cond": "SAMA5D4EK_HSMCI1_AUTOMOUNT && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}, {"type": 47, "name": "SAMA5D4EK_HSMCI1_AUTOMOUNT_BLKDEV", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI1 block device", "cond": "SAMA5D4EK_HSMCI1_AUTOMOUNT && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "/dev/mmcsd1", "default": "/dev/mmcsd1", "cond": "SAMA5D4EK_HSMCI1_AUTOMOUNT && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}, {"type": 47, "name": "SAMA5D4EK_HSMCI1_AUTOMOUNT_MOUNTPOINT", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI1 mount point", "cond": "SAMA5D4EK_HSMCI1_AUTOMOUNT && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "/mnt/sdcard1", "default": "/mnt/sdcard1", "cond": "SAMA5D4EK_HSMCI1_AUTOMOUNT && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}, {"type": 27, "name": "SAMA5D4EK_HSMCI1_AUTOMOUNT_DDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI1 debounce delay (milliseconds)", "cond": "SAMA5D4EK_HSMCI1_AUTOMOUNT && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "1000", "default": "1000", "cond": "SAMA5D4EK_HSMCI1_AUTOMOUNT && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}, {"type": 27, "name": "SAMA5D4EK_HSMCI1_AUTOMOUNT_UDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI1 unmount retry delay (milliseconds)", "cond": "SAMA5D4EK_HSMCI1_AUTOMOUNT && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "2000", "default": "2000", "cond": "SAMA5D4EK_HSMCI1_AUTOMOUNT && FS_AUTOMOUNTER && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}]}, {"type": 3, "name": "SAMA5D4EK_HSMCI0_MOUNT", "value": "n", "user_value": null, "dep": "n", "prompt": "HSMCI0 boot mount", "cond": "SAMA5_HSMCI0 && !SAMA5D4EK_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HSMCI0 && !SAMA5D4EK_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "children": [{"type": 47, "name": "SAMA5D4EK_HSMCI0_MOUNT_FSTYPE", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI0 file system type", "cond": "SAMA5D4EK_HSMCI0_MOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "vfat", "default": "vfat", "cond": "SAMA5D4EK_HSMCI0_MOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}, {"type": 47, "name": "SAMA5D4EK_HSMCI0_MOUNT_BLKDEV", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI0 block device", "cond": "SAMA5D4EK_HSMCI0_MOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "/dev/mmcsd0", "default": "/dev/mmcsd0", "cond": "SAMA5D4EK_HSMCI0_MOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}, {"type": 47, "name": "SAMA5D4EK_HSMCI0_MOUNT_MOUNTPOINT", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI0 mount point", "cond": "SAMA5D4EK_HSMCI0_MOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "/bin", "default": "/bin", "cond": "SAMA5D4EK_HSMCI0_MOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}]}, {"type": 3, "name": "SAMA5D4EK_HSMCI1_MOUNT", "value": "n", "user_value": null, "dep": "n", "prompt": "HSMCI1 boot mount", "cond": "SAMA5_HSMCI1 && !SAMA5D4EK_HSMCI1_AUTOMOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "n", "default": "n", "cond": "SAMA5_HSMCI1 && !SAMA5D4EK_HSMCI1_AUTOMOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "children": [{"type": 47, "name": "SAMA5D4EK_HSMCI1_MOUNT_FSTYPE", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI1 file system type", "cond": "SAMA5D4EK_HSMCI1_MOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "vfat", "default": "vfat", "cond": "SAMA5D4EK_HSMCI1_MOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}, {"type": 47, "name": "SAMA5D4EK_HSMCI1_MOUNT_BLKDEV", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI1 block device", "cond": "SAMA5D4EK_HSMCI1_MOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "/dev/mmcsd1", "default": "/dev/mmcsd1", "cond": "SAMA5D4EK_HSMCI1_MOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}, {"type": 47, "name": "SAMA5D4EK_HSMCI1_MOUNT_MOUNTPOINT", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI1 mount point", "cond": "SAMA5D4EK_HSMCI1_MOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "/bin", "default": "/bin", "cond": "SAMA5D4EK_HSMCI1_MOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}]}, {"type": 3, "name": "SAMA5D4EK_ROMFS_MOUNT", "value": "n", "user_value": null, "dep": "n", "prompt": "ROMFS boot mount", "cond": "FS_ROMFS && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "n", "default": "n", "cond": "FS_ROMFS && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "help": "By selecting this option, you an build mount a ROMFS file system as\npart of the system boot operation.  NOTE that the board logic\ncontains no a priori ROMFS file system.  In order to use this option,\nyou must provide the file nuttx/configs/sama5d4-ek/include/boot_romfsimg.h.\nYou might use logic in the tool at apps/tools/mkromfsimg.sh to create\nthis header file.", "children": [{"type": 27, "name": "SAMA5D4EK_ROMFS_ROMDISK_MINOR", "value": "", "user_value": null, "dep": "n", "prompt": "ROM disk minor device number", "cond": "SAMA5D4EK_ROMFS_MOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5D4EK_ROMFS_MOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}, {"type": 47, "name": "SAMA5D4EK_ROMFS_ROMDISK_DEVNAME", "value": "", "user_value": null, "dep": "n", "prompt": "ROM disk block device", "cond": "SAMA5D4EK_ROMFS_MOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "/dev/ram0", "default": "/dev/ram0", "cond": "SAMA5D4EK_ROMFS_MOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}, {"type": 27, "name": "SAMA5D4EK_ROMFS_ROMDISK_SECTSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "ROM disk sector size", "cond": "SAMA5D4EK_ROMFS_MOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "512", "default": "512", "cond": "SAMA5D4EK_ROMFS_MOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}, {"type": 47, "name": "SAMA5D4EK_ROMFS_MOUNT_MOUNTPOINT", "value": "", "user_value": null, "dep": "n", "prompt": "ROMFS mount point", "cond": "SAMA5D4EK_ROMFS_MOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "/bin", "default": "/bin", "cond": "SAMA5D4EK_ROMFS_MOUNT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}]}, {"type": 27, "name": "SAMA5D4EK_USBHOST_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "USB host waiter stack size", "cond": "USBHOST && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "1536", "default": "1536", "cond": "USBHOST_HUB && USBHOST && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}, {"name": "1024", "default": "1024", "cond": "!USBHOST_HUB && USBHOST && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}, {"type": 27, "name": "SAMA5D4EK_USBHOST_PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "USB host waiter task priority", "cond": "USBHOST && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "100", "default": "100", "cond": "USBHOST && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}, {"type": 27, "name": "SAMA5D4EK_MXT_I2CFREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "maXTouch I2C frequency", "cond": "INPUT_MXT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "400000", "default": "400000", "cond": "INPUT_MXT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}, {"type": 27, "name": "SAMA5D4EK_MXT_DEVMINOR", "value": "", "user_value": null, "dep": "n", "prompt": "/dev/input minor number", "cond": "INPUT_MXT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "0", "default": "0", "cond": "INPUT_MXT && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}, {"type": 27, "name": "SAMA5D4EK_CHANNEL", "value": "", "user_value": null, "dep": "n", "prompt": "PWM channel number", "cond": "PWM && SAMA5_PWM && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "0", "default": "0", "cond": "SAMA5_PWM_CHAN0 && PWM && SAMA5_PWM && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}, {"name": "1", "default": "1", "cond": "SAMA5_PWM_CHAN1 && PWM && SAMA5_PWM && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}, {"name": "2", "default": "2", "cond": "SAMA5_PWM_CHAN2 && PWM && SAMA5_PWM && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}, {"name": "3", "default": "3", "cond": "SAMA5_PWM_CHAN3 && PWM && SAMA5_PWM && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "ranges": [{"min": "0", "max": "3", "cond": "PWM && SAMA5_PWM && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "help": "Selects the PWM channel number that will be used to perform the PWM\ntest.  See apps/examples/pwm."}, {"type": 3, "name": "SAMA5D4EK_SLOWCLOCK", "value": "n", "user_value": null, "rev_dep": "SAMA5D4EK_WM8904_SRCSCK && y", "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "SCHED_TICKLESS && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}, {"name": "n", "default": "n", "cond": "!SCHED_TICKLESS && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}]}, {"type": 27, "name": "SAMA5D4EK_WM8904_I2CFREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "WM8904 I2C Frequency", "cond": "AUDIO_WM8904 && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "400000", "default": "400000", "cond": "AUDIO_WM8904 && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "ranges": [{"min": "1", "max": "400000", "cond": "AUDIO_WM8904 && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "help": "This option selects the I2C frequency to use when communicating with\nthe WM8904 device.  The default, 400KHz, is the maximum supported by\nthe WM8904.  If you have problems communicating with the WM8904,\nthen you might want to try lowering this rate."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "WM8904 MCLK source", "cond": "AUDIO_WM8904 && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK", "defaults": [{"name": "SAMA5D4EK_WM8904_SRCMAIN", "default": "n", "cond": "AUDIO_WM8904 && ARCH_BOARD_SAMA5D4_EK && ARCH_BOARD_SAMA5D4_EK"}], "children": [{"type": 3, "name": "SAMA5D4EK_WM8904_SRCMAIN", "value": "n", "user_value": null, "dep": "n", "prompt": "Main Clock (12MHz)", "cond": "y"}, {"type": 3, "name": "SAMA5D4EK_WM8904_SRCSCK", "value": "n", "user_value": null, "dep": "n", "prompt": "Slow XTAL (32.768KHz)", "cond": "y", "selects": [{"symbol": "SAMA5D4EK_SLOWCLOCK", "cond": "y"}]}]}, {"type": 31, "dep": "n", "prompt": "SAMD20 Xplained Pro Modules", "cond": "ARCH_BOARD_SAMD20_XPLAINED && ARCH_BOARD_SAMD20_XPLAINED", "children": [{"type": 3, "name": "SAMD20_XPLAINED_IOMODULE", "value": "n", "user_value": null, "dep": "n", "prompt": "I/O1 Module", "cond": "ARCH_BOARD_SAMD20_XPLAINED && ARCH_BOARD_SAMD20_XPLAINED", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_SAMD20_XPLAINED && ARCH_BOARD_SAMD20_XPLAINED"}], "help": "The I/O 1 module is attached.  This module provides an MMC/SD card\nslot.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "I/O1 Module Location", "cond": "SAMD20_XPLAINED_IOMODULE && ARCH_BOARD_SAMD20_XPLAINED && ARCH_BOARD_SAMD20_XPLAINED", "defaults": [{"name": "SAMD20_XPLAINED_IOMODULE_EXT1", "default": "n", "cond": "SAMD20_XPLAINED_IOMODULE && ARCH_BOARD_SAMD20_XPLAINED && ARCH_BOARD_SAMD20_XPLAINED"}], "children": [{"type": 3, "name": "SAMD20_XPLAINED_IOMODULE_EXT1", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT1", "cond": "y"}, {"type": 3, "name": "SAMD20_XPLAINED_IOMODULE_EXT2", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT2", "cond": "y"}]}]}, {"type": 3, "name": "SAMD20_XPLAINED_OLED1MODULE", "value": "n", "user_value": null, "dep": "n", "prompt": "OLED1 Module", "cond": "ARCH_BOARD_SAMD20_XPLAINED && ARCH_BOARD_SAMD20_XPLAINED", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_SAMD20_XPLAINED && ARCH_BOARD_SAMD20_XPLAINED"}], "help": "The OLED 1 module is attached.  This module provides an OLED plus 3\nadditional switches and 3 additional LEDs.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "OLED1 Module Location", "cond": "SAMD20_XPLAINED_OLED1MODULE && ARCH_BOARD_SAMD20_XPLAINED && ARCH_BOARD_SAMD20_XPLAINED", "defaults": [{"name": "SAMD20_XPLAINED_OLED1MODULE_EXT1", "default": "n", "cond": "SAMD20_XPLAINED_OLED1MODULE && ARCH_BOARD_SAMD20_XPLAINED && ARCH_BOARD_SAMD20_XPLAINED"}], "children": [{"type": 3, "name": "SAMD20_XPLAINED_OLED1MODULE_EXT1", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT1", "cond": "y"}, {"type": 3, "name": "SAMD20_XPLAINED_OLED1MODULE_EXT2", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT2", "cond": "y"}]}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USART 4 Connection", "cond": "USART4_SERIAL_CONSOLE && ARCH_BOARD_SAMD20_XPLAINED && ARCH_BOARD_SAMD20_XPLAINED", "defaults": [{"name": "SAMD20_XPLAINED_USART4_EXT3", "default": "n", "cond": "USART4_SERIAL_CONSOLE && ARCH_BOARD_SAMD20_XPLAINED && ARCH_BOARD_SAMD20_XPLAINED"}], "children": [{"type": 3, "name": "SAMD20_XPLAINED_USART4_EXT1", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT1", "cond": "!SAMD20_XPLAINED_OLED1MODULE_EXT1 && !SAMD20_XPLAINED_IOMODULE_EXT1 && y", "help": "Select this option if the serial console is on SERCOM4 connected via\nEXT1.  The RX will be on PB9 and TX signal will be on PB8."}, {"type": 3, "name": "SAMD20_XPLAINED_USART4_EXT2", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT2", "cond": "!SAMD20_XPLAINED_OLED1MODULE_EXT2 && !SAMD20_XPLAINED_IOMODULE_EXT2 && y", "help": "Select this option if the serial console is on SERCOM4 connected via\nEXT2.  The RX will be on PB13 and TX signal will be on PB12."}, {"type": 3, "name": "SAMD20_XPLAINED_USART4_EXT3", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT3", "cond": "y", "help": "Select this option if the serial console is on SERCOM4 connect via\nEXT3.  The RX will be on PB11 and TX signal will be on PB10."}]}, {"type": 31, "dep": "n", "prompt": "SAMD21 Xplained Pro Modules", "cond": "ARCH_BOARD_SAMD21_XPLAINED && ARCH_BOARD_SAMD21_XPLAINED", "children": [{"type": 3, "name": "SAMD21_XPLAINED_IOMODULE", "value": "n", "user_value": null, "dep": "n", "prompt": "I/O1 Module", "cond": "ARCH_BOARD_SAMD21_XPLAINED && ARCH_BOARD_SAMD21_XPLAINED", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_SAMD21_XPLAINED && ARCH_BOARD_SAMD21_XPLAINED"}], "help": "The I/O 1 module is attached.  This module provides an MMC/SD card\nslot.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "I/O1 Module Location", "cond": "SAMD21_XPLAINED_IOMODULE && ARCH_BOARD_SAMD21_XPLAINED && ARCH_BOARD_SAMD21_XPLAINED", "defaults": [{"name": "SAMD21_XPLAINED_IOMODULE_EXT1", "default": "n", "cond": "SAMD21_XPLAINED_IOMODULE && ARCH_BOARD_SAMD21_XPLAINED && ARCH_BOARD_SAMD21_XPLAINED"}], "children": [{"type": 3, "name": "SAMD21_XPLAINED_IOMODULE_EXT1", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT1", "cond": "y"}, {"type": 3, "name": "SAMD21_XPLAINED_IOMODULE_EXT2", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT2", "cond": "y"}]}]}, {"type": 3, "name": "SAMD21_XPLAINED_OLED1MODULE", "value": "n", "user_value": null, "dep": "n", "prompt": "OLED1 Module", "cond": "ARCH_BOARD_SAMD21_XPLAINED && ARCH_BOARD_SAMD21_XPLAINED", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_SAMD21_XPLAINED && ARCH_BOARD_SAMD21_XPLAINED"}], "help": "The OLED 1 module is attached.  This module provides an OLED plus 3\nadditional switches and 3 additional LEDs.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "OLED1 Module Location", "cond": "SAMD21_XPLAINED_OLED1MODULE && ARCH_BOARD_SAMD21_XPLAINED && ARCH_BOARD_SAMD21_XPLAINED", "defaults": [{"name": "SAMD21_XPLAINED_OLED1MODULE_EXT1", "default": "n", "cond": "SAMD21_XPLAINED_OLED1MODULE && ARCH_BOARD_SAMD21_XPLAINED && ARCH_BOARD_SAMD21_XPLAINED"}], "children": [{"type": 3, "name": "SAMD21_XPLAINED_OLED1MODULE_EXT1", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT1", "cond": "y"}, {"type": 3, "name": "SAMD21_XPLAINED_OLED1MODULE_EXT2", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT2", "cond": "y"}]}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USART 4 Connection", "cond": "USART4_SERIAL_CONSOLE && ARCH_BOARD_SAMD21_XPLAINED && ARCH_BOARD_SAMD21_XPLAINED", "defaults": [{"name": "SAMD21_XPLAINED_USART4_EXT3", "default": "n", "cond": "USART4_SERIAL_CONSOLE && ARCH_BOARD_SAMD21_XPLAINED && ARCH_BOARD_SAMD21_XPLAINED"}], "children": [{"type": 3, "name": "SAMD21_XPLAINED_USART4_EXT1", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT1", "cond": "!SAMD21_XPLAINED_OLED1MODULE_EXT1 && !SAMD21_XPLAINED_IOMODULE_EXT1 && y", "help": "Select this option if the serial console is on SERCOM4 connected via\nEXT1.  The RX will be on PB9 and TX signal will be on PB8."}, {"type": 3, "name": "SAMD21_XPLAINED_USART4_EXT2", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT2", "cond": "!SAMD21_XPLAINED_OLED1MODULE_EXT2 && !SAMD21_XPLAINED_IOMODULE_EXT2 && y", "help": "Select this option if the serial console is on SERCOM4 connected via\nEXT2.  The RX will be on PB13 and TX signal will be on PB12."}, {"type": 3, "name": "SAMD21_XPLAINED_USART4_EXT3", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT3", "cond": "y", "help": "Select this option if the serial console is on SERCOM4 connect via\nEXT3.  The RX will be on PB11 and TX signal will be on PB10."}]}, {"type": 31, "dep": "n", "prompt": "CPU Clock Configuration", "cond": "ARCH_BOARD_SAML21_XPLAINED && ARCH_BOARD_SAML21_XPLAINED", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "OSC16M Frequency", "cond": "ARCH_BOARD_SAML21_XPLAINED && ARCH_BOARD_SAML21_XPLAINED", "defaults": [{"name": "SAML21_XPLAINED_OSC16M_4MHZ", "default": "n", "cond": "ARCH_BOARD_SAML21_XPLAINED && ARCH_BOARD_SAML21_XPLAINED"}], "children": [{"type": 3, "name": "SAML21_XPLAINED_OSC16M_4MHZ", "value": "n", "user_value": null, "dep": "n", "prompt": "4 MHz", "cond": "y"}, {"type": 3, "name": "SAML21_XPLAINED_OSC16M_8MHZ", "value": "n", "user_value": null, "dep": "n", "prompt": "8 MHz", "cond": "y"}, {"type": 3, "name": "SAML21_XPLAINED_OSC16M_12MHZ", "value": "n", "user_value": null, "dep": "n", "prompt": "12 MHz", "cond": "y"}, {"type": 3, "name": "SAML21_XPLAINED_OSC16M_16MHZ", "value": "n", "user_value": null, "dep": "n", "prompt": "16 MHz", "cond": "y"}]}, {"type": 3, "name": "SAML21_XPLAINED_XOSC32K", "value": "n", "user_value": null, "rev_dep": "SAML21_XPLAINED_DFLL_XOSC32KSRC && y", "dep": "n", "prompt": "Enable XOSC32K", "cond": "ARCH_BOARD_SAML21_XPLAINED && ARCH_BOARD_SAML21_XPLAINED", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_SAML21_XPLAINED && ARCH_BOARD_SAML21_XPLAINED"}]}, {"type": 3, "name": "SAML21_XPLAINED_DFLL", "value": "n", "user_value": null, "dep": "n", "prompt": "Use DFLL", "cond": "ARCH_BOARD_SAML21_XPLAINED && ARCH_BOARD_SAML21_XPLAINED", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_SAML21_XPLAINED && ARCH_BOARD_SAML21_XPLAINED"}], "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "DFLL Clock Source", "cond": "SAML21_XPLAINED_DFLL && ARCH_BOARD_SAML21_XPLAINED && ARCH_BOARD_SAML21_XPLAINED", "defaults": [{"name": "SAML21_XPLAINED_DFLL_OSC16MSRC", "default": "n", "cond": "SAML21_XPLAINED_DFLL && ARCH_BOARD_SAML21_XPLAINED && ARCH_BOARD_SAML21_XPLAINED"}], "children": [{"type": 3, "name": "SAML21_XPLAINED_DFLL_OSC16MSRC", "value": "n", "user_value": null, "dep": "n", "prompt": "OSC16M", "cond": "y"}, {"type": 3, "name": "SAML21_XPLAINED_DFLL_XOSC32KSRC", "value": "n", "user_value": null, "dep": "n", "prompt": "XOSCK32K", "cond": "y", "selects": [{"symbol": "SAML21_XPLAINED_XOSC32K", "cond": "y"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "DFLL Operating Mode", "cond": "SAML21_XPLAINED_DFLL && ARCH_BOARD_SAML21_XPLAINED && ARCH_BOARD_SAML21_XPLAINED", "defaults": [{"name": "SAML21_XPLAINED_DFLL_OPENLOOP", "default": "n", "cond": "SAML21_XPLAINED_DFLL && ARCH_BOARD_SAML21_XPLAINED && ARCH_BOARD_SAML21_XPLAINED"}], "children": [{"type": 3, "name": "SAML21_XPLAINED_DFLL_OPENLOOP", "value": "n", "user_value": null, "dep": "n", "prompt": "DFLL Open Loop Mode", "cond": "y"}, {"type": 3, "name": "SAML21_XPLAINED_DFLL_CLOSEDLOOP", "value": "n", "user_value": null, "dep": "n", "prompt": "DFLL Closed Loop Mode", "cond": "y"}, {"type": 3, "name": "SAML21_XPLAINED_DFLL_RECOVERY", "value": "n", "user_value": null, "dep": "n", "prompt": "DFLL USB Recovery Mode", "cond": "EXPERIMENTAL && y"}]}]}]}, {"type": 31, "dep": "n", "prompt": "SAML21 Xplained Pro Modules", "cond": "ARCH_BOARD_SAML21_XPLAINED && ARCH_BOARD_SAML21_XPLAINED", "children": [{"type": 3, "name": "SAML21_XPLAINED_IOMODULE", "value": "n", "user_value": null, "dep": "n", "prompt": "I/O1 Module", "cond": "ARCH_BOARD_SAML21_XPLAINED && ARCH_BOARD_SAML21_XPLAINED", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_SAML21_XPLAINED && ARCH_BOARD_SAML21_XPLAINED"}], "help": "The I/O 1 module is attached.  This module provides an MMC/SD card\nslot.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "I/O1 Module Location", "cond": "SAML21_XPLAINED_IOMODULE && ARCH_BOARD_SAML21_XPLAINED && ARCH_BOARD_SAML21_XPLAINED", "defaults": [{"name": "SAML21_XPLAINED_IOMODULE_EXT1", "default": "n", "cond": "SAML21_XPLAINED_IOMODULE && ARCH_BOARD_SAML21_XPLAINED && ARCH_BOARD_SAML21_XPLAINED"}], "children": [{"type": 3, "name": "SAML21_XPLAINED_IOMODULE_EXT1", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT1", "cond": "y"}, {"type": 3, "name": "SAML21_XPLAINED_IOMODULE_EXT2", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT2", "cond": "y"}]}]}, {"type": 3, "name": "SAML21_XPLAINED_OLED1MODULE", "value": "n", "user_value": null, "dep": "n", "prompt": "OLED1 Module", "cond": "ARCH_BOARD_SAML21_XPLAINED && ARCH_BOARD_SAML21_XPLAINED", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_SAML21_XPLAINED && ARCH_BOARD_SAML21_XPLAINED"}], "help": "The OLED 1 module is attached.  This module provides an OLED plus 3\nadditional switches and 3 additional LEDs.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "OLED1 Module Location", "cond": "SAML21_XPLAINED_OLED1MODULE && ARCH_BOARD_SAML21_XPLAINED && ARCH_BOARD_SAML21_XPLAINED", "defaults": [{"name": "SAML21_XPLAINED_OLED1MODULE_EXT1", "default": "n", "cond": "SAML21_XPLAINED_OLED1MODULE && ARCH_BOARD_SAML21_XPLAINED && ARCH_BOARD_SAML21_XPLAINED"}], "children": [{"type": 3, "name": "SAML21_XPLAINED_OLED1MODULE_EXT1", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT1", "cond": "y"}, {"type": 3, "name": "SAML21_XPLAINED_OLED1MODULE_EXT2", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT2", "cond": "y"}]}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "CPU Frequency", "cond": "ARCH_BOARD_SAM4EEK && ARCH_BOARD_SAM4EEK", "defaults": [{"name": "SAM4EEK_96MHZ", "default": "n", "cond": "ARCH_BOARD_SAM4EEK && ARCH_BOARD_SAM4EEK"}], "children": [{"type": 3, "name": "SAM4EEK_96MHZ", "value": "n", "user_value": null, "dep": "n", "prompt": "96 MHz", "cond": "y"}, {"type": 3, "name": "SAM4EEK_120MHZ", "value": "n", "user_value": null, "dep": "n", "prompt": "120 MHz", "cond": "y"}]}, {"type": 3, "name": "SAM4EEK_AT25_BLOCKMOUNT", "value": "n", "user_value": null, "dep": "n", "prompt": "AT25 serial FLASH auto-mount", "cond": "SAM34_SPI0 && MTD_AT25 && ARCH_BOARD_SAM4EEK && ARCH_BOARD_SAM4EEK", "defaults": [{"name": "n", "default": "n", "cond": "SAM34_SPI0 && MTD_AT25 && ARCH_BOARD_SAM4EEK && ARCH_BOARD_SAM4EEK"}], "help": "Automatically initialize the AT25 SPI FLASH driver when NSH starts.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "AT25 serial FLASH configuration", "cond": "SAM4EEK_AT25_BLOCKMOUNT && ARCH_BOARD_SAM4EEK && ARCH_BOARD_SAM4EEK", "defaults": [{"name": "SAM4EEK_AT25_FTL", "default": "n", "cond": "SAM4EEK_AT25_BLOCKMOUNT && ARCH_BOARD_SAM4EEK && ARCH_BOARD_SAM4EEK"}], "children": [{"type": 3, "name": "SAM4EEK_AT25_FTL", "value": "n", "user_value": null, "dep": "n", "prompt": "Create AT25 Serial FLASH block driver", "cond": "y", "help": "Create the MTD driver for the AT25 and \"wrap\" the AT25 as a standard\nblock driver that could then, for example, be mounted using FAT or\nany other file system.  Any file system may be used, but there will\nbe no wear-leveling."}, {"type": 3, "name": "SAM4EEK_AT25_NXFFS", "value": "n", "user_value": null, "dep": "n", "prompt": "Create AT25 serial FLASH NXFFS file system", "cond": "FS_NXFFS && y", "help": "Create the MTD driver for the AT25 and mount the AT25 device as\na wear-leveling, NuttX FLASH file system (NXFFS).  The downside of\nNXFFS is that it can be very slow."}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "USB MSC block device", "cond": "SYSTEM_USBMSC && (SAM4EEK_AT25_FTL || SAM34_HSMCI) && ARCH_BOARD_SAM4EEK && ARCH_BOARD_SAM4EEK", "defaults": [{"name": "SAM4EEK_AT25_BLOCKDEVICE", "default": "n", "cond": "SAM4EEK_AT25_FTL && SYSTEM_USBMSC && (SAM4EEK_AT25_FTL || SAM34_HSMCI) && ARCH_BOARD_SAM4EEK && ARCH_BOARD_SAM4EEK"}, {"name": "SAM4EEK_HSMCI_BLOCKDEVICE", "default": "n", "cond": "!SAM4EEK_AT25_FTL && SYSTEM_USBMSC && (SAM4EEK_AT25_FTL || SAM34_HSMCI) && ARCH_BOARD_SAM4EEK && ARCH_BOARD_SAM4EEK"}], "children": [{"type": 3, "name": "SAM4EEK_AT25_BLOCKDEVICE", "value": "n", "user_value": null, "dep": "n", "prompt": "AT25 Serial FLASH", "cond": "y"}, {"type": 3, "name": "SAM4EEK_HSMCI_BLOCKDEVICE", "value": "n", "user_value": null, "dep": "n", "prompt": "SD card", "cond": "SAM34_HSMCI && y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "LCD Type", "cond": "LCD && ARCH_BOARD_SAM4EEK && ARCH_BOARD_SAM4EEK", "defaults": [{"name": "SAM4EEK_LCD_ILI9341", "default": "n", "cond": "LCD && ARCH_BOARD_SAM4EEK && ARCH_BOARD_SAM4EEK"}], "children": [{"type": 3, "name": "SAM4EEK_LCD_ILI9325", "value": "n", "user_value": null, "dep": "n", "prompt": "ILI9325 LCD controller", "cond": "y"}, {"type": 3, "name": "SAM4EEK_LCD_ILI9341", "value": "n", "user_value": null, "dep": "n", "prompt": "ILI9341 LCD controller", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "LCD Color Configuration", "cond": "LCD && ARCH_BOARD_SAM4EEK && ARCH_BOARD_SAM4EEK", "defaults": [{"name": "SAM4EEK_LCD_RGB565", "default": "n", "cond": "LCD && ARCH_BOARD_SAM4EEK && ARCH_BOARD_SAM4EEK"}], "children": [{"type": 3, "name": "SAM4EEK_LCD_RGB565", "value": "n", "user_value": null, "dep": "n", "prompt": "RGB565", "cond": "y"}, {"type": 3, "name": "SAM4EEK_LCD_RGB24", "value": "n", "user_value": null, "dep": "n", "prompt": "RGB24 / RGB888", "cond": "y"}, {"type": 3, "name": "SAM4EEK_LCD_RGB32", "value": "n", "user_value": null, "dep": "n", "prompt": "RGB32", "cond": "y"}]}, {"type": 24, "name": "SAM4EEK_LCD_BGCOLOR", "value": "", "user_value": null, "dep": "n", "prompt": "Initial background color", "cond": "LCD && ARCH_BOARD_SAM4EEK && ARCH_BOARD_SAM4EEK", "defaults": [{"name": "0x00", "default": "0x00", "cond": "LCD && ARCH_BOARD_SAM4EEK && ARCH_BOARD_SAM4EEK"}]}, {"type": 31, "dep": "n", "prompt": "SAM4L Xplained Pro Modules", "cond": "ARCH_BOARD_SAM4L_XPLAINED && ARCH_BOARD_SAM4L_XPLAINED", "children": [{"type": 3, "name": "SAM4L_XPLAINED_SLCD1MODULE", "value": "n", "user_value": null, "dep": "n", "prompt": "SLCD1 Module", "cond": "ARCH_BOARD_SAM4L_XPLAINED && ARCH_BOARD_SAM4L_XPLAINED", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_SAM4L_XPLAINED && ARCH_BOARD_SAM4L_XPLAINED"}], "help": "The SLCD 1 module is attached.  This module provides a segment LCD\nthat connects directly to the \"EXT5 SEGMENT LCD\" connector.  When\nthe SLCD is connected, EXT2 is not available for other modules."}, {"type": 3, "name": "SAM4L_XPLAINED_IOMODULE", "value": "n", "user_value": null, "dep": "n", "prompt": "I/O1 Module", "cond": "ARCH_BOARD_SAM4L_XPLAINED && ARCH_BOARD_SAM4L_XPLAINED", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_SAM4L_XPLAINED && ARCH_BOARD_SAM4L_XPLAINED"}], "help": "The I/O 1 module is attached.  This module provides an MMC/SD card\nslot.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "I/O1 Module Location", "cond": "SAM4L_XPLAINED_IOMODULE && ARCH_BOARD_SAM4L_XPLAINED && ARCH_BOARD_SAM4L_XPLAINED", "defaults": [{"name": "SAM4L_XPLAINED_IOMODULE_EXT1", "default": "n", "cond": "SAM4L_XPLAINED_IOMODULE && ARCH_BOARD_SAM4L_XPLAINED && ARCH_BOARD_SAM4L_XPLAINED"}], "children": [{"type": 3, "name": "SAM4L_XPLAINED_IOMODULE_EXT1", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT1", "cond": "y"}, {"type": 3, "name": "SAM4L_XPLAINED_IOMODULE_EXT2", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT2", "cond": "!SAM4L_XPLAINED_SLCD1MODULE && y"}]}]}, {"type": 3, "name": "SAM4L_XPLAINED_OLED1MODULE", "value": "n", "user_value": null, "dep": "n", "prompt": "OLED1 Module", "cond": "ARCH_BOARD_SAM4L_XPLAINED && ARCH_BOARD_SAM4L_XPLAINED", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_SAM4L_XPLAINED && ARCH_BOARD_SAM4L_XPLAINED"}], "help": "The OLED 1 module is attached.  This module provides an OLED plus 3\nadditional switches and 3 additional LEDs.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "OLED1 Module Location", "cond": "SAM4L_XPLAINED_OLED1MODULE && ARCH_BOARD_SAM4L_XPLAINED && ARCH_BOARD_SAM4L_XPLAINED", "defaults": [{"name": "SAM4L_XPLAINED_OLED1MODULE_EXT1", "default": "n", "cond": "SAM4L_XPLAINED_OLED1MODULE && ARCH_BOARD_SAM4L_XPLAINED && ARCH_BOARD_SAM4L_XPLAINED"}], "children": [{"type": 3, "name": "SAM4L_XPLAINED_OLED1MODULE_EXT1", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT1", "cond": "y"}, {"type": 3, "name": "SAM4L_XPLAINED_OLED1MODULE_EXT2", "value": "n", "user_value": null, "dep": "n", "prompt": "EXT2", "cond": "!SAM4L_XPLAINED_SLCD1MODULE && y"}]}]}]}, {"type": 27, "name": "SAM4S_XPLAINED_PRO_CDCACM_DEVMINOR", "value": "", "user_value": null, "dep": "n", "prompt": "CDC/ACM Device Minor", "cond": "SAM34_UDP && USBDEV && CDCACM && ARCH_BOARD_SAM4S_XPLAINED_PRO && ARCH_BOARD_SAM4S_XPLAINED_PRO", "defaults": [{"name": "0", "default": "0", "cond": "SAM34_UDP && USBDEV && CDCACM && ARCH_BOARD_SAM4S_XPLAINED_PRO && ARCH_BOARD_SAM4S_XPLAINED_PRO"}]}, {"type": 47, "name": "SAM4S_XPLAINED_PRO_SCHED_TIMER_DEVPATH", "value": "", "user_value": null, "dep": "n", "prompt": "Scheduler Timer Device Path", "cond": "TIMER && SYSTEMTICK_EXTCLK && ARCH_BOARD_SAM4S_XPLAINED_PRO && ARCH_BOARD_SAM4S_XPLAINED_PRO", "defaults": [{"name": "/dev/rtt0", "default": "/dev/rtt0", "cond": "TIMER && SYSTEMTICK_EXTCLK && ARCH_BOARD_SAM4S_XPLAINED_PRO && ARCH_BOARD_SAM4S_XPLAINED_PRO"}]}, {"type": 47, "name": "SAM4S_XPLAINED_PRO_CPULOAD_TIMER_DEVPATH", "value": "", "user_value": null, "dep": "n", "prompt": "CPU Load Timer Device Path", "cond": "TIMER && SCHED_CPULOAD && SCHED_CPULOAD_EXTCLK && ARCH_BOARD_SAM4S_XPLAINED_PRO && ARCH_BOARD_SAM4S_XPLAINED_PRO", "defaults": [{"name": "/dev/tc0", "default": "/dev/tc0", "cond": "TIMER && SCHED_CPULOAD && SCHED_CPULOAD_EXTCLK && ARCH_BOARD_SAM4S_XPLAINED_PRO && ARCH_BOARD_SAM4S_XPLAINED_PRO"}]}, {"type": 3, "name": "SAME70XPLAINED_CLICKSHIELD", "value": "n", "user_value": null, "dep": "n", "prompt": "Mikroe Click Shield", "cond": "ARCH_BOARD_SAME70_XPLAINED && ARCH_BOARD_SAME70_XPLAINED", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_SAME70_XPLAINED && ARCH_BOARD_SAME70_XPLAINED"}], "help": "In the mrf24j40-starhub configuration, a click shield from\nMikroElectronika was used along with a Click \"Bee\" module.  The\nclick shield supports two click shields."}, {"type": 3, "name": "SAME70XPLAINED_MB1_SPI", "value": "n", "user_value": null, "rev_dep": "SAME70XPLAINED_MB1_BEE && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_SAME70_XPLAINED && ARCH_BOARD_SAME70_XPLAINED"}]}, {"type": 3, "name": "SAME70XPLAINED_MB2_SPI", "value": "n", "user_value": null, "rev_dep": "SAME70XPLAINED_MB2_BEE && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_SAME70_XPLAINED && ARCH_BOARD_SAME70_XPLAINED"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Bee mikroBUS", "cond": "SAME70XPLAINED_CLICKSHIELD && IEEE802154_MRF24J40 && ARCH_BOARD_SAME70_XPLAINED && ARCH_BOARD_SAME70_XPLAINED", "defaults": [{"name": "SAME70XPLAINED_MB1_BEE", "default": "n", "cond": "SAME70XPLAINED_CLICKSHIELD && IEEE802154_MRF24J40 && ARCH_BOARD_SAME70_XPLAINED && ARCH_BOARD_SAME70_XPLAINED"}], "children": [{"type": 3, "name": "SAME70XPLAINED_MB1_BEE", "value": "n", "user_value": null, "dep": "n", "prompt": "MRF24J40 Bee in mikroBUS1", "cond": "y", "selects": [{"symbol": "SAME70XPLAINED_MB1_SPI", "cond": "y"}]}, {"type": 3, "name": "SAME70XPLAINED_MB2_BEE", "value": "n", "user_value": null, "dep": "n", "prompt": "MRF24J40 Bee in mikroBUS2", "cond": "y", "selects": [{"symbol": "SAME70XPLAINED_MB2_SPI", "cond": "y"}]}]}, {"type": 3, "name": "SAME70XPLAINED_HSMCI0_AUTOMOUNT", "value": "n", "user_value": null, "dep": "n", "prompt": "HSMCI0 automounter", "cond": "FS_AUTOMOUNTER && SAMA5_HSMCI0 && ARCH_BOARD_SAME70_XPLAINED && ARCH_BOARD_SAME70_XPLAINED", "defaults": [{"name": "n", "default": "n", "cond": "FS_AUTOMOUNTER && SAMA5_HSMCI0 && ARCH_BOARD_SAME70_XPLAINED && ARCH_BOARD_SAME70_XPLAINED"}], "children": [{"type": 47, "name": "SAME70XPLAINED_HSMCI0_AUTOMOUNT_FSTYPE", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI0 file system type", "cond": "SAME70XPLAINED_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAME70_XPLAINED && ARCH_BOARD_SAME70_XPLAINED", "defaults": [{"name": "vfat", "default": "vfat", "cond": "SAME70XPLAINED_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAME70_XPLAINED && ARCH_BOARD_SAME70_XPLAINED"}]}, {"type": 47, "name": "SAME70XPLAINED_HSMCI0_AUTOMOUNT_BLKDEV", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI0 block device", "cond": "SAME70XPLAINED_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAME70_XPLAINED && ARCH_BOARD_SAME70_XPLAINED", "defaults": [{"name": "/dev/mmcsd0", "default": "/dev/mmcsd0", "cond": "SAME70XPLAINED_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAME70_XPLAINED && ARCH_BOARD_SAME70_XPLAINED"}]}, {"type": 47, "name": "SAME70XPLAINED_HSMCI0_AUTOMOUNT_MOUNTPOINT", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI0 mount point", "cond": "SAME70XPLAINED_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAME70_XPLAINED && ARCH_BOARD_SAME70_XPLAINED", "defaults": [{"name": "/mnt/sdcard0", "default": "/mnt/sdcard0", "cond": "SAME70XPLAINED_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAME70_XPLAINED && ARCH_BOARD_SAME70_XPLAINED"}]}, {"type": 27, "name": "SAME70XPLAINED_HSMCI0_AUTOMOUNT_DDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI0 debounce delay (milliseconds)", "cond": "SAME70XPLAINED_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAME70_XPLAINED && ARCH_BOARD_SAME70_XPLAINED", "defaults": [{"name": "1000", "default": "1000", "cond": "SAME70XPLAINED_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAME70_XPLAINED && ARCH_BOARD_SAME70_XPLAINED"}]}, {"type": 27, "name": "SAME70XPLAINED_HSMCI0_AUTOMOUNT_UDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI0 unmount retry delay (milliseconds)", "cond": "SAME70XPLAINED_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAME70_XPLAINED && ARCH_BOARD_SAME70_XPLAINED", "defaults": [{"name": "2000", "default": "2000", "cond": "SAME70XPLAINED_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAME70_XPLAINED && ARCH_BOARD_SAME70_XPLAINED"}]}]}, {"type": 3, "name": "SAMV71XULT_MXTXPLND", "value": "n", "user_value": null, "dep": "n", "prompt": "MaXTouch Xplained connected", "cond": "ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT"}]}, {"type": 3, "name": "SAMV71XULT_CLICKSHIELD", "value": "n", "user_value": null, "dep": "n", "prompt": "Mikroe Click Shield", "cond": "ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT"}], "help": "In the mrf24j40-starhub configuration, a click shield from\nMikroElectronika was used along with a Click \"Bee\" module.  The\nclick shield supports two click shields."}, {"type": 3, "name": "SAMV71XULT_MB1_SPI", "value": "n", "user_value": null, "rev_dep": "SAMV71XULT_MB1_BEE && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT"}]}, {"type": 3, "name": "SAMV71XULT_MB2_SPI", "value": "n", "user_value": null, "rev_dep": "SAMV71XULT_MB2_BEE && y", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Bee mikroBUS", "cond": "SAMV71XULT_CLICKSHIELD && IEEE802154_MRF24J40 && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT", "defaults": [{"name": "SAMV71XULT_MB1_BEE", "default": "n", "cond": "SAMV71XULT_CLICKSHIELD && IEEE802154_MRF24J40 && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT"}], "children": [{"type": 3, "name": "SAMV71XULT_MB1_BEE", "value": "n", "user_value": null, "dep": "n", "prompt": "MRF24J40 Bee in mikroBUS1", "cond": "y", "selects": [{"symbol": "SAMV71XULT_MB1_SPI", "cond": "y"}]}, {"type": 3, "name": "SAMV71XULT_MB2_BEE", "value": "n", "user_value": null, "dep": "n", "prompt": "MRF24J40 Bee in mikroBUS2", "cond": "y", "selects": [{"symbol": "SAMV71XULT_MB2_SPI", "cond": "y"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "MaXTouch Xplained connection", "cond": "SAMV71XULT_MXTXPLND && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT", "defaults": [{"name": "SAMV71XULT_MXTXPLND_EXT1", "default": "n", "cond": "SAMV71XULT_MXTXPLND && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT"}], "children": [{"type": 3, "name": "SAMV71XULT_MXTXPLND_EXT1", "value": "n", "user_value": null, "dep": "n", "prompt": "Connected on EXT1 (2x10 pin)", "cond": "EXPERIMENTAL && y"}, {"type": 3, "name": "SAMV71XULT_MXTXPLND_EXT2", "value": "n", "user_value": null, "dep": "n", "prompt": "Connected on EXT2 (2x10 pin)", "cond": "EXPERIMENTAL && y"}, {"type": 3, "name": "SAMV71XULT_MXTXPLND_LCD", "value": "n", "user_value": null, "dep": "n", "prompt": "Connected on LCD (50-pin)", "cond": "y"}]}, {"type": 3, "name": "SAMV71XULT_MXT_SWAPXY", "value": "n", "user_value": null, "dep": "n", "prompt": "Swap X/Y coordinates", "cond": "INPUT_MXT && SAMV71XULT_MXTXPLND && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT", "defaults": [{"name": "n", "default": "n", "cond": "INPUT_MXT && SAMV71XULT_MXTXPLND && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT"}], "help": "If you are working in a landscape orientation, it should be\nnecessary to swap X/Y coordinates.  But you will probably want\nto do this in any portrait orientation."}, {"type": 27, "name": "SAMV71XULT_MXT_I2CFREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "maXTouch I2C frequency", "cond": "INPUT_MXT && SAMV71XULT_MXTXPLND && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT", "defaults": [{"name": "400000", "default": "400000", "cond": "INPUT_MXT && SAMV71XULT_MXTXPLND && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT"}]}, {"type": 27, "name": "SAMV71XULT_MXT_DEVMINOR", "value": "", "user_value": null, "dep": "n", "prompt": "/dev/input minor number", "cond": "INPUT_MXT && SAMV71XULT_MXTXPLND && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT", "defaults": [{"name": "0", "default": "0", "cond": "INPUT_MXT && SAMV71XULT_MXTXPLND && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT"}]}, {"type": 24, "name": "SAMV71XULT_LCD_BGCOLOR", "value": "", "user_value": null, "dep": "n", "prompt": "Initial background color", "cond": "LCD && SAMV71XULT_MXTXPLND && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT", "defaults": [{"name": "0x00", "default": "0x00", "cond": "LCD && SAMV71XULT_MXTXPLND && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT"}]}, {"type": 3, "name": "SAMV71XULT_HSMCI0_AUTOMOUNT", "value": "n", "user_value": null, "dep": "n", "prompt": "HSMCI0 automounter", "cond": "FS_AUTOMOUNTER && SAMA5_HSMCI0 && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT", "defaults": [{"name": "n", "default": "n", "cond": "FS_AUTOMOUNTER && SAMA5_HSMCI0 && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT"}], "children": [{"type": 47, "name": "SAMV71XULT_HSMCI0_AUTOMOUNT_FSTYPE", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI0 file system type", "cond": "SAMV71XULT_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT", "defaults": [{"name": "vfat", "default": "vfat", "cond": "SAMV71XULT_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT"}]}, {"type": 47, "name": "SAMV71XULT_HSMCI0_AUTOMOUNT_BLKDEV", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI0 block device", "cond": "SAMV71XULT_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT", "defaults": [{"name": "/dev/mmcsd0", "default": "/dev/mmcsd0", "cond": "SAMV71XULT_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT"}]}, {"type": 47, "name": "SAMV71XULT_HSMCI0_AUTOMOUNT_MOUNTPOINT", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI0 mount point", "cond": "SAMV71XULT_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT", "defaults": [{"name": "/mnt/sdcard0", "default": "/mnt/sdcard0", "cond": "SAMV71XULT_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT"}]}, {"type": 27, "name": "SAMV71XULT_HSMCI0_AUTOMOUNT_DDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI0 debounce delay (milliseconds)", "cond": "SAMV71XULT_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT", "defaults": [{"name": "1000", "default": "1000", "cond": "SAMV71XULT_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT"}]}, {"type": 27, "name": "SAMV71XULT_HSMCI0_AUTOMOUNT_UDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "HSMCI0 unmount retry delay (milliseconds)", "cond": "SAMV71XULT_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT", "defaults": [{"name": "2000", "default": "2000", "cond": "SAMV71XULT_HSMCI0_AUTOMOUNT && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT"}]}]}, {"type": 27, "name": "SAMV71XULT_WM8904_I2CFREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "WM8904 I2C Frequency", "cond": "AUDIO_WM8904 && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT", "defaults": [{"name": "400000", "default": "400000", "cond": "AUDIO_WM8904 && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT"}], "ranges": [{"min": "1", "max": "400000", "cond": "AUDIO_WM8904 && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT"}], "help": "This option selects the I2C frequency to use when communicating with\nthe WM8904 device.  The default, 400KHz, is the maximum supported by\nthe WM8904.  If you have problems communicating with the WM8904,\nthen you might want to try lowering this rate."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "WM8904 MCLK source", "cond": "AUDIO_WM8904 && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT", "defaults": [{"name": "SAMV71XULT_WM8904_SRCMAIN", "default": "n", "cond": "AUDIO_WM8904 && ARCH_BOARD_SAMV71_XULT && ARCH_BOARD_SAMV71_XULT"}], "children": [{"type": 3, "name": "SAMV71XULT_WM8904_SRCMAIN", "value": "n", "user_value": null, "dep": "n", "prompt": "Main Clock (12MHz)", "cond": "y"}, {"type": 3, "name": "SAMV71XULT_WM8904_SRCSCK", "value": "n", "user_value": null, "dep": "n", "prompt": "Slow XTAL (32.768KHz)", "cond": "y", "selects": [{"symbol": "SAMV71XULT_SLOWCLOCK", "cond": "y"}]}]}, {"type": 31, "dep": "n", "prompt": "LCD Controller Selection", "cond": "LCD && ARCH_BOARD_SHENZHOU && ARCH_BOARD_SHENZHOU", "children": [{"type": 6, "dep": "n", "prompt": "Disable Unused LCD Controllers", "cond": "LCD && ARCH_BOARD_SHENZHOU && ARCH_BOARD_SHENZHOU"}, {"type": 3, "name": "STM32_ILI1505_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable ILI1505", "cond": "LCD && ARCH_BOARD_SHENZHOU && ARCH_BOARD_SHENZHOU", "defaults": [{"name": "n", "default": "n", "cond": "LCD && ARCH_BOARD_SHENZHOU && ARCH_BOARD_SHENZHOU"}], "help": "This may be defined to disable support for the ILI1505 LCD controller\nYou might want to eliminate unused LCD controll support in order to\nreduce the FLASH footprint."}, {"type": 3, "name": "STM32_ILI9300_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable ILI9300", "cond": "LCD && ARCH_BOARD_SHENZHOU && ARCH_BOARD_SHENZHOU", "defaults": [{"name": "n", "default": "n", "cond": "LCD && ARCH_BOARD_SHENZHOU && ARCH_BOARD_SHENZHOU"}], "help": "This may be defined to disable support for the ILI9300 LCD controller\nYou might want to eliminate unused LCD controll support in order to\nreduce the FLASH footprint."}, {"type": 3, "name": "STM32_ILI9320_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable ILI9320", "cond": "LCD && ARCH_BOARD_SHENZHOU && ARCH_BOARD_SHENZHOU", "defaults": [{"name": "n", "default": "n", "cond": "LCD && ARCH_BOARD_SHENZHOU && ARCH_BOARD_SHENZHOU"}], "help": "This may be defined to disable support for the ILI9320 LCD controller\nYou might want to eliminate unused LCD controll support in order to\nreduce the FLASH footprint."}, {"type": 3, "name": "STM32_ILI9321_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable ILI9321", "cond": "LCD && ARCH_BOARD_SHENZHOU && ARCH_BOARD_SHENZHOU", "defaults": [{"name": "n", "default": "n", "cond": "LCD && ARCH_BOARD_SHENZHOU && ARCH_BOARD_SHENZHOU"}], "help": "This may be defined to disable support for the ILI9321 LCD controller\nYou might want to eliminate unused LCD controll support in order to\nreduce the FLASH footprint."}, {"type": 3, "name": "STM32_ILI9325_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable ILI9325", "cond": "LCD && ARCH_BOARD_SHENZHOU && ARCH_BOARD_SHENZHOU", "defaults": [{"name": "n", "default": "n", "cond": "LCD && ARCH_BOARD_SHENZHOU && ARCH_BOARD_SHENZHOU"}], "help": "This may be defined to disable support for the ILI9325 LCD controller\nYou might want to eliminate unused LCD controll support in order to\nreduce the FLASH footprint."}, {"type": 3, "name": "STM32_ILI9328_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable ILI9328", "cond": "LCD && ARCH_BOARD_SHENZHOU && ARCH_BOARD_SHENZHOU", "defaults": [{"name": "n", "default": "n", "cond": "LCD && ARCH_BOARD_SHENZHOU && ARCH_BOARD_SHENZHOU"}], "help": "This may be defined to disable support for the ILI9328 LCD controller\nYou might want to eliminate unused LCD controll support in order to\nreduce the FLASH footprint."}, {"type": 3, "name": "STM32_ILI9331_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable ILI9331", "cond": "LCD && ARCH_BOARD_SHENZHOU && ARCH_BOARD_SHENZHOU", "defaults": [{"name": "n", "default": "n", "cond": "LCD && ARCH_BOARD_SHENZHOU && ARCH_BOARD_SHENZHOU"}], "help": "This may be defined to disable support for the ILI9331 LCD controller\nYou might want to eliminate unused LCD controll support in order to\nreduce the FLASH footprint."}, {"type": 3, "name": "STM32_ILI9919_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable ILI9919", "cond": "LCD && ARCH_BOARD_SHENZHOU && ARCH_BOARD_SHENZHOU", "defaults": [{"name": "n", "default": "n", "cond": "LCD && ARCH_BOARD_SHENZHOU && ARCH_BOARD_SHENZHOU"}], "help": "This may be defined to disable support for the ILI9919 LCD controller\nYou might want to eliminate unused LCD controll support in order to\nreduce the FLASH footprint."}]}, {"type": 3, "name": "SPARK_FLASH", "value": "n", "user_value": null, "dep": "n", "prompt": "MTD driver for onboard 2M FLASH", "cond": "ARCH_BOARD_SPARK && ARCH_BOARD_SPARK", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_BOARD_SPARK && ARCH_BOARD_SPARK"}], "selects": [{"symbol": "MTD", "cond": "ARCH_BOARD_SPARK && ARCH_BOARD_SPARK"}, {"symbol": "MTD_SST25", "cond": "ARCH_BOARD_SPARK && ARCH_BOARD_SPARK"}, {"symbol": "FS_FAT", "cond": "ARCH_BOARD_SPARK && ARCH_BOARD_SPARK"}, {"symbol": "STM32_SPI2", "cond": "ARCH_BOARD_SPARK && ARCH_BOARD_SPARK"}, {"symbol": "MTD_BYTE_WRITE", "cond": "ARCH_BOARD_SPARK && ARCH_BOARD_SPARK"}], "help": "Configures an MTD device for use with the onboard flash", "children": [{"type": 27, "name": "SPARK_FLASH_SPI", "value": "", "user_value": null, "dep": "n", "prompt": "Flash SPI bus number", "cond": "SPARK_FLASH && ARCH_BOARD_SPARK && ARCH_BOARD_SPARK", "defaults": [{"name": "2", "default": "2", "cond": "SPARK_FLASH && ARCH_BOARD_SPARK && ARCH_BOARD_SPARK"}], "help": "Selects the SPI bus number identying that SPI interface that\nconnects the Flash to the MCU."}, {"type": 27, "name": "SPARK_FLASH_MINOR", "value": "", "user_value": null, "dep": "n", "prompt": "Minor number for the FLASH /dev/fat entry", "cond": "SPARK_FLASH && ARCH_BOARD_SPARK && ARCH_BOARD_SPARK", "defaults": [{"name": "0", "default": "0", "cond": "SPARK_FLASH && ARCH_BOARD_SPARK && ARCH_BOARD_SPARK"}], "help": "Sets the minor number for the FLASH MTD /dev entry"}, {"type": 3, "name": "SPARK_FLASH_PART", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable partition support on FLASH", "cond": "SPARK_FLASH && ARCH_BOARD_SPARK && ARCH_BOARD_SPARK", "defaults": [{"name": "n", "default": "n", "cond": "SPARK_FLASH && ARCH_BOARD_SPARK && ARCH_BOARD_SPARK"}], "help": "Enables creation of partitions on the FLASH", "children": [{"type": 47, "name": "SPARK_FLASH_PART_LIST", "value": "", "user_value": null, "dep": "n", "prompt": "Flash partition size list", "cond": "SPARK_FLASH_PART && ARCH_BOARD_SPARK && ARCH_BOARD_SPARK", "defaults": [{"name": "512,1536", "default": "512,1536", "cond": "SPARK_FLASH_PART && ARCH_BOARD_SPARK && ARCH_BOARD_SPARK"}], "help": "Comma separated list of partition sizes in KB"}]}]}, {"type": 3, "name": "PHOTON_DFU_BOOTLOADER", "value": "n", "user_value": null, "dep": "n", "prompt": "Stock photon bootloader support", "cond": "ARCH_BOARD_PHOTON && ARCH_BOARD_PHOTON", "selects": [{"symbol": "STM32_DFU", "cond": "ARCH_BOARD_PHOTON && ARCH_BOARD_PHOTON"}], "help": "Build image that can be uploaded using stock DFU bootloader."}, {"type": 3, "name": "PHOTON_WDG", "value": "n", "user_value": null, "rev_dep": "PHOTON_IWDG && STM32_IWDG && WATCHDOG && ARCH_BOARD_PHOTON && ARCH_BOARD_PHOTON", "dep": "n"}, {"type": 3, "name": "PHOTON_IWDG", "value": "n", "user_value": null, "dep": "n", "prompt": "Photon iwdg kicker support", "cond": "STM32_IWDG && WATCHDOG && ARCH_BOARD_PHOTON && ARCH_BOARD_PHOTON", "selects": [{"symbol": "PHOTON_WDG", "cond": "STM32_IWDG && WATCHDOG && ARCH_BOARD_PHOTON && ARCH_BOARD_PHOTON"}], "children": [{"type": 27, "name": "PHOTON_IWDG_TIMEOUT", "value": "", "user_value": null, "dep": "n", "prompt": "Photon iwdg Timeout (ms)", "cond": "PHOTON_IWDG && ARCH_BOARD_PHOTON && ARCH_BOARD_PHOTON", "defaults": [{"name": "32000", "default": "32000", "cond": "PHOTON_IWDG && ARCH_BOARD_PHOTON && ARCH_BOARD_PHOTON"}], "help": "Watchdog timeout value in milliseconds."}]}, {"type": 3, "name": "PHOTON_WDG_THREAD", "value": "n", "user_value": null, "dep": "n", "prompt": "Watchdog Deamon Thread", "cond": "PHOTON_WDG && ARCH_BOARD_PHOTON && ARCH_BOARD_PHOTON", "children": [{"type": 47, "name": "PHOTON_WDG_THREAD_NAME", "value": "", "user_value": null, "dep": "n", "prompt": "Watchdog Thread Name", "cond": "PHOTON_WDG_THREAD && PHOTON_WDG && ARCH_BOARD_PHOTON && ARCH_BOARD_PHOTON", "defaults": [{"name": "wdog", "default": "wdog", "cond": "PHOTON_WDG_THREAD && PHOTON_WDG && ARCH_BOARD_PHOTON && ARCH_BOARD_PHOTON"}]}, {"type": 27, "name": "PHOTON_WDG_THREAD_INTERVAL", "value": "", "user_value": null, "dep": "n", "prompt": "Watchdog Thread Interval (ms)", "cond": "PHOTON_WDG_THREAD && PHOTON_WDG && ARCH_BOARD_PHOTON && ARCH_BOARD_PHOTON", "defaults": [{"name": "2500", "default": "2500", "cond": "PHOTON_WDG_THREAD && PHOTON_WDG && ARCH_BOARD_PHOTON && ARCH_BOARD_PHOTON"}]}, {"type": 27, "name": "PHOTON_WDG_THREAD_PRIORITY", "value": "", "user_value": null, "dep": "n", "prompt": "Watchdog Thread Priority", "cond": "PHOTON_WDG_THREAD && PHOTON_WDG && ARCH_BOARD_PHOTON && ARCH_BOARD_PHOTON", "defaults": [{"name": "200", "default": "200", "cond": "PHOTON_WDG_THREAD && PHOTON_WDG && ARCH_BOARD_PHOTON && ARCH_BOARD_PHOTON"}]}, {"type": 27, "name": "PHOTON_WDG_THREAD_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Watchdog Thread Stacksize", "cond": "PHOTON_WDG_THREAD && PHOTON_WDG && ARCH_BOARD_PHOTON && ARCH_BOARD_PHOTON", "defaults": [{"name": "1024", "default": "1024", "cond": "PHOTON_WDG_THREAD && PHOTON_WDG && ARCH_BOARD_PHOTON && ARCH_BOARD_PHOTON"}]}]}, {"type": 3, "name": "PHOTON_WLAN", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable WLAN chip support", "cond": "IEEE80211_BROADCOM_FULLMAC_SDIO && ARCH_BOARD_PHOTON && ARCH_BOARD_PHOTON"}, {"type": 3, "name": "STM32F103MINIMUM_FLASH", "value": "n", "user_value": null, "dep": "n", "prompt": "MTD driver for external 4Mbyte W25Q32FV FLASH on SPI1", "cond": "ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM"}], "selects": [{"symbol": "MTD", "cond": "ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM"}, {"symbol": "MTD_W25", "cond": "ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM"}, {"symbol": "MTD_SMART", "cond": "ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM"}, {"symbol": "FS_SMARTFS", "cond": "ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM"}, {"symbol": "STM32_SPI1", "cond": "ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM"}, {"symbol": "MTD_BYTE_WRITE", "cond": "ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM"}], "help": "Configures an MTD device for use with the onboard flash", "children": [{"type": 27, "name": "STM32F103MINIMUM_FLASH_MINOR", "value": "", "user_value": null, "dep": "n", "prompt": "Minor number for the FLASH /dev/smart entry", "cond": "STM32F103MINIMUM_FLASH && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F103MINIMUM_FLASH && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM"}], "help": "Sets the minor number for the FLASH MTD /dev entry"}, {"type": 3, "name": "STM32F103MINIMUM_FLASH_PART", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable partition support on FLASH", "cond": "STM32F103MINIMUM_FLASH && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM", "defaults": [{"name": "y", "default": "y", "cond": "STM32F103MINIMUM_FLASH && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM"}], "selects": [{"symbol": "MTD_PARTITION", "cond": "STM32F103MINIMUM_FLASH && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM"}], "help": "Enables creation of partitions on the FLASH", "children": [{"type": 3, "name": "STM32F103MINIMUM_FLASH_CONFIG_PART", "value": "n", "user_value": null, "dep": "n", "prompt": "Create application config data partition on FLASH", "cond": "STM32F103MINIMUM_FLASH_PART && PLATFORM_CONFIGDATA && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM", "defaults": [{"name": "n", "default": "n", "cond": "STM32F103MINIMUM_FLASH_PART && PLATFORM_CONFIGDATA && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM"}], "help": "Enables creation of a /dev/config partition on the FLASH", "children": [{"type": 27, "name": "STM32F103MINIMUM_FLASH_CONFIG_PART_NUMBER", "value": "", "user_value": null, "dep": "n", "prompt": "Index number of config partition (in list below)", "cond": "STM32F103MINIMUM_FLASH_CONFIG_PART && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM", "defaults": [{"name": "0", "default": "0", "cond": "STM32F103MINIMUM_FLASH_CONFIG_PART && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM"}], "help": "Specifies the index number of the config data partition\nfrom the partition list."}]}, {"type": 47, "name": "STM32F103MINIMUM_FLASH_PART_LIST", "value": "", "user_value": null, "dep": "n", "prompt": "Flash partition size list", "cond": "STM32F103MINIMUM_FLASH_PART && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM", "defaults": [{"name": "1024,1024,1024,1024", "default": "1024,1024,1024,1024", "cond": "STM32F103MINIMUM_FLASH_PART && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM"}], "help": "Comma separated list of partition sizes in KB."}, {"type": 47, "name": "STM32F103MINIMUM_FLASH_PART_NAMES", "value": "", "user_value": null, "dep": "n", "prompt": "Flash partition name list", "cond": "STM32F103MINIMUM_FLASH_PART && MTD_PARTITION_NAMES && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM", "defaults": [{"name": "first,second,third,forth", "default": "first,second,third,forth", "cond": "STM32F103MINIMUM_FLASH_PART && MTD_PARTITION_NAMES && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM"}], "help": "Comma separated list of partition names."}]}]}, {"type": 27, "name": "STM32F103MINIMUM_QETIMER", "value": "", "user_value": null, "dep": "n", "prompt": "Timer to use with QE encoder", "cond": "QENCODER && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM", "defaults": [{"name": "4", "default": "4", "cond": "QENCODER && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM"}]}, {"type": 6, "dep": "n", "prompt": "STM3210E-EVAL LCD Hardware Configuration", "cond": "ARCH_BOARD_STM3210E_EVAL && ARCH_BOARD_STM3210E_EVAL"}, {"type": 3, "name": "STM3210E_LCD", "value": "n", "user_value": null, "dep": "n", "prompt": "Select support for the STM3210E-EVAL LCD", "cond": "STM32_FSMC && ARCH_BOARD_STM3210E_EVAL && ARCH_BOARD_STM3210E_EVAL", "defaults": [{"name": "n", "default": "n", "cond": "STM32_FSMC && ARCH_BOARD_STM3210E_EVAL && ARCH_BOARD_STM3210E_EVAL"}], "selects": [{"symbol": "LCD", "cond": "STM32_FSMC && ARCH_BOARD_STM3210E_EVAL && ARCH_BOARD_STM3210E_EVAL"}], "help": "Enable support for the LCD on the STM3210E-EVAL board.  See additional,\nLCD-common settings in the drivers/lcd Kconfig file.", "children": [{"type": 3, "name": "STM3210E_LCD_BACKLIGHT", "value": "n", "user_value": null, "dep": "n", "prompt": "LCD backlight support", "cond": "STM3210E_LCD && ARCH_BOARD_STM3210E_EVAL && ARCH_BOARD_STM3210E_EVAL", "defaults": [{"name": "n", "default": "n", "cond": "STM3210E_LCD && ARCH_BOARD_STM3210E_EVAL && ARCH_BOARD_STM3210E_EVAL"}], "help": "Define to support a backlight.", "children": [{"type": 3, "name": "STM3210E_LCD_PWM", "value": "n", "user_value": null, "dep": "n", "prompt": "LCD backlight PWM control", "cond": "STM3210E_LCD_BACKLIGHT && STM32_TIM1 && ARCH_BOARD_STM3210E_EVAL && ARCH_BOARD_STM3210E_EVAL", "defaults": [{"name": "n", "default": "n", "cond": "STM3210E_LCD_BACKLIGHT && STM32_TIM1 && ARCH_BOARD_STM3210E_EVAL && ARCH_BOARD_STM3210E_EVAL"}], "help": "If STM32_TIM1 is also defined, then an adjustable backlight will be\nprovided using timer 1 to generate various pulse widthes.  The\ngranularity of the settings is determined by LCD_MAXPOWER.  If STM3210E_LCD_PWM\n(or STM32_TIM1) is not defined, then a simple on/off backlight is\nprovided."}]}, {"type": 27, "name": "STM3210E_LCD_RDSHIFT", "value": "", "user_value": null, "dep": "n", "prompt": "LCD data shift", "cond": "STM3210E_LCD && ARCH_BOARD_STM3210E_EVAL && ARCH_BOARD_STM3210E_EVAL", "defaults": [{"name": "5", "default": "5", "cond": "STM3210E_LCD && ARCH_BOARD_STM3210E_EVAL && ARCH_BOARD_STM3210E_EVAL"}], "help": "When reading 16-bit gram data, there appears to be a shift in the returned\ndata.  This value fixes the offset.  Default 5."}, {"type": 3, "name": "STM3210E_AM240320_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable AM240320 support", "cond": "STM3210E_LCD && ARCH_BOARD_STM3210E_EVAL && ARCH_BOARD_STM3210E_EVAL", "defaults": [{"name": "n", "default": "n", "cond": "STM3210E_LCD && ARCH_BOARD_STM3210E_EVAL && ARCH_BOARD_STM3210E_EVAL"}], "help": "The LCD driver dynamically selects the LCD based on the reported LCD\nID value.  However, code size can be reduced by suppressing support for\nindividual LCDs using this option"}, {"type": 3, "name": "STM3210E_SPFD5408B_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable SPFD5408B support", "cond": "STM3210E_LCD && ARCH_BOARD_STM3210E_EVAL && ARCH_BOARD_STM3210E_EVAL", "defaults": [{"name": "n", "default": "n", "cond": "STM3210E_LCD && ARCH_BOARD_STM3210E_EVAL && ARCH_BOARD_STM3210E_EVAL"}], "help": "The LCD driver dynamically selects the LCD based on the reported LCD\nID value.  However, code size can be reduced by suppressing support for\nindividual LCDs using this option"}, {"type": 3, "name": "STM3210E_R61580_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable R61580 support", "cond": "STM3210E_LCD && ARCH_BOARD_STM3210E_EVAL && ARCH_BOARD_STM3210E_EVAL", "defaults": [{"name": "n", "default": "n", "cond": "STM3210E_LCD && ARCH_BOARD_STM3210E_EVAL && ARCH_BOARD_STM3210E_EVAL"}], "help": "The LCD driver dynamically selects the LCD based on the reported LCD\nID value.  However, code size can be reduced by suppressing support for\nindividual LCDs using this option"}]}, {"type": 3, "name": "PM_BUTTONS", "value": "n", "user_value": null, "dep": "n", "prompt": "PM Button support", "cond": "PM && ARCH_IRQBUTTONS && ARCH_BOARD_STM3210E_EVAL", "defaults": [{"name": "n", "default": "n", "cond": "PM && ARCH_IRQBUTTONS && ARCH_BOARD_STM3210E_EVAL"}], "help": "Enable PM button EXTI interrupts to support PM testing", "children": [{"type": 27, "name": "PM_BUTTONS_MIN", "value": "", "user_value": null, "dep": "n", "prompt": "Minimum button number", "cond": "PM_BUTTONS && ARCH_BOARD_STM3210E_EVAL", "defaults": [{"name": "0", "default": "0", "cond": "PM_BUTTONS && ARCH_BOARD_STM3210E_EVAL"}], "help": "The lowest button code to use for PM testing (see board.h)"}, {"type": 27, "name": "PM_BUTTONS_MAX", "value": "", "user_value": null, "dep": "n", "prompt": "Maximum button number", "cond": "PM_BUTTONS && ARCH_BOARD_STM3210E_EVAL", "defaults": [{"name": "7", "default": "7", "cond": "PM_BUTTONS && ARCH_BOARD_STM3210E_EVAL"}], "help": "The highest button code to use for PM testing (see board.h)"}, {"type": 27, "name": "PM_IRQBUTTONS_MIN", "value": "", "user_value": null, "dep": "n", "prompt": "Minimum interrupting button number", "cond": "PM_BUTTONS && ARCH_BOARD_STM3210E_EVAL", "defaults": [{"name": "0", "default": "0", "cond": "PM_BUTTONS && ARCH_BOARD_STM3210E_EVAL"}], "help": "The lowest interrupting button code to use for PM testing (see board.h)"}, {"type": 27, "name": "PM_IRQBUTTONS_MAX", "value": "", "user_value": null, "dep": "n", "prompt": "Maximum interrupting button number", "cond": "PM_BUTTONS && ARCH_BOARD_STM3210E_EVAL", "defaults": [{"name": "7", "default": "7", "cond": "PM_BUTTONS && ARCH_BOARD_STM3210E_EVAL"}], "help": "The highest interrupting button code to use for PM testing (see board.h)"}, {"type": 27, "name": "PM_BUTTON_ACTIVITY", "value": "", "user_value": null, "dep": "n", "prompt": "Button PM activity weight", "cond": "PM_BUTTONS && ARCH_BOARD_STM3210E_EVAL", "defaults": [{"name": "10", "default": "10", "cond": "PM_BUTTONS && ARCH_BOARD_STM3210E_EVAL"}], "help": "The activity weight to report to the power management subsystem when a button is pressed."}]}, {"type": 27, "name": "PM_ALARM_SEC", "value": "", "user_value": null, "dep": "n", "prompt": "PM_STANDBY delay (seconds)", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM3210E_EVAL", "defaults": [{"name": "15", "default": "15", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM3210E_EVAL"}], "help": "Number of seconds to wait in PM_STANDBY before going to PM_STANDBY mode."}, {"type": 27, "name": "PM_ALARM_NSEC", "value": "", "user_value": null, "dep": "n", "prompt": "PM_STANDBY delay (nanoseconds)", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM3210E_EVAL", "defaults": [{"name": "0", "default": "0", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM3210E_EVAL"}], "help": "Number of additional nanoseconds to wait in PM_STANDBY before going to PM_STANDBY mode."}, {"type": 3, "name": "PM_SLEEP_WAKEUP", "value": "n", "user_value": null, "dep": "n", "prompt": "PM_SLEEP wake-up alarm", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM3210E_EVAL", "defaults": [{"name": "n", "default": "n", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM3210E_EVAL"}], "help": "Wake-up of PM_SLEEP mode after a delay and resume normal operation."}, {"type": 27, "name": "PM_SLEEP_WAKEUP_SEC", "value": "", "user_value": null, "dep": "n", "prompt": "PM_SLEEP delay (seconds)", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM3210E_EVAL", "defaults": [{"name": "10", "default": "10", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM3210E_EVAL"}], "help": "Number of seconds to wait in PM_SLEEP before going to PM_STANDBY mode."}, {"type": 27, "name": "PM_SLEEP_WAKEUP_NSEC", "value": "", "user_value": null, "dep": "n", "prompt": "PM_SLEEP delay (nanoseconds)", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM3210E_EVAL", "defaults": [{"name": "0", "default": "0", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM3210E_EVAL"}], "help": "Number of additional nanoseconds to wait in PM_SLEEP before going to PM_STANDBY mode."}, {"type": 3, "name": "STM3220G_LCD", "value": "n", "user_value": null, "dep": "n", "prompt": "Select support for the STM3210E-EVAL LCD", "cond": "LCD && STM32_FSMC && ARCH_BOARD_STM3220G_EVAL && ARCH_BOARD_STM3220G_EVAL", "defaults": [{"name": "y", "default": "y", "cond": "LCD && STM32_FSMC && ARCH_BOARD_STM3220G_EVAL && ARCH_BOARD_STM3220G_EVAL"}], "help": "Enable support for the LCD on the STM3220G-EVAL board.  See additional,\nLCD-common settings in the drivers/lcd Kconfig file.", "children": [{"type": 27, "name": "LCD_RDSHIFT", "value": "", "user_value": null, "dep": "n", "prompt": "LCD data shift", "cond": "STM3220G_LCD && ARCH_BOARD_STM3220G_EVAL && ARCH_BOARD_STM3220G_EVAL", "defaults": [{"name": "5", "default": "5", "cond": "STM3220G_LCD && ARCH_BOARD_STM3220G_EVAL && ARCH_BOARD_STM3220G_EVAL"}], "help": "When reading 16-bit gram data, there appears to be a shift in the returned\ndata.  This value fixes the offset.  Default 5."}, {"type": 3, "name": "STM32_ILI9320_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable LCD_ILI9320 (and LCD_ILI9321) support", "cond": "STM3220G_LCD && ARCH_BOARD_STM3220G_EVAL && ARCH_BOARD_STM3220G_EVAL", "defaults": [{"name": "n", "default": "n", "cond": "STM3220G_LCD && ARCH_BOARD_STM3220G_EVAL && ARCH_BOARD_STM3220G_EVAL"}], "help": "The LCD driver dynamically selects the LCD based on the reported LCD\nID value.  However, code size can be reduced by suppressing support for\nindividual LCDs using this option."}, {"type": 3, "name": "STM32_ILI9325_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable LCD_ILI9325 support", "cond": "STM3220G_LCD && ARCH_BOARD_STM3220G_EVAL && ARCH_BOARD_STM3220G_EVAL", "defaults": [{"name": "n", "default": "n", "cond": "STM3220G_LCD && ARCH_BOARD_STM3220G_EVAL && ARCH_BOARD_STM3220G_EVAL"}], "help": "The LCD driver dynamically selects the LCD based on the reported LCD\nID value.  However, code size can be reduced by suppressing support for\nindividual LCDs using this option"}]}, {"type": 3, "name": "STM3240G_LCD", "value": "n", "user_value": null, "dep": "n", "prompt": "Support STM3240G-EVAL LCD", "cond": "LCD && STM32_FSMC && ARCH_BOARD_STM3240G_EVAL && ARCH_BOARD_STM3240G_EVAL", "defaults": [{"name": "y", "default": "y", "cond": "LCD && STM32_FSMC && ARCH_BOARD_STM3240G_EVAL && ARCH_BOARD_STM3240G_EVAL"}], "help": "Enable support for the LCD on the STM3240G-EVAL board.  See additional,\nLCD-common settings in the drivers/lcd Kconfig file.", "children": [{"type": 27, "name": "STM3240G_LCD_RDSHIFT", "value": "", "user_value": null, "dep": "n", "prompt": "LCD data shift", "cond": "STM3240G_LCD && ARCH_BOARD_STM3240G_EVAL && ARCH_BOARD_STM3240G_EVAL", "defaults": [{"name": "5", "default": "5", "cond": "STM3240G_LCD && ARCH_BOARD_STM3240G_EVAL && ARCH_BOARD_STM3240G_EVAL"}], "help": "When reading 16-bit gram data, there appears to be a shift in the returned\ndata.  This value fixes the offset.  Default 5."}, {"type": 3, "name": "STM3240G_ILI9320_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable LCD_ILI9320 (and LCD_ILI9321) support", "cond": "STM3240G_LCD && ARCH_BOARD_STM3240G_EVAL && ARCH_BOARD_STM3240G_EVAL", "defaults": [{"name": "n", "default": "n", "cond": "STM3240G_LCD && ARCH_BOARD_STM3240G_EVAL && ARCH_BOARD_STM3240G_EVAL"}], "help": "The LCD driver dynamically selects the LCD based on the reported LCD\nID value.  However, code size can be reduced by suppressing support for\nindividual LCDs using this option."}, {"type": 3, "name": "STM3240G_ILI9325_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable LCD_ILI9325 support", "cond": "STM3240G_LCD && ARCH_BOARD_STM3240G_EVAL && ARCH_BOARD_STM3240G_EVAL", "defaults": [{"name": "n", "default": "n", "cond": "STM3240G_LCD && ARCH_BOARD_STM3240G_EVAL && ARCH_BOARD_STM3240G_EVAL"}], "help": "The LCD driver dynamically selects the LCD based on the reported LCD\nID value.  However, code size can be reduced by suppressing support for\nindividual LCDs using this option"}]}, {"type": 27, "name": "STM3240G_BOARDINIT_PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Board initialization thread priority", "cond": "BOARD_INITIALIZE && ARCH_BOARD_STM3240G_EVAL && ARCH_BOARD_STM3240G_EVAL", "defaults": [{"name": "196", "default": "196", "cond": "BOARD_INITIALIZE && ARCH_BOARD_STM3240G_EVAL && ARCH_BOARD_STM3240G_EVAL"}], "help": "If BOARD_INITIALIZE initialize is defined, then the function\nboard_initialize() will be called to perform board-specific\ninitialization. board_initialize() runs on the IDLE thread.\nDepending on the features that are enabled, this  board\ninitialization logic may need to start a kernel thread that has\nmore capability than the IDLE thread.  This setting then provides\nthe priority of the board initialization thread.\n\nNOTE:  STM3240G_BOARDINIT_PRIO should have a relatively high\npriority to assure that board level initialization completes\nbefore the application requires the initialized board services.\nDefault: 196"}, {"type": 27, "name": "STM3240G_BOARDINIT_STACK", "value": "", "user_value": null, "dep": "n", "prompt": "Board initialization thread Size", "cond": "BOARD_INITIALIZE && ARCH_BOARD_STM3240G_EVAL && ARCH_BOARD_STM3240G_EVAL", "defaults": [{"name": "2048", "default": "2048", "cond": "BOARD_INITIALIZE && ARCH_BOARD_STM3240G_EVAL && ARCH_BOARD_STM3240G_EVAL"}], "help": "If BOARD_INITIALIZE initialize is defined, then the function\nboard_initialize() will be called to perform board-specific\ninitialization. board_initialize() runs on the IDLE thread.\nDepending on the features that are enabled, this  board\ninitialization logic may need to start a kernel thread that has\nmore capability than the IDLE thread.  This setting then provides\nthe size of the stack to use with the initialization kernel thread."}, {"type": 3, "name": "STM32F4DISBB", "value": "n", "user_value": null, "dep": "n", "prompt": "STM32F4DIS-BB base board", "cond": "ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY"}], "help": "Select if you are using the STM32F4DIS-BB base board with the\nSTM32F4Discovery."}, {"type": 27, "name": "STM32F4DISCO_USBHOST_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "USB host waiter stack size", "cond": "USBHOST && ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY", "defaults": [{"name": "1024", "default": "1024", "cond": "USBHOST && ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY"}]}, {"type": 27, "name": "STM32F4DISCO_USBHOST_PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "USB host waiter task priority", "cond": "USBHOST && ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY", "defaults": [{"name": "100", "default": "100", "cond": "USBHOST && ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY"}]}, {"type": 27, "name": "STM32F4DISCO_QETIMER", "value": "", "user_value": null, "dep": "n", "prompt": "Timer to use with QE encoder", "cond": "QENCODER && ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY", "defaults": [{"name": "2", "default": "2", "cond": "QENCODER && ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY"}]}, {"type": 3, "name": "PM_BUTTONS", "value": "n", "user_value": null, "dep": "n", "prompt": "PM button support", "cond": "PM && ARCH_IRQBUTTONS && ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY", "defaults": [{"name": "n", "default": "n", "cond": "PM && ARCH_IRQBUTTONS && ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY"}], "help": "Enable PM button EXTI interrupts to support PM testing", "children": [{"type": 27, "name": "PM_BUTTON_ACTIVITY", "value": "", "user_value": null, "dep": "n", "prompt": "Button PM activity weight", "cond": "PM_BUTTONS && ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY", "defaults": [{"name": "10", "default": "10", "cond": "PM_BUTTONS && ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY"}], "help": "The activity weight to report to the power management subsystem when\na button is pressed."}]}, {"type": 27, "name": "PM_ALARM_SEC", "value": "", "user_value": null, "dep": "n", "prompt": "PM_STANDBY delay (seconds)", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY", "defaults": [{"name": "15", "default": "15", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY"}], "help": "Number of seconds to wait in PM_STANDBY before going to PM_STANDBY\nmode."}, {"type": 27, "name": "PM_ALARM_NSEC", "value": "", "user_value": null, "dep": "n", "prompt": "PM_STANDBY delay (nanoseconds)", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY", "defaults": [{"name": "0", "default": "0", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY"}], "help": "Number of additional nanoseconds to wait in PM_STANDBY before going\nto PM_STANDBY mode."}, {"type": 3, "name": "PM_SLEEP_WAKEUP", "value": "n", "user_value": null, "dep": "n", "prompt": "PM_SLEEP wake-up alarm", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY", "defaults": [{"name": "n", "default": "n", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY"}], "help": "Wake-up of PM_SLEEP mode after a delay and resume normal operation."}, {"type": 27, "name": "PM_SLEEP_WAKEUP_SEC", "value": "", "user_value": null, "dep": "n", "prompt": "PM_SLEEP delay (seconds)", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY", "defaults": [{"name": "10", "default": "10", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY"}], "help": "Number of seconds to wait in PM_SLEEP before going to PM_STANDBY mode."}, {"type": 27, "name": "PM_SLEEP_WAKEUP_NSEC", "value": "", "user_value": null, "dep": "n", "prompt": "PM_SLEEP delay (nanoseconds)", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY", "defaults": [{"name": "0", "default": "0", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM32F4_DISCOVERY && ARCH_BOARD_STM32F4_DISCOVERY"}], "help": "Number of additional nanoseconds to wait in PM_SLEEP before going to\nPM_STANDBY mode."}, {"type": 27, "name": "STM32F411DISCO_USBHOST_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "USB host waiter stack size", "cond": "USBHOST && ARCH_BOARD_STM32F411E_DISCO && ARCH_BOARD_STM32F411E_DISCO", "defaults": [{"name": "1024", "default": "1024", "cond": "USBHOST && ARCH_BOARD_STM32F411E_DISCO && ARCH_BOARD_STM32F411E_DISCO"}]}, {"type": 27, "name": "STM32F411DISCO_USBHOST_PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "USB host waiter task priority", "cond": "USBHOST && ARCH_BOARD_STM32F411E_DISCO && ARCH_BOARD_STM32F411E_DISCO", "defaults": [{"name": "100", "default": "100", "cond": "USBHOST && ARCH_BOARD_STM32F411E_DISCO && ARCH_BOARD_STM32F411E_DISCO"}]}, {"type": 3, "name": "STM32F429I_DISCO_FLASH", "value": "n", "user_value": null, "dep": "n", "prompt": "MTD driver for external 8Mbyte SST25 FLASH on SPI4", "cond": "ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "selects": [{"symbol": "MTD", "cond": "ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}, {"symbol": "MTD_SST25XX", "cond": "ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}, {"symbol": "MTD_SMART", "cond": "ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}, {"symbol": "FS_SMARTFS", "cond": "ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}, {"symbol": "STM32_SPI4", "cond": "ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}, {"symbol": "MTD_BYTE_WRITE", "cond": "ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "Configures an MTD device for use with the onboard flash", "children": [{"type": 27, "name": "STM32F429I_DISCO_FLASH_MINOR", "value": "", "user_value": null, "dep": "n", "prompt": "Minor number for the FLASH /dev/smart entry", "cond": "STM32F429I_DISCO_FLASH && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "0", "default": "0", "cond": "STM32F429I_DISCO_FLASH && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "Sets the minor number for the FLASH MTD /dev entry"}, {"type": 3, "name": "STM32F429I_DISCO_FLASH_PART", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable partition support on FLASH", "cond": "STM32F429I_DISCO_FLASH && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "n", "default": "n", "cond": "STM32F429I_DISCO_FLASH && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "Enables creation of partitions on the FLASH", "children": [{"type": 3, "name": "STM32F429I_DISCO_FLASH_CONFIG_PART", "value": "n", "user_value": null, "dep": "n", "prompt": "Create application config data partition on FLASH", "cond": "STM32F429I_DISCO_FLASH_PART && PLATFORM_CONFIGDATA && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "y", "default": "y", "cond": "STM32F429I_DISCO_FLASH_PART && PLATFORM_CONFIGDATA && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "Enables creation of a /dev/config partition on the FLASH", "children": [{"type": 27, "name": "STM32F429I_DISCO_FLASH_CONFIG_PART_NUMBER", "value": "", "user_value": null, "dep": "n", "prompt": "Index number of config partition (in list below)", "cond": "STM32F429I_DISCO_FLASH_CONFIG_PART && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "0", "default": "0", "cond": "STM32F429I_DISCO_FLASH_CONFIG_PART && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "Specifies the index number of the config data partition\nfrom the partition list."}]}, {"type": 47, "name": "STM32F429I_DISCO_FLASH_PART_LIST", "value": "", "user_value": null, "dep": "n", "prompt": "Flash partition size list", "cond": "STM32F429I_DISCO_FLASH_PART && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "4,8188", "default": "4,8188", "cond": "STM32F429I_DISCO_FLASH_PART && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "Comma separated list of partition sizes in KB."}, {"type": 47, "name": "STM32F429I_DISCO_FLASH_PART_NAMES", "value": "", "user_value": null, "dep": "n", "prompt": "Flash partition name list", "cond": "STM32F429I_DISCO_FLASH_PART && MTD_PARTITION_NAMES && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "config,rfs", "default": "config,rfs", "cond": "STM32F429I_DISCO_FLASH_PART && MTD_PARTITION_NAMES && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "Comma separated list of partition names."}]}]}, {"type": 3, "name": "STM32F429I_DISCO_RAMMTD", "value": "n", "user_value": null, "dep": "n", "prompt": "MTD driver for SMARTFS RAM disk", "cond": "ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "selects": [{"symbol": "MTD", "cond": "ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}, {"symbol": "RAMMTD", "cond": "ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "Configures an MTD based RAM device for use with SMARTFS.", "children": [{"type": 27, "name": "STM32F429I_DISCO_RAMMTD_MINOR", "value": "", "user_value": null, "dep": "n", "prompt": "Minor number for RAM /dev/smart entry", "cond": "STM32F429I_DISCO_RAMMTD && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "1", "default": "1", "cond": "STM32F429I_DISCO_RAMMTD && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "Sets the minor number for the RAM MTD /dev entry"}, {"type": 27, "name": "STM32F429I_DISCO_RAMMTD_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Size in KB of the RAM device to create", "cond": "STM32F429I_DISCO_RAMMTD && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "32", "default": "32", "cond": "STM32F429I_DISCO_RAMMTD && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "Sets the size of static RAM allocation for the SMART RAM device"}]}, {"type": 27, "name": "STM32F429IDISCO_USBHOST_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "USB host waiter stack size", "cond": "USBHOST && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "1024", "default": "1024", "cond": "USBHOST && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}]}, {"type": 27, "name": "STM32F429IDISCO_USBHOST_PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "USB host waiter task priority", "cond": "USBHOST && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "100", "default": "100", "cond": "USBHOST && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}]}, {"type": 3, "name": "PM_BUTTONS", "value": "n", "user_value": null, "dep": "n", "prompt": "PM Button support", "cond": "PM && ARCH_IRQBUTTONS && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "n", "default": "n", "cond": "PM && ARCH_IRQBUTTONS && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "Enable PM button EXTI interrupts to support PM testing", "children": [{"type": 27, "name": "PM_BUTTON_ACTIVITY", "value": "", "user_value": null, "dep": "n", "prompt": "Button PM activity weight", "cond": "PM_BUTTONS && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "10", "default": "10", "cond": "PM_BUTTONS && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "The activity weight to report to the power management subsystem when a button is pressed."}]}, {"type": 27, "name": "PM_ALARM_SEC", "value": "", "user_value": null, "dep": "n", "prompt": "PM_STANDBY delay (seconds)", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "15", "default": "15", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "Number of seconds to wait in PM_STANDBY before going to PM_STANDBY mode."}, {"type": 27, "name": "PM_ALARM_NSEC", "value": "", "user_value": null, "dep": "n", "prompt": "PM_STANDBY delay (nanoseconds)", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "0", "default": "0", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "Number of additional nanoseconds to wait in PM_STANDBY before going to PM_STANDBY mode."}, {"type": 3, "name": "PM_SLEEP_WAKEUP", "value": "n", "user_value": null, "dep": "n", "prompt": "PM_SLEEP wake-up alarm", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "n", "default": "n", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "Wake-up of PM_SLEEP mode after a delay and resume normal operation."}, {"type": 27, "name": "PM_SLEEP_WAKEUP_SEC", "value": "", "user_value": null, "dep": "n", "prompt": "PM_SLEEP delay (seconds)", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "10", "default": "10", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "Number of seconds to wait in PM_SLEEP before going to PM_STANDBY mode."}, {"type": 27, "name": "PM_SLEEP_WAKEUP_NSEC", "value": "", "user_value": null, "dep": "n", "prompt": "PM_SLEEP delay (nanoseconds)", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "0", "default": "0", "cond": "PM && RTC_ALARM && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "Number of additional nanoseconds to wait in PM_SLEEP before going to PM_STANDBY mode."}, {"type": 3, "name": "STM32F429I_DISCO_ILI9341", "value": "n", "user_value": null, "menuconfig": true, "dep": "n", "prompt": "LCD driver for ILI9341 Liquid Crystal Display Controller", "cond": "ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "Enables  support for a connected display based on ili9341 LCD Single Chip\nDriver. This sub driver supports only communication with the display driver\nconnected via 4-wire serial (spi) mcu interface.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "LCD Interface Type", "cond": "STM32F429I_DISCO_ILI9341 && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "STM32F429I_DISCO_ILI9341_NONE", "default": "n", "cond": "!LCD_ILI9341 && !STM32_LTDC && STM32F429I_DISCO_ILI9341 && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}, {"name": "STM32F429I_DISCO_ILI9341_LCDIFACE", "default": "n", "cond": "LCD_ILI9341 && !STM32_LTDC && STM32F429I_DISCO_ILI9341 && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}, {"name": "STM32F429I_DISCO_ILI9341_FBIFACE", "default": "n", "cond": "STM32_LTDC && STM32F429I_DISCO_ILI9341 && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "children": [{"type": 3, "name": "STM32F429I_DISCO_ILI9341_NONE", "value": "n", "user_value": null, "dep": "n", "prompt": "No LCD interface", "cond": "y"}, {"type": 3, "name": "STM32F429I_DISCO_ILI9341_LCDIFACE", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable support for nuttx LCD interface", "cond": "LCD_ILI9341 && y", "help": "Enable lcd driver support for the nuttx lcd interface."}, {"type": 3, "name": "STM32F429I_DISCO_ILI9341_FBIFACE", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable support for nuttx framebuffer interface", "cond": "STM32_LTDC && y", "help": "Enable lcd driver support for the nuttx framebuffer interface to displaying\ndata via ltdc controller of the stm32f429i mcu."}]}, {"type": 27, "name": "STM32F429I_DISCO_ILI9341_LCDDEVICE", "value": "", "user_value": null, "dep": "n", "prompt": "LCD interface", "cond": "STM32F429I_DISCO_ILI9341_LCDIFACE && STM32F429I_DISCO_ILI9341_LCDIFACE && STM32F429I_DISCO_ILI9341 && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "0", "default": "0", "cond": "STM32F429I_DISCO_ILI9341_LCDIFACE && STM32F429I_DISCO_ILI9341_LCDIFACE && STM32F429I_DISCO_ILI9341 && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "ranges": [{"min": "0", "max": "1", "cond": "STM32F429I_DISCO_ILI9341_LCDIFACE && STM32F429I_DISCO_ILI9341_LCDIFACE && STM32F429I_DISCO_ILI9341 && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "Define the lcd interface which should be used. This must be\ncorresponding to the configured ili9341 LCD device in the driver\nsection."}, {"type": 27, "name": "STM32F429I_DISCO_ILI9341_SPIFREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "SPI frequency", "cond": "STM32F429I_DISCO_ILI9341_LCDIFACE && STM32F429I_DISCO_ILI9341 && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "12000000", "default": "12000000", "cond": "STM32F429I_DISCO_ILI9341_LCDIFACE && STM32F429I_DISCO_ILI9341 && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "Define the bus frequency of the SPI device."}, {"type": 3, "name": "STM32F429I_DISCO_ILI9341_SPIBITS16", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable 16 bit pixel read/write", "cond": "STM32F429I_DISCO_ILI9341_LCDIFACE && STM32F429I_DISCO_ILI9341 && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "n", "default": "n", "cond": "STM32F429I_DISCO_ILI9341_LCDIFACE && STM32F429I_DISCO_ILI9341 && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "This enables faster 16-bit SPI mode for transmitting or receiving pixel data\nto or from the display gram. But uses default 8-bit SPI mode for all other\ndisplay operations."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "LCD Orientation", "cond": "STM32F429I_DISCO_ILI9341_FBIFACE && STM32F429I_DISCO_ILI9341 && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "defaults": [{"name": "STM32F429I_DISCO_ILI9341_FBIFACE_PORTRAIT", "default": "n", "cond": "STM32F429I_DISCO_ILI9341_FBIFACE && STM32F429I_DISCO_ILI9341 && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO"}], "help": "Configure display orientation.", "children": [{"type": 3, "name": "STM32F429I_DISCO_ILI9341_FBIFACE_LANDSCAPE", "value": "n", "user_value": null, "dep": "n", "prompt": "Landscape orientation", "cond": "y", "help": "Define for \"landscape\" orientation support."}, {"type": 3, "name": "STM32F429I_DISCO_ILI9341_FBIFACE_PORTRAIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Portrait orientation", "cond": "y", "help": "Define for \"portrait\" orientation support."}, {"type": 3, "name": "STM32F429I_DISCO_ILI9341_FBIFACE_RLANDSCAPE", "value": "n", "user_value": null, "dep": "n", "prompt": "Reverse landscape orientation", "cond": "y", "help": "Define for \"reverse landscape\" orientation support."}, {"type": 3, "name": "STM32F429I_DISCO_ILI9341_FBIFACE_RORTRAIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Reverse portrait display", "cond": "y", "help": "Define for \"reverse portrait\" orientation support."}]}]}, {"type": 3, "name": "B_L475E_IOT01A_MTD_FLASH", "value": "n", "user_value": null, "dep": "n", "prompt": "MTD driver for external 64Mbytes flash memory", "cond": "ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A"}], "selects": [{"symbol": "STM32L4_DMA1", "cond": "ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A"}, {"symbol": "STM32L4_QSPI", "cond": "ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A"}, {"symbol": "MTD", "cond": "ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A"}, {"symbol": "MTD_MX25RXX", "cond": "ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A"}, {"symbol": "MTD_SMART", "cond": "ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A"}, {"symbol": "MTD_SMART_MINIMIZE_RAM", "cond": "ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A"}, {"symbol": "FS_SMARTFS", "cond": "ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A"}], "help": "Configures an MTD device for use with the onboard external flash\nusing QuadSPI interface.", "children": [{"type": 27, "name": "B_L475E_IOT01A_MTD_FLASH_MINOR", "value": "", "user_value": null, "dep": "n", "prompt": "Minor number for the flash memory /dev/smart entry", "cond": "B_L475E_IOT01A_MTD_FLASH && ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A", "defaults": [{"name": "0", "default": "0", "cond": "B_L475E_IOT01A_MTD_FLASH && ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A"}], "help": "Sets the minor number for the flash memory /dev/smart entry"}, {"type": 3, "name": "B_L475E_IOT01A_MTD_PART", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable partition support", "cond": "B_L475E_IOT01A_MTD_FLASH && ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A", "defaults": [{"name": "n", "default": "n", "cond": "B_L475E_IOT01A_MTD_FLASH && ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A"}], "selects": [{"symbol": "MTD_PARTITION", "cond": "B_L475E_IOT01A_MTD_FLASH && ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A"}], "help": "Enables creation of partitions on the external flash memory.", "children": [{"type": 47, "name": "B_L475E_IOT01A_MTD_PART_LIST", "value": "", "user_value": null, "dep": "n", "prompt": "Flash partition size list", "cond": "B_L475E_IOT01A_MTD_PART && B_L475E_IOT01A_MTD_FLASH && ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A", "defaults": [{"name": "512,8192,8192,16384", "default": "512,8192,8192,16384", "cond": "B_L475E_IOT01A_MTD_PART && B_L475E_IOT01A_MTD_FLASH && ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A"}], "help": "Comma separated list of partition sizes in KB."}]}]}, {"type": 27, "name": "STM32LDISCO_QETIMER", "value": "", "user_value": null, "dep": "n", "prompt": "Timer to use with QE encoder", "cond": "QENCODER && ARCH_BOARD_STM32FL_DISCOVERY && ARCH_BOARD_STM32L_DISCOVERY", "defaults": [{"name": "3", "default": "3", "cond": "QENCODER && ARCH_BOARD_STM32FL_DISCOVERY && ARCH_BOARD_STM32L_DISCOVERY"}]}, {"type": 6, "dep": "n", "prompt": "STM32VL-Discovery Hardware Configuration", "cond": "ARCH_BOARD_STM32VL_DISCOVERY && ARCH_BOARD_STM32VL_DISCOVERY"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Select Sure PIC32MX Board", "cond": "ARCH_BOARD_SUREPIC32MX && ARCH_BOARD_SUREPIC32MX", "defaults": [{"name": "ARCH_DBDP11215", "default": "n", "cond": "ARCH_BOARD_SUREPIC32MX && ARCH_BOARD_SUREPIC32MX"}], "children": [{"type": 3, "name": "ARCH_DBDP11215", "value": "n", "user_value": null, "dep": "n", "prompt": "DB_DP11215 PIC32 Storage Demo Board", "cond": "y", "selects": [{"symbol": "ARCH_HAVE_LEDS", "cond": "y"}], "help": "DB_DP11215 PIC32 Storage Demo Board\n\n- PIC32MX44F512H\n- SD card slot\n- RS-2323 Interface\n- USB (MINI-B)\n- 2x16 LCD display\n- Three tactile switches\n- Four user LEDs"}, {"type": 3, "name": "ARCH_DBDP11212", "value": "n", "user_value": null, "dep": "n", "prompt": "DB-DP11212 PIC32 General Purpose Demo Board", "cond": "y", "help": "DB-DP11212 PIC32 General Purpose Demo Board\n\n- PIC32MX44F512H\n- LM75A temperature sensor and temperature resistor (NTC-SMD thermistor)\n- SPI FLASH: AT25DF041A\n- USB (MINI-B)\n- 2x16 LCD display\n- 4 digit, 8 segment LED display\n- Three tactile switches"}]}, {"type": 3, "name": "TEENSY_3X_OVERCLOCK", "value": "n", "user_value": null, "dep": "n", "prompt": "Overclock", "cond": "ARCH_BOARD_TEENSY_3X && ARCH_BOARD_TEENSY_3X", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BOARD_TEENSY_3X && ARCH_BOARD_TEENSY_3X"}]}, {"type": 3, "name": "TM4C123G_LAUNCHPAD_AT24_BLOCKMOUNT", "value": "n", "user_value": null, "dep": "n", "prompt": "AT24 Serial EEPROM auto-mount", "cond": "NSH_ARCHINIT && TIVA_I2C0 && MTD_AT24XX && ARCH_BOARD_TM4C123G_LAUNCHPAD && ARCH_BOARD_TM4C123G_LAUNCHPAD", "defaults": [{"name": "n", "default": "n", "cond": "NSH_ARCHINIT && TIVA_I2C0 && MTD_AT24XX && ARCH_BOARD_TM4C123G_LAUNCHPAD && ARCH_BOARD_TM4C123G_LAUNCHPAD"}], "help": "Automatically initialize the AT24 SPI EEPROM driver when NSH starts.\n\nThe Serial EEPROM was mounted on an external adaptor board and\nconnected to the LaunchPad thusly:\n\n- VCC -- VCC\n- GND -- GND\n- PB2 -- SCL\n- PB3  -- SDA", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "AT24 serial EPPROM configuration", "cond": "TM4C123G_LAUNCHPAD_AT24_BLOCKMOUNT && ARCH_BOARD_TM4C123G_LAUNCHPAD && ARCH_BOARD_TM4C123G_LAUNCHPAD", "defaults": [{"name": "TM4C123G_LAUNCHPAD_AT24_FTL", "default": "n", "cond": "TM4C123G_LAUNCHPAD_AT24_BLOCKMOUNT && ARCH_BOARD_TM4C123G_LAUNCHPAD && ARCH_BOARD_TM4C123G_LAUNCHPAD"}], "children": [{"type": 3, "name": "TM4C123G_LAUNCHPAD_AT24_FTL", "value": "n", "user_value": null, "dep": "n", "prompt": "Create AT24 block driver", "cond": "y", "help": "Create the MTD driver for the AT24 and \"wrap\" the AT24 as a standard\nblock driver that could then, for example, be mounted using FAT or\nany other file system.  Any file system may be used, but there will\nbe no wear-leveling."}, {"type": 3, "name": "TM4C123G_LAUNCHPAD_AT24_NXFFS", "value": "n", "user_value": null, "dep": "n", "prompt": "Create AT24 NXFFS file system", "cond": "FS_NXFFS && y", "help": "Create the MTD driver for the AT24 and mount the AT24 device as\na wear-leveling, NuttX FLASH file system (NXFFS).  The downside of\nNXFFS is that it can be very slow."}]}]}, {"type": 3, "name": "TM4C1294_LAUNCHPAD_TIMER", "value": "n", "user_value": null, "rev_dep": "(TM4C1294_LAUNCHPAD_TIMER0 && TIVA_TIMER0 && y) || (TM4C1294_LAUNCHPAD_TIMER1 && TIVA_TIMER1 && y) || (TM4C1294_LAUNCHPAD_TIMER2 && TIVA_TIMER2 && y) || (TM4C1294_LAUNCHPAD_TIMER3 && TIVA_TIMER3 && y) || (TM4C1294_LAUNCHPAD_TIMER4 && TIVA_TIMER4 && y) || (TM4C1294_LAUNCHPAD_TIMER5 && TIVA_TIMER5 && y) || (TM4C1294_LAUNCHPAD_TIMER6 && TIVA_TIMER6 && y) || (TM4C1294_LAUNCHPAD_TIMER7 && TIVA_TIMER7 && y)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "TIMER && TIVA_TIMER32_PERIODIC && ARCH_BOARD_TM4C1294_LAUNCHPAD && ARCH_BOARD_TM4C1294_LAUNCHPAD"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Timer driver selection", "cond": "TIMER && TIVA_TIMER32_PERIODIC && ARCH_BOARD_TM4C1294_LAUNCHPAD && ARCH_BOARD_TM4C1294_LAUNCHPAD", "defaults": [{"name": "TM4C1294_LAUNCHPAD_TIMER_NONE", "default": "n", "cond": "TIMER && TIVA_TIMER32_PERIODIC && ARCH_BOARD_TM4C1294_LAUNCHPAD && ARCH_BOARD_TM4C1294_LAUNCHPAD"}], "children": [{"type": 3, "name": "TM4C1294_LAUNCHPAD_TIMER_NONE", "value": "n", "user_value": null, "dep": "n", "prompt": "None", "cond": "y"}, {"type": 3, "name": "TM4C1294_LAUNCHPAD_TIMER0", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 0", "cond": "TIVA_TIMER0 && y", "selects": [{"symbol": "TM4C1294_LAUNCHPAD_TIMER", "cond": "TIVA_TIMER0 && y"}]}, {"type": 3, "name": "TM4C1294_LAUNCHPAD_TIMER1", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 1", "cond": "TIVA_TIMER1 && y", "selects": [{"symbol": "TM4C1294_LAUNCHPAD_TIMER", "cond": "TIVA_TIMER1 && y"}]}, {"type": 3, "name": "TM4C1294_LAUNCHPAD_TIMER2", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 2", "cond": "TIVA_TIMER2 && y", "selects": [{"symbol": "TM4C1294_LAUNCHPAD_TIMER", "cond": "TIVA_TIMER2 && y"}]}, {"type": 3, "name": "TM4C1294_LAUNCHPAD_TIMER3", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 3", "cond": "TIVA_TIMER3 && y", "selects": [{"symbol": "TM4C1294_LAUNCHPAD_TIMER", "cond": "TIVA_TIMER3 && y"}]}, {"type": 3, "name": "TM4C1294_LAUNCHPAD_TIMER4", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 4", "cond": "TIVA_TIMER4 && y", "selects": [{"symbol": "TM4C1294_LAUNCHPAD_TIMER", "cond": "TIVA_TIMER4 && y"}]}, {"type": 3, "name": "TM4C1294_LAUNCHPAD_TIMER5", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 5", "cond": "TIVA_TIMER5 && y", "selects": [{"symbol": "TM4C1294_LAUNCHPAD_TIMER", "cond": "TIVA_TIMER5 && y"}]}, {"type": 3, "name": "TM4C1294_LAUNCHPAD_TIMER6", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 6", "cond": "TIVA_TIMER6 && y", "selects": [{"symbol": "TM4C1294_LAUNCHPAD_TIMER", "cond": "TIVA_TIMER6 && y"}]}, {"type": 3, "name": "TM4C1294_LAUNCHPAD_TIMER7", "value": "n", "user_value": null, "dep": "n", "prompt": "Timer 7", "cond": "TIVA_TIMER7 && y", "selects": [{"symbol": "TM4C1294_LAUNCHPAD_TIMER", "cond": "TIVA_TIMER7 && y"}]}]}, {"type": 47, "name": "TM4C1294_LAUNCHPAD_TIMER_DEVNAME", "value": "", "user_value": null, "dep": "n", "prompt": "Timer device name", "cond": "TM4C1294_LAUNCHPAD_TIMER && TIMER && TIVA_TIMER32_PERIODIC && ARCH_BOARD_TM4C1294_LAUNCHPAD && ARCH_BOARD_TM4C1294_LAUNCHPAD", "defaults": [{"name": "/dev/timer0", "default": "/dev/timer0", "cond": "TM4C1294_LAUNCHPAD_TIMER && TIMER && TIVA_TIMER32_PERIODIC && ARCH_BOARD_TM4C1294_LAUNCHPAD && ARCH_BOARD_TM4C1294_LAUNCHPAD"}]}, {"type": 3, "name": "TM4C1294_LAUNCHPAD_TIMER_ALTCLK", "value": "n", "user_value": null, "dep": "n", "prompt": "Use alternate clock source", "cond": "EXPERIMENTAL && TM4C1294_LAUNCHPAD_TIMER && TIMER && TIVA_TIMER32_PERIODIC && ARCH_BOARD_TM4C1294_LAUNCHPAD && ARCH_BOARD_TM4C1294_LAUNCHPAD", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && TM4C1294_LAUNCHPAD_TIMER && TIMER && TIVA_TIMER32_PERIODIC && ARCH_BOARD_TM4C1294_LAUNCHPAD && ARCH_BOARD_TM4C1294_LAUNCHPAD"}]}, {"type": 3, "name": "TWR_K64F120M_SDHC_AUTOMOUNT", "value": "n", "user_value": null, "dep": "n", "prompt": "SDHC automounter", "cond": "FS_AUTOMOUNTER && KINETIS_SDHC && ARCH_BOARD_TWR_K64F120M && ARCH_BOARD_TWR_K64F120M", "defaults": [{"name": "n", "default": "n", "cond": "FS_AUTOMOUNTER && KINETIS_SDHC && ARCH_BOARD_TWR_K64F120M && ARCH_BOARD_TWR_K64F120M"}], "children": [{"type": 47, "name": "TWR_K64F120M_SDHC_AUTOMOUNT_FSTYPE", "value": "", "user_value": null, "dep": "n", "prompt": "SDHC file system type", "cond": "TWR_K64F120M_SDHC_AUTOMOUNT && ARCH_BOARD_TWR_K64F120M && ARCH_BOARD_TWR_K64F120M", "defaults": [{"name": "vfat", "default": "vfat", "cond": "TWR_K64F120M_SDHC_AUTOMOUNT && ARCH_BOARD_TWR_K64F120M && ARCH_BOARD_TWR_K64F120M"}]}, {"type": 47, "name": "TWR_K64F120M_SDHC_AUTOMOUNT_BLKDEV", "value": "", "user_value": null, "dep": "n", "prompt": "SDHC block device", "cond": "TWR_K64F120M_SDHC_AUTOMOUNT && ARCH_BOARD_TWR_K64F120M && ARCH_BOARD_TWR_K64F120M", "defaults": [{"name": "/dev/mmcsd0", "default": "/dev/mmcsd0", "cond": "TWR_K64F120M_SDHC_AUTOMOUNT && ARCH_BOARD_TWR_K64F120M && ARCH_BOARD_TWR_K64F120M"}]}, {"type": 47, "name": "TWR_K64F120M_SDHC_AUTOMOUNT_MOUNTPOINT", "value": "", "user_value": null, "dep": "n", "prompt": "SDHC mount point", "cond": "TWR_K64F120M_SDHC_AUTOMOUNT && ARCH_BOARD_TWR_K64F120M && ARCH_BOARD_TWR_K64F120M", "defaults": [{"name": "/mnt/sdcard", "default": "/mnt/sdcard", "cond": "TWR_K64F120M_SDHC_AUTOMOUNT && ARCH_BOARD_TWR_K64F120M && ARCH_BOARD_TWR_K64F120M"}]}, {"type": 27, "name": "TWR_K64F120M_SDHC_AUTOMOUNT_DDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "SDHC debounce delay (milliseconds)", "cond": "TWR_K64F120M_SDHC_AUTOMOUNT && ARCH_BOARD_TWR_K64F120M && ARCH_BOARD_TWR_K64F120M", "defaults": [{"name": "1000", "default": "1000", "cond": "TWR_K64F120M_SDHC_AUTOMOUNT && ARCH_BOARD_TWR_K64F120M && ARCH_BOARD_TWR_K64F120M"}]}, {"type": 27, "name": "TWR_K64F120M_SDHC_AUTOMOUNT_UDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "SDHC unmount retry delay (milliseconds)", "cond": "TWR_K64F120M_SDHC_AUTOMOUNT && ARCH_BOARD_TWR_K64F120M && ARCH_BOARD_TWR_K64F120M", "defaults": [{"name": "2000", "default": "2000", "cond": "TWR_K64F120M_SDHC_AUTOMOUNT && ARCH_BOARD_TWR_K64F120M && ARCH_BOARD_TWR_K64F120M"}]}]}, {"type": 3, "name": "VIEWTOOL_HIGHPRI", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority interrupt test", "cond": "ARCH_CHIP_STM32F103VC && ARCH_HIPRI_INTERRUPT && ARCH_BOARD_VIEWTOOL_STM32F107 && ARCH_BOARD_VIEWTOOL_STM32F107", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_CHIP_STM32F103VC && ARCH_HIPRI_INTERRUPT && ARCH_BOARD_VIEWTOOL_STM32F107 && ARCH_BOARD_VIEWTOOL_STM32F107"}], "help": "This selection enables building of the custom test for the Cortex-M\nhigh priority, nested interrupts.  ARCH_HIPRI_INTERRUPT must first\nbe enabled.  This test is only implemented on the STM32F103VCT6\n(ARCH_CHIP_STM32F103VC) but should be easily ported to other STM32\narchitectures.", "children": [{"type": 27, "name": "VIEWTOOL_TIM6_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "TIM6 Frequency", "cond": "VIEWTOOL_HIGHPRI && ARCH_BOARD_VIEWTOOL_STM32F107 && ARCH_BOARD_VIEWTOOL_STM32F107", "defaults": [{"name": "36000000", "default": "36000000", "cond": "VIEWTOOL_HIGHPRI && ARCH_BOARD_VIEWTOOL_STM32F107 && ARCH_BOARD_VIEWTOOL_STM32F107"}], "help": "TIM6 is used to drive the high priority, nested interrupt in the\ntest enabled with VIEWTOOL_HIGHPRI.  This setting specifies the\nfrequency of the TIM6 input clock."}, {"type": 27, "name": "VIEWTOOL_TIM6_PERIOD", "value": "", "user_value": null, "dep": "n", "prompt": "TIM6 Period", "cond": "VIEWTOOL_HIGHPRI && ARCH_BOARD_VIEWTOOL_STM32F107 && ARCH_BOARD_VIEWTOOL_STM32F107", "defaults": [{"name": "36000", "default": "36000", "cond": "VIEWTOOL_HIGHPRI && ARCH_BOARD_VIEWTOOL_STM32F107 && ARCH_BOARD_VIEWTOOL_STM32F107"}], "help": "TIM6 is used to drive the high priority, nested interrupt in the\ntest enabled with VIEWTOOL_HIGHPRI.  This setting specifies\nperiod of the TIM6 interrupt in units of VIEWTOOL_TIM6_FREQUENCY."}]}, {"type": 24, "name": "EXAMPLES_TOUCHSCREEN_BGCOLOR", "value": "", "user_value": null, "dep": "n", "prompt": "Background color for apps/examples/touchscreen", "cond": "EXAMPLES_TOUCHSCREEN && ARCH_BOARD_SIM && ARCH_BOARD_SIM", "defaults": [{"name": "0x007b68ee", "default": "0x007b68ee", "cond": "EXAMPLES_TOUCHSCREEN && ARCH_BOARD_SIM && ARCH_BOARD_SIM"}]}, {"type": 3, "name": "BOARD_CRASHDUMP", "value": "y", "user_value": 2, "dep": "y", "prompt": "Enable Board level logging of crash dumps", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "If selected up_assert will call out to board_crashdump, in the case\nof an assertion failure, prior to calling exit. Or in the\ncase of a hardfault prior to looping indefinitely. board_crashdump\nthen has a chance to save the state of the machine.\n\nThe purpose of board_crashdump is to save as much information as it can\nabout the cause of the fault and then most likely reset the system.\n\n N.B. There is limited system resources that can be used, who knows\n what memory is trashed? So all we can expect to do is save the\n\"machine state\" in a place where on the next reset can write it\nto more sophisticated storage in a sane operating environment.", "children": [{"type": 3, "name": "BOARD_RESET_ON_CRASH", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable Board Reset after the crashdump is saved", "cond": "BOARD_CRASHDUMP", "defaults": [{"name": "n", "default": "n", "cond": "BOARD_CRASHDUMP"}], "help": "If selected the board_crashdump should reset the machine after\nsaveing the state of the machine"}]}, {"type": 3, "name": "BOARD_ENTROPY_POOL", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Board level storing of entropy pool structure", "cond": "CRYPTO_RANDOM_POOL", "defaults": [{"name": "n", "default": "n", "cond": "CRYPTO_RANDOM_POOL"}], "help": "Entropy pool structure can be provided by board source.\nUse for this is, for example, to allocate entropy pool\nfrom special area of RAM which content is kept over\nsystem reset."}, {"type": 3, "name": "BOARD_INITRNGSEED", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Board level initial seeding of entropy pool RNG", "cond": "CRYPTO_RANDOM_POOL", "defaults": [{"name": "n", "default": "n", "cond": "CRYPTO_RANDOM_POOL"}], "help": "If enabled, entropy pool random number generator will call\nboard_init_rndseed() upon initialization. This function\ncan then provide early entropy seed to the pool through\nentropy injection APIs provided at 'nuttx/random.h'."}, {"type": 3, "name": "LIB_BOARDCTL", "value": "y", "user_value": 2, "dep": "y", "prompt": "Enable boardctl() interface", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enables support for the boardctl() interface.  Architecture\nspecific logic must provide board_app_initialize() interface.", "children": [{"type": 3, "name": "BOARDCTL_POWEROFF", "value": "y", "user_value": 2, "dep": "y", "prompt": "Enable power off interfaces", "cond": "ARCH_HAVE_POWEROFF && LIB_BOARDCTL", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_POWEROFF && LIB_BOARDCTL"}], "help": "Enables support for the BOARDIOC_POWEROFF boardctl() command.\nArchitecture specific logic must provide the board_power_off()\ninterface."}, {"type": 3, "name": "BOARDCTL_RESET", "value": "y", "user_value": 2, "dep": "y", "prompt": "Enable reset interfaces", "cond": "ARCH_HAVE_RESET && LIB_BOARDCTL", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_RESET && LIB_BOARDCTL"}], "help": "Enables support for the BOARDIOC_RESET boardctl() command.\nArchitecture specific logic must provide the board_reset()\ninterface."}, {"type": 3, "name": "BOARDCTL_UNIQUEID", "value": "y", "user_value": 2, "dep": "y", "prompt": "Return board unique ID", "cond": "LIB_BOARDCTL", "defaults": [{"name": "n", "default": "n", "cond": "LIB_BOARDCTL"}], "help": "Enables support for the BOARDIOC_UNIQUEID boardctl() command.\nArchitecture specific logic must provide the board_uniqueid()\ninterface.", "children": [{"type": 27, "name": "BOARDCTL_UNIQUEID_SIZE", "value": "5", "user_value": "5", "dep": "y", "prompt": "Size of the board unique ID (bytes)", "cond": "BOARDCTL_UNIQUEID && LIB_BOARDCTL", "defaults": [{"name": "16", "default": "16", "cond": "BOARDCTL_UNIQUEID && LIB_BOARDCTL"}], "help": "Provides the size of the memory buffer that must be provided by the\ncaller of board_uniqueid() in which to receive the board unique ID."}]}, {"type": 3, "name": "BOARDCTL_APP_SYMTAB", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable application symbol table interfaces", "cond": "EXECFUNCS_HAVE_SYMTAB && LIB_BOARDCTL", "defaults": [{"name": "n", "default": "n", "cond": "EXECFUNCS_HAVE_SYMTAB && LIB_BOARDCTL"}], "help": "Enables support for the BOARDIOC_APP_SYMTAB boardctl() command."}, {"type": 3, "name": "BOARDCTL_OS_SYMTAB", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable kernel module symbol table interfaces", "cond": "MODULE && LIB_BOARDCTL", "defaults": [{"name": "n", "default": "n", "cond": "MODULE && LIB_BOARDCTL"}], "help": "Enables support for the BOARDIOC_OS_SYMTAB boardctl() command."}, {"type": 3, "name": "BOARDCTL_USBDEVCTRL", "value": "y", "user_value": 2, "dep": "y", "prompt": "Enable USB device controls", "cond": "USBDEV && LIB_BOARDCTL", "defaults": [{"name": "n", "default": "n", "cond": "USBDEV && LIB_BOARDCTL"}], "help": "Enables support for the BOARDIOC_USBDEV_CONTROL boardctl() command."}, {"type": 3, "name": "BOARDCTL_TSCTEST", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable touchscreen test interfaces", "cond": "LIB_BOARDCTL", "defaults": [{"name": "n", "default": "n", "cond": "LIB_BOARDCTL"}], "help": "Enables support for the BOARDIOC_TSCTEST_SETUP and\nBOARDIOC_TSCTEST_TEARDOWN boardctl() commands.  Architecture\nspecific logic must provide board_tsc_setup() and\nboard_tsc_teardown() interfaces."}, {"type": 3, "name": "BOARDCTL_GRAPHICS", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable custom graphics initialization interfaces", "cond": "LIB_BOARDCTL", "defaults": [{"name": "n", "default": "n", "cond": "LIB_BOARDCTL"}], "help": "Enables support for the BOARDIOC_GRAPHICS_SETUP boardctl() command.\nArchitecture specific logic must provide board_graphics_setup()\ninterface."}, {"type": 3, "name": "BOARDCTL_IOCTL", "value": "y", "user_value": 2, "dep": "y", "prompt": "Board-specific boardctl() commands", "cond": "LIB_BOARDCTL", "defaults": [{"name": "n", "default": "n", "cond": "LIB_BOARDCTL"}], "help": "Enables support for the BOARDIOC_POWEROFF boardctl() command.\nArchitecture specific logic must provide board_ioctl() interface."}]}]}, {"type": 31, "dep": "y", "prompt": "RTOS Features", "cond": "y", "children": [{"type": 3, "name": "DISABLE_OS_API", "value": "y", "user_value": 2, "menuconfig": true, "dep": "y", "prompt": "Disable NuttX interfaces", "cond": "y", "defaults": [{"name": "y", "default": "y", "cond": "y"}], "help": "The following can be used to disable categories of\nAPIs supported by the OS.  If the compiler supports\nweak functions, then it should not be necessary to\ndisable functions unless you want to restrict usage\nof those APIs.\n\nThere are certain dependency relationships in these\nfeatures.\n\n1) mq_notify logic depends on signals to awaken tasks\nwaiting for queues to become full or empty.\n2) pthread_condtimedwait() depends on signals to wake\nup waiting tasks.", "children": [{"type": 3, "name": "DISABLE_POSIX_TIMERS", "value": "n", "user_value": 0, "dep": "y", "prompt": "Disable POSIX timers", "cond": "DISABLE_OS_API", "defaults": [{"name": "y", "default": "y", "cond": "DEFAULT_SMALL && DISABLE_OS_API"}, {"name": "n", "default": "n", "cond": "!DEFAULT_SMALL && DISABLE_OS_API"}]}, {"type": 3, "name": "DISABLE_PTHREAD", "value": "n", "user_value": 0, "dep": "y", "prompt": "Disable pthread support", "cond": "DISABLE_OS_API", "defaults": [{"name": "n", "default": "n", "cond": "DISABLE_OS_API"}]}, {"type": 3, "name": "DISABLE_SIGNALS", "value": "n", "user_value": 0, "dep": "y", "prompt": "Disable signal support", "cond": "DISABLE_OS_API", "defaults": [{"name": "n", "default": "n", "cond": "DISABLE_OS_API"}]}, {"type": 3, "name": "DISABLE_MQUEUE", "value": "n", "user_value": 0, "dep": "y", "prompt": "Disable POSIX message queue support", "cond": "DISABLE_OS_API", "defaults": [{"name": "n", "default": "n", "cond": "DISABLE_OS_API"}]}, {"type": 3, "name": "DISABLE_ENVIRON", "value": "n", "user_value": 0, "dep": "y", "prompt": "Disable environment variable support", "cond": "DISABLE_OS_API", "defaults": [{"name": "y", "default": "y", "cond": "DEFAULT_SMALL && DISABLE_OS_API"}, {"name": "n", "default": "n", "cond": "!DEFAULT_SMALL && DISABLE_OS_API"}]}]}, {"type": 31, "dep": "y", "prompt": "Clocks and Timers", "cond": "y", "children": [{"type": 3, "name": "ARCH_HAVE_TICKLESS", "value": "n", "user_value": 0, "rev_dep": "(ARCH_SIM && y) || (ARCH_CHIP_SAMA5 && y) || (ARCH_CHIP_SAMV7 && y) || (ARCH_CHIP_STM32 && y) || (ARCH_CHIP_STM32L4 && y) || (ARCH_FAMILY_LPC4310 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (ARCH_FAMILY_LPC4320 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (ARCH_FAMILY_LPC4330 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (ARCH_FAMILY_LPC4337 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (ARCH_FAMILY_LPC4350 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (ARCH_FAMILY_LPC4353 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (ARCH_FAMILY_LPC4357 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (ARCH_FAMILY_LPC4370 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (ARCH_CHIP_SAM4CM && ARCH_CHIP_SAM34 && ARCH_ARM)", "dep": "y"}, {"type": 3, "name": "SCHED_TICKLESS", "value": "n", "user_value": null, "dep": "n", "prompt": "Support tick-less OS", "cond": "ARCH_HAVE_TICKLESS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_TICKLESS"}], "help": "By default, system time is driven by a periodic timer interrupt.  An\nalternative configurations is a tick-less configuration in which\nthere is no periodic timer interrupt.  Instead and interval timer is\nused to schedule the next OS time event.  This option selects that\ntick-less OS option.  If the tick-less OS is selected, then there are\nadditional platform specific interfaces that must be provided as\ndefined include/nuttx/arch.h", "children": [{"type": 3, "name": "SCHED_TICKLESS_ALARM", "value": "n", "user_value": null, "dep": "n", "prompt": "Tickless alarm", "cond": "SCHED_TICKLESS", "defaults": [{"name": "n", "default": "n", "cond": "SCHED_TICKLESS"}], "help": "The tickless option can be supported either via a simple interval\ntimer (plus elapsed time) or via an alarm.  The interval timer allows\nprogramming events to occur after an interval.  With the alarm,\nyou can set a time in the future and get an event when that alarm\ngoes off.  This option selects the use of an alarm.\n\nThe advantage of an alarm is that it avoids some small timing\nerrors; the advantage of the use of the interval timer is that\nthe hardware requirement may be less."}, {"type": 3, "name": "SCHED_TICKLESS_LIMIT_MAX_SLEEP", "value": "n", "user_value": null, "dep": "n", "prompt": "Max sleep period (in microseconds)", "cond": "SCHED_TICKLESS", "defaults": [{"name": "n", "default": "n", "cond": "SCHED_TICKLESS"}], "help": "Enables use of the g_oneshot_maxticks variable. This variable is\ninitialized by platform-specific logic at runtime to the maximum\ndelay that the timer can wait (in configured clock ticks).  The\nRTOS tickless logic will then limit all requested delays to this\nvalue."}]}, {"type": 27, "name": "USEC_PER_TICK", "value": "10000", "user_value": "10000", "dep": "y", "prompt": "System timer tick period (microseconds)", "cond": "y", "defaults": [{"name": "10000", "default": "10000", "cond": "!SCHED_TICKLESS"}, {"name": "100", "default": "100", "cond": "SCHED_TICKLESS"}], "help": "In the \"normal\" configuration where system time is provided by a\nperiodic timer interrupt, the default system timer is expected to\nrun at 100Hz or USEC_PER_TICK=10000.  This setting must be defined\nto inform of NuttX the interval that the processor hardware is\nproviding system timer interrupts to the OS.\n\nIf SCHED_TICKLESS is selected, then there are no system timer\ninterrupts.  In this case, USEC_PER_TICK does not control any timer\nrates.  Rather, it only determines the resolution of time reported\nby clock_systimer() and the resolution of times that can be set for\ncertain delays including watchdog timers and delayed work.  In this\ncase there is a trade-off:  It is better to have the USEC_PER_TICK as\nlow as possible for higher timing resolution.  However, the time\nis currently held in 'unsigned int' on some systems, this may be\n16-bits but on most contemporary systems it will be 32-bits.  In\neither case, smaller values of USEC_PER_TICK will reduce the range\nof values that delays that can be represented.  So the trade-off is\nbetween range and resolution (you could also modify the code to use\na 64-bit value if you really want both).\n\nThe default, 100 microseconds, will provide for a range of delays\nup to 120 hours.\n\nThis value should never be less than the underlying resolution of\nthe timer.  Error may ensue."}, {"type": 3, "name": "SYSTEMTICK_EXTCLK", "value": "n", "user_value": null, "dep": "n", "prompt": "Use external clock", "cond": "ARCH_HAVE_EXTCLK && !SCHED_TICKLESS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_EXTCLK && !SCHED_TICKLESS"}], "help": "Use external clock for system tick. When enabled, the platform-specific\nlogic must start its own timer interrupt to make periodic calls to the\nsched_process_timer() or the functions called within. The purpose is\nto move the scheduling off the processor clock to allow entering low\npower states that would disable that clock."}, {"type": 3, "name": "SYSTEMTICK_HOOK", "value": "n", "user_value": 0, "dep": "y", "prompt": "System timer hook", "cond": "!SCHED_TICKLESS", "defaults": [{"name": "n", "default": "n", "cond": "!SCHED_TICKLESS"}], "help": "Enable a call to a user-provided, board-level function on each timer\ntick.  This permits custom actions that may be performed on each\ntimer tick.  The form of the user-provided function is:\n\n        void board_timerhook(void);\n\n(prototyped in include/nuttx/board.h)."}, {"type": 3, "name": "SYSTEM_TIME64", "value": "n", "user_value": 0, "dep": "y", "prompt": "64-bit system clock", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "The system timer is incremented at the rate determined by\nUSEC_PER_TICK, typically at 100Hz. The count at any given time is\nthen the \"uptime\" in units of system timer ticks.  By default, the\nsystem time is 32-bits wide.  Those defaults provide a range of about\n497 days which is probably a sufficient range for \"uptime\".\n\nHowever, if the system timer rate is significantly higher than 100Hz\nand/or if a very long \"uptime\" is required, then this option can be\nselected to support a 64-bit wide timer."}, {"type": 3, "name": "CLOCK_MONOTONIC", "value": "y", "user_value": 2, "dep": "y", "prompt": "Support CLOCK_MONOTONIC", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "CLOCK_MONOTONIC is an optional standard POSIX clock.  Unlike\nCLOCK_REALTIME which can move forward and backward when the\ntime-of-day changes, CLOCK_MONOTONIC is the elapsed time since some\narbitrary point in the post (the system start-up time for NuttX)\nand, hence, is always monotonically increasing.  CLOCK_MONOTONIC\nis, hence, the more appropriate clock for determining time\ndifferences.\n\nThe value of the CLOCK_MONOTONIC clock cannot be set via clock_settime()."}, {"type": 3, "name": "ARCH_HAVE_TIMEKEEPING", "value": "n", "user_value": 0, "rev_dep": "ARCH_CHIP_STM32 && y", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "CLOCK_TIMEKEEPING", "value": "n", "user_value": null, "dep": "n", "prompt": "Support timekeeping algorithms", "cond": "EXPERIMENTAL && ARCH_HAVE_TIMEKEEPING", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && ARCH_HAVE_TIMEKEEPING"}], "help": "CLOCK_TIMEKEEPING enables experimental time management algorithms."}, {"type": 3, "name": "JULIAN_TIME", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enables Julian time conversions", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enables Julian time conversions"}, {"type": 27, "name": "START_YEAR", "value": "2011", "user_value": "2011", "dep": "y", "prompt": "Start year", "cond": "y", "defaults": [{"name": "2017", "default": "2017", "cond": "y"}], "ranges": [{"min": "1970", "max": "2106", "cond": "y"}], "help": "NuttX uses an unsigned 32-bit integer for time_t which provides a\nrange from 1970 to 2106."}, {"type": 27, "name": "START_MONTH", "value": "12", "user_value": "12", "dep": "y", "prompt": "Start month", "cond": "y", "defaults": [{"name": "1", "default": "1", "cond": "y"}], "ranges": [{"min": "1", "max": "12", "cond": "y"}]}, {"type": 27, "name": "START_DAY", "value": "6", "user_value": "6", "dep": "y", "prompt": "Start day", "cond": "y", "defaults": [{"name": "1", "default": "1", "cond": "y"}], "ranges": [{"min": "1", "max": "31", "cond": "y"}]}, {"type": 27, "name": "MAX_WDOGPARMS", "value": "2", "user_value": "2", "dep": "y", "prompt": "Maximum number of watchdog parameters", "cond": "y", "defaults": [{"name": "4", "default": "4", "cond": "y"}], "help": "Maximum number of parameters that can be passed to a watchdog handler"}, {"type": 27, "name": "PREALLOC_WDOGS", "value": "16", "user_value": "16", "dep": "y", "prompt": "Number of pre-allocated watchdog timers", "cond": "y", "defaults": [{"name": "32", "default": "32", "cond": "y"}], "help": "The number of pre-allocated watchdog structures.  The system manages\na pool of preallocated watchdog structures to minimize dynamic\nallocations.  Dynamic allocations will still be made if this pool is\nexhausted.  You will, however, get better performance and memory\nusage if this value is tuned to minimize such allocations."}, {"type": 27, "name": "WDOG_INTRESERVE", "value": "4", "user_value": "4", "dep": "y", "prompt": "Watchdog structures reserved for interrupt handlers", "cond": "y", "defaults": [{"name": "4", "default": "4", "cond": "y"}], "help": "Watchdog structures may be allocated from normal task and also from\ninterrupt handlers.  Interrupt handlers, however, can only use pre-\nallocated watchdog timer.  So, in order to keep normal task\nallocations from exhausting all watchdog structures, a small number\nof pre-allocated watchdog timers must be reserved for exclusive use\nby interrupt handler.  This setting determines that number of\nreserved watchdogs."}, {"type": 27, "name": "PREALLOC_TIMERS", "value": "4", "user_value": "4", "dep": "y", "prompt": "Number of pre-allocated POSIX timers", "cond": "y", "defaults": [{"name": "8", "default": "8", "cond": "y"}], "help": "The number of pre-allocated POSIX timer structures.  The system manages a\npool of preallocated timer structures to minimize dynamic allocations.  Set to\nzero for all dynamic allocations."}]}, {"type": 31, "dep": "y", "prompt": "Tasks and Scheduling", "cond": "y", "children": [{"type": 3, "name": "SPINLOCK", "value": "n", "user_value": 0, "rev_dep": "SMP && ARCH_HAVE_MULTICPU", "dep": "y", "prompt": "Support Spinlocks", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enables suppport for spinlocks.  Spinlocks are current used only for\nSMP suppport."}, {"type": 3, "name": "SMP", "value": "n", "user_value": 0, "dep": "y", "prompt": "Symmetric Multi-Processing (SMP)", "cond": "ARCH_HAVE_MULTICPU", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_MULTICPU"}], "selects": [{"symbol": "SPINLOCK", "cond": "ARCH_HAVE_MULTICPU"}], "help": "Enables support for Symmetric Multi-Processing (SMP) on a multi-CPU\nplatform.", "children": [{"type": 27, "name": "SMP_NCPUS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of CPUs", "cond": "SMP", "defaults": [{"name": "4", "default": "4", "cond": "SMP"}], "ranges": [{"min": "1", "max": "32", "cond": "DEBUG_FEATURES && SMP"}, {"min": "2", "max": "32", "cond": "!DEBUG_FEATURES && SMP"}], "help": "This value identifies the number of CPUs supported by the processor\nthat will be used for SMP.\n\nIf CONFIG_DEBUG_FEATURES is enbled, then the value one is permitted\nfor CONFIG_SMP_NCPUS.  This is not normally a valid setting for an\nSMP configuration.  However, running the SMP logic in a single CPU\nconfiguration is useful during certain testing."}, {"type": 27, "name": "SMP_IDLETHREAD_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "CPU IDLE stack size", "cond": "SMP", "defaults": [{"name": "2048", "default": "2048", "cond": "SMP"}], "help": "Each CPU will have its own IDLE task.  System initialization occurs\non CPU0 and uses CONFIG_IDLETHREAD_STACKSIZE which will probably be\nlarger than is generally needed.  This setting provides the stack\nsize for the IDLE task on CPUS 1 through (CONFIG_SMP_NCPUS-1)."}]}, {"type": 4, "user_value": 2, "dep": "y", "prompt": "Initialization Task", "cond": "y", "defaults": [{"name": "INIT_ENTRYPOINT", "default": "y", "cond": "!BUILD_KERNEL"}, {"name": "INIT_FILEPATH", "default": "n", "cond": "BUILD_KERNEL && !BINFMT_DISABLE"}, {"name": "INIT_NONE", "default": "n", "cond": "BUILD_KERNEL && BINFMT_DISABLE"}], "children": [{"type": 3, "name": "INIT_NONE", "value": "n", "user_value": 0, "dep": "y", "prompt": "None", "cond": "y"}, {"type": 3, "name": "INIT_ENTRYPOINT", "value": "y", "user_value": 2, "dep": "y", "prompt": "Via application entry point", "cond": "!BUILD_KERNEL && y"}, {"type": 3, "name": "INIT_FILEPATH", "value": "n", "user_value": 0, "dep": "y", "prompt": "Via executable file", "cond": "!BINFMT_DISABLE && y"}]}, {"type": 47, "name": "USER_ENTRYPOINT", "value": "sdk_entry", "user_value": "sdk_entry", "dep": "y", "prompt": "Application entry point", "cond": "INIT_ENTRYPOINT", "defaults": [{"name": "main", "default": "main", "cond": "INIT_ENTRYPOINT"}], "help": "The name of the entry point for user applications.  For the example\napplications this is of the form 'app_main' where 'app' is the application\nname. If not defined, USER_ENTRYPOINT defaults to \"main\"."}, {"type": 47, "name": "USER_INITPATH", "value": "", "user_value": null, "dep": "n", "prompt": "Application initialization path", "cond": "INIT_FILEPATH", "defaults": [{"name": "/bin/init", "default": "/bin/init", "cond": "INIT_FILEPATH"}], "help": "The name of the entry point for user applications.  For the example\napplications this is of the form 'app_main' where 'app' is the application\nname. If not defined, USER_ENTRYPOINT defaults to \"main\"."}, {"type": 47, "name": "INIT_SYMTAB", "value": "", "user_value": null, "dep": "n", "prompt": "Symbol table", "cond": "!BUILD_PROTECTED && !BUILD_KERNEL && INIT_FILEPATH", "defaults": [{"name": "NULL", "default": "NULL", "cond": "!BUILD_PROTECTED && !BUILD_KERNEL && INIT_FILEPATH"}], "help": "The name of othe global array that holds the exported symbol table.\nThe special string \"NULL\" may be provided if there is no symbol\ntable.  Quotation marks will be stripped when config.h is generated.\n\nNOTE: This setting cannot be used in protected or kernel builds.\nAny kernel mode symbols tables would not be usable for resolving\nsymbols in user mode executables."}, {"type": 47, "name": "INIT_NEXPORTS", "value": "", "user_value": null, "dep": "n", "prompt": "Symbol table size", "cond": "!BUILD_PROTECTED && !BUILD_KERNEL && INIT_FILEPATH", "defaults": [{"name": "0", "default": "0", "cond": "!BUILD_PROTECTED && !BUILD_KERNEL && INIT_FILEPATH"}], "help": "The size of the symbol table.  NOTE that is is logically a numeric\nvalue but is represent by a string.  That allows you to put\nsizeof(something) or a macro or a global variable name for the\nsymbol table size.  Quotation marks will be stripped when config.h\nis generated.\n\nNOTE: This setting cannot be used in protected or kernel builds.\nAny kernel mode symbols tables would not be usable for resolving\nsymbols in user mode executables."}, {"type": 27, "name": "RR_INTERVAL", "value": "200", "user_value": "200", "dep": "y", "prompt": "Round robin timeslice (MSEC)", "cond": "y", "defaults": [{"name": "0", "default": "0", "cond": "y"}], "help": "The round robin timeslice will be set this number of milliseconds;\nRound roben scheduling (SCHED_RR) is enabled by setting this\ninterval to a positive, non-zero value."}, {"type": 3, "name": "SCHED_SPORADIC", "value": "n", "user_value": 0, "dep": "y", "prompt": "Support sporadic scheduling", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Build in additional logic to support sporadic scheduling\n(SCHED_SPORADIC).", "children": [{"type": 27, "name": "SCHED_SPORADIC_MAXREPL", "value": "", "user_value": null, "dep": "n", "prompt": "Maximum number of replenishments", "cond": "SCHED_SPORADIC", "defaults": [{"name": "3", "default": "3", "cond": "SCHED_SPORADIC"}], "ranges": [{"min": "1", "max": "255", "cond": "SCHED_SPORADIC"}], "help": "Controls the size of allocated replenishment structures and, hence,\nalso limits the maximum number of replenishments."}, {"type": 3, "name": "SPORADIC_INSTRUMENTATION", "value": "n", "user_value": null, "dep": "n", "prompt": "Sporadic scheduler monitor hooks", "cond": "SCHED_SPORADIC", "defaults": [{"name": "n", "default": "n", "cond": "SCHED_SPORADIC"}], "help": "Enables instrumentation in the sporadic scheduler to monitor\nscheduler behavior. If enabled, then the board-specific logic must\nprovide the following functions:\n\n        void arch_sporadic_start(FAR struct tcb_s *tcb);\n        void arch_sporadic_lowpriority(FAR struct tcb_s *tcb);\n        void arch_sporadic_suspend(FAR struct tcb_s *tcb);\n        void arch_sporadic_resume(FAR struct tcb_s *tcb);"}]}, {"type": 27, "name": "TASK_NAME_SIZE", "value": "31", "user_value": "31", "dep": "y", "prompt": "Maximum task name size", "cond": "y", "defaults": [{"name": "31", "default": "31", "cond": "y"}], "help": "Spcifies that maximum size of a task name to save in the TCB.\nUseful if scheduler instrumentation is selected.  Set to zero to\ndisable.  Excludes the NUL terminator; the actual allocated size\nwilll be TASK_NAME_SIZE + 1.  The default of 31 then results in\na align-able 32-byte allocation.::"}, {"type": 27, "name": "MAX_TASKS", "value": "32", "user_value": "32", "dep": "y", "prompt": "Max number of tasks", "cond": "y", "defaults": [{"name": "32", "default": "32", "cond": "y"}], "help": "The maximum number of simultaneously active tasks. This value must be\na power of two."}, {"type": 3, "name": "SCHED_HAVE_PARENT", "value": "y", "user_value": 2, "dep": "y", "prompt": "Support parent/child task relationships", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Remember the ID of the parent task when a new child task is\ncreated.  This support enables some additional features (such as\nSIGCHLD) and modifies the behavior of other interfaces.  For\nexample, it makes waitpid() more standards complete by restricting\nthe waited-for tasks to the children of the caller. Default:\ndisabled.", "children": [{"type": 3, "name": "SCHED_CHILD_STATUS", "value": "y", "user_value": 2, "dep": "y", "prompt": "Retain child exit status", "cond": "SCHED_HAVE_PARENT", "defaults": [{"name": "n", "default": "n", "cond": "SCHED_HAVE_PARENT"}], "help": "If this option is selected, then the exit status of the child task\nwill be retained after the child task exits.  This option should be\nselected if you require knowledge of a child process' exit status.\nWithout this setting, wait(), waitpid() or waitid() may fail.  For\nexample, if you do:\n\n1) Start child task\n2) Wait for exit status (using wait(), waitpid(), or waitid()).\n\nThis can fail because the child task may run to completion before\nthe wait begins.  There is a non-standard work-around in this case:\nThe above sequence will work if you disable pre-emption using\nsched_lock() prior to starting the child task, then re-enable pre-\nemption with sched_unlock() after the wait completes.  This works\nbecause the child task is not permitted to run until the wait is in\nplace.\n\nThe standard solution would be to enable SCHED_CHILD_STATUS.  In\nthis case the exit status of the child task is retained after the\nchild exits and the wait will successful obtain the child task's\nexit status whether it is called before the child task exits or not.\n\nWarning:  If you enable this feature, then your application must\neither (1) take responsibility for reaping the child status with wait(),\nwaitpid(), or waitid(), or (2) suppress retention of child status.\nIf you do not reap the child status, then you have a memory leak and\nyour system will eventually fail.\n\nRetention of child status can be suppressed on the parent using logic like:\n\n        struct sigaction sa;\n\n        sa.sa_handler = SIG_IGN;\n        sa.sa_flags = SA_NOCLDWAIT;\n        int ret = sigaction(SIGCHLD, &sa, NULL);", "children": [{"type": 27, "name": "PREALLOC_CHILDSTATUS", "value": "0", "user_value": "0", "dep": "y", "prompt": "Number of pre-allocated child status", "cond": "SCHED_CHILD_STATUS", "defaults": [{"name": "0", "default": "0", "cond": "SCHED_CHILD_STATUS"}], "help": "To prevent runaway child status allocations and to improve\nallocation performance, child task exit status structures are pre-\nallocated when the system boots.  This setting determines the number\nof child status structures that will be pre-allocated.  If this\nsetting is not defined or if it is defined to be zero then a value\nof 2*MAX_TASKS is used.\n\nNote that there cannot be more than MAX_TASKS tasks in total.\nHowever, the number of child status structures may need to be\nsignificantly larger because this number includes the maximum number\nof tasks that are running PLUS the number of tasks that have exit'ed\nwithout having their exit status reaped (via wait(), waitid(), or\nwaitpid()).\n\nObviously, if tasks spawn children indefinitely and never have the\nexit status reaped, then you may have a memory leak!  If you enable\nthe SCHED_CHILD_STATUS feature, then your application must take\nresponsibility for either (1) reaping the child status with wait(),\nwaitpid(), or waitid() or it must (2) suppress retention of child\nstatus.  Otherwise, your system will eventually fail.\n\nRetention of child status can be suppressed on the parent using logic like:\n\n        struct sigaction sa;\n\n        sa.sa_handler = SIG_IGN;\n        sa.sa_flags = SA_NOCLDWAIT;\n        int ret = sigaction(SIGCHLD, &sa, NULL);"}, {"type": 3, "name": "DEBUG_CHILDSTATUS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Child Status Debug Output", "cond": "SCHED_CHILD_STATUS && DEBUG_FEATURES && SCHED_CHILD_STATUS", "defaults": [{"name": "n", "default": "n", "cond": "SCHED_CHILD_STATUS && DEBUG_FEATURES && SCHED_CHILD_STATUS"}], "help": "Very detailed... I am sure that you do not want this."}]}]}, {"type": 3, "name": "SCHED_WAITPID", "value": "y", "user_value": 2, "dep": "y", "prompt": "Enable waitpid() API", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enables the waitpid() interface in a default, non-standard mode\n(non-standard in the sense that the waited for PID need not be child\nof the caller).  If SCHED_HAVE_PARENT is also defined, then this\nsetting will modify the behavior or waitpid() (making more spec\ncompliant) and will enable the waitid() and wait() interfaces as\nwell."}]}, {"type": 31, "dep": "y", "prompt": "Pthread Options", "cond": "!DISABLE_PTHREAD", "children": [{"type": 3, "name": "PTHREAD_MUTEX_TYPES", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable mutex types", "cond": "!DISABLE_PTHREAD", "defaults": [{"name": "n", "default": "n", "cond": "!DISABLE_PTHREAD"}], "help": "Set to enable support for recursive and errorcheck mutexes. Enables\npthread_mutexattr_settype()."}, {"type": 4, "user_value": 2, "dep": "y", "prompt": "pthread mutex robustness", "cond": "!DISABLE_PTHREAD", "defaults": [{"name": "PTHREAD_MUTEX_ROBUST", "default": "y", "cond": "!DEFAULT_SMALL && !DISABLE_PTHREAD"}, {"name": "PTHREAD_UNSAFE", "default": "PTHREAD_UNSAFE", "cond": "DEFAULT_SMALL && !DISABLE_PTHREAD"}], "children": [{"type": 3, "name": "PTHREAD_MUTEX_ROBUST", "value": "y", "user_value": 2, "dep": "y", "prompt": "Robust mutexes", "cond": "y", "help": "Support only the robust form of the NORMAL mutex."}, {"type": 3, "name": "PTHREAD_MUTEX_UNSAFE", "value": "n", "user_value": 0, "dep": "y", "prompt": "Traditional unsafe mutexes", "cond": "y", "help": "Support only the traditional non-robust form of the NORMAL mutex.\nYou should select this option only for backward compatibility with\nsoftware you may be porting or, perhaps, if you are trying to minimize\nfootprint."}, {"type": 3, "name": "PTHREAD_MUTEX_BOTH", "value": "n", "user_value": 0, "dep": "y", "prompt": "Both robust and unsafe mutexes", "cond": "y", "help": "Support both forms of NORMAL mutexes."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Default NORMAL mutex robustness", "cond": "PTHREAD_MUTEX_BOTH && !DISABLE_PTHREAD", "defaults": [{"name": "PTHREAD_MUTEX_DEFAULT_ROBUST", "default": "n", "cond": "PTHREAD_MUTEX_BOTH && !DISABLE_PTHREAD"}], "children": [{"type": 3, "name": "PTHREAD_MUTEX_DEFAULT_ROBUST", "value": "n", "user_value": null, "dep": "n", "prompt": "Robust default", "cond": "y", "help": "The default is robust NORMAL mutexes (non-standard)"}, {"type": 3, "name": "PTHREAD_MUTEX_DEFAULT_UNSAFE", "value": "n", "user_value": null, "dep": "n", "prompt": "Unsafe default", "cond": "y", "help": "The default is traditional unsafe NORMAL mutexes (standard)"}]}, {"type": 27, "name": "NPTHREAD_KEYS", "value": "4", "user_value": "4", "dep": "y", "prompt": "Maximum number of pthread keys", "cond": "!DISABLE_PTHREAD", "defaults": [{"name": "4", "default": "4", "cond": "!DISABLE_PTHREAD"}], "help": "The number of items of thread-\nspecific data that can be retained"}, {"type": 3, "name": "PTHREAD_CLEANUP", "value": "n", "user_value": 0, "dep": "y", "prompt": "pthread cleanup stack", "cond": "!DISABLE_PTHREAD", "defaults": [{"name": "n", "default": "n", "cond": "!DISABLE_PTHREAD"}], "help": "Select to enable support for pthread exit cleanup stacks.  This\nenables the interfaces pthread_cleanup_push() and\npthread_cleanup_pop().", "children": [{"type": 27, "name": "PTHREAD_CLEANUP_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "pthread cleanup stack size", "cond": "PTHREAD_CLEANUP && !DISABLE_PTHREAD", "defaults": [{"name": "1", "default": "1", "cond": "PTHREAD_CLEANUP && !DISABLE_PTHREAD"}], "ranges": [{"min": "1", "max": "32", "cond": "PTHREAD_CLEANUP && !DISABLE_PTHREAD"}], "help": "The maximum number of cleanup actions that may be pushed by\npthread_clean_push().  This setting will increase the size of EVERY\npthread task control block by about n * CONFIG_PTHREAD_CLEANUP_STACKSIZE\nwhere n is the size of a pointer, 2* sizeof(uintptr_t), this would be\n8 for a CPU with 32-bit addressing and 4 for a CPU with 16-bit\naddressing."}]}, {"type": 3, "name": "CANCELLATION_POINTS", "value": "n", "user_value": 0, "dep": "y", "prompt": "Cancellation points", "cond": "!DISABLE_PTHREAD", "defaults": [{"name": "n", "default": "n", "cond": "!DISABLE_PTHREAD"}], "help": "Enable POSIX cancellation points for pthread_cancel().  If selected,\ncancellation points will also used with the () task_delete() API even if\npthreads are not enabled."}]}, {"type": 31, "dep": "y", "prompt": "Performance Monitoring", "cond": "y", "children": [{"type": 3, "name": "SCHED_CPULOAD", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable CPU load monitoring", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "selects": [{"symbol": "SCHED_CPULOAD_EXTCLK", "cond": "SCHED_TICKLESS"}], "help": "If this option is selected, the timer interrupt handler will monitor\nif the system is IDLE or busy at the time of that the timer interrupt\noccurs.  This is a very coarse measurement, but over a period of time,\nit can very accurately determined the percentage of the time that the\nCPU is IDLE.\n\nThe statistics collected in this could be used, for example in the\nPROCFS file system to provide CPU load measurements when read.\n\nNote that in tickless mode of operation (SCHED_TICKLESS) there is\nno system timer interrupt and CPU load measurements will not be\npossible unless you provide an alternative clock to driver the\nsampling and select SCHED_CPULOAD_EXTCLK.", "children": [{"type": 3, "name": "SCHED_CPULOAD_EXTCLK", "value": "n", "user_value": null, "rev_dep": "SCHED_CPULOAD && SCHED_TICKLESS", "dep": "n", "prompt": "Use external clock", "cond": "SCHED_CPULOAD", "defaults": [{"name": "n", "default": "n", "cond": "SCHED_CPULOAD"}], "help": "The CPU load measurements are determined by sampling the active\ntasks periodically at the occurrence to a timer expiration.  By\ndefault, the system clock is used to do that sampling.\n\nThere is a serious issue for the accuracy of measurements if the\nsystem clock is used, however.  NuttX threads are often started at\nthe time of the system timer expiration.  Others may be stopped at\nthe time of the system timer expiration (if round-robin time-slicing\nis enabled).  Such thread behavior occurs synchronously with the\nsystem timer and, hence, is not randomly sampled.  As a consequence,\nthe CPU load attributed to these threads that run synchronously with\nthey system timer may be grossly in error.\n\nThe solution is to use some other clock that runs at a different\nrate and has timer expirations that are asynchronous with the\nsystem timer.  Then truly accurate load measurements can be\nachieved.  This option enables use of such an \"external\" clock.  The\nimplementation of the clock must be provided by platform-specific\nlogic; that platform-specific logic must call the system function\nsched_process_cpuload() at each timer expiration with interrupts\ndisabled.", "children": [{"type": 27, "name": "SCHED_CPULOAD_TICKSPERSEC", "value": "", "user_value": null, "dep": "n", "prompt": "External clock rate", "cond": "SCHED_CPULOAD_EXTCLK && SCHED_CPULOAD", "defaults": [{"name": "100", "default": "100", "cond": "SCHED_CPULOAD_EXTCLK && SCHED_CPULOAD"}], "help": "If an external clock is used to drive the sampling for the CPU load\ncalculations, then this value must be provided.  This value provides\nthe rate of the external clock interrupts in units of ticks per\nsecond.  The default value of 100 corresponds to a 100Hz clock.  NOTE:\nthat 100Hz is the default frequency of the system time and, hence,\nthe worst possible choice in most cases."}, {"type": 3, "name": "CPULOAD_ONESHOT", "value": "n", "user_value": null, "dep": "n", "prompt": "Use Oneshot timer", "cond": "SCHED_CPULOAD_EXTCLK && SCHED_CPULOAD", "defaults": [{"name": "n", "default": "n", "cond": "SCHED_CPULOAD_EXTCLK && SCHED_CPULOAD"}], "help": "Use an MCU-specific oneshot timer as the external clock.  The\noneshot timer must be configured by board specific logic which must\nthen call:\n\n        void sched_oneshot_extclk(FAR struct oneshot_lowerhalf_s *lower);\n\nTo start the CPU load measurement. See include/nuttx/clock.h\n\nNOTE that in this configuration, CONFIG_SCHED_CPULOAD_TICKSPERSEC is\nthe sample rate that will be accomplished by programming the oneshot\ntime repeatedly.  If CPULOAD_ONESHOT_ENTROPY is also selected, then\nthe underly frequency driving the oneshote timer must be\nsignificantly faster than CONFIG_SCHED_CPULOAD_TICKSPERSE to permit\nprecise modulation the sample periods."}, {"type": 27, "name": "CPULOAD_ONESHOT_ENTROPY", "value": "", "user_value": null, "dep": "n", "prompt": "Bits of entropy", "cond": "SCHED_CPULOAD_EXTCLK && SCHED_CPULOAD", "defaults": [{"name": "6", "default": "6", "cond": "SCHED_CPULOAD_EXTCLK && SCHED_CPULOAD"}], "ranges": [{"min": "0", "max": "30", "cond": "SCHED_CPULOAD_EXTCLK && SCHED_CPULOAD"}], "help": "This is the number of bits of entropy that will be applied. The\noneshot will be set to this interval:\n\n        CPULOAD_ONESHOT_NOMINAL - (CPULOAD_ONESHOT_ENTROPY / 2) +\n        error + nrand(CPULOAD_ONESHOT_ENTROPY)\n\nWhere\n\n        CPULOAD_ONESHOT_NOMINAL is the nominal sample internval implied\n        by CONFIG_SCHED_CPULOAD_TICKSPERSEC in units of microseconds.\n        CPULOAD_ONESHOT_ENTROPY is (1 << CONFIG_CPULOAD_ONESHOT_ENTROPY),\n        and\n        'error' is an error value that is retained from interval to\n        interval so that although individual intervals are randomized,\n        the average will still be CONFIG_SCHED_CPULOAD_TICKSPERSEC.\n\nThis special value of zero disables entropy."}]}, {"type": 27, "name": "SCHED_CPULOAD_TIMECONSTANT", "value": "", "user_value": null, "dep": "n", "prompt": "CPU load time constant", "cond": "SCHED_CPULOAD", "defaults": [{"name": "2", "default": "2", "cond": "SCHED_CPULOAD"}], "help": "The accumulated CPU count is divided by two when the accumulated\ntick count exceeds this time constant.  This time constant is in\nunits of seconds."}]}, {"type": 3, "name": "SCHED_INSTRUMENTATION", "value": "n", "user_value": 0, "dep": "y", "prompt": "System performance monitor hooks", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enables instrumentation in scheduler to monitor system performance.\nIf enabled, then the board-specific logic must provide the following\nfunctions (see include/sched.h):\n\n        void sched_note_start(FAR struct tcb_s *tcb);\n        void sched_note_stop(FAR struct tcb_s *tcb);\n        void sched_note_suspend(FAR struct tcb_s *tcb);\n        void sched_note_resume(FAR struct tcb_s *tcb);\n\nIf CONFIG_SMP is enabled, then these additional interfaces are\nexpected:\n\n        void sched_note_cpu_pause(FAR struct tcb_s *tcb, int cpu);\n        void sched_note_cpu_paused(FAR struct tcb_s *tcb);\n        void sched_note_cpu_resume(FAR struct tcb_s *tcb, int cpu);\n        void sched_note_cpu_resumed(FAR struct tcb_s *tcb);\n\nNOTE: These are internal OS interfaces and are called at at very\ncritical locations in the OS. There is very little that can be\ndone in these interfaces.  For example, normal devices may not be\nused; syslog output cannot be performed.\n\nAn option is to use SCHED_INSTRUMENTATION_BUFFER below.", "children": [{"type": 24, "name": "SCHED_INSTRUMENTATION_CPUSET", "value": "", "user_value": null, "dep": "n", "prompt": "CPU bit set", "cond": "SMP && SCHED_INSTRUMENTATION", "defaults": [{"name": "0xffff", "default": "0xffff", "cond": "SMP && SCHED_INSTRUMENTATION"}], "help": "Monitor only CPUs in the bitset.  Bit 0=CPU0, Bit1=CPU1, etc."}, {"type": 3, "name": "SCHED_INSTRUMENTATION_PREEMPTION", "value": "n", "user_value": null, "dep": "n", "prompt": "Preemption monitor hooks", "cond": "SCHED_INSTRUMENTATION", "defaults": [{"name": "n", "default": "n", "cond": "SCHED_INSTRUMENTATION"}], "help": "Enables additional hooks for changes to pre-emption state.  Board-\nspecific logic must provide this additional logic.\n\n        void sched_note_premption(FAR struct tcb_s *tcb, bool state);"}, {"type": 3, "name": "SCHED_INSTRUMENTATION_CSECTION", "value": "n", "user_value": null, "dep": "n", "prompt": "Critical section monitor hooks", "cond": "SCHED_INSTRUMENTATION", "defaults": [{"name": "n", "default": "n", "cond": "SCHED_INSTRUMENTATION"}], "help": "Enables additional hooks for entry and exit from critical sections.\nInterrupts are disabled while within a critical section.  Board-\nspecific logic must provide this additional logic.\n\n        void sched_note_csection(FAR struct tcb_s *tcb, bool state);"}, {"type": 3, "name": "SCHED_INSTRUMENTATION_SPINLOCKS", "value": "n", "user_value": null, "dep": "n", "prompt": "Spinlock monitor hooks", "cond": "SCHED_INSTRUMENTATION", "defaults": [{"name": "n", "default": "n", "cond": "SCHED_INSTRUMENTATION"}], "help": "Enables additional hooks for spinlock state.  Board-specific logic\nmust provide this additional logic.\n\n        void sched_note_spinlock(FAR struct tcb_s *tcb, bool state);\n        void sched_note_spinlocked(FAR struct tcb_s *tcb, bool state);\n        void sched_note_spinunlock(FAR struct tcb_s *tcb, bool state);\n        void sched_note_spinabort(FAR struct tcb_s *tcb, bool state);"}, {"type": 3, "name": "SCHED_INSTRUMENTATION_BUFFER", "value": "n", "user_value": null, "dep": "n", "prompt": "Buffer instrumentation data in memory", "cond": "SCHED_INSTRUMENTATION", "defaults": [{"name": "n", "default": "n", "cond": "SCHED_INSTRUMENTATION"}], "help": "If this option is selected, then in-memory buffering logic is\nenabled to capature scheduler instrumentation data.  This has\nthe advantage that (1) the platform logic does not have to provide\nthe sched_note_* interaces described for the previous settings.\nInstead, the buffering logic catches all of these.  It encodes\ntimestamps the scheduler note and adds the note to an in-memory,\ncircular buffer.  And (2) buffering the scheduler instrumentation\ndata (versus performing some output operation) minimizes the impact\nof the instrumentation on the behavior of the system.\n\nIf the in-memory buffer becomes full, then older notes are\noverwritten by newer notes.  The following interface is provided:\n\n        ssize_t sched_note_get(FAR uint8_t *buffer, size_t buflen);\n\nPlatform specific information must call this function and dispose\nof it quickly so that overwriting of the tail of the circular buffer\ndoes not occur.  See include/nuttx/sched_note.h for additional\ninformation.", "children": [{"type": 27, "name": "SCHED_NOTE_BUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Instrumentation buffer size", "cond": "SCHED_INSTRUMENTATION_BUFFER && SCHED_INSTRUMENTATION", "defaults": [{"name": "2048", "default": "2048", "cond": "SCHED_INSTRUMENTATION_BUFFER && SCHED_INSTRUMENTATION"}], "help": "The size of the in-memory, circular instrumentation buffer (in\nbytes)."}, {"type": 27, "name": "SCHED_NOTE_GET", "value": "", "user_value": null, "dep": "n", "prompt": "Callable interface to get instrumentatin data", "cond": "!SCHED_INSTRUMENTATION_CSECTION && (!SCHED_INSTRUMENTATION_SPINLOCK || !SMP) && SCHED_INSTRUMENTATION_BUFFER && SCHED_INSTRUMENTATION", "defaults": [{"name": "2048", "default": "2048", "cond": "!SCHED_INSTRUMENTATION_CSECTION && (!SCHED_INSTRUMENTATION_SPINLOCK || !SMP) && SCHED_INSTRUMENTATION_BUFFER && SCHED_INSTRUMENTATION"}], "help": "Add support for interfaces to get the size of the next note and also\nto extract the next note from the instrumentation buffer:\n\n        ssize_t sched_note_get(FAR uint8_t *buffer, size_t buflen);\n        ssize_t sched_note_size(void);\n\nNOTE: This option is not available if critical sections are being\nmonitor (nor if spinlocks are being monitored in SMP configuration)\nbecause there would be a logical error in the design in those cases.\nThat error is that these interfaces call enter_ and leave_critical_section\n(and which us spinlocks in SMP mode).  That means that each call to\nsched_note_get() causes several additional entries to be added from\nthe note buffer in order to remove one entry."}]}]}]}, {"type": 31, "dep": "y", "prompt": "Files and I/O", "cond": "y", "children": [{"type": 3, "name": "DEV_CONSOLE", "value": "y", "user_value": 2, "dep": "y", "prompt": "Enable /dev/console", "cond": "y", "defaults": [{"name": "y", "default": "y", "cond": "y"}], "help": "Set if architecture-specific logic provides /dev/console at boot-up\ntime.  Enables stdout, stderr, stdin in the start-up application.\n\nYou need this setting if your console device is ready at boot time.\nFor example, if you are using a serial console, then /dev/console\n(aka, /dev/ttyS0) will be available when the application first starts.\n\nYou must not select DEV_CONSOLE if you console device comes up later\nand is not ready until after the application starts.  At this time,\nthe only console device that behaves this way is a USB serial console.\nWhen the application first starts, the USB is (probably) not yet\nconnected and /dev/console will not be created until later when the\nhost connects to the USB console."}, {"type": 3, "name": "FDCLONE_DISABLE", "value": "n", "user_value": 0, "dep": "y", "prompt": "Disable cloning of file descriptors", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Disable cloning of all file descriptors by task_create() when a new\nask is started.  If set, all files/drivers will appear to be closed\nin the new task."}, {"type": 3, "name": "FDCLONE_STDIO", "value": "n", "user_value": 0, "dep": "y", "prompt": "Disable clone file descriptors without stdio", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Disable cloning of all but the first three file descriptors (stdin,\nstdout, stderr) by task_create() when a new task is started. If set,\nall files/drivers will appear to be closed in the new task except\nfor stdin, stdout, and stderr."}, {"type": 3, "name": "SDCLONE_DISABLE", "value": "y", "user_value": 2, "dep": "y", "prompt": "Disable cloning of socket descriptors", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Disable cloning of all socket\ndescriptors by task_create() when a new task is started. If\nset, all sockets will appear to be closed in the new task."}, {"type": 27, "name": "NFILE_DESCRIPTORS", "value": "16", "user_value": "16", "dep": "y", "prompt": "Maximum number of file descriptors per task", "cond": "y", "defaults": [{"name": "16", "default": "16", "cond": "y"}], "help": "The maximum number of file descriptors per task (one for each open)"}, {"type": 27, "name": "NFILE_STREAMS", "value": "8", "user_value": "8", "dep": "y", "prompt": "Maximum number of FILE streams", "cond": "y", "defaults": [{"name": "16", "default": "16", "cond": "y"}], "help": "The maximum number of streams that can be fopen'ed"}, {"type": 27, "name": "NAME_MAX", "value": "64", "user_value": "64", "dep": "y", "prompt": "Maximum size of a file name", "cond": "y", "defaults": [{"name": "32", "default": "32", "cond": "y"}], "help": "The maximum size of a file name."}]}, {"type": 3, "name": "PRIORITY_INHERITANCE", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "Enable priority inheritance", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Set to enable support for priority inheritance on mutexes and semaphores.\nWhen this option is enabled, the initial configuration of all seamphores\nand mutexes will be with priority inheritance enabled.  That configuration\nmay not be appropriate in all cases (such as when the semaphore or mutex\nis used for signaling).  In such cases, priority inheritance be be\ndisabled for individual semaphores by calling:\n\n        int ret = sem_setprotocol(&sem, SEM_PRIO_NONE);\n\nAnd for individual pthread mutexes by setting the protocol attribute\nbefore initializing the mutex:\n\n        int ret = pthread_mutexattr_setprotocol(&attr, PTHREAD_PRIO_NONE);", "children": [{"type": 27, "name": "SEM_PREALLOCHOLDERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of pre-allocated holders", "cond": "PRIORITY_INHERITANCE", "defaults": [{"name": "16", "default": "16", "cond": "PRIORITY_INHERITANCE"}], "help": "This setting is only used if priority inheritance is enabled.\nIt defines the maximum number of different threads (minus one) that\ncan take counts on a semaphore with priority inheritance support.\nThis may be set to zero if priority inheritance is disabled OR if you\nare only using semaphores as mutexes (only one holder) OR if no more\nthan two threads participate using a counting semaphore."}, {"type": 27, "name": "SEM_NNESTPRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Maximum number of higher priority threads", "cond": "PRIORITY_INHERITANCE", "defaults": [{"name": "16", "default": "16", "cond": "PRIORITY_INHERITANCE"}], "help": "If priority inheritance is enabled, then this setting is the\nmaximum number of higher priority threads (minus 1) than can be\nwaiting for another thread to release a count on a semaphore.\nThis value may be set to zero if no more than one thread is\nexpected to wait for a semaphore."}]}, {"type": 31, "dep": "y", "prompt": "RTOS hooks", "cond": "y", "children": [{"type": 3, "name": "BOARD_INITIALIZE", "value": "n", "user_value": 0, "dep": "y", "prompt": "Custom board/driver initialization", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "By default, there are three points in time where you can insert\ncustom initialization logic:\n\n1) <arch>_boardinitialize():  This function is used only for\ninitialization of very low-level things like configuration of\nGPIO pins, power setting.  The OS has not been initialized\nat this point, so you cannot allocate memory or initialize\ndevice drivers at this phase.\n\n2) The next level of initialization is performed by a call to\nup_initialize() (in arch/<arch>/src/common/up_initialize.c).\nThe OS has been initialized at this point and it is okay to\ninitialize drivers in this phase.\n\n3) And, finally, when the user application code starts.\n\nIf BOARD_INITIALIZE is selected, then an additional initialization\ncall will be performed in the boot-up sequence to a function\ncalled board_initialize().  board_initialize() will be\ncall between phases 2) and 3) above, immediately after\nup_initialize() is called.  This additional initialization\nphase may be used, for example, to initialize board-specific\ndevice drivers.", "children": [{"type": 3, "name": "BOARD_INITTHREAD", "value": "n", "user_value": null, "dep": "n", "prompt": "Board initialization thread", "cond": "BOARD_INITIALIZE", "defaults": [{"name": "n", "default": "n", "cond": "BOARD_INITIALIZE"}], "help": "Some initialization operations cannot be performed on the start-up,\ninitialization thread.  That is because the initialization thread\ncannot wait for event.  If waiting is required as part of the board\ninitialization then this option must be selected.  Waiting may be\nrequired, for example, to mount a file system or or initialize a\ndevice such as an SD card.", "children": [{"type": 27, "name": "BOARD_INITTHREAD_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Board initialization thread stack size", "cond": "BOARD_INITTHREAD && BOARD_INITIALIZE", "defaults": [{"name": "2048", "default": "2048", "cond": "BOARD_INITTHREAD && BOARD_INITIALIZE"}], "help": "The size of the stack to allocate when starting the board\ninitialization thread."}, {"type": 27, "name": "BOARD_INITTHREAD_PRIORITY", "value": "", "user_value": null, "dep": "n", "prompt": "Board initialization thread priority", "cond": "BOARD_INITTHREAD && BOARD_INITIALIZE", "defaults": [{"name": "240", "default": "240", "cond": "BOARD_INITTHREAD && BOARD_INITIALIZE"}], "help": "The priority of the board initialization thread.  This priority is\nnot a critical setting.  No other application threads will be\nstarted until the board initialization is completed.  Hence, there\nis very little competition for the CPU."}]}]}, {"type": 3, "name": "SCHED_STARTHOOK", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable startup hook", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enable a non-standard, internal OS API call task_starthook().\ntask_starthook() registers a function that will be called on task\nstartup before that actual task entry point is called.  The\nstarthook is useful, for example, for setting up automatic\nconfiguration of C++ constructors."}, {"type": 3, "name": "SCHED_ATEXIT", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable atexit() API", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enables the atexit() API", "children": [{"type": 27, "name": "SCHED_ATEXIT_MAX", "value": "", "user_value": null, "dep": "n", "prompt": "Max number of atexit() functions", "cond": "SCHED_ATEXIT && !SCHED_ONEXIT", "defaults": [{"name": "1", "default": "1", "cond": "SCHED_ATEXIT && !SCHED_ONEXIT"}], "help": "By default if SCHED_ATEXIT is selected, only a single atexit() function\nis supported. That number can be increased by defined this setting to\nthe number that you require.\n\nIf both SCHED_ONEXIT and SCHED_ATEXIT are selected, then atexit() is built\non top of the on_exit() implementation.  In that case, SCHED_ONEXIT_MAX\ndetermines the size of the combined number of atexit(0) and on_exit calls\nand SCHED_ATEXIT_MAX is not used."}]}, {"type": 3, "name": "SCHED_ONEXIT", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable on_exit() API", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enables the on_exit() API", "children": [{"type": 27, "name": "SCHED_ONEXIT_MAX", "value": "", "user_value": null, "dep": "n", "prompt": "Max number of on_exit() functions", "cond": "SCHED_ONEXIT", "defaults": [{"name": "1", "default": "1", "cond": "SCHED_ONEXIT"}], "help": "By default if SCHED_ONEXIT is selected, only a single on_exit() function\nis supported. That number can be increased by defined this setting to the\nnumber that you require.\n\nIf both SCHED_ONEXIT and SCHED_ATEXIT are selected, then atexit() is built\non top of the on_exit() implementation.  In that case, SCHED_ONEXIT_MAX\ndetermines the size of the combined number of atexit(0) and on_exit calls."}]}]}, {"type": 3, "name": "SIG_EVTHREAD", "value": "n", "user_value": 0, "dep": "y", "prompt": "Support SIGEV_THHREAD", "cond": "BUILD_FLAT && SCHED_WORKQUEUE", "defaults": [{"name": "n", "default": "n", "cond": "BUILD_FLAT && SCHED_WORKQUEUE"}], "help": "Built in support for the SIGEV_THREAD signal deliver method.\n\nNOTE: The current implementation uses a work queue to notify the\nclient.  This, however, would only work in the FLAT build.  A\ndifferent mechanism would need to be development to support this\nfeature on the PROTECTED or KERNEL build."}, {"type": 31, "dep": "y", "prompt": "Signal Numbers", "cond": "!DISABLE_SIGNALS", "children": [{"type": 27, "name": "SIG_SIGUSR1", "value": "1", "user_value": "1", "dep": "y", "prompt": "SIGUSR1", "cond": "!DISABLE_SIGNALS", "defaults": [{"name": "1", "default": "1", "cond": "!DISABLE_SIGNALS"}], "help": "Value of standard user signal 1 (SIGUSR1). Default: 1"}, {"type": 27, "name": "SIG_SIGUSR2", "value": "2", "user_value": "2", "dep": "y", "prompt": "SIGUSR2", "cond": "!DISABLE_SIGNALS", "defaults": [{"name": "2", "default": "2", "cond": "!DISABLE_SIGNALS"}], "help": "Value of standard user signal 2 (SIGUSR2). Default: 2"}, {"type": 27, "name": "SIG_SIGALARM", "value": "3", "user_value": "3", "dep": "y", "prompt": "SIGALRM", "cond": "!DISABLE_SIGNALS", "defaults": [{"name": "3", "default": "3", "cond": "!DISABLE_SIGNALS"}], "help": "Default the signal number used with POSIX timers (SIGALRM).\nDefault: 3"}, {"type": 27, "name": "SIG_SIGCHLD", "value": "4", "user_value": "4", "dep": "y", "prompt": "SIGCHLD", "cond": "SCHED_HAVE_PARENT && !DISABLE_SIGNALS", "defaults": [{"name": "4", "default": "4", "cond": "SCHED_HAVE_PARENT && !DISABLE_SIGNALS"}], "help": "The SIGCHLD signal is sent to the parent of a child process when it\nexits, is interrupted (stopped), or resumes after being interrupted.\nDefault: 4"}, {"type": 27, "name": "SIG_POLL", "value": "", "user_value": null, "dep": "n", "prompt": "SIGPOLL", "cond": "FS_AIO && !DISABLE_SIGNALS", "defaults": [{"name": "5", "default": "5", "cond": "FS_AIO && !DISABLE_SIGNALS"}], "help": "The SIGPOLL signal is sent to a process when an asynchronous I/O\nevent occurs (meaning it has been polled).  Default: 5"}, {"type": 27, "name": "SIG_SIGCONDTIMEDOUT", "value": "16", "user_value": "16", "dep": "y", "prompt": "SIGCONDTIMEDOUT", "cond": "!DISABLE_PTHREAD && !DISABLE_SIGNALS", "defaults": [{"name": "16", "default": "16", "cond": "!DISABLE_PTHREAD && !DISABLE_SIGNALS"}], "help": "This non-standard signal number is used the implementation of\npthread_cond_timedwait(). Default 16."}, {"type": 27, "name": "SIG_SIGWORK", "value": "17", "user_value": "17", "dep": "y", "prompt": "SIGWORK", "cond": "(SCHED_WORKQUEUE || LIB_USRWORK) && !DISABLE_SIGNALS", "defaults": [{"name": "17", "default": "17", "cond": "(SCHED_WORKQUEUE || LIB_USRWORK) && !DISABLE_SIGNALS"}], "help": "SIGWORK is a non-standard signal used to wake up the internal NuttX\nworker thread.  This setting specifies the signal number that will be\nused for SIGWORK.  Default: 17"}]}, {"type": 31, "dep": "y", "prompt": "POSIX Message Queue Options", "cond": "!DISABLE_MQUEUE", "children": [{"type": 27, "name": "PREALLOC_MQ_MSGS", "value": "4", "user_value": "4", "dep": "y", "prompt": "Number of pre-allocated messages", "cond": "!DISABLE_MQUEUE", "defaults": [{"name": "32", "default": "32", "cond": "!DISABLE_MQUEUE"}], "help": "The number of pre-allocated message structures.  The system manages\na pool of preallocated message structures to minimize dynamic allocations"}, {"type": 27, "name": "MQ_MAXMSGSIZE", "value": "32", "user_value": "32", "dep": "y", "prompt": "Maximum message size", "cond": "!DISABLE_MQUEUE", "defaults": [{"name": "32", "default": "32", "cond": "!DISABLE_MQUEUE"}], "help": "Message structures are allocated with a fixed payload size given by this\nsetting (does not include other message structure overhead."}]}, {"type": 3, "name": "MODULE", "value": "n", "user_value": 0, "rev_dep": "LIBC_DLLFCN && BUILD_FLAT && (EXPERIMENTAL || !BUILD_KERNEL)", "dep": "y", "prompt": "Enable loadable OS modules", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "selects": [{"symbol": "LIBC_MODLIB", "cond": "y"}, {"symbol": "LIBC_ARCH_ELF", "cond": "y"}], "help": "Enable support for loadable OS modules.  Default: n"}, {"type": 31, "dep": "y", "prompt": "Work queue support", "cond": "y", "children": [{"type": 3, "name": "SCHED_WORKQUEUE", "value": "y", "user_value": 2, "rev_dep": "(STM32L4_SAI1_A && STM32L4_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_SAI1_B && STM32L4_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_SAI2_A && STM32L4_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_SAI2_B && STM32L4_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (SCHED_HPWORK && !DISABLE_SIGNALS) || (SCHED_LPWORK && !DISABLE_SIGNALS) || (CAN_TXREADY && CAN && CAN)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "!DISABLE_SIGNALS"}], "help": "Create dedicated \"worker\" threads to handle delayed or asynchronous\nprocessing."}, {"type": 3, "name": "SCHED_HPWORK", "value": "y", "user_value": 2, "rev_dep": "(CAN_TXREADY_HIPRI && y) || (ADC_ADS125X && ADC && ANALOG)", "dep": "y", "prompt": "High priority (kernel) worker thread", "cond": "!DISABLE_SIGNALS", "defaults": [{"name": "n", "default": "n", "cond": "!DISABLE_SIGNALS"}], "selects": [{"symbol": "SCHED_WORKQUEUE", "cond": "!DISABLE_SIGNALS"}], "help": "Create a dedicated high-priority \"worker\" thread to handle delayed\nprocessing from interrupt handlers.  This feature is required for\nsome drivers but, if there are no complaints, can be safely\ndisabled.  The high priority worker thread also performs garbage\ncollection -- completing any delayed memory deallocations from\ninterrupt handlers.  If the high-priority worker thread is disabled,\nthen that clean up will be performed either by (1) the low-priority\nworker thread, if enabled, and if not (2) the IDLE thread instead\n(which runs at the lowest of priority and may not be appropriate if\nmemory reclamation is of high priority)\n\nFor other, less-critical asynchronous or delayed process, the\nlow-priority worker thread is recommended.", "children": [{"type": 27, "name": "SCHED_HPWORKPRIORITY", "value": "224", "user_value": "224", "dep": "y", "prompt": "High priority worker thread priority", "cond": "SCHED_HPWORK", "defaults": [{"name": "224", "default": "224", "cond": "SCHED_HPWORK"}], "help": "The execution priority of the higher priority worker thread.\n\nThe higher priority worker thread is intended to serve as the\n\"bottom\" half for device drivers.  As a consequence it must run at\na very high, fixed priority.  Typically, it should be the highest\npriority thread in your system.  Default: 224\n\nFor lower priority, application oriented worker thread support,\nplease consider enabling the lower priority work queue.  The lower\npriority work queue runs at a lower priority, of course, but has\nthe added advantage that it supports \"priority inheritance\" (if\nPRIORITY_INHERITANCE is also selected):  The priority of the lower\npriority worker thread can then be adjusted to match the highest\npriority client."}, {"type": 27, "name": "SCHED_HPWORKPERIOD", "value": "0", "user_value": "0", "dep": "y", "prompt": "High priority worker thread period", "cond": "SCHED_HPWORK", "defaults": [{"name": "100000", "default": "100000", "cond": "SCHED_LPWORK && SCHED_HPWORK"}, {"name": "50000", "default": "50000", "cond": "!SCHED_LPWORK && SCHED_HPWORK"}], "help": "How often the worker thread checks for work in units of microseconds.\nDefault:  If the high priority worker thread is performing garbage\ncollection, then the default is 50*1000 (50 MS).  Otherwise, if the\nlower priority worker thread is performing garbage collection, the\ndefault is 100*1000."}, {"type": 27, "name": "SCHED_HPWORKSTACKSIZE", "value": "2048", "user_value": "2048", "dep": "y", "prompt": "High priority worker thread stack size", "cond": "SCHED_HPWORK", "defaults": [{"name": "2048", "default": "2048", "cond": "SCHED_HPWORK"}], "help": "The stack size allocated for the worker thread.  Default: 2K."}]}, {"type": 3, "name": "SCHED_LPWORK", "value": "y", "user_value": 2, "rev_dep": "(CAN_TXREADY_LOPRI && y) || (FS_AUTOMOUNTER && !DISABLE_MOUNTPOINT)", "dep": "y", "prompt": "Low priority (kernel) worker thread", "cond": "!DISABLE_SIGNALS", "defaults": [{"name": "n", "default": "n", "cond": "!DISABLE_SIGNALS"}], "selects": [{"symbol": "SCHED_WORKQUEUE", "cond": "!DISABLE_SIGNALS"}], "help": "If SCHED_LPWORK is defined then a lower-priority work queue will\nbe created.  This lower priority work queue is better suited for\nmore extended, application oriented processing (such as file system\nclean-up operations or asynchronous I/O)", "children": [{"type": 27, "name": "SCHED_LPNTHREADS", "value": "3", "user_value": "3", "dep": "y", "prompt": "Number of low-priority worker threads", "cond": "SCHED_LPWORK", "defaults": [{"name": "1", "default": "1", "cond": "!FS_AIO && SCHED_LPWORK"}, {"name": "4", "default": "4", "cond": "FS_AIO && SCHED_LPWORK"}], "help": "This options selects multiple, low-priority threads.  This is\nessentially a \"thread pool\" that provides multi-threaded servicing\nof the low-priority work queue.  This breaks the serialization\nof the \"queue\" (hence, it is no longer a queue at all).\n\nThis options is required to support, for example, I/O operations\nthat stall waiting for input.  If there is only a single thread,\nthen the entire low-priority queue processing stalls in such cases.\nSuch behavior is necessary to support asynchronous I/O, AIO (for\nexample).\n\nCAUTION: Some drivers may use the work queue to serialize\noperations.  The may also use the low-priority work queue if it is\navailable.  If there are multiple low-priority worker thread, then\nthis can result in the loss of that serialization.  There may be\nconcurrent driver operations running on different LP threads and\nthis could lead to a failure.  You may need to visit the use of the\nLP work queue on your configuration is you select\nCONFIG_SCHED_LPNTHREADS > 1"}, {"type": 27, "name": "SCHED_LPWORKPRIORITY", "value": "50", "user_value": "50", "dep": "y", "prompt": "Low priority worker thread priority", "cond": "SCHED_LPWORK", "defaults": [{"name": "50", "default": "50", "cond": "SCHED_LPWORK"}], "help": "The minimum execution priority of the lower priority worker thread.\n\nThe lower priority worker thread is intended support application-\noriented functions.  The lower priority work queue runs at a lower\npriority, of course, but has the added advantage that it supports\n\"priority inheritance\" (if PRIORITY_INHERITANCE is also selected):\nThe priority of the lower priority worker thread can then be\nadjusted to match the highest priority client.  Default: 50\n\nNOTE: This priority inheritance feature is not automatic.  The\nlower priority worker thread will always a fixed priority unless\nyou implement logic that calls lpwork_boostpriority() to raise the\npriority of the lower priority worker thread (typically called\nbefore scheduling the work) and then call the matching\nlpwork_restorepriority() when the work is completed (typically\ncalled within the work handler at the completion of the work).\nCurrently, only the NuttX asynchronous I/O logic uses this dynamic\nprioritization feature.\n\nThe higher priority worker thread, on the other hand, is intended\nto serve as the \"bottom\" half for device drivers.  As a consequence\nit must run at a very high, fixed priority.  Typically, it should\nbe the highest priority thread in your system."}, {"type": 27, "name": "SCHED_LPWORKPRIOMAX", "value": "", "user_value": null, "dep": "n", "prompt": "Low priority worker thread maximum priority", "cond": "PRIORITY_INHERITANCE && SCHED_LPWORK", "defaults": [{"name": "176", "default": "176", "cond": "PRIORITY_INHERITANCE && SCHED_LPWORK"}], "help": "The maximum execution priority of the lower priority worker thread.\n\nThe lower priority worker thread is intended support application-\noriented functions.  The lower priority work queue runs at a lower\npriority, of course, but has the added advantage that it supports\n\"priority inheritance\" (if PRIORITY_INHERITANCE is also selected):\nThe priority of the lower priority worker thread can then be\nadjusted to match the highest priority client.\n\nThe higher priority worker thread, on the other hand, is intended\nto serve as the \"bottom\" half for device drivers.  As a consequence\nit must run at a very high, fixed priority.  Typically, it should\nbe the highest priority thread in your system.\n\nThis value provides an upper limit on the priority of the lower\npriority worker thread.  This would be necessary, for example, if\nthe higher priority worker thread were to defer work to the lower\npriority thread.  Clearly, in such a case, you would want to limit\nthe maximum priority of the lower priority work thread.  Default:\n176"}, {"type": 27, "name": "SCHED_LPWORKPERIOD", "value": "0", "user_value": "0", "dep": "y", "prompt": "Low priority worker thread period", "cond": "SCHED_LPWORK", "defaults": [{"name": "50000", "default": "50000", "cond": "SCHED_LPWORK"}], "help": "How often the lower priority worker thread checks for work in units\nof microseconds. Default: 50*1000 (50 MS)."}, {"type": 27, "name": "SCHED_LPWORKSTACKSIZE", "value": "2048", "user_value": "2048", "dep": "y", "prompt": "Low priority worker thread stack size", "cond": "SCHED_LPWORK", "defaults": [{"name": "2048", "default": "2048", "cond": "SCHED_LPWORK"}], "help": "The stack size allocated for the lower priority worker thread.  Default: 2K."}]}]}, {"type": 31, "dep": "y", "prompt": "Stack and heap information", "cond": "y", "children": [{"type": 27, "name": "IDLETHREAD_STACKSIZE", "value": "1024", "user_value": "1024", "dep": "y", "prompt": "Idle thread stack size", "cond": "y", "defaults": [{"name": "1024", "default": "1024", "cond": "y"}], "help": "The size of the initial stack used by the IDLE thread.  The IDLE thread\nis the thread that (1) performs the initial boot of the system up to the\npoint where start-up appliation is spawned, and (2) there after is the\nIDLE thread that executes only when there is no other thread ready to run."}, {"type": 27, "name": "USERMAIN_STACKSIZE", "value": "8192", "user_value": "8192", "dep": "y", "prompt": "Main thread stack size", "cond": "y", "defaults": [{"name": "2048", "default": "2048", "cond": "y"}], "help": "The size of the stack to allocate for the user initialization thread\nthat is started as soon as the OS completes its initialization."}, {"type": 27, "name": "PTHREAD_STACK_MIN", "value": "256", "user_value": "256", "dep": "y", "prompt": "Minimum pthread stack size", "cond": "y", "defaults": [{"name": "256", "default": "256", "cond": "y"}], "help": "Minimum pthread stack size"}, {"type": 27, "name": "PTHREAD_STACK_DEFAULT", "value": "2048", "user_value": "2048", "dep": "y", "prompt": "Default pthread stack size", "cond": "y", "defaults": [{"name": "2048", "default": "2048", "cond": "y"}], "help": "Default pthread stack size"}]}, {"type": 3, "name": "LIB_SYSCALL", "value": "n", "user_value": 0, "menuconfig": true, "rev_dep": "(BUILD_PROTECTED && ARCH_USE_MPU && y) || (BUILD_KERNEL && ARCH_USE_MMU && ARCH_ADDRENV && y)", "dep": "y", "prompt": "System call support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Build in support for \"system calls\".  System calls are used to\nimplement a call gate mechanism that can be be used to call from\nuser code into the kernel.  This is only useful for user code that\nlies outside of the kernel such as when the BUILD_PROTECTED or\nBUILD_KERNEL builds are selected.\n\nThis permits calls from user-mode code into kernel mode; the call\ngate will change the mode of operation from user to supervisor mode,\nthen call into the OS code on behalf of the user-mode application.\n\nIf if there are no privilege issues preventing the call, system\ncalls may also be of value because it can eliminate the need for\nsymbol tables when linking external modules to the NuttX base code.\nThe selection will build libsyscall.  External modules can then link\nwith libsyscall when they are built and they can call into the OS\nwith no knowledge of the actual address in the OS.  In this case,\nthey call into a proxy that is link with the external code; that\nproxy then marshals the call parameter and invokes the system call\nto accomplish the interface.", "children": [{"type": 27, "name": "SYS_RESERVED", "value": "", "user_value": null, "dep": "n", "prompt": "Number of reserved system calls", "cond": "LIB_SYSCALL", "defaults": [{"name": "0", "default": "0", "cond": "LIB_SYSCALL"}], "help": "Kernel system calls may share the same software trapping mechanism\nas other functions used by architecture port.  Those software traps\nmust be reserved for use exclusively by the architecture.  These\nvalue specifies the number of reserved software traps used by the\narchitecture; number of the kernel system calls will begin with this\nnumber."}, {"type": 27, "name": "SYS_NNEST", "value": "", "user_value": null, "dep": "n", "prompt": "Number of nested system calls", "cond": "LIB_SYSCALL", "defaults": [{"name": "2", "default": "2", "cond": "LIB_SYSCALL"}], "help": "This is architecture dependent.  Most architectures allocate\nresources to manage a fixed, maximum number of nested system calls.\nA nested system call occurs in the following scenario:  (1) A non-\nprivileged user thread executes a system call, (2) part of the\nsystem call processing cause a call back into the user space code,\nand (3) the user space code performs another system call.\n\nI don't believe that any nested system calls will occur in the\ncurrent design so the default maximum nesting level of 2 should be\nmore than sufficient."}]}]}, {"type": 31, "dep": "y", "prompt": "Device Drivers", "cond": "y", "children": [{"type": 3, "name": "DISABLE_POLL", "value": "n", "user_value": 0, "dep": "y", "prompt": "Disable driver poll interfaces", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "The sizes of drivers can be reduced if the poll() method is not\nsupported.  If you do not use poll() or select(), then you can\nselect DISABLE_POLL to reduce the code footprint by a small amount.\n\nThis selection disables the poll() interface as well as interfaces\nthe derive from poll() such as select()."}, {"type": 3, "name": "DEV_NULL", "value": "y", "user_value": 2, "dep": "y", "prompt": "Enable /dev/null", "cond": "y", "defaults": [{"name": "y", "default": "y", "cond": "y"}]}, {"type": 3, "name": "DEV_ZERO", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable /dev/zero", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_HAVE_RNG", "value": "n", "user_value": 0, "rev_dep": "(KINETIS_RNGB && (ARCH_FAMILY_K60 || ARCH_FAMILY_K64 || ARCH_FAMILY_K66) && ARCH_CHIP_KINETIS && ARCH_ARM) || (KL_RNGB && ARCH_FAMILY_K60 && ARCH_CHIP_KL && ARCH_ARM) || (SAMA5_TRNG && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAM34_TRNG && (ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4L) && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAMV7_TRNG && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STM32_RNG && STM32_HAVE_RNG && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32F0_RNG && STM32F0_HAVE_RNG && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F7_RNG && STM32F7_HAVE_RNG && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32L4_RNG && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "y"}, {"type": 3, "name": "DEV_RANDOM", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable /dev/random", "cond": "ARCH_HAVE_RNG", "defaults": [{"name": "y", "default": "y", "cond": "ARCH_HAVE_RNG"}], "help": "Enable support for /dev/urandom provided by a hardware TRNG."}, {"type": 3, "name": "DEV_URANDOM", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable /dev/urandom", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enable support for /dev/urandom provided by either a hardware TRNG or\nby a software PRNG implementation.\n\nNOTE:  This option may not be cryptographially secure and should not\nbe enabled if you are concerned about cyptographically secure\npseudo-random numbers (CPRNG) and do not know the characteristics\nof the software PRNG impelementation!", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "/dev/urandom algorithm", "cond": "DEV_URANDOM", "defaults": [{"name": "DEV_URANDOM_ARCH", "default": "n", "cond": "ARCH_HAVE_RNG && DEV_URANDOM"}, {"name": "DEV_URANDOM_XORSHIFT128", "default": "n", "cond": "!ARCH_HAVE_RNG && DEV_URANDOM"}], "children": [{"type": 3, "name": "DEV_URANDOM_XORSHIFT128", "value": "n", "user_value": null, "dep": "n", "prompt": "xorshift128", "cond": "y", "help": "xorshift128 is a pseudorandom number generator that is simple,\nportable, and can also be used on 8-bit and 16-bit MCUs.\n\nNOTE: Not cyptographically secure"}, {"type": 3, "name": "DEV_URANDOM_CONGRUENTIAL", "value": "n", "user_value": null, "dep": "n", "prompt": "Conguential", "cond": "y", "help": "Use the same congruential general used with srand().  This algorithm\nis computationally more intense and uses double precision floating\npoint.  NOTE: Good randomness from the congruential generator also\nrequires that you also select CONFIG_LIB_RAND_ORDER > 2\n\nNOTE: Not cyptographically secure"}, {"type": 3, "name": "DEV_URANDOM_RANDOM_POOL", "value": "n", "user_value": null, "dep": "n", "prompt": "Entropy pool", "cond": "CRYPTO_RANDOM_POOL && y", "help": "Use the entropy pool CPRNG output for urandom algorithm.\n\nNOTE: May or may not be cyptographically secure, depending upon the\nquality entropy available to entropy pool."}, {"type": 3, "name": "DEV_URANDOM_ARCH", "value": "n", "user_value": null, "dep": "n", "prompt": "Architecture-specific", "cond": "ARCH_HAVE_RNG && y", "help": "The implementation of /dev/urandom is provided in archtecture-\nspecific logic using hardware TRNG logic.  architecture-specific\nlogic must provide the whole implementation in this case, including\nthe function devurandom_register().  In this case, /dev/urandom may\nrefer to the same driver as /dev/random.\n\nNOTE: May or may not be cyptographically secure, depending upon the\nimplementation."}]}]}, {"type": 3, "name": "DEV_LOOP", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable loop device", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Supports the standard loop device that can be used to export a\nfile (or character device) as a block device."}, {"type": 31, "dep": "y", "prompt": "Buffering", "cond": "y", "children": [{"type": 3, "name": "DRVR_WRITEBUFFER", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable write buffer support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enable generic write buffering support that can be used by a variety\nof drivers.", "children": [{"type": 27, "name": "DRVR_WRDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "Write flush delay", "cond": "DRVR_WRITEBUFFER", "defaults": [{"name": "350", "default": "350", "cond": "DRVR_WRITEBUFFER"}], "help": "If there is no write activity for this configured amount of time,\nthen the contents will be automatically flushed to the media.  This\nreduces the likelihood that data will be stuck in the write buffer\nat the time of power down."}]}, {"type": 3, "name": "DRVR_READAHEAD", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable read-ahead buffer support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enable generic read-ahead buffering support that can be used by a\nvariety of drivers."}, {"type": 3, "name": "DRVR_READBYTES", "value": "n", "user_value": null, "rev_dep": "(MTD_WRBUFFER && DRVR_WRITEBUFFER && MTD) || (MTD_READAHEAD && DRVR_READAHEAD && MTD)", "dep": "n", "prompt": "Support byte read method", "cond": "DRVR_WRITEBUFFER || DRVR_READAHEAD", "defaults": [{"name": "y", "default": "y", "cond": "MTD_BYTE_WRITE && (DRVR_WRITEBUFFER || DRVR_READAHEAD)"}, {"name": "n", "default": "n", "cond": "!MTD_BYTE_WRITE && (DRVR_WRITEBUFFER || DRVR_READAHEAD)"}]}, {"type": 3, "name": "DRVR_REMOVABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Support removable media", "cond": "DRVR_WRITEBUFFER || DRVR_READAHEAD", "defaults": [{"name": "n", "default": "n", "cond": "DRVR_WRITEBUFFER || DRVR_READAHEAD"}]}, {"type": 3, "name": "DRVR_INVALIDATE", "value": "n", "user_value": null, "rev_dep": "(MTD_WRBUFFER && DRVR_WRITEBUFFER && MTD) || (MTD_READAHEAD && DRVR_READAHEAD && MTD)", "dep": "n", "prompt": "Support cache invalidation", "cond": "DRVR_WRITEBUFFER || DRVR_READAHEAD", "defaults": [{"name": "n", "default": "n", "cond": "DRVR_WRITEBUFFER || DRVR_READAHEAD"}]}]}, {"type": 3, "name": "RAMDISK", "value": "n", "user_value": 0, "dep": "y", "prompt": "RAM Disk Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Can be used to set up a block of memory or (read-only) FLASH as\na block driver that can be mounted as a files system.  See\ninclude/nuttx/drivers/ramdisk.h."}, {"type": 3, "name": "CAN", "value": "n", "user_value": 0, "menuconfig": true, "rev_dep": "(SAMA5_CAN0 && SAMA5_HAVE_CAN0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_CAN1 && SAMA5_HAVE_CAN1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMV7_MCAN0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (SAMV7_MCAN1 && SAMV7_HAVE_MCAN1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STM32_CAN1 && STM32_HAVE_CAN1 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_CAN2 && STM32_HAVE_CAN2 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32F0_CAN1 && STM32F0_HAVE_CAN1 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F7_CAN1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_CAN2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_CAN3 && STM32F7_HAVE_CAN3 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32L4_CAN1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_CAN2 && STM32L4_HAVE_CAN2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STR71X_CAN && ARCH_CHIP_STR71X && ARCH_ARM)", "dep": "y", "prompt": "CAN Driver Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "This selection enables building of the \"upper-half\" CAN driver.\nSee include/nuttx/can/can.h for further CAN driver information.", "children": [{"type": 3, "name": "CAN_EXTID", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN extended IDs", "cond": "CAN && CAN", "defaults": [{"name": "n", "default": "n", "cond": "CAN && CAN"}], "help": "Enables support for the 29-bit extended ID.  Default Standard 11-bit\nIDs."}, {"type": 3, "name": "ARCH_HAVE_CAN_ERRORS", "value": "n", "user_value": null, "rev_dep": "(SAMV7_MCAN0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (SAMV7_MCAN1 && SAMV7_HAVE_MCAN1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (CAN_MCP2515 && SPI && CAN && CAN)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "CAN && CAN"}]}, {"type": 3, "name": "CAN_ERRORS", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN error reporting", "cond": "ARCH_HAVE_CAN_ERRORS && CAN && CAN", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_CAN_ERRORS && CAN && CAN"}], "help": "Support CAN error reporting.  If this option is selected then CAN\nerror reporting is enabled.  In the event of an error, the ch_error\nbit will be set in the CAN message and the following message payload\nwill include a more detailed description of certain errors."}, {"type": 3, "name": "CAN_FD", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN FD", "cond": "CAN && CAN", "defaults": [{"name": "n", "default": "n", "cond": "CAN && CAN"}], "help": "Enables support for the CAN_FD mode."}, {"type": 27, "name": "CAN_FIFOSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "CAN driver I/O buffer size", "cond": "CAN && CAN", "defaults": [{"name": "8", "default": "8", "cond": "CAN && CAN"}], "help": "The size of the circular buffer of CAN messages. Default: 8"}, {"type": 27, "name": "CAN_NPENDINGRTR", "value": "", "user_value": null, "dep": "n", "prompt": "Number of pending RTRs", "cond": "CAN && CAN", "defaults": [{"name": "4", "default": "4", "cond": "CAN && CAN"}], "help": "The size of the list of pending RTR requests. Default: 4"}, {"type": 3, "name": "CAN_TXREADY", "value": "n", "user_value": null, "rev_dep": "(SAMV7_MCAN0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (SAMV7_MCAN1 && SAMV7_HAVE_MCAN1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "n", "prompt": "can_txready interface", "cond": "CAN && CAN", "defaults": [{"name": "n", "default": "n", "cond": "CAN && CAN"}], "selects": [{"symbol": "SCHED_WORKQUEUE", "cond": "CAN && CAN"}], "help": "This selection enables the can_txready() interface.  This interface\nis needed only for CAN hardware that supports queing of outgoing\nmessages in a H/W FIFO.\n\nThe CAN upper half driver also supports a queue of output messages\nin a S/W FIFO.  Messages are added to that queue when when\ncan_write() is called and removed from the queue in can_txdone()\nwhen each TX message is complete.\n\nAfter each message is added to the S/W FIFO, the CAN upper half\ndriver will attempt to send the message by calling into the lower\nhalf driver.  That send will not be performed if the lower half\ndriver is busy, i.e., if dev_txready() returns false.  In that\ncase, the number of messages in the S/W FIFO can grow.  If the\nS/W FIFO becomes full, then can_write() will wait for space in\nthe S/W FIFO.\n\nIf the CAN hardware does not support a H/W FIFO then busy means\nthat the hardware is actively sending the message and is\nguaranteed to become non busy (i.e, dev_txready()) when the\nsend transfer completes and can_txdone() is called.  So the call\nto can_txdone() means that the transfer has completed and also\nthat the hardware is ready to accept another transfer.\n\nIf the CAN hardware supports a H/W FIFO, can_txdone() is not\ncalled when the tranfer is complete, but rather when the\ntransfer is queued in the H/W FIFO.  When the H/W FIFO becomes\nfull, then dev_txready() will report false and the number of\nqueued messages in the S/W FIFO will grow.\n\nThere is no mechanism in this case to inform the upper half\ndriver when the hardware is again available, when there is\nagain space in the H/W FIFO.  can_txdone() will not be called\nagain.  If the S/W FIFO becomes full, then the upper half\ndriver will wait for space to become available, but there is\nno event to awaken it and the driver will hang.\n\nEnabling this feature adds support for the can_txready()\ninterface.  This function is called from the lower half\ndriver's CAN interrupt handler each time a TX transfer\ncompletes.  This is a sure indication that the H/W FIFO is\nno longer full.  can_txready() will then awaken the\ncan_write() logic and the hang condition is avoided.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "TX Ready Work Queue", "cond": "CAN_TXREADY && CAN && CAN", "defaults": [{"name": "CAN_TXREADY_HIPRI", "default": "n", "cond": "CAN_TXREADY && CAN && CAN"}], "children": [{"type": 3, "name": "CAN_TXREADY_LOPRI", "value": "n", "user_value": null, "dep": "n", "prompt": "Low-priority work queue", "cond": "y", "selects": [{"symbol": "SCHED_LPWORK", "cond": "y"}]}, {"type": 3, "name": "CAN_TXREADY_HIPRI", "value": "n", "user_value": null, "dep": "n", "prompt": "High-priority work queue", "cond": "y", "selects": [{"symbol": "SCHED_HPWORK", "cond": "y"}]}]}]}, {"type": 3, "name": "CAN_LOOPBACK", "value": "n", "user_value": null, "dep": "n", "prompt": "CAN loopback mode", "cond": "CAN && CAN", "defaults": [{"name": "n", "default": "n", "cond": "CAN && CAN"}], "help": "A CAN driver may or may not support a loopback mode for testing. If the\ndriver does support loopback mode, the setting will enable it. (If the\ndriver does not, this setting will have no effect)."}, {"type": 27, "name": "CAN_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of poll waiters", "cond": "!DISABLE_POLL && CAN && CAN", "defaults": [{"name": "2", "default": "2", "cond": "!DISABLE_POLL && CAN && CAN"}], "help": "The maximum number of threads that may be waiting on the\npoll method."}, {"type": 6, "dep": "n", "prompt": "CAN Bus Controllers:", "cond": "CAN && CAN"}, {"type": 3, "name": "CAN_MCP2515", "value": "n", "user_value": null, "dep": "n", "prompt": "Microchip MCP2515 CAN Bus Controller over SPI", "cond": "SPI && CAN && CAN", "defaults": [{"name": "n", "default": "n", "cond": "SPI && CAN && CAN"}], "selects": [{"symbol": "ARCH_HAVE_CAN_ERRORS", "cond": "SPI && CAN && CAN"}], "help": "Enable driver support for Microchip MCP2515.", "children": [{"type": 27, "name": "MCP2515_BITRATE", "value": "", "user_value": null, "dep": "n", "prompt": "MCP2515 bitrate", "cond": "CAN_MCP2515 && CAN && CAN", "defaults": [{"name": "500000", "default": "500000", "cond": "CAN_MCP2515 && CAN && CAN"}], "help": "MCP2515 bitrate in bits per second."}, {"type": 27, "name": "MCP2515_PROPSEG", "value": "", "user_value": null, "dep": "n", "prompt": "MCP2515 Propagation Segment TQ", "cond": "CAN_MCP2515 && CAN && CAN", "defaults": [{"name": "2", "default": "2", "cond": "CAN_MCP2515 && CAN && CAN"}], "ranges": [{"min": "1", "max": "8", "cond": "CAN_MCP2515 && CAN && CAN"}], "help": "The length of the bit time is Tquanta * (SyncSeg + PropSeg + PhaseSeg1 + PhaseSeg2)."}, {"type": 27, "name": "MCP2515_PHASESEG1", "value": "", "user_value": null, "dep": "n", "prompt": "MCP2515 Phase Segment 1", "cond": "CAN_MCP2515 && CAN && CAN", "defaults": [{"name": "2", "default": "2", "cond": "CAN_MCP2515 && CAN && CAN"}], "ranges": [{"min": "1", "max": "8", "cond": "CAN_MCP2515 && CAN && CAN"}], "help": "The length of the bit time is Tquanta * (SyncSeg + PropSeg + PhaseSeg1 + PhaseSeg2)."}, {"type": 27, "name": "MCP2515_PHASESEG2", "value": "", "user_value": null, "dep": "n", "prompt": "MCP2515 Phase Segment 2", "cond": "CAN_MCP2515 && CAN && CAN", "defaults": [{"name": "3", "default": "3", "cond": "CAN_MCP2515 && CAN && CAN"}], "ranges": [{"min": "2", "max": "8", "cond": "CAN_MCP2515 && CAN && CAN"}], "help": "The length of the bit time is Tquanta * (SyncSeg + PropSeg + PhaseSeg1 + PhaseSeg2)."}, {"type": 27, "name": "MCP2515_SJW", "value": "", "user_value": null, "dep": "n", "prompt": "MCP2515 Synchronization Jump Width", "cond": "CAN_MCP2515 && CAN && CAN", "defaults": [{"name": "1", "default": "1", "cond": "CAN_MCP2515 && CAN && CAN"}], "ranges": [{"min": "1", "max": "4", "cond": "CAN_MCP2515 && CAN && CAN"}], "help": "The duration of a synchronization jump is SJW."}]}]}, {"type": 3, "name": "ARCH_HAVE_PWM_PULSECOUNT", "value": "n", "user_value": 0, "rev_dep": "(EFM32_TIMER0_PWM && EFM32_TIMER0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM) || (EFM32_TIMER1_PWM && EFM32_TIMER1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM) || (EFM32_TIMER2_PWM && EFM32_TIMER2 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM) || (EFM32_TIMER3_PWM && EFM32_TIMER3 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM) || (STM32_TIM1_PWM && STM32_TIM1 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_TIM2_PWM && STM32_TIM2 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_TIM3_PWM && STM32_TIM3 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_TIM4_PWM && STM32_TIM4 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_TIM5_PWM && STM32_TIM5 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_TIM8_PWM && STM32_TIM8 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_TIM9_PWM && STM32_TIM9 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_TIM10_PWM && STM32_TIM10 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_TIM11_PWM && STM32_TIM11 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_TIM12_PWM && STM32_TIM12 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_TIM13_PWM && STM32_TIM13 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_TIM14_PWM && STM32_TIM14 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32F7_TIM1_PWM && STM32F7_TIM1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM2_PWM && STM32F7_TIM2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM3_PWM && STM32F7_TIM3 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM4_PWM && STM32F7_TIM4 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM5_PWM && STM32F7_TIM5 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM8_PWM && STM32F7_TIM8 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM9_PWM && STM32F7_TIM9 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM10_PWM && STM32F7_TIM10 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM11_PWM && STM32F7_TIM11 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM12_PWM && STM32F7_TIM12 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM13_PWM && STM32F7_TIM13 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_TIM14_PWM && STM32F7_TIM14 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32L4_TIM1_PWM && STM32L4_TIM1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_TIM2_PWM && STM32L4_TIM2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_TIM3_PWM && STM32L4_TIM3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_TIM4_PWM && STM32L4_TIM4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_TIM5_PWM && STM32L4_TIM5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_TIM8_PWM && STM32L4_TIM8 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_HAVE_PWM_MULTICHAN", "value": "n", "user_value": 0, "rev_dep": "(STM32_PWM_MULTICHAN && (STM32_TIM1_PWM || STM32_TIM2_PWM || STM32_TIM3_PWM || STM32_TIM4_PWM || STM32_TIM5_PWM || STM32_TIM8_PWM || STM32_TIM9_PWM || STM32_TIM10_PWM || STM32_TIM11_PWM || STM32_TIM12_PWM || STM32_TIM13_PWM || STM32_TIM14_PWM || STM32_TIM15_PWM || STM32_TIM16_PWM || STM32_TIM17_PWM) && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32F7_PWM_MULTICHAN && (STM32F7_TIM1_PWM || STM32F7_TIM2_PWM || STM32F7_TIM3_PWM || STM32F7_TIM4_PWM || STM32F7_TIM5_PWM || STM32F7_TIM8_PWM || STM32F7_TIM9_PWM || STM32F7_TIM10_PWM || STM32F7_TIM11_PWM || STM32F7_TIM12_PWM || STM32F7_TIM13_PWM || STM32F7_TIM14_PWM) && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32L4_PWM_MULTICHAN && (STM32L4_TIM1_PWM || STM32L4_TIM2_PWM || STM32L4_TIM3_PWM || STM32L4_TIM4_PWM || STM32L4_TIM5_PWM || STM32L4_TIM8_PWM || STM32L4_TIM15_PWM || STM32L4_TIM16_PWM || STM32L4_TIM17_PWM) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "PWM", "value": "y", "user_value": 2, "menuconfig": true, "rev_dep": "(SAMA5_PWM && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (STM32L4_TIM1_PWM && STM32L4_TIM1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_TIM2_PWM && STM32L4_TIM2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_TIM3_PWM && STM32L4_TIM3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_TIM4_PWM && STM32L4_TIM4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_TIM5_PWM && STM32L4_TIM5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_TIM8_PWM && STM32L4_TIM8 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_TIM15_PWM && STM32L4_TIM15 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_TIM16_PWM && STM32L4_TIM16 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_TIM17_PWM && STM32L4_TIM17 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "y", "prompt": "PWM Driver Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "This selection enables building of the \"upper-half\" PWM driver.\nSee include/nuttx/drivers/pwm.h for further PWM driver information.", "children": [{"type": 3, "name": "PWM_PULSECOUNT", "value": "n", "user_value": null, "dep": "n", "prompt": "PWM Pulse Count Support", "cond": "ARCH_HAVE_PWM_PULSECOUNT && PWM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_PWM_PULSECOUNT && PWM"}], "help": "Some hardware will support generation of a fixed number of pulses.\nThis might be used, for example to support a stepper motor.  If the\nhardware will support a fixed pulse count, then this configuration\nshould be set to enable the capability."}, {"type": 3, "name": "PWM_MULTICHAN", "value": "n", "user_value": null, "dep": "n", "prompt": "PWM Multiple Output Channel Support", "cond": "ARCH_HAVE_PWM_MULTICHAN && !PWM_PULSECOUNT && PWM", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_PWM_MULTICHAN && !PWM_PULSECOUNT && PWM"}], "help": "Enables support for multiple output channels per timer.", "children": [{"type": 27, "name": "PWM_NCHANNELS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of Output Channels Per Timer", "cond": "PWM_MULTICHAN && PWM", "defaults": [{"name": "1", "default": "1", "cond": "PWM_MULTICHAN && PWM"}], "ranges": [{"min": "1", "max": "6", "cond": "PWM_MULTICHAN && PWM"}], "help": "Specifies the number of output channels per timer.  Each timer\nmay support fewer output channels than this value."}]}]}, {"type": 3, "name": "ARCH_HAVE_I2CRESET", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_KINETIS && y) || (ARCH_CHIP_LC823450 && y) || (ARCH_CHIP_SAMA5 && y) || (ARCH_CHIP_SAMV7 && y) || (ARCH_CHIP_STM32 && y) || (ARCH_CHIP_STM32F7 && y) || (ARCH_CHIP_STM32L4 && y) || (ARCH_CHIP_XMC4 && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "I2C", "value": "y", "user_value": 2, "menuconfig": true, "rev_dep": "(KINETIS_I2C0 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_I2C1 && KINETIS_HAVE_I2C1 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_I2C2 && KINETIS_HAVE_I2C2 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_I2C3 && KINETIS_HAVE_I2C3 && ARCH_CHIP_KINETIS && ARCH_ARM) || (LPC2378_I2C0 && ARCH_CHIP_LPC2378 && ARCH_ARM) || (LPC2378_I2C1 && ARCH_CHIP_LPC2378 && ARCH_ARM) || (LPC2378_I2C2 && ARCH_CHIP_LPC2378 && ARCH_ARM) || (SAMDL_SERCOM0_ISI2C && y) || (SAMDL_SERCOM1_ISI2C && y) || (SAMDL_SERCOM2_ISI2C && y) || (SAMDL_SERCOM3_ISI2C && y) || (SAMDL_SERCOM4_ISI2C && y) || (SAMDL_SERCOM5_ISI2C && y) || (SAMDL_HAVE_I2C && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM) || (STR71X_I2C0 && ARCH_CHIP_STR71X && ARCH_ARM) || (STR71X_I2C1 && ARCH_CHIP_STR71X && ARCH_ARM) || (RTC_DSXXXX && RTC_EXTERNAL && RTC) || (RTC_PCF85263 && RTC_EXTERNAL && RTC) || (VIDEO_OV2640 && VIDEO_DEVICES) || (INPUT_TSC2007 && INPUT) || (STMPE811_I2C && y) || (LCD_SSD1306_I2C && y) || PCA9635PW || NCP5623C || (MTD_AT24XX && MTD) || (BQ2425X && BATTERY_CHARGER && POWER) || (BQ2429X && BATTERY_CHARGER && POWER) || (MAX1704X && BATTERY_GAUGE && POWER) || (SENSORS_AS5048B && SENSORS) || (SENSORS_BH1750FVI && SENSORS) || (SENSORS_BMP180 && SENSORS) || (SENSORS_HTS221 && SENSORS) || (SENSOR_KXTJ9 && SENSORS) || (SENSORS_LIS2DH && SENSORS) || (LIS331DL && SENSORS) || (SENSORS_LSM9DS1 && SENSORS) || (SENSORS_LPS25H && SENSORS) || (SENSORS_LTC4151 && SENSORS) || (SENSORS_MB7040 && SENSORS) || (SENSORS_MCP9844 && SENSORS) || (SENSORS_MS58XX && SENSORS) || (ADXL345_I2C && y) || (SENSORS_LM75 && SENSORS) || (SENSORS_LM92 && SENSORS) || (SENSORS_VEML6070 && SENSORS) || (FUSB301 && USBMISC)", "dep": "y", "prompt": "I2C Driver Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "This selection enables building of the \"upper-half\" I2C driver.\nSee include/nuttx/i2c/i2c_master.h for further I2C driver information.", "children": [{"type": 3, "name": "I2C_SLAVE", "value": "n", "user_value": 0, "dep": "y", "prompt": "I2C Slave", "cond": "I2C && I2C", "defaults": [{"name": "n", "default": "n", "cond": "I2C && I2C"}]}, {"type": 3, "name": "I2C_POLLED", "value": "n", "user_value": 0, "dep": "y", "prompt": "Polled I2C (no interrupts)", "cond": "I2C && I2C", "defaults": [{"name": "n", "default": "n", "cond": "I2C && I2C"}]}, {"type": 3, "name": "I2C_RESET", "value": "n", "user_value": null, "dep": "n", "prompt": "Support I2C reset interface method", "cond": "ARCH_HAVE_I2CRESET && I2C && I2C", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_I2CRESET && I2C && I2C"}]}, {"type": 3, "name": "I2C_TRACE", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable I2C trace debug", "cond": "I2C && I2C", "defaults": [{"name": "n", "default": "n", "cond": "I2C && I2C"}], "children": [{"type": 27, "name": "I2C_NTRACE", "value": "", "user_value": null, "dep": "n", "prompt": "Number of I2C trace records", "cond": "I2C_TRACE && I2C && I2C", "defaults": [{"name": "32", "default": "32", "cond": "I2C_TRACE && I2C && I2C"}]}]}, {"type": 3, "name": "I2C_DRIVER", "value": "y", "user_value": 2, "dep": "y", "prompt": "I2C character driver", "cond": "I2C && I2C", "defaults": [{"name": "n", "default": "n", "cond": "I2C && I2C"}], "help": "Build in support for a character driver at /dev/i2c[N] that may be\nused to perform I2C bus transfers from applications.  The intent of\nthis driver is to support I2C testing.  It is not suitable for use\nin any real driver application."}]}, {"type": 3, "name": "ARCH_HAVE_SPI_CRCGENERATION", "value": "n", "user_value": 0, "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_HAVE_SPI_CS_CONTROL", "value": "n", "user_value": 0, "rev_dep": "ARCH_CHIP_SAMV7 && y", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_HAVE_SPI_BITORDER", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_EFM32 && y) || (ARCH_CHIP_STM32 && y) || (ARCH_CHIP_STM32F7 && y) || (ARCH_CHIP_STM32L4 && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "SPI", "value": "y", "user_value": 2, "menuconfig": true, "rev_dep": "(IMX1_SPI1 && ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM) || (IMX1_SPI2 && ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM) || (IMX6_SPI1 && ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM) || (IMX6_SPI2 && ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM) || (KINETIS_SPI0 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_SPI1 && KINETIS_HAVE_SPI1 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_SPI2 && KINETIS_HAVE_SPI2 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KL_SPI0 && ARCH_CHIP_KL && ARCH_ARM) || (KL_SPI1 && ARCH_CHIP_KL && ARCH_ARM) || (LPC2378_SPI && ARCH_CHIP_LPC2378 && ARCH_ARM) || (SAMDL_HAVE_SPI && (ARCH_CHIP_SAMD || ARCH_CHIP_SAML) && ARCH_ARM) || (SAM34_SPI0 && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_SPI1 && (ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A) && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAMV7_SPI0 && SAMV7_HAVE_SPI0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (SAMV7_SPI1 && SAMV7_HAVE_SPI1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STM32_SPI1 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_SPI2 && STM32_HAVE_SPI2 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_SPI3 && STM32_HAVE_SPI3 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_SPI4 && STM32_HAVE_SPI4 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_SPI5 && STM32_HAVE_SPI5 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_SPI6 && STM32_HAVE_SPI6 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32F0_SPI1 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_SPI2 && STM32F0_HAVE_SPI2 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_SPI3 && STM32F0_HAVE_SPI3 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_SPI4 && STM32F0_HAVE_SPI4 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_SPI5 && STM32F0_HAVE_SPI5 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_SPI6 && STM32F0_HAVE_SPI6 && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F7_SPI1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_SPI2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_SPI3 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_SPI4 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_SPI5 && STM32F7_HAVE_SPI5 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_SPI6 && STM32F7_HAVE_SPI6 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32L4_SPI2 && !(STM32L4_L432XX || STM32L4_L442XX) && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_SPI3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_SPI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STR71X_BSPI0 && ARCH_CHIP_STR71X && ARCH_ARM) || (STR71X_BSPI1 && ARCH_CHIP_STR71X && ARCH_ARM) || (AVR32_USART0_SPI && y) || (AVR32_USART1_SPI && y) || (AVR32_USART2_SPI && y) || (NR5_SPI1 && ARCH_CHIP_NR5 && ARCH_RISCV) || (Z16F_ESPI && ARCH_CHIP_Z16F && ARCH_Z16) || (ADC_ADS1242 && ADC && ANALOG) || (ADC_ADS125X && ADC && ANALOG) || (ADC_LTC1867L && ADC && ANALOG) || (ADC_PGA11X && ADC && ANALOG) || (DAC_AD5410 && DAC && ANALOG) || (INPUT_MAX11802 && INPUT) || (INPUT_ADS7843E && INPUT) || (STMPE811_SPI && y) || (LCD_SSD1306_SPI && y) || (SSD1351_SPI3WIRE && y) || (SSD1351_SPI4WIRE && y) || (MTD_AT25 && MTD) || (MTD_AT45DB && MTD) || (MTD_IS25XP && MTD) || (MTD_M25P && MTD) || (MTD_MX25L && MTD) || (MTD_RAMTRON && MTD) || (MTD_SST25 && MTD) || (MTD_SST25XX && MTD) || (MTD_SST26 && MTD) || (MTD_W25 && MTD) || (ENC28J60 && NETDEVICES) || (ENCX24J600 && NETDEVICES) || (SENSORS_BMG160 && SENSORS) || (SENSORS_L3GD20 && SENSORS) || (LIS3DSH && SENSORS) || (SENSORS_MLX90393 && SENSORS) || (SENSORS_MPL115A && SENSORS) || (ADXL345_SPI && y) || (SENSORS_MAX31855 && SENSORS) || (SENSORS_MAX6675 && SENSORS) || (SENSORS_LIS3MDL && SENSORS) || (SENSORS_XEN1210 && SENSORS) || (WL_CC1101 && DRIVERS_WIRELESS) || (WL_CC3000 && DRIVERS_WIRELESS) || (WL_CC3000 && DRIVERS_WIRELESS) || (WL_SPIRIT && DRIVERS_WIRELESS) || (WL_NRF24L01 && DRIVERS_WIRELESS) || (CL_MFRC522 && DRIVERS_CONTACTLESS) || (CL_PN532 && DRIVERS_CONTACTLESS)", "dep": "y", "prompt": "SPI Driver Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "This selection enables selection of common SPI options.  This option\nshould be enabled by all platforms that support SPI interfaces.\nSee include/nuttx/spi/spi.h for further SPI driver information.", "children": [{"type": 3, "name": "SPI_SLAVE", "value": "n", "user_value": 0, "dep": "y", "prompt": "SPI slave", "cond": "SPI", "defaults": [{"name": "n", "default": "n", "cond": "SPI"}], "help": "Enable support for SPI slave features", "children": [{"type": 3, "name": "SPI_SLAVE_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI slave DMA", "cond": "ARCH_DMA && EXPERIMENTAL && SPI_SLAVE && SPI", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_DMA && EXPERIMENTAL && SPI_SLAVE && SPI"}], "help": "Enable support for DMA data transfers (not yet implemented)."}]}, {"type": 3, "name": "SPI_EXCHANGE", "value": "y", "user_value": 2, "rev_dep": "(KL_SPI0 && ARCH_CHIP_KL && ARCH_ARM) || (KL_SPI1 && ARCH_CHIP_KL && ARCH_ARM)", "dep": "y", "prompt": "SPI exchange", "cond": "SPI", "defaults": [{"name": "y", "default": "y", "cond": "SPI"}], "help": "Driver supports a single exchange method (vs a recvblock() and\nsndblock() methods)."}, {"type": 3, "name": "SPI_CMDDATA", "value": "n", "user_value": 0, "rev_dep": "(LCD_DD12864WO4A && !LCD_UG2864HSWEG01 && !LCD_UG2832HSWEG04 && LCD) || (SSD1351_SPI4WIRE && y)", "dep": "y", "prompt": "SPI CMD/DATA", "cond": "SPI", "defaults": [{"name": "n", "default": "n", "cond": "SPI"}], "help": "Devices on the SPI bus require out-of-band support to distinguish\ncommand transfers from data transfers.  Such devices will often support\neither 9-bit SPI (yech) or 8-bit SPI and a GPIO output that selects\nbetween command and data."}, {"type": 3, "name": "SPI_CALLBACK", "value": "n", "user_value": 0, "dep": "y", "prompt": "Media change callbacks", "cond": "SPI", "defaults": [{"name": "y", "default": "y", "cond": "MMCSD_SPI && SPI"}, {"name": "n", "default": "n", "cond": "!MMCSD_SPI && SPI"}], "help": "Support the callback method in the SPI interface.  This will allow\nthe SPI-based MMC/SD driver to get a notification of changes in the\ncard status when an SD card is inserted or removed."}, {"type": 3, "name": "SPI_HWFEATURES", "value": "n", "user_value": 0, "rev_dep": "(SPI_CRCGENERATION && ARCH_HAVE_SPI_CRCGENERATION && SPI) || (SPI_CS_CONTROL && ARCH_HAVE_SPI_CS_CONTROL && SPI) || (SPI_BITORDER && ARCH_HAVE_SPI_BITORDER && SPI)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SPI"}], "help": "Selected only if a specific H/W feature is selected.  This is\nbasically the OR of any specific hardware feature and eanbles\nthe SPI hwfeatures() interface method."}, {"type": 3, "name": "SPI_CRCGENERATION", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_SPI_CRCGENERATION && SPI"}], "selects": [{"symbol": "SPI_HWFEATURES", "cond": "ARCH_HAVE_SPI_CRCGENERATION && SPI"}], "help": "Selected by MCU Kconfig logic if implementation supports automatic\ngeneration of SPI CRCs.  Enables the HWFEAT_CRCGENERATION option\nas well as the hwfeartures() interface method."}, {"type": 3, "name": "SPI_CS_CONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI CS Behavior Control", "cond": "ARCH_HAVE_SPI_CS_CONTROL && SPI", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_SPI_CS_CONTROL && SPI"}], "selects": [{"symbol": "SPI_HWFEATURES", "cond": "ARCH_HAVE_SPI_CS_CONTROL && SPI"}], "help": "Enables possibilities to define the behavior of CS.\nAlso enables the hwfeatures() interface method."}, {"type": 3, "name": "SPI_BITORDER", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI Bit Order Control", "cond": "ARCH_HAVE_SPI_BITORDER && SPI", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_SPI_BITORDER && SPI"}], "selects": [{"symbol": "SPI_HWFEATURES", "cond": "ARCH_HAVE_SPI_BITORDER && SPI"}], "help": "Enables capability to select MSB- or LSB-first hardware feature for\ndata transfers."}, {"type": 3, "name": "SPI_CS_DELAY_CONTROL", "value": "n", "user_value": 0, "dep": "y", "prompt": "SPI CS Delay Control", "cond": "SPI", "defaults": [{"name": "n", "default": "n", "cond": "SPI"}], "help": "Enables possibilities to define the SPI-ChipSelect-Delays like\ntime between ChipSelect assertion and first Data-Bit, the time\nbetween the last Data-Bit and the de-assertion and the minimum\ndelay between two ChipSelects.\n\nThis option enables the setdelay() interface method."}, {"type": 3, "name": "SPI_DRIVER", "value": "n", "user_value": 0, "dep": "y", "prompt": "SPI character driver", "cond": "SPI_EXCHANGE && SPI", "defaults": [{"name": "n", "default": "n", "cond": "SPI_EXCHANGE && SPI"}], "help": "Build in support for a character driver at /dev/spi[N] that may be\nused to perform SPI bus transfers from applications.  The intent of\nthis driver is to support SPI testing.  It is not suitable for use\nin any real driver application."}, {"type": 3, "name": "SPI_BITBANG", "value": "n", "user_value": 0, "dep": "y", "prompt": "SPI bit-bang device", "cond": "SPI", "defaults": [{"name": "n", "default": "n", "cond": "SPI"}], "help": "Enable support for a generic SPI bit-bang device.\nSee include/nuttx/spi/spi_bitbang.h for further information.", "children": [{"type": 3, "name": "SPI_BITBANG_VARWIDTH", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI bit-bang variable width transfers", "cond": "SPI_BITBANG && SPI", "defaults": [{"name": "n", "default": "n", "cond": "SPI_BITBANG && SPI"}], "help": "Enable support for a variable data width transfers.  Default: 8-bit\nonly."}]}]}, {"type": 3, "name": "I2S", "value": "n", "user_value": 0, "menuconfig": true, "rev_dep": "(SAMA5_SSC0 && (SAMA5_DMAC0 || SAMA5_XDMAC0 || SAMA5_XDMAC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_SSC1 && (SAMA5_DMAC1 || SAMA5_XDMAC0 || SAMA5_XDMAC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (STM32_I2S3 && STM32_HAVE_I2S3 && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32L4_SAI1_A && STM32L4_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_SAI1_B && STM32L4_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_SAI2_A && STM32L4_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_SAI2_B && STM32L4_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "y", "prompt": "I2S Driver Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "This selection enables selection of common I2S options.  This option\nshould be enabled by all platforms that support I2S interfaces.\nSee include/nuttx/audio/i2s.h for further I2S driver information."}, {"type": 31, "dep": "y", "prompt": "Timer Driver Support", "cond": "y", "children": [{"type": 3, "name": "TIMER", "value": "y", "user_value": 2, "dep": "y", "prompt": "Timer Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "This selection enables building of the \"upper-half\" timer\ndriver. See include/nuttx/timers/timer.h for further timer driver\ninformation."}, {"type": 3, "name": "ONESHOT", "value": "n", "user_value": 0, "dep": "y", "prompt": "Oneshot timer driver", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "This selection enables building of the \"upper-half\" oneshot timer\ndriver. See include/nuttx/timers/oneshot.h for further oneshot timer\ndriver information."}, {"type": 3, "name": "RTC", "value": "y", "user_value": 2, "menuconfig": true, "rev_dep": "(SAMA5_RTC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (STR71X_RTC && ARCH_CHIP_STR71X && ARCH_ARM)", "dep": "y", "prompt": "RTC Driver Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "This selection enables configuration of a real time clock (RTCdriver.\nSee include/nuttx/timers/rtc.h for further RTC driver information.\nMost RTC drivers are MCU specific and may require other specific\nsettings.", "children": [{"type": 3, "name": "RTC_DATETIME", "value": "n", "user_value": 0, "rev_dep": "(SAMA5_RTC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (RTC_DSXXXX && RTC_EXTERNAL && RTC) || (RTC_PCF85263 && RTC_EXTERNAL && RTC)", "dep": "y", "prompt": "Date/Time RTC Support", "cond": "RTC", "defaults": [{"name": "n", "default": "n", "cond": "RTC"}], "help": "There are two general types of RTC:  (1) A simple battery backed\ncounter that keeps the time when power is down, and (2) a full\ndate / time RTC the provides the date and time information, often in\nBCD format.  If RTC_DATETIME is selected, it specifies this second kind\nof RTC. In this case, the RTC is used to \"seed\" the normal NuttX timer\nand the NuttX system timer provides for higher resolution time."}, {"type": 3, "name": "RTC_HIRES", "value": "y", "user_value": 2, "dep": "y", "prompt": "Hi-Res RTC Support", "cond": "!RTC_DATETIME && RTC", "defaults": [{"name": "n", "default": "n", "cond": "!RTC_DATETIME && RTC"}], "help": "If RTC_DATETIME not selected, then the simple, battery backed counter\nis used.  There are two different implementations of such simple\ncounters based on the time resolution of the counter: The typical RTC\nkeeps time to resolution of 1 second, usually supporting a 32-bit\ntime_t value.  In this case, the RTC is used to \"seed\" the normal NuttX\ntimer and the NuttX timer provides for higherresoution time.\n\nIf RTC_HIRES is enabled in the NuttX configuration, then the RTC\nprovides higher resolution time and completely replaces the system\ntimer for purpose of date and time.", "children": [{"type": 27, "name": "RTC_FREQUENCY", "value": "32768", "user_value": "32768", "dep": "y", "prompt": "Hi-Res RTC frequency", "cond": "RTC_HIRES && !RTC_DATETIME && RTC", "defaults": [{"name": "1", "default": "1", "cond": "RTC_HIRES && !RTC_DATETIME && RTC"}], "help": "If RTC_HIRES is defined, then the frequency of the high resolution RTC\nmust be provided.  If RTC_HIRES is not defined, RTC_FREQUENCY is\nassumed to be one Hz."}]}, {"type": 3, "name": "RTC_ALARM", "value": "y", "user_value": 2, "dep": "y", "prompt": "RTC Alarm Support", "cond": "RTC", "defaults": [{"name": "n", "default": "n", "cond": "RTC"}], "help": "Enable if the RTC hardware supports setting of an alarm.  A callback\nfunction will be executed when the alarm goes off.", "children": [{"type": 27, "name": "RTC_NALARMS", "value": "1", "user_value": "1", "dep": "y", "prompt": "Number of alarms", "cond": "RTC_ALARM && RTC", "defaults": [{"name": "1", "default": "1", "cond": "RTC_ALARM && RTC"}], "help": "Number of alarms supported by the hardware."}]}, {"type": 3, "name": "RTC_DRIVER", "value": "y", "user_value": 2, "dep": "y", "prompt": "RTC Driver Support", "cond": "RTC", "defaults": [{"name": "n", "default": "n", "cond": "RTC"}], "help": "This selection enables building of the \"upper-half\" RTC\ndriver. See include/nuttx/timers/rtc.h for further RTC driver\ninformation.", "children": [{"type": 3, "name": "RTC_PERIODIC", "value": "n", "user_value": null, "dep": "n", "prompt": "RTC Periodic Interrupts", "cond": "EXPERIMENTAL && RTC_DRIVER && RTC", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && RTC_DRIVER && RTC"}], "help": "Add interrupt controls for RTCs that support periodic interrupts."}, {"type": 3, "name": "RTC_ONESEC", "value": "n", "user_value": null, "dep": "n", "prompt": "RTC Once-per-second interrupts", "cond": "EXPERIMENTAL && RTC_DRIVER && RTC", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && RTC_DRIVER && RTC"}], "help": "Add interrupt controls for RTCs that support once-per-second interrupts."}, {"type": 3, "name": "RTC_EPOCHYEAR", "value": "n", "user_value": null, "dep": "n", "prompt": "RTC epoch year", "cond": "EXPERIMENTAL && RTC_DRIVER && RTC", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && RTC_DRIVER && RTC"}], "help": "Add controls for RTCs that support epoch year settings.\n\nMany RTCs encode the year in an 8-bit register which is either interpreted\nas an 8-bit binary number or as a BCD number. In both cases, the number is\ninterpreted relative to this RTC's Epoch. The RTC's Epoch is initialized to\n1900 on most systems but on Alpha and MIPS it might also be initialized to\n1952, 1980, or 2000, depending on the value of an RTC register for the year.\nWith some RTCs, these operations can be used to read or to set the RTC's\nEpoch, respectively."}, {"type": 3, "name": "RTC_IOCTL", "value": "n", "user_value": 0, "dep": "y", "prompt": "RTC IOCTLs", "cond": "RTC_DRIVER && RTC", "defaults": [{"name": "n", "default": "n", "cond": "RTC_DRIVER && RTC"}], "help": "Support the RTC interface ioctl() method.  This allows you to add\narchitecture-specific RTC operations to the RTC interface"}]}, {"type": 3, "name": "RTC_EXTERNAL", "value": "n", "user_value": 0, "dep": "y", "prompt": "External RTC Support", "cond": "RTC", "defaults": [{"name": "n", "default": "n", "cond": "RTC"}], "help": "In modern MCUs, the RTC is usually implement as an internal\nperipheral to the MCU.  An option is to use an external RTC\nconnected to the MCU typically via SPI or I2C.\n\nIf an external RTC is connect to the MCU through some bus, then the\nRTC will not be available to the system until after the system\nfully boots up and is able to access the bus.  In that case, this\nsetting must be included to suppress attempts to initialize the RTC\nearly in the boot sequence.", "children": [{"type": 3, "name": "RTC_DSXXXX", "value": "n", "user_value": null, "dep": "n", "prompt": "DS130x/DS323x RTC Driver", "cond": "RTC_EXTERNAL && RTC", "defaults": [{"name": "n", "default": "n", "cond": "RTC_EXTERNAL && RTC"}], "selects": [{"symbol": "I2C", "cond": "RTC_EXTERNAL && RTC"}, {"symbol": "RTC_DATETIME", "cond": "RTC_EXTERNAL && RTC"}], "help": "Enables support for the Maxim Integrated DS3231 I2C RTC timer.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Maxim Integrated RTC", "cond": "RTC_DSXXXX && RTC", "defaults": [{"name": "RTC_DS3231", "default": "n", "cond": "RTC_DSXXXX && RTC"}], "children": [{"type": 3, "name": "RTC_DS1302", "value": "n", "user_value": null, "dep": "n", "prompt": "DS1302", "cond": "y", "help": "Enables support for the Maxim Integrated DS1307 serial RTC timer."}, {"type": 3, "name": "RTC_DS1307", "value": "n", "user_value": null, "dep": "n", "prompt": "DS1307", "cond": "y", "help": "Enables support for the Maxim Integrated DS1307 I2C RTC timer."}, {"type": 3, "name": "RTC_DS3231", "value": "n", "user_value": null, "dep": "n", "prompt": "DS3231", "cond": "y", "help": "Enables support for the Maxim Integrated DS3231 I2C RTC timer."}, {"type": 3, "name": "RTC_DS3232", "value": "n", "user_value": null, "dep": "n", "prompt": "DS3232", "cond": "y", "help": "Enables support for the Maxim Integrated DS3232 I2C RTC timer."}, {"type": 3, "name": "RTC_DS3234", "value": "n", "user_value": null, "dep": "n", "prompt": "DS3234", "cond": "EXPERIMENTAL && y", "help": "Enables support for the Maxim Integrated DS3234 SPI RTC timer.\n\nNot yet implemented."}]}, {"type": 27, "name": "DS3231_I2C_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "DS1307/DS323x I2C frequency", "cond": "RTC_DSXXXX && RTC", "defaults": [{"name": "400000", "default": "400000", "cond": "RTC_DSXXXX && RTC"}], "ranges": [{"min": "1", "max": "400000", "cond": "RTC_DSXXXX && RTC"}]}]}, {"type": 3, "name": "RTC_PCF85263", "value": "n", "user_value": null, "dep": "n", "prompt": "PCF85263 RTC Driver", "cond": "RTC_EXTERNAL && RTC", "defaults": [{"name": "n", "default": "n", "cond": "RTC_EXTERNAL && RTC"}], "selects": [{"symbol": "I2C", "cond": "RTC_EXTERNAL && RTC"}, {"symbol": "RTC_DATETIME", "cond": "RTC_EXTERNAL && RTC"}], "help": "Enables support for the Maxim Integrated DS3231 I2C RTC timer.", "children": [{"type": 27, "name": "PCF85263_I2C_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "PCF85263 I2C frequency", "cond": "RTC_PCF85263 && RTC", "defaults": [{"name": "400000", "default": "400000", "cond": "RTC_PCF85263 && RTC"}], "ranges": [{"min": "1", "max": "400000", "cond": "RTC_PCF85263 && RTC"}]}]}]}]}, {"type": 3, "name": "WATCHDOG", "value": "y", "user_value": 2, "menuconfig": true, "rev_dep": "(LC823450_WDT && ARCH_CHIP_LC823450 && ARCH_ARM) || (SAMA5_WDT && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMV7_WDT && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (SAMV7_RSWDT && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STM32_IWDG && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_WWDG && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32F0_IWDG && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F0_WWDG && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F7_IWDG && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_WWDG && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32L4_IWDG && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_WWDG && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "y", "prompt": "Watchdog Timer Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "This selection enables building of the \"upper-half\" watchdog timer\ndriver. See include/nuttx/timers/watchdog.h for further watchdog timer driver\ninformation.", "children": [{"type": 47, "name": "WATCHDOG_DEVPATH", "value": "/dev/watchdog0", "user_value": "/dev/watchdog0", "dep": "y", "prompt": "Watchdog Device Path", "cond": "WATCHDOG", "defaults": [{"name": "/dev/watchdog0", "default": "/dev/watchdog0", "cond": "WATCHDOG"}]}]}, {"type": 3, "name": "TIMERS_CS2100CP", "value": "n", "user_value": 0, "dep": "y", "prompt": "CS2100-CP Fraction-N Clock Multiplier", "cond": "I2C", "children": [{"type": 3, "name": "CS2100CP_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable CS2100-CP Debug Features", "cond": "DEBUG_FEATURES && TIMERS_CS2100CP"}, {"type": 3, "name": "CS2100CP_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable CS2100-CP Register Debug", "cond": "DEBUG_FEATURES && TIMERS_CS2100CP"}]}]}, {"type": 3, "name": "ANALOG", "value": "n", "user_value": 0, "menuconfig": true, "rev_dep": "SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM", "dep": "y", "prompt": "Analog Device(ADC/DAC) Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "This directory holds implementations of analog device drivers.\nThis includes drivers for Analog to Digital Conversion (ADC) as\nwell as drivers for Digital to Analog Conversion (DAC).\nSee include/nuttx/analog/*.h for registration information.", "children": [{"type": 3, "name": "ADC", "value": "n", "user_value": null, "rev_dep": "(SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (STR71X_ADC12 && ARCH_CHIP_STR71X && ARCH_ARM)", "dep": "n", "prompt": "Analog-to-Digital Conversion", "cond": "ANALOG", "defaults": [{"name": "n", "default": "n", "cond": "ANALOG"}], "help": "Select to enable support for analog input device support.  This includes\nnot only Analog-to-Digital Converters (ADC) but also amplifiers and\nanalog multiplexers.\n\nThis selection enables:\n\n        - The upper half, device-independent ADC character driver, and\n        - Selection of common lower half ADC drivers.\n\nMCU-specific, lower half drivers may be selected independently of\nCONFIG_ADC.  However, if CONFIG_ADC is selected, then it is assume\nthat lower half ADC drivers will be used only with the commoun ADC\nupper half driver.", "children": [{"type": 27, "name": "ADC_FIFOSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "ADC buffer size", "cond": "ADC && ANALOG", "defaults": [{"name": "8", "default": "8", "cond": "ADC && ANALOG"}], "help": "This variable defines the size of the ADC ring buffer that is used\nto queue received ADC data until they can be retrieved by the\napplication by reading from the ADC character device.  NOTE:  Since\nthis is a ring buffer, the actual number of bytes that can be\nretained in buffer is (ADC_FIFOSIZE - 1)."}, {"type": 27, "name": "ADC_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of poll waiters", "cond": "!DISABLE_POLL && ADC && ANALOG", "defaults": [{"name": "2", "default": "2", "cond": "!DISABLE_POLL && ADC && ANALOG"}], "help": "Maximum number of threads that can be waiting on poll."}, {"type": 3, "name": "ADC_ADS1242", "value": "n", "user_value": null, "dep": "n", "prompt": "TI ADS1242 support", "cond": "ADC && ANALOG", "defaults": [{"name": "n", "default": "n", "cond": "ADC && ANALOG"}], "selects": [{"symbol": "SPI", "cond": "ADC && ANALOG"}], "help": "Enable driver support for the ADS1242 24-Bit SPI powered ADC.\n\nThis driver supports reading the ADC conversion result as well as\nconfiguring the ADC, setting the input channel, etc. is implemented\nvia ioctl calls. However, it does not yet implement the standard ADC\ninterface."}, {"type": 3, "name": "ADC_ADS125X", "value": "n", "user_value": null, "dep": "n", "prompt": "TI ADS1255/ADS1256 support", "cond": "ADC && ANALOG", "defaults": [{"name": "n", "default": "n", "cond": "ADC && ANALOG"}], "selects": [{"symbol": "SPI", "cond": "ADC && ANALOG"}, {"symbol": "SCHED_HPWORK", "cond": "ADC && ANALOG"}], "children": [{"type": 27, "name": "ADS1255_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "ADS1255/ADS1256 SPI frequency", "cond": "ADC_ADS125X && ADC && ANALOG", "defaults": [{"name": "1000000", "default": "1000000", "cond": "ADC_ADS125X && ADC && ANALOG"}]}]}, {"type": 3, "name": "ADC_LTC1867L", "value": "n", "user_value": null, "dep": "n", "prompt": "LTC 1863L/1867L support", "cond": "ADC && ANALOG", "defaults": [{"name": "n", "default": "n", "cond": "ADC && ANALOG"}], "selects": [{"symbol": "SPI", "cond": "ADC && ANALOG"}], "help": "Enable driver support for the LTC 1863L (12 bit) and LTC 1867L (16 bit) SPI powered ADC.\n\nNote that the ADC conversion is started via the ANIOC_TRIGGER iotcl.", "children": [{"type": 27, "name": "LTC1867L_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "LTC 1863L/1867L SPI frequency", "cond": "ADC_LTC1867L && ADC && ANALOG", "defaults": [{"name": "1000000", "default": "1000000", "cond": "ADC_LTC1867L && ADC && ANALOG"}], "help": "LTC 1863L/1867L SPI frequency. Maximum is 20 MHz."}]}, {"type": 3, "name": "ADC_PGA11X", "value": "n", "user_value": null, "dep": "n", "prompt": "TI PGA112/3/6/7 support", "cond": "ADC && ANALOG", "defaults": [{"name": "n", "default": "n", "cond": "ADC && ANALOG"}], "selects": [{"symbol": "SPI", "cond": "ADC && ANALOG"}], "help": "Enables support for the  PGA112, PGA113, PGA116, PGA117 Zer-Drift\nPROGRAMMABLE GAIN AMPLIFIER with MUX", "children": [{"type": 27, "name": "PGA11X_SPIFREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "TI PGA112/3/6/7 SPI frequency", "cond": "ADC_PGA11X && ADC && ANALOG", "defaults": [{"name": "1000000", "default": "1000000", "cond": "ADC_PGA11X && ADC && ANALOG"}], "help": "PGA11x SPI frequency."}, {"type": 27, "name": "PGA11X_SPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "TI PGA112/3/6/7 SPI mode", "cond": "ADC_PGA11X && ADC && ANALOG", "defaults": [{"name": "0", "default": "0", "cond": "ADC_PGA11X && ADC && ANALOG"}], "help": "PGA11x SPI mode.  The specification says that the device operates in Mode 0 or\nMode 3.  But sometimes you need to tinker with this to get things to work\ncorrectly. Default:  Mode 0"}, {"type": 3, "name": "PGA11X_DAISYCHAIN", "value": "n", "user_value": null, "dep": "n", "prompt": "TI PGA112/3/6/7 daisy chain mode", "cond": "ADC_PGA11X && ADC && ANALOG", "defaults": [{"name": "n", "default": "n", "cond": "ADC_PGA11X && ADC && ANALOG"}], "help": "Enable support to use two PGA116/7's in Daisy Chain configuration."}, {"type": 3, "name": "PGA11X_MULTIPLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Multiple TI PGA112/3/6/7 support", "cond": "!PGA11X_DAISYCHAIN && ADC_PGA11X && ADC && ANALOG", "defaults": [{"name": "n", "default": "n", "cond": "!PGA11X_DAISYCHAIN && ADC_PGA11X && ADC && ANALOG"}], "help": "Can be defined to support multiple PGA11X devices on board with separate\nchip selects (not daisy chained).  Each device will require a customized\nSPI interface to distinguish them when SPI_SELECT is called with\ndevid=SPIDEV_MUX(n)."}]}]}, {"type": 3, "name": "COMP", "value": "n", "user_value": null, "rev_dep": "STM32L4_COMP && STM32L4_HAVE_COMP && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM", "dep": "n", "prompt": "Analog Comparator", "cond": "ANALOG", "defaults": [{"name": "n", "default": "n", "cond": "ANALOG"}], "help": "Select to enable support for Analog Comparators (COMPs)."}, {"type": 3, "name": "DAC", "value": "n", "user_value": null, "dep": "n", "prompt": "Digital-to-Analog Conversion", "cond": "ANALOG", "defaults": [{"name": "n", "default": "n", "cond": "ANALOG"}], "help": "Select to enable support for Digital-to-Analog Converters (DACs).", "children": [{"type": 3, "name": "DAC_AD5410", "value": "n", "user_value": null, "dep": "n", "prompt": "AD5410 support", "cond": "DAC && ANALOG", "defaults": [{"name": "n", "default": "n", "cond": "DAC && ANALOG"}], "selects": [{"symbol": "SPI", "cond": "DAC && ANALOG"}]}]}, {"type": 3, "name": "OPAMP", "value": "n", "user_value": null, "dep": "n", "prompt": "Operational Amplifier", "cond": "ANALOG", "defaults": [{"name": "n", "default": "n", "cond": "ANALOG"}], "help": "Select to enable support for Operational Amplifiers (OPAMPs)."}]}, {"type": 3, "name": "AUDIO_DEVICES", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "Audio Device Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enable support for audio device drivers.  This includes drivers for\nMP3, WMA and Ogg Vorbis encoding, decoding, as well as drivers for\ninterfacing with external DSP chips to perform custom audio functions.\n\nNOTE: All of these drivers depend on support from the audio subsystem\nenabled with the AUDIO selection.", "children": [{"type": 3, "name": "AUDIO_I2SCHAR", "value": "n", "user_value": null, "dep": "n", "prompt": "I2S character driver (for testing only)", "cond": "I2S && AUDIO && AUDIO_DEVICES", "defaults": [{"name": "n", "default": "n", "cond": "I2S && AUDIO && AUDIO_DEVICES"}], "help": "This selection enables a simple character driver that supports I2S\ntransfers via a read() and write().  The intent of this driver is to\nsupport I2S testing.  It is not an audio driver but does conform to\nsome of the buffer management heuristics of an audio driver.  It is\nnot suitable for use in any real driver application in its current\nform.", "children": [{"type": 27, "name": "AUDIO_I2SCHAR_RXTIMEOUT", "value": "", "user_value": null, "dep": "n", "prompt": "RX timeout", "cond": "AUDIO_I2SCHAR && AUDIO_DEVICES", "defaults": [{"name": "0", "default": "0", "cond": "AUDIO_I2SCHAR && AUDIO_DEVICES"}], "help": "This is a fixed timeout value that will be used for all receiver\ntransfers.  This is in units of system clock ticks (configurable).\nThe special value of zero disables RX timeouts.  Default: 0"}, {"type": 27, "name": "AUDIO_I2SCHAR_TXTIMEOUT", "value": "", "user_value": null, "dep": "n", "prompt": "TX timeout", "cond": "AUDIO_I2SCHAR && AUDIO_DEVICES", "defaults": [{"name": "0", "default": "0", "cond": "AUDIO_I2SCHAR && AUDIO_DEVICES"}], "help": "This is a fixed timeout value that will be used for all transmitter\ntransfers.  This is in units of system clock ticks (configurable).\nThe special value of zero disables RX timeouts.  Default: 0"}]}, {"type": 3, "name": "AUDIO_TONE", "value": "n", "user_value": null, "dep": "n", "prompt": "Audio Tone Generator using PWM", "cond": "PWM && AUDIO_DEVICES && AUDIO_DEVICES", "defaults": [{"name": "n", "default": "n", "cond": "PWM && AUDIO_DEVICES && AUDIO_DEVICES"}], "help": "This driver enables the Audio Tone Generator for NuttX."}, {"type": 3, "name": "AUDIO_VS1053", "value": "n", "user_value": null, "dep": "n", "prompt": "VS1053 codec chip", "cond": "AUDIO && AUDIO_DEVICES", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO && AUDIO_DEVICES"}], "help": "Select to enable support for the VS1053 Audio codec by VLSI Solutions.\nThis chip provides encoding and decoding of MP3, WMA, AAC and Ogg\nVorbis format audio.  It also has a general DSP which is user\nprogrammable to perform special audio (or any DSP) functions.", "children": [{"type": 27, "name": "VS1053_DEVICE_COUNT", "value": "", "user_value": null, "dep": "n", "prompt": "Number of VS1053 devices attached", "cond": "AUDIO_VS1053 && AUDIO_DEVICES", "defaults": [{"name": "1", "default": "1", "cond": "AUDIO_VS1053 && AUDIO_DEVICES"}], "help": "Sets the number of VS1053 type devices availalbe to the system.\nThis is required to reserve global, static lower-half driver\ncontext pointers for the DREQ ISR to use for lookup when it needs\nto signal that additional data is being requested."}, {"type": 27, "name": "VS1053_WORKER_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "VS1053 worker thread stack size", "cond": "AUDIO_VS1053 && AUDIO_DEVICES", "defaults": [{"name": "768", "default": "768", "cond": "AUDIO_VS1053 && AUDIO_DEVICES"}], "help": "Stack size to use with the VS1053 worker thread."}, {"type": 27, "name": "VS1053_NUM_BUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of Audio Pipeline Buffers to use", "cond": "AUDIO_DRIVER_SPECIFIC_BUFFERS && AUDIO_VS1053 && AUDIO_DEVICES", "defaults": [{"name": "2", "default": "2", "cond": "AUDIO_DRIVER_SPECIFIC_BUFFERS && AUDIO_VS1053 && AUDIO_DEVICES"}], "help": "Sets the number of the Audio Pipeline Buffers used to deliver audio\ndata to the VS1053 driver.  The minimum you should set this is\n2 buffers, which should be adequate for most media types."}, {"type": 27, "name": "VS1053_BUFFER_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Size of Audio Pipeline Buffers to use", "cond": "AUDIO_DRIVER_SPECIFIC_BUFFERS && AUDIO_VS1053 && AUDIO_DEVICES", "defaults": [{"name": "8192", "default": "8192", "cond": "AUDIO_DRIVER_SPECIFIC_BUFFERS && AUDIO_VS1053 && AUDIO_DEVICES"}], "help": "Sets the size of the Audio Pipeline Buffers used to deliver audio\ndata to the VS1053 driver.  The minimum you should set this is\n2048 bytes.  The larger the buffer, the better CPU performance."}]}, {"type": 3, "name": "AUDIO_CS43L22", "value": "n", "user_value": null, "dep": "n", "prompt": "CS43L22 audio chip", "cond": "AUDIO && AUDIO_DEVICES", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO && AUDIO_DEVICES"}], "help": "Select to enable support for the CS43L22 Audio codec by Cirrus Logic.\nThis chip is a lower level audio chip.. basically\nan exotic D-to-A.  It includes no built-in support for audio CODECS\nThe CS43L22 provides:\n\n        - Low power consumption\n        - High SNR\n        - Stereo digital microphone input\n        - Digital Dynamic Range Controller (compressor / limiter)\n        - Digital sidetone mixing\n        - Ground-referenced headphone driver\n        - Ground-referenced line outputs\n\nNOTE: This driver also depends on both I2C and I2S support although\nthat dependency is not explicit here.", "children": [{"type": 27, "name": "CS43L22_INITVOLUME", "value": "", "user_value": null, "dep": "n", "prompt": "CS43L22 initial volume setting", "cond": "AUDIO_CS43L22 && AUDIO_DEVICES", "defaults": [{"name": "250", "default": "250", "cond": "AUDIO_CS43L22 && AUDIO_DEVICES"}]}, {"type": 27, "name": "CS43L22_INFLIGHT", "value": "", "user_value": null, "dep": "n", "prompt": "CS43L22 maximum in-flight audio buffers", "cond": "AUDIO_CS43L22 && AUDIO_DEVICES", "defaults": [{"name": "2", "default": "2", "cond": "AUDIO_CS43L22 && AUDIO_DEVICES"}]}, {"type": 27, "name": "CS43L22_MSG_PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "CS43L22 message priority", "cond": "AUDIO_CS43L22 && AUDIO_DEVICES", "defaults": [{"name": "1", "default": "1", "cond": "AUDIO_CS43L22 && AUDIO_DEVICES"}]}, {"type": 27, "name": "CS43L22_BUFFER_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "CS43L22 preferred buffer size", "cond": "AUDIO_CS43L22 && AUDIO_DEVICES", "defaults": [{"name": "8192", "default": "8192", "cond": "AUDIO_CS43L22 && AUDIO_DEVICES"}]}, {"type": 27, "name": "CS43L22_NUM_BUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "CS43L22 preferred number of buffers", "cond": "AUDIO_CS43L22 && AUDIO_DEVICES", "defaults": [{"name": "4", "default": "4", "cond": "AUDIO_CS43L22 && AUDIO_DEVICES"}]}, {"type": 27, "name": "CS43L22_WORKER_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "CS43L22 worker thread stack size", "cond": "AUDIO_CS43L22 && AUDIO_DEVICES", "defaults": [{"name": "768", "default": "768", "cond": "AUDIO_CS43L22 && AUDIO_DEVICES"}]}, {"type": 3, "name": "CS43L22_REGDUMP", "value": "n", "user_value": null, "dep": "n", "prompt": "CS43L22 register dump", "cond": "AUDIO_CS43L22 && AUDIO_DEVICES", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO_CS43L22 && AUDIO_DEVICES"}], "help": "Enable logic to dump the contents of all CS43L22 registers."}, {"type": 3, "name": "CS43L22_CLKDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "CS43L22 clock analysis", "cond": "AUDIO_CS43L22 && AUDIO_DEVICES", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO_CS43L22 && AUDIO_DEVICES"}], "help": "Enable logic to analyze CS43L22 clock configuation."}]}, {"type": 3, "name": "AUDIO_WM8904", "value": "n", "user_value": null, "dep": "n", "prompt": "WM8904 audio chip", "cond": "AUDIO && AUDIO_DEVICES", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO && AUDIO_DEVICES"}], "help": "Select to enable support for the WM8904 Audio codec by Wolfson\nMicroelectonics.  This chip is a lower level audio chip.. basically\nan exotic D-to-A.  It includes no built-in support for audio CODECS\nThe WM8904 provides:\n\n        - Low power consumption\n        - High SNR\n        - Stereo digital microphone input\n        - Digital Dynamic Range Controller (compressor / limiter)\n        - Digital sidetone mixing\n        - Ground-referenced headphone driver\n        - Ground-referenced line outputs\n\nNOTE: This driver also depends on both I2C and I2S support although\nthat dependency is not explicit here.", "children": [{"type": 27, "name": "WM8904_INITVOLUME", "value": "", "user_value": null, "dep": "n", "prompt": "WM8904 initial volume setting", "cond": "AUDIO_WM8904 && AUDIO_DEVICES", "defaults": [{"name": "250", "default": "250", "cond": "AUDIO_WM8904 && AUDIO_DEVICES"}]}, {"type": 27, "name": "WM8904_INFLIGHT", "value": "", "user_value": null, "dep": "n", "prompt": "WM8904 maximum in-flight audio buffers", "cond": "AUDIO_WM8904 && AUDIO_DEVICES", "defaults": [{"name": "2", "default": "2", "cond": "AUDIO_WM8904 && AUDIO_DEVICES"}]}, {"type": 27, "name": "WM8904_MSG_PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "WM8904 message priority", "cond": "AUDIO_WM8904 && AUDIO_DEVICES", "defaults": [{"name": "1", "default": "1", "cond": "AUDIO_WM8904 && AUDIO_DEVICES"}]}, {"type": 27, "name": "WM8904_BUFFER_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "WM8904 preferred buffer size", "cond": "AUDIO_WM8904 && AUDIO_DEVICES", "defaults": [{"name": "8192", "default": "8192", "cond": "AUDIO_WM8904 && AUDIO_DEVICES"}]}, {"type": 27, "name": "WM8904_NUM_BUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "WM8904 preferred number of buffers", "cond": "AUDIO_WM8904 && AUDIO_DEVICES", "defaults": [{"name": "4", "default": "4", "cond": "AUDIO_WM8904 && AUDIO_DEVICES"}]}, {"type": 27, "name": "WM8904_WORKER_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "WM8904 worker thread stack size", "cond": "AUDIO_WM8904 && AUDIO_DEVICES", "defaults": [{"name": "768", "default": "768", "cond": "AUDIO_WM8904 && AUDIO_DEVICES"}]}, {"type": 3, "name": "WM8904_REGDUMP", "value": "n", "user_value": null, "dep": "n", "prompt": "WM8904 register dump", "cond": "AUDIO_WM8904 && AUDIO_DEVICES", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO_WM8904 && AUDIO_DEVICES"}], "help": "Enable logic to dump the contents of all WM8904 registers."}, {"type": 3, "name": "WM8904_CLKDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "WM8904 clock analysis", "cond": "AUDIO_WM8904 && AUDIO_DEVICES", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO_WM8904 && AUDIO_DEVICES"}], "help": "Enable logic to analyze WM8904 clock configuation."}]}, {"type": 3, "name": "AUDIO_NULL", "value": "n", "user_value": null, "dep": "n", "prompt": "NULL audio device", "cond": "AUDIO && AUDIO_DEVICES", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO && AUDIO_DEVICES"}], "help": "A do-nothinig audio device driver to simplify testing of audio\ndecoders.", "children": [{"type": 27, "name": "AUDIO_NULL_MSG_PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Null audio device message priority", "cond": "AUDIO_NULL && AUDIO_DEVICES", "defaults": [{"name": "1", "default": "1", "cond": "AUDIO_NULL && AUDIO_DEVICES"}]}, {"type": 27, "name": "AUDIO_NULL_BUFFER_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Null audio device preferred buffer size", "cond": "AUDIO_NULL && AUDIO_DEVICES", "defaults": [{"name": "8192", "default": "8192", "cond": "AUDIO_NULL && AUDIO_DEVICES"}]}, {"type": 27, "name": "AUDIO_NULL_NUM_BUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "Null audio device preferred number of buffers", "cond": "AUDIO_NULL && AUDIO_DEVICES", "defaults": [{"name": "4", "default": "4", "cond": "AUDIO_NULL && AUDIO_DEVICES"}]}, {"type": 27, "name": "AUDIO_NULL_WORKER_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Null audio device worker thread stack size", "cond": "AUDIO_NULL && AUDIO_DEVICES", "defaults": [{"name": "768", "default": "768", "cond": "AUDIO_NULL && AUDIO_DEVICES"}]}]}]}, {"type": 3, "name": "VIDEO_DEVICES", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "Video Device Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enable support for video device drivers.", "children": [{"type": 3, "name": "VIDEO_OV2640", "value": "n", "user_value": null, "dep": "n", "prompt": "OV2640 camera chip", "cond": "VIDEO_DEVICES", "defaults": [{"name": "n", "default": "n", "cond": "VIDEO_DEVICES"}], "selects": [{"symbol": "I2C", "cond": "VIDEO_DEVICES"}], "children": [{"type": 24, "name": "OV2640_I2CADDR", "value": "", "user_value": null, "dep": "n", "prompt": "I2C address (7-bit)", "cond": "VIDEO_OV2640 && VIDEO_DEVICES", "defaults": [{"name": "0x21", "default": "0x21", "cond": "VIDEO_OV2640 && VIDEO_DEVICES"}], "help": "OV2640 I2C address in 7-bit format"}, {"type": 27, "name": "OV2640_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "I2C frequency", "cond": "VIDEO_OV2640 && VIDEO_DEVICES", "defaults": [{"name": "400000", "default": "400000", "cond": "VIDEO_OV2640 && VIDEO_DEVICES"}], "help": "OV2640 I2C frequency"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Color format", "cond": "VIDEO_OV2640 && VIDEO_DEVICES", "defaults": [{"name": "OV2640_RGB565_COLORFMT", "default": "n", "cond": "VIDEO_OV2640 && VIDEO_DEVICES"}], "children": [{"type": 3, "name": "OV2640_RGB565_COLORFMT", "value": "n", "user_value": null, "dep": "n", "prompt": "RGB565", "cond": "y"}, {"type": 3, "name": "OV2640_YUV422_COLORFMT", "value": "n", "user_value": null, "dep": "n", "prompt": "YUV422", "cond": "y"}]}, {"type": 3, "name": "OV2640_JPEG", "value": "n", "user_value": null, "dep": "n", "prompt": "JPEG output format", "cond": "VIDEO_OV2640 && VIDEO_DEVICES", "defaults": [{"name": "n", "default": "n", "cond": "VIDEO_OV2640 && VIDEO_DEVICES"}], "help": "Select JPEG output format", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "JPEG resolution", "cond": "OV2640_JPEG && VIDEO_OV2640 && VIDEO_DEVICES", "defaults": [{"name": "OV2640_JPEG_SVGA_RESOLUTION", "default": "n", "cond": "OV2640_JPEG && VIDEO_OV2640 && VIDEO_DEVICES"}], "children": [{"type": 3, "name": "OV2640_JPEG_QCIF_RESOLUTION", "value": "n", "user_value": null, "dep": "n", "prompt": "QCIF (176x144)", "cond": "y"}, {"type": 3, "name": "OV2640_JPEG_QVGA_RESOLUTION", "value": "n", "user_value": null, "dep": "n", "prompt": "QVGA (320x240)", "cond": "y"}, {"type": 3, "name": "OV2640_JPEG_CIF_RESOLUTION", "value": "n", "user_value": null, "dep": "n", "prompt": "CIF (352x288)", "cond": "y"}, {"type": 3, "name": "OV2640_JPEG_VGA_RESOLUTION", "value": "n", "user_value": null, "dep": "n", "prompt": "VGA (640x480)", "cond": "y"}, {"type": 3, "name": "OV2640_JPEG_SVGA_RESOLUTION", "value": "n", "user_value": null, "dep": "n", "prompt": "SVGA (800x600)", "cond": "y"}, {"type": 3, "name": "OV2640_JPEG_XVGA_RESOLUTION", "value": "n", "user_value": null, "dep": "n", "prompt": "XVGA (1024x768)", "cond": "y"}, {"type": 3, "name": "OV2640_JPEG_SXVGA_RESOLUTION", "value": "n", "user_value": null, "dep": "n", "prompt": "SXVGA (1280x1024)", "cond": "y"}, {"type": 3, "name": "OV2640_JPEG_UXGA_RESOLUTION", "value": "n", "user_value": null, "dep": "n", "prompt": "UXVGA (1600x1200)", "cond": "y"}]}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Output resolution", "cond": "!OV2640_JPEG && VIDEO_OV2640 && VIDEO_DEVICES", "defaults": [{"name": "OV2640_SVGA_RESOLUTION", "default": "n", "cond": "!OV2640_JPEG && VIDEO_OV2640 && VIDEO_DEVICES"}], "children": [{"type": 3, "name": "OV2640_QCIF_RESOLUTION", "value": "n", "user_value": null, "dep": "n", "prompt": "QCIF (176x144)", "cond": "y"}, {"type": 3, "name": "OV2640_QVGA_RESOLUTION", "value": "n", "user_value": null, "dep": "n", "prompt": "QVGA (320x240)", "cond": "y"}, {"type": 3, "name": "OV2640_CIF_RESOLUTION", "value": "n", "user_value": null, "dep": "n", "prompt": "CIF (352x288)", "cond": "y"}, {"type": 3, "name": "OV2640_VGA_RESOLUTION", "value": "n", "user_value": null, "dep": "n", "prompt": "VGA (640x480)", "cond": "y"}, {"type": 3, "name": "OV2640_SVGA_RESOLUTION", "value": "n", "user_value": null, "dep": "n", "prompt": "SVGA (800x600)", "cond": "y"}, {"type": 3, "name": "OV2640_XVGA_RESOLUTION", "value": "n", "user_value": null, "dep": "n", "prompt": "XVGA (1024x768)", "cond": "y"}, {"type": 3, "name": "OV2640_SXGA_RESOLUTION", "value": "n", "user_value": null, "dep": "n", "prompt": "SXVGA (1280x1024)", "cond": "y"}, {"type": 3, "name": "OV2640_UXGA_RESOLUTION", "value": "n", "user_value": null, "dep": "n", "prompt": "UXVGA (1600x1200)", "cond": "y"}]}, {"type": 3, "name": "OV2640_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register level debug output", "cond": "DEBUG_FEATURES && VIDEO_OV2640 && VIDEO_DEVICES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && VIDEO_OV2640 && VIDEO_DEVICES"}], "help": "Enable details, register level debug output."}]}]}, {"type": 3, "name": "BCH", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "Block-to-Character (BCH) Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Contains logic that may be used to convert a block driver into\na character driver.  This is the complementary conversion as that\nperformed by loop.c.  See include/nuttx/drivers/drivers.h for\nregistration information.", "children": [{"type": 3, "name": "BCH_ENCRYPTION", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable BCH encryption", "cond": "CRYPTO_AES && BCH", "defaults": [{"name": "n", "default": "n", "cond": "CRYPTO_AES && BCH"}], "children": [{"type": 27, "name": "BCH_ENCRYPTION_KEY_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "AES key size", "cond": "BCH_ENCRYPTION && BCH", "defaults": [{"name": "16", "default": "16", "cond": "BCH_ENCRYPTION && BCH"}]}]}]}, {"type": 3, "name": "INPUT", "value": "n", "user_value": 0, "menuconfig": true, "rev_dep": "(SAMA5_TSD && SAMA5_ADC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (USBHOST_HIDMOUSE && !INT_DISABLE && USBHOST) || (USBHOST_XBOXCONTROLLER && !INT_DISABLE && USBHOST)", "dep": "y", "prompt": "Input Device Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "This directory holds implementations of input device drivers.\nThis includes such things as touchscreen and keypad drivers.\nSee include/nuttx/input/*.h for registration information.", "children": [{"type": 3, "name": "MOUSE", "value": "n", "user_value": null, "rev_dep": "USBHOST_HIDMOUSE && !INT_DISABLE && USBHOST", "dep": "n", "prompt": "Enable mouse support", "cond": "INPUT", "defaults": [{"name": "n", "default": "n", "cond": "INPUT"}], "help": "Enable support for mouse devices.", "children": [{"type": 3, "name": "MOUSE_WHEEL", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable mouse wheel support", "cond": "MOUSE && INPUT", "defaults": [{"name": "n", "default": "n", "cond": "MOUSE && INPUT"}], "help": "Enable support for a 4-button mouse report that includes a while\nposition."}]}, {"type": 3, "name": "INPUT_MAX11802", "value": "n", "user_value": null, "dep": "n", "prompt": "MAX11802 touchscreen controller", "cond": "INPUT", "defaults": [{"name": "n", "default": "n", "cond": "INPUT"}], "selects": [{"symbol": "SPI", "cond": "INPUT"}], "help": "Enable support for the MAX11802 touchscreen controller"}, {"type": 3, "name": "INPUT_TSC2007", "value": "n", "user_value": null, "dep": "n", "prompt": "TI TSC2007 touchscreen controller", "cond": "INPUT", "defaults": [{"name": "n", "default": "n", "cond": "INPUT"}], "selects": [{"symbol": "I2C", "cond": "INPUT"}], "help": "Enable support for the TI TSC2007 touchscreen controller", "children": [{"type": 3, "name": "TSC2007_8BIT", "value": "n", "user_value": null, "dep": "n", "prompt": "8-bit Conversions", "cond": "INPUT_TSC2007 && INPUT", "defaults": [{"name": "n", "default": "n", "cond": "INPUT_TSC2007 && INPUT"}], "help": "Use faster, but less accurate, 8-bit conversions.  Default: 12-bit conversions."}, {"type": 3, "name": "TSC2007_MULTIPLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Multiple TSC2007 Devices", "cond": "INPUT_TSC2007 && INPUT", "defaults": [{"name": "n", "default": "n", "cond": "INPUT_TSC2007 && INPUT"}], "help": "Can be defined to support multiple TSC2007 devices on board."}, {"type": 27, "name": "TSC2007_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number poll waiters", "cond": "!DISABLE_POLL && INPUT_TSC2007 && INPUT", "defaults": [{"name": "4", "default": "4", "cond": "!DISABLE_POLL && INPUT_TSC2007 && INPUT"}], "help": "Maximum number of threads that can be waiting on poll()"}]}, {"type": 3, "name": "INPUT_ADS7843E", "value": "n", "user_value": null, "dep": "n", "prompt": "TI ADS7843/TSC2046 touchscreen controller", "cond": "INPUT", "defaults": [{"name": "n", "default": "n", "cond": "INPUT"}], "selects": [{"symbol": "SPI", "cond": "INPUT"}], "help": "Enable support for the TI/Burr-Brown ADS7842 touchscreen controller.  I believe\nthat driver should be compatibile with the TI/Burr-Brown TSC2046 and XPT2046\ntouchscreen controllers as well.", "children": [{"type": 3, "name": "ADS7843E_MULTIPLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Multiple ADS7843E Devices", "cond": "INPUT_ADS7843E && INPUT", "defaults": [{"name": "n", "default": "n", "cond": "INPUT_ADS7843E && INPUT"}], "help": "Can be defined to support multiple ADS7843E devices on board."}, {"type": 27, "name": "ADS7843E_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number poll waiters", "cond": "!DISABLE_POLL && INPUT_ADS7843E && INPUT", "defaults": [{"name": "4", "default": "4", "cond": "!DISABLE_POLL && INPUT_ADS7843E && INPUT"}], "help": "Maximum number of threads that can be waiting on poll()"}, {"type": 27, "name": "ADS7843E_SPIDEV", "value": "", "user_value": null, "dep": "n", "prompt": "SPI bus number", "cond": "INPUT_ADS7843E && INPUT", "defaults": [{"name": "0", "default": "0", "cond": "INPUT_ADS7843E && INPUT"}], "help": "Selects the SPI bus number identying that SPI interface that\nconnects the ADS843E to the MCU."}, {"type": 27, "name": "ADS7843E_DEVMINOR", "value": "", "user_value": null, "dep": "n", "prompt": "Input device minor number", "cond": "INPUT_ADS7843E && INPUT", "defaults": [{"name": "0", "default": "0", "cond": "INPUT_ADS7843E && INPUT"}], "help": "The ADS7843E device will be registered as /dev/inputN where N is the\nvalue provided by this setting."}, {"type": 27, "name": "ADS7843E_SPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "SPI mode", "cond": "INPUT_ADS7843E && INPUT", "defaults": [{"name": "0", "default": "0", "cond": "INPUT_ADS7843E && INPUT"}], "ranges": [{"min": "0", "max": "3", "cond": "INPUT_ADS7843E && INPUT"}], "help": "Controls the SPI mode.  The device should work in mode 0, but\nsometimes you need to experiment."}, {"type": 27, "name": "ADS7843E_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "SPI frequency", "cond": "INPUT_ADS7843E && INPUT", "defaults": [{"name": "100000", "default": "100000", "cond": "INPUT_ADS7843E && INPUT"}], "help": "Define to use a different SPI bus frequency."}, {"type": 3, "name": "ADS7843E_SWAPXY", "value": "n", "user_value": null, "dep": "n", "prompt": "Swap X/Y", "cond": "INPUT_ADS7843E && INPUT", "defaults": [{"name": "n", "default": "n", "cond": "INPUT_ADS7843E && INPUT"}], "help": "Reverse the meaning of X and Y to handle different LCD orientations."}, {"type": 27, "name": "ADS7843E_THRESHX", "value": "", "user_value": null, "dep": "n", "prompt": "X threshold", "cond": "INPUT_ADS7843E && INPUT", "defaults": [{"name": "12", "default": "12", "cond": "INPUT_ADS7843E && INPUT"}], "help": "New touch positions will only be reported when the X or Y data changes by these\nthresholds. This trades reduced data rates for some loss in dragging accuracy.  For\n12-bit values the raw ranges are 0-4095. So for example, if your display is\n320x240, then THRESHX=13 and THRESHY=17 would correspond to one pixel.  Default: 12"}, {"type": 27, "name": "ADS7843E_THRESHY", "value": "", "user_value": null, "dep": "n", "prompt": "Y threshold", "cond": "INPUT_ADS7843E && INPUT", "defaults": [{"name": "12", "default": "12", "cond": "INPUT_ADS7843E && INPUT"}], "help": "New touch positions will only be reported when the X or Y data changes by these\nthresholds. This trades reduced data rates for some loss in dragging accuracy.  For\n12-bit values the raw ranges are 0-4095. So for example, if your display is\n320x240, then THRESHX=13 and THRESHY=17 would correspond to one pixel.  Default: 12"}]}, {"type": 3, "name": "INPUT_MXT", "value": "n", "user_value": null, "dep": "n", "prompt": "Atmel maXTouch Driver", "cond": "INPUT", "defaults": [{"name": "n", "default": "n", "cond": "INPUT"}], "help": "Enables support for the Atmel maXTouch driver", "children": [{"type": 27, "name": "MXT_THRESHX", "value": "", "user_value": null, "dep": "n", "prompt": "X threshold", "cond": "INPUT_MXT && INPUT", "defaults": [{"name": "5", "default": "5", "cond": "INPUT_MXT && INPUT"}], "help": "New touch positions will only be reported when the X or Y data\nchanges by these thresholds. This trades reduced data rates for some\nloss in dragging accuracy.  For 12-bit values the raw ranges are\n0-4095. So for example, if your display is 800x480, then THRESHX=5\nand THRESHY=8 would correspond to a one pixel change. Default: 5\n\nNOTE: This does nothing to reduce the interrupt rate.  It only\nreduces the rate at which touch events are reports."}, {"type": 27, "name": "MXT_THRESHY", "value": "", "user_value": null, "dep": "n", "prompt": "Y threshold", "cond": "INPUT_MXT && INPUT", "defaults": [{"name": "8", "default": "8", "cond": "INPUT_MXT && INPUT"}], "help": "New touch positions will only be reported when the X or Y data\nchanges by these thresholds. This trades reduced data rates for some\nloss in dragging accuracy.  For 12-bit values the raw ranges are\n0-4095. So for example, if your display is 800x480, then THRESHX=5\nand THRESHY=8 would correspond to a one pixel change. Default: 8\n\nNOTE: This does nothing to reduce the interrupt rate.  It only\nreduces the rate at which touch events are reports."}, {"type": 27, "name": "MXT_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number poll waiters", "cond": "!DISABLE_POLL && INPUT_MXT && INPUT", "defaults": [{"name": "4", "default": "4", "cond": "!DISABLE_POLL && INPUT_MXT && INPUT"}], "help": "Maximum number of threads that can be waiting on poll()"}, {"type": 3, "name": "MXT_DISABLE_CONFIG_DEBUG_INFO", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable verbose debug output", "cond": "DEBUG_INPUT_INFO && INPUT_MXT && INPUT", "defaults": [{"name": "y", "default": "y", "cond": "DEBUG_INPUT_INFO && INPUT_MXT && INPUT"}], "help": "The maXTouch tends to generate interrupts at a high rate during the\ncontact.  If verbose debug is enabled in this driver, you may not\nbe able to get anything done because of the high debug output rate.\n\nThis setting will allow you to keep verbose touchscreen debug output\nin other modules, but to specifically suppress the debug out from\nthe MXT driver.  Debug (non-verbose) errors will still be generated,\nbut the chit-chat level will be eliminated."}]}, {"type": 3, "name": "INPUT_STMPE811", "value": "n", "user_value": null, "dep": "n", "prompt": "STMicro STMPE811 Driver", "cond": "INPUT", "defaults": [{"name": "n", "default": "n", "cond": "INPUT"}], "help": "Enables support for the STMPE811 driver", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "STMPE Interface", "cond": "INPUT_STMPE811 && INPUT", "defaults": [{"name": "STMPE811_I2C", "default": "n", "cond": "INPUT_STMPE811 && INPUT"}], "children": [{"type": 3, "name": "STMPE811_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SPI Interface", "cond": "y", "selects": [{"symbol": "SPI", "cond": "y"}], "help": "Enables support for the SPI interface (not currently supported)"}, {"type": 3, "name": "STMPE811_I2C", "value": "n", "user_value": null, "dep": "n", "prompt": "STMPE811 I2C Interface", "cond": "y", "selects": [{"symbol": "I2C", "cond": "y"}], "help": "Enables support for the I2C interface"}]}, {"type": 3, "name": "STMPE811_ACTIVELOW", "value": "n", "user_value": null, "dep": "n", "prompt": "Active Low Interrupt", "cond": "INPUT_STMPE811 && INPUT", "defaults": [{"name": "n", "default": "n", "cond": "INPUT_STMPE811 && INPUT"}], "help": "The STMPE811 interrupt is provided by a discrete input (usually a\nGPIO interrupt on most MCU architectures).  This setting determines\nwhether the interrupt is active high (or rising edge triggered) or\nactive low (or falling edge triggered).  Default:  Active\nhigh/rising edge."}, {"type": 3, "name": "STMPE811_EDGE", "value": "n", "user_value": null, "dep": "n", "prompt": "Edge triggered Interrupt", "cond": "INPUT_STMPE811 && INPUT", "defaults": [{"name": "n", "default": "n", "cond": "INPUT_STMPE811 && INPUT"}], "help": "The STMPE811 interrupt is provided by a discrete input (usually a\nGPIO interrupt on most MCU architectures).  This setting determines\nwhether the interrupt is edge or level triggered.  Default: Level\ntriggered."}, {"type": 3, "name": "STMPE811_MULTIPLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Multiple STMPE811 Devices", "cond": "INPUT_STMPE811 && INPUT", "defaults": [{"name": "n", "default": "n", "cond": "INPUT_STMPE811 && INPUT"}], "help": "Can be defined to support multiple STMPE811 devices on board."}, {"type": 27, "name": "STMPE811_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number poll waiters", "cond": "!DISABLE_POLL && INPUT_STMPE811 && INPUT", "defaults": [{"name": "4", "default": "4", "cond": "!DISABLE_POLL && INPUT_STMPE811 && INPUT"}], "help": "Maximum number of threads that can be waiting on poll()"}, {"type": 3, "name": "STMPE811_TSC_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable STMPE811 Touchscreen Support", "cond": "INPUT_STMPE811 && INPUT", "defaults": [{"name": "n", "default": "n", "cond": "INPUT_STMPE811 && INPUT"}], "help": "Disable driver touchscreen functionality."}, {"type": 3, "name": "STMPE811_SWAPXY", "value": "n", "user_value": null, "dep": "n", "prompt": "Swap X/Y", "cond": "!STMPE811_TSC_DISABLE && INPUT_STMPE811 && INPUT", "defaults": [{"name": "n", "default": "n", "cond": "!STMPE811_TSC_DISABLE && INPUT_STMPE811 && INPUT"}], "help": "Reverse the meaning of X and Y to handle different LCD orientations."}, {"type": 27, "name": "STMPE811_THRESHX", "value": "", "user_value": null, "dep": "n", "prompt": "X threshold", "cond": "!STMPE811_TSC_DISABLE && INPUT_STMPE811 && INPUT", "defaults": [{"name": "12", "default": "12", "cond": "!STMPE811_TSC_DISABLE && INPUT_STMPE811 && INPUT"}], "help": "STMPE811 touchscreen data comes in a a very high rate.  New touch positions\nwill only be reported when the X or Y data changes by these thresholds.\nThis trades reduced data rates for some loss in dragging accuracy.  The\nSTMPE811 is configure for 12-bit values the raw ranges are 0-4095. So\nfor example, if your display is 320x240, then THRESHX=13 and THRESHY=17\nwould correspond to one pixel.  Default: 12"}, {"type": 27, "name": "STMPE811_THRESHY", "value": "", "user_value": null, "dep": "n", "prompt": "Y threshold", "cond": "!STMPE811_TSC_DISABLE && INPUT_STMPE811 && INPUT", "defaults": [{"name": "12", "default": "12", "cond": "!STMPE811_TSC_DISABLE && INPUT_STMPE811 && INPUT"}], "help": "STMPE811 touchscreen data comes in a a very high rate.  New touch positions\nwill only be reported when the X or Y data changes by these thresholds.\nThis trades reduced data rates for some loss in dragging accuracy.  The\nSTMPE811 is configure for 12-bit values the raw ranges are 0-4095. So\nfor example, if your display is 320x240, then THRESHX=13 and THRESHY=17\nwould correspond to one pixel.  Default: 12"}, {"type": 3, "name": "STMPE811_ADC_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable STMPE811 ADC Support", "cond": "INPUT_STMPE811 && INPUT", "defaults": [{"name": "y", "default": "y", "cond": "INPUT_STMPE811 && INPUT"}], "help": "Disable driver ADC functionality."}, {"type": 3, "name": "STMPE811_GPIO_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable STMPE811 GPIO Support", "cond": "INPUT_STMPE811 && INPUT", "defaults": [{"name": "y", "default": "y", "cond": "INPUT_STMPE811 && INPUT"}], "help": "Disable driver GPIO functionality."}, {"type": 3, "name": "STMPE811_GPIOINT_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable STMPE811 GPIO Interrupt Support", "cond": "!STMPE811_GPIO_DISABLE && INPUT_STMPE811 && INPUT", "defaults": [{"name": "y", "default": "y", "cond": "!STMPE811_GPIO_DISABLE && INPUT_STMPE811 && INPUT"}], "help": "Disable driver GPIO interrupt functionlality (ignored if GPIO functionality is\ndisabled)."}, {"type": 3, "name": "STMPE811_TEMP_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable STMPE811 Temperature Sensor Support", "cond": "INPUT_STMPE811 && INPUT", "defaults": [{"name": "y", "default": "y", "cond": "INPUT_STMPE811 && INPUT"}], "help": "Disable driver temperature sensor functionality."}, {"type": 3, "name": "STMPE811_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Register-Level STMPE811 Debug", "cond": "DEBUG_FEATURES && INPUT_STMPE811 && INPUT", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && INPUT_STMPE811 && INPUT"}], "help": "Enable very low register-level debug output."}]}, {"type": 3, "name": "INPUT_CYPRESS_MBR3108", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Cypress MBR3108 CapSense driver", "cond": "INPUT", "defaults": [{"name": "n", "default": "n", "cond": "INPUT"}], "help": "Enable support for Cypress MBR3108 CapSense touch button & proximity\ninput sensor.", "children": [{"type": 3, "name": "INPUT_CYPRESS_MBR3108_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable debug support for Cypress sensor", "cond": "DEBUG_FEATURES && INPUT_CYPRESS_MBR3108 && INPUT", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && INPUT_CYPRESS_MBR3108 && INPUT"}], "help": "Enable debugging traces for MBR3108 driver"}, {"type": 27, "name": "INPUT_CYPRESS_MBR3108_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of waiters to poll", "cond": "INPUT_CYPRESS_MBR3108 && INPUT", "defaults": [{"name": "1", "default": "1", "cond": "INPUT_CYPRESS_MBR3108 && INPUT"}], "help": "Maximum number of threads that can be waiting on poll()"}]}, {"type": 3, "name": "BUTTONS", "value": "n", "user_value": null, "dep": "n", "prompt": "Button Inputs", "cond": "INPUT", "defaults": [{"name": "n", "default": "n", "cond": "INPUT"}], "help": "Enable standard button upper half driver.", "children": [{"type": 3, "name": "BUTTONS_LOWER", "value": "n", "user_value": null, "dep": "n", "prompt": "Generic Lower Half Button Driver", "cond": "ARCH_BUTTONS && ARCH_IRQBUTTONS && BUTTONS && INPUT", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_BUTTONS && ARCH_IRQBUTTONS && BUTTONS && INPUT"}], "help": "If the board supports the standard button interfaces as\ndefined in include/nuttx/board.h header file, then this\nstandard button lower half driver might be usable.\n\nIn order for this generic driver to be usable:\n\n1. The board implementation must provide the button\n   interfaces as defined in include/nuttx/board.h\n2. The board implementation must support interrupts for each\n  button.\n3. The board.h header file must provide the definition\n   NUM_BUTTONS, and\n4. The board.h header file must not include any other\n   header files that are not accessibble in this context\n   (such as those in arch/<arch>/src/<chip>) UNLESS those\n   inclusions are conditioned on __KERNEL__.  button_lower.c\n   will undefine __KERNEL__ before included board.h.\n\nIf your board does not meet these requirements, then the\nbutton_lower.c file can still be copied to your your\nboard src/ directory and modified for your specific board\nrequirements."}, {"type": 27, "name": "BUTTONS_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "Max Number of Poll Waiters", "cond": "!DISABLE_POLL && BUTTONS && INPUT", "defaults": [{"name": "2", "default": "2", "cond": "!DISABLE_POLL && BUTTONS && INPUT"}]}]}, {"type": 3, "name": "DJOYSTICK", "value": "n", "user_value": null, "dep": "n", "prompt": "Discrete Joystick", "cond": "INPUT", "defaults": [{"name": "n", "default": "n", "cond": "INPUT"}], "help": "Enable standard discrete joystick upper half driver.  A discrete\njoystick refers to a joystick that could be implemented entirely\nwith GPIO input pins.  So up, down, left, and right are all discrete\nvalues like buttons (as opposed to integer values like you might\nobtain from an analog joystick).", "children": [{"type": 27, "name": "DJOYSTICK_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "Max Number of Poll Waiters", "cond": "!DISABLE_POLL && DJOYSTICK && INPUT", "defaults": [{"name": "2", "default": "2", "cond": "!DISABLE_POLL && DJOYSTICK && INPUT"}]}]}, {"type": 3, "name": "AJOYSTICK", "value": "n", "user_value": null, "dep": "n", "prompt": "Analog Joystick", "cond": "INPUT", "defaults": [{"name": "n", "default": "n", "cond": "INPUT"}], "help": "Enable standard analog joystick upper half driver.  An analog\njoystick refers to a joystick that provides position data as an\ninteger value that might have been obtained through Analog-\nto-Digital Conversion (ADC).  The analog positional data may also\nbe accompanied by discrete button data.", "children": [{"type": 27, "name": "AJOYSTICK_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "Max Number of Poll Waiters", "cond": "!DISABLE_POLL && AJOYSTICK && INPUT", "defaults": [{"name": "2", "default": "2", "cond": "!DISABLE_POLL && AJOYSTICK && INPUT"}]}]}]}, {"type": 31, "dep": "y", "prompt": "IO Expander/GPIO Support", "cond": "y", "children": [{"type": 3, "name": "IOEXPANDER", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable IO Expander Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "This directory holds implementations of IO expander drivers.\nSee include/nuttx/ioexpander/ioexpander.h for registration information.", "children": [{"type": 3, "name": "IOEXPANDER_PCA9555", "value": "n", "user_value": null, "dep": "n", "prompt": "PCA9555 I2C IO expander", "cond": "I2C && IOEXPANDER", "defaults": [{"name": "n", "default": "n", "cond": "I2C && IOEXPANDER"}], "help": "Enable support for the NXP PCA9555 IO Expander", "children": [{"type": 3, "name": "PCA9555_MULTIPLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Multiple PCA9555 Devices", "cond": "EXPERIMENTAL && IOEXPANDER_PCA9555 && IOEXPANDER", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && IOEXPANDER_PCA9555 && IOEXPANDER"}], "help": "Can be defined to support multiple PCA9555 devices on board."}, {"type": 3, "name": "PCA9555_INT_ENABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable PCA9555 Interrupt Support", "cond": "IOEXPANDER_PCA9555 && IOEXPANDER", "defaults": [{"name": "n", "default": "n", "cond": "IOEXPANDER_PCA9555 && IOEXPANDER"}], "selects": [{"symbol": "IOEXPANDER_INT_ENABLE", "cond": "IOEXPANDER_PCA9555 && IOEXPANDER"}], "help": "Enable driver interrupt functionality", "children": [{"type": 27, "name": "PCA9555_INT_NCALLBACKS", "value": "", "user_value": null, "dep": "n", "prompt": "Max number of interrupt callbacks", "cond": "PCA9555_INT_ENABLE && IOEXPANDER_PCA9555 && IOEXPANDER", "defaults": [{"name": "4", "default": "4", "cond": "PCA9555_INT_ENABLE && IOEXPANDER_PCA9555 && IOEXPANDER"}], "help": "This is the maximum number of interrupt callbacks supported"}]}, {"type": 3, "name": "PCA9555_SHADOW_MODE", "value": "n", "user_value": null, "dep": "n", "prompt": "Use Shadow Mode instead of Read-Modify-Write Operations", "cond": "IOEXPANDER_PCA9555 && IOEXPANDER", "defaults": [{"name": "n", "default": "n", "cond": "IOEXPANDER_PCA9555 && IOEXPANDER"}], "help": "This setting enables a mode where the output and pin\nconfiguration registers are held in RAM.\nWith this for example we do not need to read back the\noutput-register every time we want to change one pin.\nWe do instead change the bit in the internal register\nand then just write this register to the IO-Expander.\nThis reduces bus traffic and eliminates the problem of\nEMC-caused toggling of output pins."}, {"type": 3, "name": "PCA9555_RETRY", "value": "n", "user_value": null, "dep": "n", "prompt": "Retry to send commands and data at I2C communication errors", "cond": "IOEXPANDER_PCA9555 && IOEXPANDER", "defaults": [{"name": "n", "default": "n", "cond": "IOEXPANDER_PCA9555 && IOEXPANDER"}], "help": "Retry to send commands and data if a I2C-communication\nerror occurs (eg. caused by EMC)."}]}, {"type": 3, "name": "IOEXPANDER_TCA64XX", "value": "n", "user_value": null, "dep": "n", "prompt": "TCA64XX I2C IO expander", "cond": "I2C && EXPERIMENTAL && IOEXPANDER", "defaults": [{"name": "n", "default": "n", "cond": "I2C && EXPERIMENTAL && IOEXPANDER"}], "help": "Enable support for the TCA64XX IO Expander", "children": [{"type": 3, "name": "TCA64XX_MULTIPLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Multiple TCA64XX Devices", "cond": "IOEXPANDER_TCA64XX && IOEXPANDER", "defaults": [{"name": "n", "default": "n", "cond": "IOEXPANDER_TCA64XX && IOEXPANDER"}], "help": "Can be defined to support multiple TCA64XX devices on board."}, {"type": 3, "name": "TCA64XX_INT_ENABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TCA64XX Interrupt Support", "cond": "IOEXPANDER_TCA64XX && IOEXPANDER", "defaults": [{"name": "n", "default": "n", "cond": "IOEXPANDER_TCA64XX && IOEXPANDER"}], "selects": [{"symbol": "IOEXPANDER_INT_ENABLE", "cond": "IOEXPANDER_TCA64XX && IOEXPANDER"}], "help": "Enable driver interrupt functionality", "children": [{"type": 27, "name": "TCA64XX_INT_NCALLBACKS", "value": "", "user_value": null, "dep": "n", "prompt": "Max number of interrupt callbacks", "cond": "TCA64XX_INT_ENABLE && IOEXPANDER_TCA64XX && IOEXPANDER", "defaults": [{"name": "4", "default": "4", "cond": "TCA64XX_INT_ENABLE && IOEXPANDER_TCA64XX && IOEXPANDER"}], "help": "This is the maximum number of interrupt callbacks supported"}]}, {"type": 3, "name": "TCA64XX_INT_POLL", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable interrupt poll", "cond": "IOEXPANDER_TCA64XX && IOEXPANDER", "defaults": [{"name": "n", "default": "n", "cond": "IOEXPANDER_TCA64XX && IOEXPANDER"}], "help": "Enable polling for missed interrupts.", "children": [{"type": 27, "name": "TCA64XX_INT_POLLDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "Interrupt poll delay (used)", "cond": "TCA64XX_INT_POLL && IOEXPANDER_TCA64XX && IOEXPANDER", "defaults": [{"name": "500000", "default": "500000", "cond": "TCA64XX_INT_POLL && IOEXPANDER_TCA64XX && IOEXPANDER"}], "help": "This microsecond delay defines the polling rate for missed interrupts."}]}]}, {"type": 3, "name": "IOEXPANDER_PCF8574", "value": "n", "user_value": null, "dep": "n", "prompt": "PCF8574 I2C IO expander", "cond": "I2C && EXPERIMENTAL && IOEXPANDER", "defaults": [{"name": "n", "default": "n", "cond": "I2C && EXPERIMENTAL && IOEXPANDER"}], "help": "Enable support for the PCF8574 IO Expander", "children": [{"type": 3, "name": "PCF8574_MULTIPLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Multiple PCF8574 Devices", "cond": "IOEXPANDER_PCF8574 && IOEXPANDER", "defaults": [{"name": "n", "default": "n", "cond": "IOEXPANDER_PCF8574 && IOEXPANDER"}], "help": "Can be defined to support multiple PCF8574 devices on board."}, {"type": 3, "name": "PCF8574_INT_ENABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable PCF8574 Interrupt Support", "cond": "IOEXPANDER_PCF8574 && IOEXPANDER", "defaults": [{"name": "n", "default": "n", "cond": "IOEXPANDER_PCF8574 && IOEXPANDER"}], "selects": [{"symbol": "IOEXPANDER_INT_ENABLE", "cond": "IOEXPANDER_PCF8574 && IOEXPANDER"}], "help": "Enable driver interrupt functionality", "children": [{"type": 27, "name": "PCF8574_INT_NCALLBACKS", "value": "", "user_value": null, "dep": "n", "prompt": "Max number of interrupt callbacks", "cond": "PCF8574_INT_ENABLE && IOEXPANDER_PCF8574 && IOEXPANDER", "defaults": [{"name": "4", "default": "4", "cond": "PCF8574_INT_ENABLE && IOEXPANDER_PCF8574 && IOEXPANDER"}], "help": "This is the maximum number of interrupt callbacks supported"}]}, {"type": 3, "name": "PCF8574_INT_POLL", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable interrupt poll", "cond": "IOEXPANDER_PCF8574 && IOEXPANDER", "defaults": [{"name": "n", "default": "n", "cond": "IOEXPANDER_PCF8574 && IOEXPANDER"}], "help": "Enable polling for missed interrupts.", "children": [{"type": 27, "name": "PCF8574_INT_POLLDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "Interrupt poll delay (used)", "cond": "PCF8574_INT_POLL && IOEXPANDER_PCF8574 && IOEXPANDER", "defaults": [{"name": "500000", "default": "500000", "cond": "PCF8574_INT_POLL && IOEXPANDER_PCF8574 && IOEXPANDER"}], "help": "This microsecond delay defines the polling rate for missed interrupts."}]}]}, {"type": 3, "name": "IOEXPANDER_INT_ENABLE", "value": "n", "user_value": null, "rev_dep": "(SIM_IOEXPANDER && IOEXPANDER && ARCH_SIM) || (PCA9555_INT_ENABLE && IOEXPANDER_PCA9555 && IOEXPANDER) || (TCA64XX_INT_ENABLE && IOEXPANDER_TCA64XX && IOEXPANDER) || (PCF8574_INT_ENABLE && IOEXPANDER_PCF8574 && IOEXPANDER)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "IOEXPANDER"}], "help": "This is the global INT supported flag for io expanders"}, {"type": 27, "name": "IOEXPANDER_NPINS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of pins", "cond": "IOEXPANDER", "defaults": [{"name": "16", "default": "16", "cond": "IOEXPANDER"}], "help": "Maximum number of pins supported per driver."}, {"type": 3, "name": "IOEXPANDER_MULTIPIN", "value": "n", "user_value": null, "dep": "n", "prompt": "Support multi-pin access routines", "cond": "IOEXPANDER", "defaults": [{"name": "n", "default": "n", "cond": "IOEXPANDER"}], "help": "This settings enable the definition of routines for\noptimized simultaneous access to multiple pins."}]}, {"type": 3, "name": "DEV_GPIO", "value": "n", "user_value": 0, "dep": "y", "prompt": "GPIO driver", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enables a simple GPIO input/output driver to support application-\nspace testing of hardware.", "children": [{"type": 3, "name": "GPIO_LOWER_HALF", "value": "n", "user_value": null, "dep": "n", "prompt": "GPIO Lower Half", "cond": "DEV_GPIO && IOEXPANDER", "defaults": [{"name": "n", "default": "n", "cond": "DEV_GPIO && IOEXPANDER"}], "help": "Enable support for a lower half driver that provides GPIO driver\nsupport for I/O expander pins."}]}]}, {"type": 31, "dep": "y", "prompt": "LCD Driver Support", "cond": "y", "children": [{"type": 3, "name": "LCD", "value": "y", "user_value": 2, "menuconfig": true, "rev_dep": "STM3210E_LCD && STM32_FSMC && ARCH_BOARD_STM3210E_EVAL && ARCH_BOARD_STM3210E_EVAL", "dep": "y", "prompt": "Graphic LCD Driver Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "selects": [{"symbol": "NX_LCDDRIVER", "cond": "NX"}], "help": "Drivers for parallel and serial LCD and OLED type devices.  These\ndrivers support interfaces as defined in include/nuttx/lcd/lcd.h\n\nThis selection is necessary to enable support for LCD drivers in\ndrivers/lcd as well as for board-specific LCD drivers in the configs/\nsubdirectories.", "children": [{"type": 6, "dep": "y", "prompt": "Common Graphic LCD Settings", "cond": "LCD"}, {"type": 3, "name": "LCD_CONSOLE", "value": "n", "user_value": 0, "dep": "y", "prompt": "LCD console output", "cond": "LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD"}], "help": "It is possible to use an SLCD to provide console output.  This option\nenables that possibility.\n\nAt present, only one architecture supports this option (M16C).\nHowever, this feature could be provided by other architectures in\nthe future."}, {"type": 3, "name": "LCD_NOGETRUN", "value": "y", "user_value": 2, "dep": "y", "prompt": "Write-only LCD", "cond": "LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD"}], "help": "Many LCD hardware interfaces provide only minimal graphics capability.  In\nparticulary, many simple LCD interfaces are write only.  That is we, can\nwrite graphics data to the LCD device memory, but we cannot read it back.\nIf the LCD hardware does not support reading the graphics memory, then\nthis option should be defined so that the NX layer can taking alternative\nmeasures when the LCD is not readable.  For example, if the LCD is not\nreadable, then NX will not attempt to support transparency.\n\nSee also NX_WRITEONLY in the graphics support menu."}, {"type": 27, "name": "LCD_MAXCONTRAST", "value": "63", "user_value": "63", "dep": "y", "prompt": "LCD maximum contrast", "cond": "LCD", "defaults": [{"name": "31", "default": "31", "cond": "AQM_1248A && LCD"}, {"name": "63", "default": "63", "cond": "(NOKIA6100_S1D15G10 || LCD_SHARP_MEMLCD) && LCD"}, {"name": "127", "default": "127", "cond": "NOKIA6100_PCF8833 && LCD"}, {"name": "255", "default": "255", "cond": "(LCD_P14201 || LCD_LCD1602) && LCD"}, {"name": "63", "default": "63", "cond": "LCD"}], "ranges": [{"min": "1", "max": "255", "cond": "LCD"}], "help": "must be 63 with the Epson controller and 127 with\nthe Phillips controller."}, {"type": 27, "name": "LCD_MAXPOWER", "value": "1", "user_value": "1", "dep": "y", "prompt": "LCD maximum power", "cond": "LCD", "defaults": [{"name": "255", "default": "255", "cond": "LCD_LCD1602 && LCD"}, {"name": "1", "default": "1", "cond": "LCD"}], "ranges": [{"min": "1", "max": "255", "cond": "LCD"}], "help": "Maximum value of LCD power setting.  This normally equates to brightness:\nThe brighter the screen, the hight the power usage.\n\nOn LCDs that have a backlight, this value corresponds directly to that\nbacklight setting.  Board-specific logic may place restrictions on this\nvalue."}, {"type": 6, "dep": "y", "prompt": "Graphic LCD Devices", "cond": "LCD"}, {"type": 3, "name": "LCD_P14201", "value": "n", "user_value": 0, "dep": "y", "prompt": "Rit P1402 series display", "cond": "LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD"}], "help": "p14201.c.  Driver for RiT P14201 series display with SD1329 IC\ncontroller.  This OLED is used with older versions of the\nTI/Luminary LM3S8962 Evaluation Kit.", "children": [{"type": 27, "name": "P14201_NINTERFACES", "value": "", "user_value": null, "dep": "n", "prompt": "Number of physical P14201 devices", "cond": "LCD_P14201 && LCD", "defaults": [{"name": "1", "default": "1", "cond": "LCD_P14201 && LCD"}], "ranges": [{"min": "1", "max": "1", "cond": "LCD_P14201 && LCD"}], "help": "Specifies the number of physical P14201\ndevices that will be supported."}, {"type": 27, "name": "P14201_SPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "SPI mode", "cond": "LCD_P14201 && LCD", "defaults": [{"name": "2", "default": "2", "cond": "LCD_P14201 && LCD"}], "ranges": [{"min": "0", "max": "3", "cond": "LCD_P14201 && LCD"}], "help": "Controls the SPI mode"}, {"type": 27, "name": "P14201_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "SPI frequency", "cond": "LCD_P14201 && LCD", "defaults": [{"name": "1000000", "default": "1000000", "cond": "LCD_P14201 && LCD"}], "help": "Define to use a different bus frequency,FIXME DEFAULT VALUE OK?"}, {"type": 3, "name": "P14201_FRAMEBUFFER", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable P14201 GDDRAM cache", "cond": "LCD_P14201 && LCD", "defaults": [{"name": "y", "default": "y", "cond": "LCD_P14201 && LCD"}], "help": "If defined, accesses will be performed\nusing an in-memory copy of the OLEDs GDDRAM.  This cost of this\nbuffer is 128 * 96 / 2 = 6Kb.  If this is defined, then the driver\nwill be fully functional. If not, then it will have the following\nlimitations:\n\nReading graphics memory cannot be supported, and\n\nAll pixel writes must be aligned to byte boundaries.\nThe latter limitation effectively reduces the 128x96 disply to 64x96."}]}, {"type": 3, "name": "LCD_NOKIA6100", "value": "n", "user_value": 0, "dep": "y", "prompt": "Nokia 6100 display support", "cond": "LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD"}], "help": "nokia6100.c.  Supports the Nokia 6100 display with either the Philips\nPCF883 or the Epson S1D15G10 display controller.  This LCD is used\nwith the Olimex LPC1766-STK (but has not been fully integrated).", "children": [{"type": 27, "name": "NOKIA6100_NINTERFACES", "value": "", "user_value": null, "dep": "n", "prompt": "Number of physical NOKIA6100 devices", "cond": "LCD_NOKIA6100 && LCD", "defaults": [{"name": "1", "default": "1", "cond": "LCD_NOKIA6100 && LCD"}], "ranges": [{"min": "1", "max": "1", "cond": "LCD_NOKIA6100 && LCD"}], "help": "Specifies the number of physical Nokia\n6100 devices that will be supported."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Controller Setup", "cond": "LCD_NOKIA6100 && LCD", "defaults": [{"name": "NOKIA6100_S1D15G10", "default": "n", "cond": "LCD_NOKIA6100 && LCD"}], "children": [{"type": 3, "name": "NOKIA6100_S1D15G10", "value": "n", "user_value": null, "dep": "n", "prompt": "S1D15G10 controller", "cond": "<choice NOKIA6100_CONTROLLER>", "help": "Selects the Epson S1D15G10 display controller"}, {"type": 3, "name": "NOKIA6100_PCF8833", "value": "n", "user_value": null, "dep": "n", "prompt": "PCF8833 controller", "cond": "<choice NOKIA6100_CONTROLLER>", "help": "Selects the Phillips PCF8833 display controller"}]}, {"type": 27, "name": "NOKIA6100_SPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "SPI mode", "cond": "LCD_NOKIA6100 && LCD", "defaults": [{"name": "0", "default": "0", "cond": "LCD_NOKIA6100 && LCD"}], "ranges": [{"min": "0", "max": "3", "cond": "LCD_NOKIA6100 && LCD"}], "help": "Controls the SPI mode"}, {"type": 27, "name": "NOKIA6100_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "SPI frequency", "cond": "LCD_NOKIA6100 && LCD", "defaults": [{"name": "1000000", "default": "1000000", "cond": "LCD_NOKIA6100 && LCD"}], "help": "Define to use a different bus frequency"}, {"type": 27, "name": "NOKIA6100_BPP", "value": "", "user_value": null, "dep": "n", "prompt": "Display bits per pixel", "cond": "LCD_NOKIA6100 && LCD", "defaults": [{"name": "8", "default": "8", "cond": "LCD_NOKIA6100 && LCD"}], "help": "Device supports 8, 12, and 16 bits per pixel."}, {"type": 27, "name": "NOKIA6100_BLINIT", "value": "", "user_value": null, "dep": "n", "prompt": "Back light initial", "cond": "LCD_NOKIA6100 && LCD", "defaults": [{"name": "40", "default": "40", "cond": "LCD_NOKIA6100 && LCD"}], "help": "Initial backlight setting"}, {"type": 27, "name": "NOKIA6100_INVERT", "value": "", "user_value": null, "dep": "n", "prompt": "Display inversion", "cond": "LCD_NOKIA6100 && LCD", "defaults": [{"name": "1", "default": "1", "cond": "LCD_NOKIA6100 && LCD"}], "ranges": [{"min": "0", "max": "1", "cond": "LCD_NOKIA6100 && LCD"}], "help": "Display inversion, 0 or 1, Default: 1"}, {"type": 27, "name": "NOKIA6100_MY", "value": "", "user_value": null, "dep": "n", "prompt": "Display row direction", "cond": "LCD_NOKIA6100 && LCD", "defaults": [{"name": "0", "default": "0", "cond": "LCD_NOKIA6100 && LCD"}], "ranges": [{"min": "0", "max": "1", "cond": "LCD_NOKIA6100 && LCD"}], "help": "Display row direction, 0 or 1, Default: 0"}, {"type": 27, "name": "NOKIA6100_MX", "value": "", "user_value": null, "dep": "n", "prompt": "Display column direction", "cond": "LCD_NOKIA6100 && LCD", "defaults": [{"name": "1", "default": "1", "cond": "LCD_NOKIA6100 && LCD"}], "ranges": [{"min": "0", "max": "1", "cond": "LCD_NOKIA6100 && LCD"}], "help": "Display column direction, 0 or 1, Default: 1"}, {"type": 27, "name": "NOKIA6100_V", "value": "", "user_value": null, "dep": "n", "prompt": "Display address direction", "cond": "LCD_NOKIA6100 && LCD", "defaults": [{"name": "0", "default": "0", "cond": "LCD_NOKIA6100 && LCD"}], "ranges": [{"min": "0", "max": "1", "cond": "LCD_NOKIA6100 && LCD"}], "help": "Display address direction, 0 or 1, Default: 0"}, {"type": 27, "name": "NOKIA6100_ML", "value": "", "user_value": null, "dep": "n", "prompt": "Display scan direction", "cond": "LCD_NOKIA6100 && LCD", "defaults": [{"name": "0", "default": "0", "cond": "LCD_NOKIA6100 && LCD"}], "ranges": [{"min": "0", "max": "1", "cond": "LCD_NOKIA6100 && LCD"}], "help": "Display scan direction, 0 or 1, Default: 0"}, {"type": 27, "name": "NOKIA6100_RGBORD", "value": "", "user_value": null, "dep": "n", "prompt": "Display RGB order", "cond": "LCD_NOKIA6100 && LCD", "defaults": [{"name": "0", "default": "0", "cond": "LCD_NOKIA6100 && LCD"}], "ranges": [{"min": "0", "max": "1", "cond": "LCD_NOKIA6100 && LCD"}], "help": "Display RGB order, 0 or 1, Default: 0\nRequired LCD driver settings:"}]}, {"type": 3, "name": "LCD_MIO283QT2", "value": "n", "user_value": 0, "dep": "y", "prompt": "MIO283QT-2 TFT LCD Display Module", "cond": "LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD"}], "help": "OLED Display Module, MIO283QT-2, Multi-Inno Technology, Co.\nbased on the Himax HX8347-D LCD controller."}, {"type": 3, "name": "LCD_MIO283QT9A", "value": "n", "user_value": 0, "dep": "y", "prompt": "MIO283QT-9A TFT LCD Display Module", "cond": "LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD"}], "help": "Selects the driver for the MI0283QT-9A LCD from Multi-Inno\nTechnology Co., Ltd.  This LCD is based on the Ilitek ILI9341\nLCD controller."}, {"type": 3, "name": "LCD_UG9664HSWAG01", "value": "n", "user_value": 0, "dep": "y", "prompt": "UG-9664HSWAG01 OLED Display Module", "cond": "SPI && LCD", "defaults": [{"name": "n", "default": "n", "cond": "SPI && LCD"}], "help": "OLED Display Module, UG-9664HSWAG01, Univision Technology Inc.  Used\nwith the LPCXpresso and Embedded Artists base board.\n\nRequired LCD driver settings:\nLCD_MAXCONTRAST should be 255, but any value >0 and <=255 will be accepted.\nLCD_MAXPOWER should be 1:  0=off, 1=on\n\nRequired SPI driver settings:\nSPI_CMDDATA - Include support for cmd/data selection.", "children": [{"type": 27, "name": "UG9664HSWAG01_SPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "UG-9664HSWAG01 SPI Mode", "cond": "LCD_UG9664HSWAG01 && LCD", "defaults": [{"name": "0", "default": "0", "cond": "LCD_UG9664HSWAG01 && LCD"}], "ranges": [{"min": "0", "max": "3", "cond": "LCD_UG9664HSWAG01 && LCD"}], "help": "Controls the SPI mode"}, {"type": 27, "name": "UG9664HSWAG01_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "UG-9664HSWAG01 SPI Frequency", "cond": "LCD_UG9664HSWAG01 && LCD", "defaults": [{"name": "3500000", "default": "3500000", "cond": "LCD_UG9664HSWAG01 && LCD"}], "help": "Define to use a different bus frequency"}, {"type": 27, "name": "UG9664HSWAG01_NINTERFACES", "value": "", "user_value": null, "dep": "n", "prompt": "Number of UG-9664HSWAG01 Devices", "cond": "LCD_UG9664HSWAG01 && LCD", "defaults": [{"name": "1", "default": "1", "cond": "LCD_UG9664HSWAG01 && LCD"}], "help": "Specifies the number of physical UG-9664HSWAG01 devices that will be\nsupported.  NOTE:  At present, this must be undefined or defined to be 1."}, {"type": 3, "name": "UG9664HSWAG01_POWER", "value": "n", "user_value": null, "dep": "n", "prompt": "Power control", "cond": "LCD_UG9664HSWAG01 && LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD_UG9664HSWAG01 && LCD"}], "help": "If the hardware supports a controllable OLED a power supply, this\nconfiguration should be defined.  In this case the system must\nprovide an interface ug_power()."}]}, {"type": 3, "name": "LCD_SH1106_OLED_132", "value": "n", "user_value": 0, "dep": "y", "prompt": "Generic 0.96'' OLED Display Module (SH1106/SSD1306)", "cond": "LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD"}], "selects": [{"symbol": "LCD_SSD1306", "cond": "LCD"}], "help": "0.96'' OLED Display Module, featuring an SH1106, typically advertised as\nSSD1306. Mostly similar to \"UG2864HSWEG01\" although it uses the full\n132x28 pixels.\n\nRequired LCD driver settings:\nLCD_MAXCONTRAST should be 255, but any value >0 and <=255 will be accepted.\nLCD_MAXPOWER should be 1:  0=off, 1=on"}, {"type": 3, "name": "LCD_UG2864HSWEG01", "value": "n", "user_value": 0, "dep": "y", "prompt": "UG-2864HSWEG01 OLED Display Module (SSD1306)", "cond": "LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD"}], "selects": [{"symbol": "LCD_SSD1306", "cond": "LCD"}], "help": "OLED Display Module, UG-2864HSWEG01, Univision Technology Inc based\non the Solomon Tech SSD1306 LCD controller.\n\nRequired LCD driver settings:\nLCD_MAXCONTRAST should be 255, but any value >0 and <=255 will be accepted.\nLCD_MAXPOWER should be 1:  0=off, 1=on\n\nRequired SPI driver settings:\nSPI_CMDDATA - Include support for cmd/data selection."}, {"type": 3, "name": "LCD_UG2832HSWEG04", "value": "n", "user_value": 0, "dep": "y", "prompt": "UG-2832HSWEG04 OLED Display Module (SSD1306)", "cond": "!LCD_UG2864HSWEG01 && LCD", "defaults": [{"name": "n", "default": "n", "cond": "!LCD_UG2864HSWEG01 && LCD"}], "selects": [{"symbol": "LCD_SSD1306", "cond": "!LCD_UG2864HSWEG01 && LCD"}], "help": "OLED Display Module, UG-UG2832HSWEG04, Univision Technology Inc\nbased on the Solomon Tech SSD1306 LCD controller.  Used with the\nAtmel SAM4L Xplained Pro board on the OLED1 module.\n\nRequired LCD driver settings:\nLCD_MAXCONTRAST should be 255, but any value >0 and <=255 will be accepted.\nLCD_MAXPOWER should be 1:  0=off, 1=on\n\nRequired SPI driver settings:\nSPI_CMDDATA - Include support for cmd/data selection."}, {"type": 3, "name": "LCD_DD12864WO4A", "value": "n", "user_value": 0, "dep": "y", "prompt": "DD-12864WO-4A OLED Display Module", "cond": "!LCD_UG2864HSWEG01 && !LCD_UG2832HSWEG04 && LCD", "defaults": [{"name": "n", "default": "n", "cond": "!LCD_UG2864HSWEG01 && !LCD_UG2832HSWEG04 && LCD"}], "selects": [{"symbol": "LCD_SSD1306", "cond": "!LCD_UG2864HSWEG01 && !LCD_UG2832HSWEG04 && LCD"}, {"symbol": "SPI_CMDDATA", "cond": "!LCD_UG2864HSWEG01 && !LCD_UG2832HSWEG04 && LCD"}], "help": "OLED Display Module, DD-12864WO-4A, Densitron Technologies\nbased on the Solomon Tech SSD1309 LCD controller.  Used with the\nThingseeOne board.\n\nRequired LCD driver settings:\nLCD_MAXCONTRAST should be 255, but any value >0 and <=255 will be accepted.\nLCD_MAXPOWER should be 1:  0=off, 1=on\n\nRequired SPI driver settings:\nSPI_CMDDATA - Include support for cmd/data selection."}, {"type": 3, "name": "LCD_SSD1306", "value": "n", "user_value": 0, "rev_dep": "(LCD_SH1106_OLED_132 && LCD) || (LCD_UG2864HSWEG01 && LCD) || (LCD_UG2832HSWEG04 && !LCD_UG2864HSWEG01 && LCD) || (LCD_DD12864WO4A && !LCD_UG2864HSWEG01 && !LCD_UG2832HSWEG04 && LCD)", "dep": "y"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "SSD1306 Interface", "cond": "LCD_SSD1306 && LCD", "defaults": [{"name": "LCD_SSD1306_SPI", "default": "n", "cond": "LCD_SSD1306 && LCD"}], "children": [{"type": 3, "name": "LCD_SSD1306_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "SSD1306 on SPI Interface", "cond": "y", "selects": [{"symbol": "SPI", "cond": "y"}], "help": "Enables support for the SPI interface."}, {"type": 3, "name": "LCD_SSD1306_I2C", "value": "n", "user_value": null, "dep": "n", "prompt": "SSD1306 on I2C Interface", "cond": "y", "selects": [{"symbol": "I2C", "cond": "y"}], "help": "Enables support for the I2C interface"}]}, {"type": 27, "name": "SSD1306_SPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "SSD1306 SPI Mode", "cond": "LCD_SSD1306_SPI && LCD", "defaults": [{"name": "0", "default": "0", "cond": "!LCD_DD12864WO4A && LCD_SSD1306_SPI && LCD"}, {"name": "3", "default": "3", "cond": "LCD_DD12864WO4A && LCD_SSD1306_SPI && LCD"}], "ranges": [{"min": "0", "max": "3", "cond": "LCD_SSD1306_SPI && LCD"}], "help": "Selects the SPI mode used with the SSD1306 device"}, {"type": 27, "name": "SSD1306_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "SSD1306 SPI Frequency", "cond": "LCD_SSD1306_SPI && LCD", "defaults": [{"name": "3500000", "default": "3500000", "cond": "!LCD_DD12864WO4A && LCD_SSD1306_SPI && LCD"}, {"name": "10000000", "default": "10000000", "cond": "LCD_DD12864WO4A && LCD_SSD1306_SPI && LCD"}], "help": "Selects the SPI bus frequency used with the SSD1306 device"}, {"type": 27, "name": "SSD1306_I2CADDR", "value": "", "user_value": null, "dep": "n", "prompt": "SSD1306 I2C Address", "cond": "LCD_SSD1306_I2C && LCD", "defaults": [{"name": "120", "default": "120", "cond": "LCD_SSD1306_I2C && LCD"}], "help": "I2C Address of SSD1306"}, {"type": 27, "name": "SSD1306_I2CFREQ", "value": "", "user_value": null, "dep": "n", "prompt": "SSD1306 I2C Frequency", "cond": "LCD_SSD1306_I2C && LCD", "defaults": [{"name": "400000", "default": "400000", "cond": "LCD_SSD1306_I2C && LCD"}], "help": "I2C Frequency to communicate with SSD1306"}, {"type": 3, "name": "LCD_SSD1351", "value": "n", "user_value": 0, "dep": "y", "prompt": "SSD1351 OLED Display Module", "cond": "LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD"}], "help": "OLED Display Module, SSD1351, Solomon Systech.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Interface", "cond": "LCD_SSD1351 && LCD", "defaults": [{"name": "SSD1351_SPI4WIRE", "default": "n", "cond": "LCD_SSD1351 && LCD"}], "children": [{"type": 3, "name": "SSD1351_PARALLEL8BIT", "value": "n", "user_value": null, "dep": "n", "prompt": "8-bit Parallel Interface", "cond": "y", "help": "Enables support for the 8-bit parallel interface."}, {"type": 3, "name": "SSD1351_SPI3WIRE", "value": "n", "user_value": null, "dep": "n", "prompt": "3-wire SPI Interface", "cond": "y", "selects": [{"symbol": "SPI", "cond": "y"}], "help": "Enables support for the 3-wire SPI interface."}, {"type": 3, "name": "SSD1351_SPI4WIRE", "value": "n", "user_value": null, "dep": "n", "prompt": "4-wire SPI Interface", "cond": "y", "selects": [{"symbol": "SPI", "cond": "y"}, {"symbol": "SPI_CMDDATA", "cond": "y"}], "help": "Enables support for the 4-wire SPI interface."}]}, {"type": 27, "name": "SSD1351_SPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "SPI Mode", "cond": "(SSD1351_SPI3WIRE || SSD1351_SPI4WIRE) && LCD_SSD1351 && LCD", "defaults": [{"name": "0", "default": "0", "cond": "(SSD1351_SPI3WIRE || SSD1351_SPI4WIRE) && LCD_SSD1351 && LCD"}], "ranges": [{"min": "0", "max": "3", "cond": "(SSD1351_SPI3WIRE || SSD1351_SPI4WIRE) && LCD_SSD1351 && LCD"}], "help": "Specifies the SPI mode."}, {"type": 27, "name": "SSD1351_SPIFREQ", "value": "", "user_value": null, "dep": "n", "prompt": "SPI Frequency", "cond": "(SSD1351_SPI3WIRE || SSD1351_SPI4WIRE) && LCD_SSD1351 && LCD", "defaults": [{"name": "1000000", "default": "1000000", "cond": "(SSD1351_SPI3WIRE || SSD1351_SPI4WIRE) && LCD_SSD1351 && LCD"}], "help": "Specifies the SPI frequency."}, {"type": 27, "name": "SSD1351_NINTERFACES", "value": "", "user_value": null, "dep": "n", "prompt": "Number of SSD1351 Devices", "cond": "LCD_SSD1351 && LCD", "defaults": [{"name": "1", "default": "1", "cond": "LCD_SSD1351 && LCD"}], "ranges": [{"min": "1", "max": "1", "cond": "LCD_SSD1351 && LCD"}], "help": "Specifies the number of physical SSD1351 devices that will\nbe supported."}, {"type": 27, "name": "SSD1351_XRES", "value": "", "user_value": null, "dep": "n", "prompt": "X Resolution", "cond": "LCD_SSD1351 && LCD", "defaults": [{"name": "128", "default": "128", "cond": "LCD_SSD1351 && LCD"}], "ranges": [{"min": "1", "max": "128", "cond": "LCD_SSD1351 && LCD"}], "help": "Specifies the X resolution of the display."}, {"type": 27, "name": "SSD1351_YRES", "value": "", "user_value": null, "dep": "n", "prompt": "Y Resolution", "cond": "LCD_SSD1351 && LCD", "defaults": [{"name": "128", "default": "128", "cond": "LCD_SSD1351 && LCD"}], "ranges": [{"min": "1", "max": "128", "cond": "LCD_SSD1351 && LCD"}], "help": "Specifies the Y resolution of the display."}, {"type": 3, "name": "SSD1351_MIRRORX", "value": "n", "user_value": null, "dep": "n", "prompt": "Mirror X", "cond": "LCD_SSD1351 && LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD_SSD1351 && LCD"}], "help": "Mirrors the display along the X axis."}, {"type": 3, "name": "SSD1351_MIRRORY", "value": "n", "user_value": null, "dep": "n", "prompt": "Mirror Y", "cond": "LCD_SSD1351 && LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD_SSD1351 && LCD"}], "help": "Mirrors the display along the Y axis."}, {"type": 3, "name": "SSD1351_INVERT", "value": "n", "user_value": null, "dep": "n", "prompt": "Invert Display", "cond": "LCD_SSD1351 && LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD_SSD1351 && LCD"}], "help": "Inverts the display."}, {"type": 3, "name": "SSD1351_VDDEXT", "value": "n", "user_value": null, "dep": "n", "prompt": "External VDD", "cond": "LCD_SSD1351 && LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD_SSD1351 && LCD"}], "help": "Specifies that VDD is external."}, {"type": 27, "name": "SSD1351_TRST", "value": "", "user_value": null, "dep": "n", "prompt": "Reset Period", "cond": "LCD_SSD1351 && LCD", "defaults": [{"name": "5", "default": "5", "cond": "LCD_SSD1351 && LCD"}], "ranges": [{"min": "5", "max": "31", "cond": "LCD_SSD1351 && LCD"}], "help": "Specifies the reset period in DCLKs."}, {"type": 27, "name": "SSD1351_TPRECHG1", "value": "", "user_value": null, "dep": "n", "prompt": "First Pre-charge Period", "cond": "LCD_SSD1351 && LCD", "defaults": [{"name": "8", "default": "8", "cond": "LCD_SSD1351 && LCD"}], "ranges": [{"min": "3", "max": "15", "cond": "LCD_SSD1351 && LCD"}], "help": "Specifies the first pre-charge period in DCLKs."}, {"type": 3, "name": "SSD1351_PERFENHANCE", "value": "n", "user_value": null, "dep": "n", "prompt": "Enhance Display Performance", "cond": "LCD_SSD1351 && LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD_SSD1351 && LCD"}], "help": "Enhances the display performance."}, {"type": 27, "name": "SSD1351_CLKDIV", "value": "", "user_value": null, "dep": "n", "prompt": "Clock Divider", "cond": "LCD_SSD1351 && LCD", "defaults": [{"name": "0", "default": "0", "cond": "LCD_SSD1351 && LCD"}], "ranges": [{"min": "0", "max": "10", "cond": "LCD_SSD1351 && LCD"}], "help": "Specifies the clock divider."}, {"type": 27, "name": "SSD1351_OSCFREQ", "value": "", "user_value": null, "dep": "n", "prompt": "Oscillator Frequency", "cond": "LCD_SSD1351 && LCD", "defaults": [{"name": "15", "default": "15", "cond": "LCD_SSD1351 && LCD"}], "ranges": [{"min": "0", "max": "15", "cond": "LCD_SSD1351 && LCD"}], "help": "Specifies the oscillator frequency."}, {"type": 27, "name": "SSD1351_TPRECHG2", "value": "", "user_value": null, "dep": "n", "prompt": "Second Pre-charge Period", "cond": "LCD_SSD1351 && LCD", "defaults": [{"name": "8", "default": "8", "cond": "LCD_SSD1351 && LCD"}], "ranges": [{"min": "1", "max": "15", "cond": "LCD_SSD1351 && LCD"}], "help": "Specifies the second pre-charge period in DCLKs."}, {"type": 27, "name": "SSD1351_VPRECHG", "value": "", "user_value": null, "dep": "n", "prompt": "Voltage Pre-charge Level", "cond": "LCD_SSD1351 && LCD", "defaults": [{"name": "50", "default": "50", "cond": "LCD_SSD1351 && LCD"}], "ranges": [{"min": "20", "max": "60", "cond": "LCD_SSD1351 && LCD"}], "help": "Specifies the pre-charge voltage level as a percentage of VCC."}, {"type": 27, "name": "SSD1351_VCOMH", "value": "", "user_value": null, "dep": "n", "prompt": "COM Deselect Voltage Level", "cond": "LCD_SSD1351 && LCD", "defaults": [{"name": "82", "default": "82", "cond": "LCD_SSD1351 && LCD"}], "ranges": [{"min": "72", "max": "86", "cond": "LCD_SSD1351 && LCD"}], "help": "Specifies the COM deselect voltage level as a percentage of VCC."}, {"type": 27, "name": "SSD1351_CONTRASTA", "value": "", "user_value": null, "dep": "n", "prompt": "Color A Contrast", "cond": "LCD_SSD1351 && LCD", "defaults": [{"name": "138", "default": "138", "cond": "LCD_SSD1351 && LCD"}], "ranges": [{"min": "0", "max": "255", "cond": "LCD_SSD1351 && LCD"}], "help": "Specifies the contrast of color A."}, {"type": 27, "name": "SSD1351_CONTRASTB", "value": "", "user_value": null, "dep": "n", "prompt": "Color B Contrast", "cond": "LCD_SSD1351 && LCD", "defaults": [{"name": "81", "default": "81", "cond": "LCD_SSD1351 && LCD"}], "ranges": [{"min": "0", "max": "255", "cond": "LCD_SSD1351 && LCD"}], "help": "Specifies the contrast of color B."}, {"type": 27, "name": "SSD1351_CONTRASTC", "value": "", "user_value": null, "dep": "n", "prompt": "Color C Contrast", "cond": "LCD_SSD1351 && LCD", "defaults": [{"name": "138", "default": "138", "cond": "LCD_SSD1351 && LCD"}], "ranges": [{"min": "0", "max": "255", "cond": "LCD_SSD1351 && LCD"}], "help": "Specifies the contrast of color C."}, {"type": 27, "name": "SSD1351_MSTRCONTRAST", "value": "", "user_value": null, "dep": "n", "prompt": "Master Contrast Ratio", "cond": "LCD_SSD1351 && LCD", "defaults": [{"name": "16", "default": "16", "cond": "LCD_SSD1351 && LCD"}], "ranges": [{"min": "1", "max": "16", "cond": "LCD_SSD1351 && LCD"}], "help": "Specifies the master contrast ratio in sixteenths."}]}, {"type": 3, "name": "LCD_PCD8544", "value": "n", "user_value": 0, "dep": "y", "prompt": "Nokia 5110 LCD Display (Philips PCD8544)", "cond": "LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD"}], "help": "LCD Display Module, PCD8544, Philips\n\nRequired LCD driver settings:\nLCD_MAXCONTRAST should be 255, but any value >0 and <=255 will be accepted.", "children": [{"type": 27, "name": "PCD8544_NINTERFACES", "value": "", "user_value": null, "dep": "n", "prompt": "Number of PCD8544 Devices", "cond": "LCD_PCD8544 && LCD", "defaults": [{"name": "1", "default": "1", "cond": "LCD_PCD8544 && LCD"}], "help": "Specifies the number of physical PCD8544 devices that will be\nsupported.  NOTE:  At present, this must be undefined or defined to be 1."}, {"type": 27, "name": "PCD8544_XRES", "value": "", "user_value": null, "dep": "n", "prompt": "PCD8544 X Resolution", "cond": "LCD_PCD8544 && LCD", "defaults": [{"name": "84", "default": "84", "cond": "LCD_PCD8544 && LCD"}], "help": "Specifies the X resolution of the LCD."}, {"type": 27, "name": "PCD8544_YRES", "value": "", "user_value": null, "dep": "n", "prompt": "PCD8544 Y Resolution", "cond": "LCD_PCD8544 && LCD", "defaults": [{"name": "48", "default": "48", "cond": "LCD_PCD8544 && LCD"}], "help": "Specifies the Y resolution of the LCD."}, {"type": 3, "name": "PCD8544_INVERSE_VIDEO", "value": "n", "user_value": null, "dep": "n", "prompt": "PCD8544 Inverse video", "cond": "LCD_PCD8544 && LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD_PCD8544 && LCD"}], "help": "Inverse video on LCD."}]}, {"type": 3, "name": "LCD_ST7565", "value": "n", "user_value": 0, "dep": "y", "prompt": "ST7565 LCD Display Module", "cond": "LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD"}], "help": "LCD Display Module, ST7565, Univision Technology Inc.\n\nRequired LCD driver settings:\nLCD_MAXCONTRAST should be 255, but any value >0 and <=255 will be accepted.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "LCD Display Module initialization sequence", "cond": "LCD_ST7565 && LCD", "defaults": [{"name": "NHD_C12864KGZ", "default": "n", "cond": "LCD_ST7565 && LCD"}], "children": [{"type": 3, "name": "NHD_C12864KGZ", "value": "n", "user_value": null, "dep": "n", "prompt": "like NHD C12864KGZ", "cond": "y"}, {"type": 3, "name": "ERC_12864_3", "value": "n", "user_value": null, "dep": "n", "prompt": "like ERC12864-3", "cond": "y"}, {"type": 3, "name": "AQM_1248A", "value": "n", "user_value": null, "dep": "n", "prompt": "like AQM1248A", "cond": "y"}]}, {"type": 27, "name": "ST7565_NINTERFACES", "value": "", "user_value": null, "dep": "n", "prompt": "Number of ST7565 Devices", "cond": "LCD_ST7565 && LCD", "defaults": [{"name": "1", "default": "1", "cond": "LCD_ST7565 && LCD"}], "help": "Specifies the number of physical ST7565 devices that will be\nsupported.  NOTE:  At present, this must be undefined or defined to be 1."}, {"type": 27, "name": "ST7565_XRES", "value": "", "user_value": null, "dep": "n", "prompt": "ST7565 X Resolution", "cond": "LCD_ST7565 && LCD", "defaults": [{"name": "128", "default": "128", "cond": "LCD_ST7565 && LCD"}], "help": "Specifies the X resolution of the LCD."}, {"type": 27, "name": "ST7565_YRES", "value": "", "user_value": null, "dep": "n", "prompt": "ST7565 Y Resolution", "cond": "LCD_ST7565 && LCD", "defaults": [{"name": "48", "default": "48", "cond": "AQM_1248A && LCD_ST7565 && LCD"}, {"name": "64", "default": "64", "cond": "LCD_ST7565 && LCD"}], "help": "Specifies the Y resolution of the LCD."}, {"type": 3, "name": "ST7565_MIRROR_X", "value": "n", "user_value": null, "dep": "n", "prompt": "ST7565 apply mirror on X", "cond": "LCD_ST7565 && LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD_ST7565 && LCD"}], "help": "Mirror X on LCD."}, {"type": 3, "name": "ST7565_MIRROR_Y", "value": "n", "user_value": null, "dep": "n", "prompt": "ST7565 apply mirror on Y", "cond": "LCD_ST7565 && LCD", "defaults": [{"name": "y", "default": "y", "cond": "AQM_1248A && LCD_ST7565 && LCD"}, {"name": "n", "default": "n", "cond": "LCD_ST7565 && LCD"}], "help": "Mirror Y on LCD."}, {"type": 3, "name": "ST7565_INVERSE_VIDEO", "value": "n", "user_value": null, "dep": "n", "prompt": "ST7565 Inverse video", "cond": "LCD_ST7565 && LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD_ST7565 && LCD"}], "help": "Inverse video on LCD."}]}, {"type": 3, "name": "LCD_ST7567", "value": "n", "user_value": 0, "dep": "y", "prompt": "ST7567 LCD Display Module", "cond": "LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD"}], "help": "LCD Display Module, ST7567, Univision Technology Inc.  Used\nwith the LPCXpresso and Embedded Artists base board.\n\nRequired LCD driver settings:\nLCD_MAXCONTRAST should be 255, but any value >0 and <=255 will be accepted.\nLCD_MAXPOWER should be 1:  0=off, 1=on\n\nRequired SPI driver settings:\nSPI_CMDDATA - Include support for cmd/data selection.", "children": [{"type": 27, "name": "ST7567_SPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "ST7567 SPI Mode", "cond": "LCD_ST7567 && LCD", "defaults": [{"name": "0", "default": "0", "cond": "LCD_ST7567 && LCD"}], "ranges": [{"min": "0", "max": "3", "cond": "LCD_ST7567 && LCD"}], "help": "Controls the SPI mode"}, {"type": 27, "name": "ST7567_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "ST7567 SPI Frequency", "cond": "LCD_ST7567 && LCD", "defaults": [{"name": "3500000", "default": "3500000", "cond": "LCD_ST7567 && LCD"}], "help": "Define to use a different bus frequency"}, {"type": 27, "name": "ST7567_NINTERFACES", "value": "", "user_value": null, "dep": "n", "prompt": "Number of ST7567 Devices", "cond": "LCD_ST7567 && LCD", "defaults": [{"name": "1", "default": "1", "cond": "LCD_ST7567 && LCD"}], "help": "Specifies the number of physical ST7567 devices that will be\nsupported.  NOTE:  At present, this must be undefined or defined to be 1."}, {"type": 3, "name": "ST7567_POWER", "value": "n", "user_value": null, "dep": "n", "prompt": "Power control", "cond": "LCD_ST7567 && LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD_ST7567 && LCD"}], "help": "If the hardware supports a controllable LCD a power supply, this\nconfiguration should be defined.  In this case the system must\nprovide an interface ug_power()."}, {"type": 27, "name": "ST7567_XRES", "value": "", "user_value": null, "dep": "n", "prompt": "ST7567 X Resolution", "cond": "LCD_ST7567 && LCD", "defaults": [{"name": "128", "default": "128", "cond": "LCD_ST7567 && LCD"}], "help": "Specifies the X resolution of the LCD."}, {"type": 27, "name": "ST7567_YRES", "value": "", "user_value": null, "dep": "n", "prompt": "ST7567 Y Resolution", "cond": "LCD_ST7567 && LCD", "defaults": [{"name": "64", "default": "64", "cond": "LCD_ST7567 && LCD"}], "help": "Specifies the Y resolution of the LCD."}]}, {"type": 3, "name": "LCD_UG2864AMBAG01", "value": "n", "user_value": 0, "dep": "y", "prompt": "UG-2864AMBAG01 OLED Display Module", "cond": "LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD"}], "help": "OLED Display Module, UG-2864AMBAG01, Univision Technology Inc.\n\nRequired LCD driver settings:\nLCD_MAXCONTRAST should be 255, but any value >0 and <=255 will be accepted.\nLCD_MAXPOWER should be 1:  0=off, 1=on\n\nRequired SPI driver settings:\nSPI_CMDDATA - Include support for cmd/data selection.", "children": [{"type": 27, "name": "UG2864AMBAG01_SPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "UG-2864AMBAG01 SPI Mode", "cond": "LCD_UG2864AMBAG01 && LCD", "defaults": [{"name": "3", "default": "3", "cond": "LCD_UG2864AMBAG01 && LCD"}], "ranges": [{"min": "0", "max": "3", "cond": "LCD_UG2864AMBAG01 && LCD"}], "help": "Controls the SPI mode"}, {"type": 27, "name": "UG2864AMBAG01_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "UG-2864AMBAG01 SPI Frequency", "cond": "LCD_UG2864AMBAG01 && LCD", "defaults": [{"name": "3500000", "default": "3500000", "cond": "LCD_UG2864AMBAG01 && LCD"}], "help": "Define to use a different bus frequency"}, {"type": 27, "name": "UG2864AMBAG01_NINTERFACES", "value": "", "user_value": null, "dep": "n", "prompt": "Number of UG-2864AMBAG01 Devices", "cond": "LCD_UG2864AMBAG01 && LCD", "defaults": [{"name": "1", "default": "1", "cond": "LCD_UG2864AMBAG01 && LCD"}], "help": "Specifies the number of physical UG-9664HSWAG01 devices that will be\nsupported.  NOTE:  At present, this must be undefined or defined to be 1."}]}, {"type": 3, "name": "LCD_SSD1289", "value": "n", "user_value": 0, "dep": "y", "prompt": "LCD Based on SSD1289 Controller", "cond": "LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD"}], "help": "Enables generic support for any LCD based on the Solomon Systech,\nLtd, SSD1289 Controller.  Use of this driver will usually require so\ndetailed customization of the LCD initialization code as necessary\nfor the specific LCD driven by the SSD1289 controller.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "SSD1289 Initialization Profile", "cond": "LCD_SSD1289 && LCD", "defaults": [{"name": "SSD1289_PROFILE1", "default": "n", "cond": "LCD_SSD1289 && LCD"}], "children": [{"type": 3, "name": "SSD1289_PROFILE1", "value": "n", "user_value": null, "dep": "n", "prompt": "Profile 1", "cond": "y"}, {"type": 3, "name": "SSD1289_PROFILE2", "value": "n", "user_value": null, "dep": "n", "prompt": "Profile 2", "cond": "y"}, {"type": 3, "name": "SSD1289_PROFILE3", "value": "n", "user_value": null, "dep": "n", "prompt": "Profile 3", "cond": "y"}]}]}, {"type": 3, "name": "LCD_SHARP_MEMLCD", "value": "n", "user_value": 0, "dep": "y", "prompt": "Sharp Memory LCD Suite", "cond": "LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD"}], "help": "memlcd.c. Driver for Sharp Memory LCD Suite.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Choose Model", "cond": "LCD_SHARP_MEMLCD && LCD", "defaults": [{"name": "MEMLCD_LS013B7DH03", "default": "n", "cond": "LCD_SHARP_MEMLCD && LCD"}], "children": [{"type": 3, "name": "MEMLCD_LS013B7DH01", "value": "n", "user_value": null, "dep": "n", "prompt": "LS013B7DH01", "cond": "<choice MEMLCD_MODEL>", "help": "Selects the LS013B7DH01 model"}, {"type": 3, "name": "MEMLCD_LS013B7DH03", "value": "n", "user_value": null, "dep": "n", "prompt": "LS013B7DH03", "cond": "<choice MEMLCD_MODEL>", "help": "Selects the LS013B7DH03 model"}]}, {"type": 27, "name": "MEMLCD_NINTERFACES", "value": "", "user_value": null, "dep": "n", "prompt": "Number of physical Memory LCD devices", "cond": "LCD_SHARP_MEMLCD && LCD", "defaults": [{"name": "1", "default": "1", "cond": "LCD_SHARP_MEMLCD && LCD"}], "ranges": [{"min": "1", "max": "1", "cond": "LCD_SHARP_MEMLCD && LCD"}], "help": "Specifies the number of physical Memory LCD devices that will\nbe supported."}, {"type": 3, "name": "MEMLCD_EXTCOMIN_MODE_HW", "value": "n", "user_value": null, "dep": "n", "prompt": "Use hardware mode for EXTCOMIN", "cond": "LCD_SHARP_MEMLCD && LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD_SHARP_MEMLCD && LCD"}], "help": "If use hardware mode to toggle VCOM, we need to send specific\ncommand at a constant frequency to trigger the LCD intenal\nhardware logic.  While use software mode, we set up a timer to\ntoggle EXTCOMIN connected IO, basically, it is a hardware\ntimer to ensure a constant frequency."}, {"type": 27, "name": "MEMLCD_SPI_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "SPI frequency", "cond": "LCD_SHARP_MEMLCD && LCD", "defaults": [{"name": "3500000", "default": "3500000", "cond": "LCD_SHARP_MEMLCD && LCD"}], "help": "Define to use a different bus frequency, FIXME DEFAULT VALUE OK?"}]}, {"type": 4, "user_value": 2, "dep": "y", "prompt": "LCD Orientation", "cond": "LCD && LCD", "defaults": [{"name": "LCD_LANDSCAPE", "default": "y", "cond": "LCD && LCD"}], "help": "Some LCD drivers may support displays in different orientations.\nIf the LCD driver supports this capability, than these are configuration\noptions to select that display orientation.", "children": [{"type": 3, "name": "LCD_LANDSCAPE", "value": "y", "user_value": 2, "dep": "y", "prompt": "Landscape orientation", "cond": "y", "help": "Define for \"landscape\" orientation support.  Landscape mode refers one\nof two orientations where the display is wider than it is tall\n(LCD_RLANDSCAPE is the other).  This is the default orientation."}, {"type": 3, "name": "LCD_PORTRAIT", "value": "n", "user_value": 0, "dep": "y", "prompt": "Portrait orientation", "cond": "y", "help": "Define for \"portrait\" orientation support.  Portrait mode refers one\nof two orientations where the display is taller than it is wide\n(LCD_RPORTAIT is the other)."}, {"type": 3, "name": "LCD_RPORTRAIT", "value": "n", "user_value": 0, "dep": "y", "prompt": "Reverse portrait display", "cond": "y", "help": "Define for \"reverse portrait\" orientation support.  Reverse portrait mode\nrefers one of two orientations where the display is taller than it is\nwide (LCD_PORTAIT is the other)."}, {"type": 3, "name": "LCD_RLANDSCAPE", "value": "n", "user_value": 0, "dep": "y", "prompt": "Reverse landscape orientation", "cond": "y", "help": "Define for \"reverse landscape\" orientation support.  Reverse landscape mode\nrefers one of two orientations where the display is wider than it is\ntall (LCD_LANDSCAPE is the other)."}]}, {"type": 3, "name": "LCD_ILI9341", "value": "n", "user_value": 0, "dep": "y", "prompt": "ILI9341 LCD Single Chip Driver", "cond": "LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD"}], "help": "LCD Single Chip Driver, ILI9341, ILI Technology Corp. Used\nwith the STM32F429i Discovery Board.\n\nRequired LCD driver settings:\nLCD_MAXCONTRAST should be 255, but any value >0 and <=255 will be accepted.\nLCD_MAXPOWER should be 1:  0=off, 1=on", "children": [{"type": 27, "name": "LCD_ILI9341_NINTERFACES", "value": "", "user_value": null, "dep": "n", "prompt": "Number of supported display driver", "cond": "LCD_ILI9341 && LCD", "defaults": [{"name": "1", "default": "1", "cond": "LCD_ILI9341 && LCD"}], "ranges": [{"min": "1", "max": "2", "cond": "LCD_ILI9341 && LCD"}], "help": "Define the number of supported  displays driven by a ili9341 LCD Single\nChip Driver."}]}, {"type": 3, "name": "LCD_ILI9341_IFACE0", "value": "n", "user_value": null, "dep": "n", "prompt": "(1) LCD Display", "cond": "(LCD_ILI9341_NINTERFACES = 1 || LCD_ILI9341_NINTERFACES = 2) && LCD", "help": "Configure first LCD Display.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "LCD Orientation", "cond": "LCD_ILI9341_IFACE0 && LCD", "defaults": [{"name": "LCD_ILI9341_IFACE0_LANDSCAPE", "default": "n", "cond": "LCD_ILI9341_IFACE0 && LCD"}], "help": "Configure display orientation.", "children": [{"type": 3, "name": "LCD_ILI9341_IFACE0_LANDSCAPE", "value": "n", "user_value": null, "dep": "n", "prompt": "Landscape orientation", "cond": "y", "help": "Define for \"landscape\" orientation support."}, {"type": 3, "name": "LCD_ILI9341_IFACE0_PORTRAIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Portrait orientation", "cond": "y", "help": "Define for \"portrait\" orientation support."}, {"type": 3, "name": "LCD_ILI9341_IFACE0_RLANDSCAPE", "value": "n", "user_value": null, "dep": "n", "prompt": "Reverse landscape orientation", "cond": "y", "help": "Define for \"reverse landscape\" orientation support."}, {"type": 3, "name": "LCD_ILI9341_IFACE0_RPORTRAIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Reverse portrait display", "cond": "y", "help": "Define for \"reverse portrait\" orientation support."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Color format", "cond": "LCD_ILI9341_IFACE0 && LCD", "defaults": [{"name": "LCD_ILI9341_IFACE0_RGB565", "default": "n", "cond": "LCD_ILI9341_IFACE0 && LCD"}], "help": "LCD color format.", "children": [{"type": 3, "name": "LCD_ILI9341_IFACE0_RGB565", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp RGB565 color format", "cond": "y", "help": "16 bpp RGB565 color format"}]}]}, {"type": 3, "name": "LCD_ILI9341_IFACE1", "value": "n", "user_value": null, "dep": "n", "prompt": "(2) LCD Display", "cond": "LCD_ILI9341_NINTERFACES = 2 && LCD", "help": "Configure second LCD Display.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "LCD Orientation", "cond": "LCD_ILI9341_IFACE1 && LCD", "defaults": [{"name": "LCD_ILI9341_IFACE1_LANDSCAPE", "default": "n", "cond": "LCD_ILI9341_IFACE1 && LCD"}], "help": "Configure display orientation.", "children": [{"type": 3, "name": "LCD_ILI9341_IFACE1_LANDSCAPE", "value": "n", "user_value": null, "dep": "n", "prompt": "Landscape orientation", "cond": "y", "help": "Define for \"landscape\" orientation support."}, {"type": 3, "name": "LCD_ILI9341_IFACE1_PORTRAIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Portrait orientation", "cond": "y", "help": "Define for \"portrait\" orientation support."}, {"type": 3, "name": "LCD_ILI9341_IFACE1_RLANDSCAPE", "value": "n", "user_value": null, "dep": "n", "prompt": "Reverse landscape orientation", "cond": "y", "help": "Define for \"reverse landscape\" orientation support."}, {"type": 3, "name": "LCD_ILI9341_IFACE1_RPORTRAIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Reverse portrait display", "cond": "y", "help": "Define for \"reverse portrait\" orientation support."}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Color format", "cond": "LCD_ILI9341_IFACE1 && LCD", "defaults": [{"name": "LCD_ILI9341_IFACE1_RGB565", "default": "n", "cond": "LCD_ILI9341_IFACE1 && LCD"}], "help": "LCD color format.", "children": [{"type": 3, "name": "LCD_ILI9341_IFACE1_RGB565", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bpp RGB565 color format", "cond": "y", "help": "16 bpp RGB565 color format"}]}]}, {"type": 3, "name": "LCD_RA8875", "value": "n", "user_value": 0, "dep": "y", "prompt": "RA8875 LCD Display Controller", "cond": "LCD", "defaults": [{"name": "n", "default": "n", "cond": "LCD"}], "help": "LCD controller driver for RA8875 by RAiO Technologies Inc.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "MCU Interface width", "cond": "LCD_RA8875 && LCD", "defaults": [{"name": "LCD_RA8875_8BIT", "default": "n", "cond": "LCD_RA8875 && LCD"}], "help": "Bit-width of MCU interface (8 or 16)", "children": [{"type": 3, "name": "LCD_RA8875_8BIT", "value": "n", "user_value": null, "dep": "n", "prompt": "8 bit", "cond": "y"}, {"type": 3, "name": "LCD_RA8875_16BIT", "value": "n", "user_value": null, "dep": "n", "prompt": "16 bit", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Colors", "cond": "LCD_RA8875 && LCD", "defaults": [{"name": "LCD_RA8875_65K", "default": "n", "cond": "LCD_RA8875 && LCD"}], "help": "Number of colors/color depth", "children": [{"type": 3, "name": "LCD_RA8875_256", "value": "n", "user_value": null, "dep": "n", "prompt": "256 / 8 bit", "cond": "y"}, {"type": 3, "name": "LCD_RA8875_65K", "value": "n", "user_value": null, "dep": "n", "prompt": "65k / 16 bit", "cond": "y"}]}, {"type": 3, "name": "LCD_RA8875_EXTENDED", "value": "n", "user_value": null, "dep": "n", "prompt": "Extended drawing interfaces", "cond": "BUILD_FLAT && LCD_RA8875 && LCD", "defaults": [{"name": "n", "default": "n", "cond": "BUILD_FLAT && LCD_RA8875 && LCD"}], "help": "Build in some non-standard, custom drawing interfaces for the RA8875\nincluding the following: ra8875_drawrectangle(), ra8875_drawline(),\nra8875_drawtriangle(), and ra8875_drawcircle().  NOTE that these\nwill not be accessible by applications in protected or kernel build\nconfigurations.\n\nNOTE: The non-standard ra8875_clear(), ra8875_drawrectangle(),\nra8875_drawline() interfaces are always built and available for use\nbecause within the OS because these are used internally by the\ndriver anyway."}]}]}, {"type": 3, "name": "SLCD", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "Alphanumeric/Segment LCD Devices", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Drivers for Alphanumeric ans Segment LCDs (SLCDs).  These\ndrivers support interfaces as defined in include/nuttx/lcd/slcd_ioctl.h\namd slcd_codec.h\n\nThis selection is necessary to enable support for SLCD drivers in\ndrivers/lcd as well as for board-specific LCD drivers in the configs/\nsubdirectories.", "children": [{"type": 3, "name": "LCD_LCD1602", "value": "n", "user_value": null, "dep": "n", "prompt": "LCD 1602", "cond": "SLCD", "defaults": [{"name": "n", "default": "n", "cond": "SLCD"}], "help": "Enable support for LCD1602 devices.  LCD1602 is based on the Hitachi\nHD44780U LCD controller.  See also include/nuttx/lcd/hd4478ou.h.\n\nNOTE:  There is no common implementation of the LCD1602 driver.\nRather, there are board-by-board implementations.  See, for example,\nconfigs/pcblogic-pic32mx/src/up_lcd1602.c."}, {"type": 3, "name": "LCD_BACKPACK", "value": "n", "user_value": null, "dep": "n", "prompt": "PCF8574 LCD Backpack", "cond": "I2C && SLCD", "defaults": [{"name": "n", "default": "n", "cond": "I2C && SLCD"}], "selects": [{"symbol": "LIB_SLCDCODEC", "cond": "I2C && SLCD"}], "help": "Enable support for PCF8574 LCD Backpack driver. This driver supports\nan interface board that is based on the PCF8574 io expander and\nsupports the HD44780-based (or compatible) LCD modules.  There are\na myriad of different vendors of such, but they are principally the\nsame, save wiring and minor features like jumpers for I2C addresses.\nThis driver supports known and unknown variants.\n\nSee pcf8574_lcd_backpack_readme.txt"}]}]}, {"type": 31, "dep": "y", "prompt": "LED Support", "cond": "y", "children": [{"type": 3, "name": "USERLED", "value": "n", "user_value": 0, "dep": "y", "prompt": "LED driver", "cond": "ARCH_HAVE_LEDS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_LEDS"}], "help": "Enable standard user LED upper half driver.", "children": [{"type": 3, "name": "USERLED_LOWER", "value": "n", "user_value": null, "dep": "n", "prompt": "Generic Lower Half LED Driver", "cond": "USERLED", "defaults": [{"name": "n", "default": "n", "cond": "USERLED"}], "help": "If the board supports the standard LED interfaces as\ndefined in include/nuttx/board.h header file, then this\nstandard LED lower half driver might be usable.\n\nIn order for this generic driver to be usable:\n\n1. The board implementation must provide the LED\n   interfaces as defined in include/nuttx/board.h\n2. The board.h header file must provide the definition\n   BOARD_NLEDS, and\n3. The board.h header file must not include any other\n   header files that are not accessibble in this context\n   (such as those in arch/<arch>/src/<chip>) UNLESS those\n   inclusions are conditioned on __KERNEL__.  button_lower.c\n   will undefine __KERNEL__ before included board.h.\n\nIf your board does not meet these requirements, then the\nuserled_lower.c file can still be copied to your your\nboard src/ directory and modified for your specific board\nrequirements."}]}, {"type": 3, "name": "RGBLED", "value": "n", "user_value": 0, "dep": "y", "prompt": "RGB LED Driver Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "This selection enables building of the \"upper-half\" RGB LED driver.\nSee include/nuttx/rgbled.h for further PWM driver information.", "children": [{"type": 3, "name": "RGBLED_INVERT", "value": "n", "user_value": null, "dep": "n", "prompt": "Invert RGB LED Output", "cond": "RGBLED", "defaults": [{"name": "n", "default": "n", "cond": "RGBLED"}], "help": "If the board has a common anode RGB LED (a LOW output turns ON\neach LED), this selection inverts the outputs so that the\ncolors are displayed correctly."}, {"type": 3, "name": "RGBLED_LIGHTNESS_CORRECTION", "value": "n", "user_value": null, "dep": "n", "prompt": "Apply Lightness Correction", "cond": "RGBLED", "defaults": [{"name": "n", "default": "n", "cond": "RGBLED"}], "help": "This selection enables an approximate CIE 1931 lightness\ncorrection which helps the RGB LED visually fade and blend\nin a more linear, smooth, and visually appealing fashion."}]}, {"type": 3, "name": "PCA9635PW", "value": "n", "user_value": 0, "dep": "y", "prompt": "PCA9635PW I2C LED Driver", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "selects": [{"symbol": "I2C", "cond": "y"}], "help": "Enable support for the NXP PCA9635PW LED driver which can be\nutilized to drive up to 16 LED's."}, {"type": 3, "name": "NCP5623C", "value": "n", "user_value": 0, "dep": "y", "prompt": "NCP5623C I2C LED Driver", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "selects": [{"symbol": "I2C", "cond": "y"}], "help": "Enable support for the onsemi NCP5623C LED driver which can be\nutilized to drive up to 3 LED's."}]}, {"type": 3, "name": "MMCSD", "value": "y", "user_value": 2, "menuconfig": true, "rev_dep": "(SAM34_HSMCI && (ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAMV7_HSMCI0 && SAMV7_HAVE_HSMCI0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "y", "prompt": "MMC/SD Driver Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Support for MMC/SD block drivers.  MMC/SD block drivers based on\nSPI and SDIO/MCI interfaces are supported.  See include/nuttx/mmcsd.h\nand include/nuttx/sdio.h for further information.", "children": [{"type": 27, "name": "MMCSD_NSLOTS", "value": "1", "user_value": "1", "dep": "y", "prompt": "Number of MMC/SD slots", "cond": "MMCSD", "defaults": [{"name": "1", "default": "1", "cond": "MMCSD"}], "help": "Number of MMC/SD slots supported by the\ndriver. Default is one."}, {"type": 3, "name": "MMCSD_READONLY", "value": "n", "user_value": 0, "dep": "y", "prompt": "Disable MMC/SD write access", "cond": "MMCSD", "defaults": [{"name": "n", "default": "n", "cond": "MMCSD"}], "help": "Provide read-only access.  Default is\nRead/Write"}, {"type": 3, "name": "MMCSD_MULTIBLOCK_DISABLE", "value": "n", "user_value": 0, "dep": "y", "prompt": "Disable MMC/SD multiblock transfer", "cond": "MMCSD", "defaults": [{"name": "n", "default": "n", "cond": "MMCSD"}], "help": "Use only the single block transfer method.\nThis setting is used to work around buggy SDIO drivers that cannot handle\nmultiple block transfers."}, {"type": 3, "name": "MMCSD_MMCSUPPORT", "value": "y", "user_value": 2, "dep": "y", "prompt": "MMC cards support", "cond": "MMCSD", "defaults": [{"name": "y", "default": "y", "cond": "MMCSD"}], "help": "Enable support for MMC cards"}, {"type": 3, "name": "MMCSD_HAVECARDDETECT", "value": "y", "user_value": 2, "dep": "y", "prompt": "MMC/SD card detection", "cond": "MMCSD", "defaults": [{"name": "y", "default": "y", "cond": "MMCSD"}], "help": "SDIO driver card detection is\n100% accurate"}, {"type": 3, "name": "MMCSD_SPI", "value": "y", "user_value": 2, "dep": "y", "prompt": "MMC/SD SPI transfer support", "cond": "SPI && MMCSD", "defaults": [{"name": "y", "default": "y", "cond": "SPI && MMCSD"}], "children": [{"type": 27, "name": "MMCSD_SPICLOCK", "value": "20000000", "user_value": "20000000", "dep": "y", "prompt": "MMC/SD maximum SPI clock", "cond": "MMCSD_SPI && MMCSD_SPI && MMCSD", "defaults": [{"name": "20000000", "default": "20000000", "cond": "MMCSD_SPI && MMCSD_SPI && MMCSD"}], "help": "Maximum SPI clock to drive MMC/SD card.\nDefault is 20MHz."}, {"type": 27, "name": "MMCSD_SPIMODE", "value": "0", "user_value": "0", "dep": "y", "prompt": "MMC/SD SPI mode", "cond": "MMCSD_SPI && MMCSD", "defaults": [{"name": "0", "default": "0", "cond": "MMCSD_SPI && MMCSD"}], "help": "Should be mode 0.  However, sometimes this is useful for experimenting."}]}, {"type": 3, "name": "ARCH_HAVE_SDIO", "value": "y", "user_value": 2, "rev_dep": "(ARCH_CHIP_CXD56XX && MMCSD && y) || (KINETIS_SDHC && ARCH_CHIP_KINETIS && ARCH_ARM) || (LPC17_SDCARD && (ARCH_FAMILY_LPC177X || ARCH_FAMILY_LPC178X) && ARCH_CHIP_LPC17XX && ARCH_ARM) || (LPC31_MCI && ARCH_CHIP_LPC31XX && ARCH_ARM) || (SAMA5_HSMCI0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_HSMCI1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_HSMCI2 && SAMA5_HAVE_HSMCI2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAM34_HSMCI && (ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAMV7_HSMCI0 && SAMV7_HAVE_HSMCI0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STM32_SDIO && !STM32_CONNECTIVITYLINE && !STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32F0_SDIO && !STM32F0_CONNECTIVITYLINE && !STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F7_SDMMC1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_SDMMC2 && STM32F7_HAVE_SDMMC2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32L4_SDMMC1 && STM32L4_HAVE_SDMMC1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "MMCSD"}]}, {"type": 3, "name": "SDIO_DMA", "value": "y", "user_value": 2, "rev_dep": "(KINETIS_SDHC_DMA && KINETIS_SDHC && ARCH_CHIP_KINETIS && ARCH_ARM) || (LPC17_SDCARD_DMA && LPC17_GPDMA && LPC17_SDCARD && ARCH_CHIP_LPC17XX && ARCH_ARM) || (SAMA5_HSMCI_DMA && (SAMA5_HSMCI0 || SAMA5_HSMCI1 || SAMA5_HSMCI2) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAM34_HSMCI_DMA && SAM34_HSMCI && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAMV7_HSMCI_DMA && SAMV7_HSMCI && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STM32_SDIO_DMA && STM32_DMA2 && STM32_SDIO && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32F7_SDMMC_DMA && STM32F7_DMA && STM32F7_SDMMC && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (CXD56_ARCH_OPTS && MMCSD && ARCH_CHIP_CXD56XX && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "MMCSD"}]}, {"type": 3, "name": "ARCH_HAVE_SDIOWAIT_WRCOMPLETE", "value": "n", "user_value": 0, "rev_dep": "(STM32_SDIO && !STM32_CONNECTIVITYLINE && !STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32F0_SDIO && !STM32F0_CONNECTIVITYLINE && !STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F7_SDMMC1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_SDMMC2 && STM32F7_HAVE_SDMMC2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "MMCSD"}]}, {"type": 3, "name": "MMCSD_SDIO", "value": "y", "user_value": 2, "dep": "y", "prompt": "MMC/SD SDIO transfer support", "cond": "ARCH_HAVE_SDIO && MMCSD", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_SDIO && MMCSD"}], "children": [{"type": 3, "name": "SDIO_PREFLIGHT", "value": "n", "user_value": 0, "rev_dep": "(STM32_SDIO && !STM32_CONNECTIVITYLINE && !STM32_VALUELINE && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32F0_SDIO && !STM32F0_CONNECTIVITYLINE && !STM32F0_VALUELINE && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STM32F7_SDMMC1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_SDMMC2 && STM32F7_HAVE_SDMMC2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "MMCSD_SDIO && MMCSD"}]}, {"type": 3, "name": "SDIO_MUXBUS", "value": "y", "user_value": 2, "dep": "y", "prompt": "SDIO bus share support", "cond": "MMCSD_SDIO && MMCSD", "defaults": [{"name": "n", "default": "n", "cond": "MMCSD_SDIO && MMCSD"}], "help": "Set this SDIO interface if the SDIO interface\nor hardware resources are shared with other drivers."}, {"type": 3, "name": "MMCSD_SDIOWAIT_WRCOMPLETE", "value": "n", "user_value": null, "dep": "n", "prompt": "Use D0 Busy to detect Write Complete", "cond": "ARCH_HAVE_SDIOWAIT_WRCOMPLETE && MMCSD_SDIO && MMCSD", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_SDIOWAIT_WRCOMPLETE && MMCSD_SDIO && MMCSD"}], "help": "SDIO driver will use D0 Busy signalling to detect Write Complete.\nThis option when selected, will enable the MMCSD driver to use the\nunderlying SDIO drivers implementation of the SD specification's\nD0 Busy signalling to detect Write Complete.  This will avoid\npotentially very long (600Ms+) busy waiting in the MMCSD driver.\n\nTo implement D0 Busy signalling, the underlying driver must\nbe capable of switching the D0 GPIO to be a rising edge sensitive\ninterrupt pin. It must then, condition that pin to detect the rising edge\non receipt of SDWAIT_WRCOMPLETE in the SDIO_WAITENABLE call and\nreturn it back to regular SDIO mode, when either the ISR fires or pin is\nfound to be high in the SDIO_EVENTWAIT call."}, {"type": 3, "name": "SDIO_WIDTH_D1_ONLY", "value": "n", "user_value": 0, "dep": "y", "prompt": "SDIO 1-bit transfer", "cond": "MMCSD_SDIO && MMCSD", "defaults": [{"name": "n", "default": "n", "cond": "MMCSD_SDIO && MMCSD"}], "help": "Select 1-bit transfer mode.  Default:\n4-bit transfer mode."}, {"type": 3, "name": "SDIO_BLOCKSETUP", "value": "y", "user_value": 2, "dep": "y", "prompt": "SDIO block setup", "cond": "MMCSD_SDIO && MMCSD", "defaults": [{"name": "n", "default": "n", "cond": "MMCSD_SDIO && MMCSD"}], "help": "Some hardward needs to be informed of the selected blocksize and the\nnumber of blocks.  Others just work on the byte stream.  This option\nenables the block setup method in the SDIO vtable."}]}]}, {"type": 3, "name": "MODEM", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "Modem Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enable modem support.", "children": [{"type": 3, "name": "MODEM_U_BLOX", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable u-blox modem driver", "cond": "MODEM", "defaults": [{"name": "n", "default": "n", "cond": "MODEM"}], "help": "Compile the u-blox serial modem driver. The driver consists of\nthe upper half in the OS and the lower half with implementation\nin the chosen board.", "children": [{"type": 3, "name": "MODEM_U_BLOX_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Debug u-blox modem driver", "cond": "MODEM_U_BLOX && MODEM", "defaults": [{"name": "n", "default": "n", "cond": "MODEM_U_BLOX && MODEM"}], "help": "Allow the u-blox modem driver print debug information."}]}]}, {"type": 3, "name": "MTD", "value": "y", "user_value": 2, "menuconfig": true, "rev_dep": "(SAMA5_EBICS3_NAND && y) || (MIKROE_FLASH && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4) || (MIKROE_RAMMTD && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4) || (SPARK_FLASH && ARCH_BOARD_SPARK && ARCH_BOARD_SPARK) || (STM32F103MINIMUM_FLASH && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM) || (STM32F429I_DISCO_FLASH && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO) || (STM32F429I_DISCO_RAMMTD && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO) || (B_L475E_IOT01A_MTD_FLASH && ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A)", "dep": "y", "prompt": "Memory Technology Device (MTD) Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Memory Technology Device (MTD) drivers.  Some simple drivers for\nmemory technologies like FLASH, EEPROM, NVRAM, etc.  See\ninclude/nuttx/mtd/mtd.h\n\n(Note: This is a simple memory interface and should not be\nconfused with the \"real\" MTD developed at infradead.org.  This\nlogic is unrelated; I just used the name MTD because I am not\naware of any other common way to refer to this class of devices).", "children": [{"type": 6, "dep": "y", "prompt": "MTD Configuration", "cond": "MTD"}, {"type": 3, "name": "MTD_PARTITION", "value": "n", "user_value": 0, "rev_dep": "(LC823450_MTD && ARCH_CHIP_LC823450 && ARCH_ARM) || (STM32F103MINIMUM_FLASH_PART && STM32F103MINIMUM_FLASH && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM) || (B_L475E_IOT01A_MTD_PART && B_L475E_IOT01A_MTD_FLASH && ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A)", "dep": "y", "prompt": "Support MTD partitions", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "help": "MTD partitions are build as MTD drivers that manage a sub-region\nof the FLASH memory.  The contain the original FLASH MTD driver and\nsimply manage all accesses to assure that (1) FLASH accesses are\nalways offset to the beginning of the partition, and (2) that FLASH\naccesses do not extend outside of the partition.\n\nA FLASH device may be broken up into several partitions managed,\neach managed by a separate MTD driver.  The MTD partition interface\nis described in:\n\n        include/nuttx/mtd/mtd.h\n        FAR struct mtd_dev_s *mtd_partition(FAR struct mtd_dev_s *mtd, off_t offset, off_t nblocks);\n\nEach call to mtd_partition() will create a new MTD driver instance\nmanaging the sub-region of flash beginning at 'offset' (in blocks)\nand of size 'nblocks' on the device specified by 'mtd'."}, {"type": 3, "name": "FTL_WRITEBUFFER", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable write buffering in the FTL layer", "cond": "DRVR_WRITEBUFFER && FS_WRITABLE && MTD", "defaults": [{"name": "n", "default": "n", "cond": "DRVR_WRITEBUFFER && FS_WRITABLE && MTD"}]}, {"type": 3, "name": "FTL_READAHEAD", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable read-ahead buffering in the FTL layer", "cond": "DRVR_READAHEAD && MTD", "defaults": [{"name": "n", "default": "n", "cond": "DRVR_READAHEAD && MTD"}]}, {"type": 3, "name": "MTD_SECT512", "value": "n", "user_value": 0, "dep": "y", "prompt": "512B sector conversion", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "help": "If enabled, a MTD driver will be created that will convert the\nsector size of any other MTD driver to a 512 byte \"apparent\" sector\nsize.  The managed MTD driver in this case must have an erase block\nsize that is greater than 512B and an even multiple of 512B.", "children": [{"type": 24, "name": "MTD_SECT512_ERASED_STATE", "value": "", "user_value": null, "dep": "n", "prompt": "Erased state of the FLASH", "cond": "MTD_SECT512 && MTD", "defaults": [{"name": "0xff", "default": "0xff", "cond": "MTD_SECT512 && MTD"}]}, {"type": 3, "name": "MTD_SECT512_READONLY", "value": "n", "user_value": null, "dep": "n", "prompt": "512B read-only", "cond": "MTD_SECT512 && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_SECT512 && MTD"}]}]}, {"type": 3, "name": "MTD_PARTITION_NAMES", "value": "n", "user_value": null, "dep": "n", "prompt": "Support MTD partition naming", "cond": "FS_PROCFS && MTD_PARTITION && MTD", "defaults": [{"name": "n", "default": "n", "cond": "FS_PROCFS && MTD_PARTITION && MTD"}], "help": "MTD partitions can be assigned a name for reporting via the procfs\nfile system interface.  This adds an API which must be called to\nspecify the partition name."}, {"type": 3, "name": "MTD_BYTE_WRITE", "value": "y", "user_value": 2, "rev_dep": "(MIKROE_FLASH && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4) || (SPARK_FLASH && ARCH_BOARD_SPARK && ARCH_BOARD_SPARK) || (STM32F103MINIMUM_FLASH && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM) || (STM32F429I_DISCO_FLASH && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO)", "dep": "y", "prompt": "Byte write", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "help": "Some devices (such as the EON EN25F80) support writing an arbitrary\nnumber of bytes to FLASH. This setting enables MTD interfaces to\nsupport such writes.  The SMART file system can take advantage of\nthis option if it is enabled."}, {"type": 3, "name": "MTD_WRBUFFER", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable MTD write buffering", "cond": "DRVR_WRITEBUFFER && MTD", "defaults": [{"name": "n", "default": "n", "cond": "DRVR_WRITEBUFFER && MTD"}], "selects": [{"symbol": "DRVR_INVALIDATE", "cond": "DRVR_WRITEBUFFER && MTD"}, {"symbol": "DRVR_READBYTES", "cond": "DRVR_WRITEBUFFER && MTD"}], "help": "Build the mtd_rwbuffer layer and enable support for write buffering.", "children": [{"type": 27, "name": "MTD_NWRBLOCKS", "value": "", "user_value": null, "dep": "n", "prompt": "MTD write buffer size", "cond": "MTD_WRBUFFER && MTD", "defaults": [{"name": "4", "default": "4", "cond": "MTD_WRBUFFER && MTD"}], "help": "The size of the MTD write buffer (in blocks)"}]}, {"type": 3, "name": "MTD_READAHEAD", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable MTD read-ahead buffering", "cond": "DRVR_READAHEAD && MTD", "defaults": [{"name": "n", "default": "n", "cond": "DRVR_READAHEAD && MTD"}], "selects": [{"symbol": "DRVR_INVALIDATE", "cond": "DRVR_READAHEAD && MTD"}, {"symbol": "DRVR_READBYTES", "cond": "DRVR_READAHEAD && MTD"}], "help": "Build the mtd_rwbuffer layer and enable support for read-ahead buffering.", "children": [{"type": 27, "name": "MTD_NRDBLOCKS", "value": "", "user_value": null, "dep": "n", "prompt": "MTD read-head buffer size", "cond": "MTD_READAHEAD && MTD", "defaults": [{"name": "4", "default": "4", "cond": "MTD_READAHEAD && MTD"}], "help": "The size of the MTD read-ahead buffer (in blocks)"}]}, {"type": 3, "name": "MTD_PROGMEM", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable on-chip program FLASH MTD device", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "help": "Enable to support an MTD device that supports the on-chip FLASH\nusing the interfaces defined in include/nuttx/progmem.  Those\ninterfaces must be exported by chip-specific logic."}, {"type": 3, "name": "MTD_CONFIG", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable Dev Config (MTD based) device", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "help": "Provides a /dev/config device for saving / restoring application\nconfiguration data to a standard MTD device or partition.", "children": [{"type": 3, "name": "MTD_CONFIG_RAM_CONSOLIDATE", "value": "n", "user_value": null, "dep": "n", "prompt": "Always use RAM consolidation method (work in progress)", "cond": "MTD_CONFIG && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_CONFIG && MTD"}], "help": "When the MTD device used for /dev/config contains more than one\nerase block, the \"unused entry\" consolidation reserves one erase\nblock by default for cleanup purposes.  This consumes the minimum\namount of RAM, however it \"wastes\" one erase block on the device.\n(For configurations that have only a single erase block assigned\nto the config device, RAM consolidation is the ONLY option.)\n\nAnother approach is to allow the driver to use the entire MTD\ndevice (or partition) to save config data, and then allocate a\nRAM buffer (the size of one erase block) to perform the\nconsolidation.  Enabling this feature basically trades off RAM\nusage for FLASH usage.  If the MTD device used for config data\nhas small erase sizes (4K, etc.) and there is plenty of free RAM\navailable, then this is probably a good option.\n\nAnother benefit of this option is it reduces code space a bit\nsince the \"reserved block\" consolidate routine is not needed."}, {"type": 24, "name": "MTD_CONFIG_ERASEDVALUE", "value": "", "user_value": null, "dep": "n", "prompt": "Erased value of bytes on the MTD device", "cond": "MTD_CONFIG && MTD", "defaults": [{"name": "0xff", "default": "0xff", "cond": "MTD_CONFIG && MTD"}], "help": "Specifies the value of the erased state of the MTD FLASH.  For\nmost FLASH parts, this is 0xff, but could also be zero depending\non the device."}]}, {"type": 6, "dep": "y", "prompt": "MTD Device Drivers", "cond": "MTD"}, {"type": 3, "name": "MTD_NAND", "value": "n", "user_value": 0, "menuconfig": true, "rev_dep": "SAMA5_EBICS3_NAND && y", "dep": "y", "prompt": "MTD NAND support", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "help": "Enable support for NAND FLASH devices.", "children": [{"type": 27, "name": "MTD_NAND_MAXNUMBLOCKS", "value": "", "user_value": null, "dep": "n", "prompt": "Max blocks", "cond": "MTD_NAND && MTD", "defaults": [{"name": "1024", "default": "1024", "cond": "MTD_NAND && MTD"}], "help": "Maximum number of blocks in a device"}, {"type": 27, "name": "MTD_NAND_MAXNUMPAGESPERBLOCK", "value": "", "user_value": null, "dep": "n", "prompt": "Max pages per block", "cond": "MTD_NAND && MTD", "defaults": [{"name": "256", "default": "256", "cond": "MTD_NAND && MTD"}], "help": "Maximum number of pages in one block"}, {"type": 27, "name": "MTD_NAND_MAXPAGEDATASIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Max page size", "cond": "MTD_NAND && MTD", "defaults": [{"name": "4096", "default": "4096", "cond": "MTD_NAND && MTD"}], "help": "Maximum size of the data area of one page, in bytes."}, {"type": 27, "name": "MTD_NAND_MAXPAGESPARESIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Max size of spare area", "cond": "MTD_NAND && MTD", "defaults": [{"name": "256", "default": "256", "cond": "MTD_NAND && MTD"}], "help": "Maximum size of the spare area of one page, in bytes."}, {"type": 27, "name": "MTD_NAND_MAXSPAREECCBYTES", "value": "", "user_value": null, "dep": "n", "prompt": "Max number of ECC bytes", "cond": "MTD_NAND && MTD", "defaults": [{"name": "48", "default": "48", "cond": "MTD_NAND && MTD"}], "help": "Maximum number of ECC bytes stored in the spare for one single page."}, {"type": 3, "name": "MTD_NAND_BLOCKCHECK", "value": "n", "user_value": null, "dep": "n", "prompt": "Block check", "cond": "MTD_NAND && MTD", "defaults": [{"name": "y", "default": "y", "cond": "MTD_NAND && MTD"}], "help": "Enable support for ECC and bad block checking."}, {"type": 3, "name": "MTD_NAND_SWECC", "value": "n", "user_value": null, "dep": "n", "prompt": "Sofware ECC support", "cond": "MTD_NAND && MTD", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_NAND_HWECC && MTD_NAND && MTD"}, {"name": "y", "default": "y", "cond": "!ARCH_NAND_HWECC && MTD_NAND && MTD"}], "help": "Build in logic to support software calculation of ECC."}, {"type": 3, "name": "MTD_NAND_HWECC", "value": "n", "user_value": null, "dep": "n", "prompt": "Hardware ECC support", "cond": "ARCH_NAND_HWECC && MTD_NAND && MTD", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_NAND_HWECC && MTD_NAND && MTD"}], "help": "Build in logic to support hardware calculation of ECC."}, {"type": 27, "name": "MTD_NAND_MAXSPAREEXTRABYTES", "value": "", "user_value": null, "dep": "n", "prompt": "Max extra free bytes", "cond": "MTD_NAND && MTD", "defaults": [{"name": "206", "default": "206", "cond": "MTD_NAND && MTD"}], "help": "Maximum number of extra free bytes inside the spare area of a page."}, {"type": 3, "name": "MTD_NAND_EMBEDDEDECC", "value": "n", "user_value": null, "dep": "n", "prompt": "Support devices with Embedded ECC", "cond": "MTD_NAND && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_NAND && MTD"}], "help": "Some NAND devices have internal, embedded ECC function.  One (the\nonly one supported) is Micron, 4-bit ECC, device size = 1Gb or 2Gb\nor 4Gb."}]}, {"type": 3, "name": "RAMMTD", "value": "n", "user_value": 0, "rev_dep": "(MIKROE_RAMMTD && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4) || (STM32F429I_DISCO_RAMMTD && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO)", "dep": "y", "prompt": "RAM-based MTD driver", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "help": "Build support for a RAM-based MTD driver.", "children": [{"type": 27, "name": "RAMMTD_BLOCKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "RAM MTD block size", "cond": "RAMMTD && MTD", "defaults": [{"name": "512", "default": "512", "cond": "RAMMTD && MTD"}]}, {"type": 27, "name": "RAMMTD_ERASESIZE", "value": "", "user_value": null, "dep": "n", "prompt": "RAM MTD erase block size", "cond": "RAMMTD && MTD", "defaults": [{"name": "4096", "default": "4096", "cond": "RAMMTD && MTD"}]}, {"type": 24, "name": "RAMMTD_ERASESTATE", "value": "", "user_value": null, "dep": "n", "prompt": "Simulated erase state", "cond": "RAMMTD && MTD", "defaults": [{"name": "0xff", "default": "0xff", "cond": "RAMMTD && MTD"}]}, {"type": 3, "name": "RAMMTD_FLASHSIM", "value": "n", "user_value": null, "dep": "n", "prompt": "RAM MTD FLASH Simulation", "cond": "RAMMTD && MTD", "defaults": [{"name": "n", "default": "n", "cond": "RAMMTD && MTD"}], "help": "RAMMTD_FLASHSIM will add some extra logic to improve the level of\nFLASH simulation."}]}, {"type": 3, "name": "FILEMTD", "value": "n", "user_value": 0, "rev_dep": "SMART_DEV_LOOP && MTD_SMART && MTD", "dep": "y", "prompt": "File-based MTD driver", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "help": "Build support for a File-based MTD driver.", "children": [{"type": 27, "name": "FILEMTD_BLOCKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "File MTD block size", "cond": "FILEMTD && MTD", "defaults": [{"name": "512", "default": "512", "cond": "FILEMTD && MTD"}]}, {"type": 27, "name": "FILEMTD_ERASESIZE", "value": "", "user_value": null, "dep": "n", "prompt": "File MTD erase block size", "cond": "FILEMTD && MTD", "defaults": [{"name": "4096", "default": "4096", "cond": "FILEMTD && MTD"}]}, {"type": 24, "name": "FILEMTD_ERASESTATE", "value": "", "user_value": null, "dep": "n", "prompt": "Simulated erase state", "cond": "FILEMTD && MTD", "defaults": [{"name": "0xff", "default": "0xff", "cond": "FILEMTD && MTD"}]}]}, {"type": 3, "name": "MTD_AT24XX", "value": "n", "user_value": 0, "dep": "y", "prompt": "I2C-based AT24xx eeprom", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "selects": [{"symbol": "I2C", "cond": "MTD"}], "help": "Build support for I2C-based AT24CXX EEPROM(at24c32, at24c64,\nat24c128, at24c256)", "children": [{"type": 3, "name": "AT24XX_MULTI", "value": "n", "user_value": null, "dep": "n", "prompt": "Multiple AT24XX devices", "cond": "MTD_AT24XX && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_AT24XX && MTD"}], "help": "Build in additional support for multiple AT24XX devices, each with\ndynamically allocated device structures with a separate I2C\naddresses (but otherwise identical -- support for multiple, different\nAT24xx, devices not yet supported)."}, {"type": 27, "name": "AT24XX_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "AT24xx size (Kbit)", "cond": "MTD_AT24XX && MTD", "defaults": [{"name": "64", "default": "64", "cond": "MTD_AT24XX && MTD"}], "help": "This is the XX in the AT24Cxx part number.  For example, if you have a\nAT 24C512, then the correct value is 512.  This value is also the capacity\nof the part in kilobits.  For example, the 24C512 supports 512 Kbits or\n512 /8 = 64 KiB."}, {"type": 24, "name": "AT24XX_ADDR", "value": "", "user_value": null, "dep": "n", "prompt": "AT24XX I2C address", "cond": "!AT24XX_MULTI && MTD_AT24XX && MTD", "defaults": [{"name": "0x50", "default": "0x50", "cond": "!AT24XX_MULTI && MTD_AT24XX && MTD"}], "ranges": [{"min": "0x50", "max": "0x57", "cond": "!AT24XX_MULTI && MTD_AT24XX && MTD"}], "help": "The I2C address of the FLASH part.  This is should be 0b01010aaa\n(where aaa is determined by board/pin configuration).\n\nFor accesses to \"extended memory\" accesses, the driver will set\nbit 3 of this address using 0xb01011aaa as the I2C address."}, {"type": 3, "name": "AT24XX_EXTENDED", "value": "n", "user_value": null, "dep": "n", "prompt": "Extended memory", "cond": "MTD_AT24XX && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_AT24XX && MTD"}], "help": "If the device supports extended memory, then this operation may be set\nto enabled the MTDIOC_EXTENDED ioctl() operation.  When the\nextended operation is selected, calls to the driver read method will\nreturn data from the extended memory region.", "children": [{"type": 27, "name": "AT24XX_EXTSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Extended memory size (bytes)", "cond": "AT24XX_EXTENDED && MTD_AT24XX && MTD", "defaults": [{"name": "0", "default": "0", "cond": "AT24XX_EXTENDED && MTD_AT24XX && MTD"}], "help": "If the device supports extended memory, then this option provides\nthe size of the memory in bytes.\n\nOther, block-oriented access are not effected by this setting"}]}, {"type": 27, "name": "AT24XX_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "AT24xx I2C bus frequency", "cond": "MTD_AT24XX && MTD", "defaults": [{"name": "100000", "default": "100000", "cond": "MTD_AT24XX && MTD"}], "help": "Set the I2C frequency to use when accessing the AT24CXX EEPROM. This value\nmust represent a valid I2C speed (normally less than 400.000) or the driver\nmight fail."}]}, {"type": 3, "name": "MTD_AT25", "value": "n", "user_value": 0, "dep": "y", "prompt": "SPI-based AT25 FLASH", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "selects": [{"symbol": "SPI", "cond": "MTD"}], "children": [{"type": 27, "name": "AT25_SPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "AT25 SPI Mode", "cond": "MTD_AT25 && MTD", "defaults": [{"name": "0", "default": "0", "cond": "MTD_AT25 && MTD"}]}, {"type": 27, "name": "AT25_SPIFREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "AT25 SPI Frequency", "cond": "MTD_AT25 && MTD", "defaults": [{"name": "20000000", "default": "20000000", "cond": "MTD_AT25 && MTD"}]}]}, {"type": 3, "name": "MTD_AT45DB", "value": "n", "user_value": 0, "dep": "y", "prompt": "SPI-based AT45DB flash", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "selects": [{"symbol": "SPI", "cond": "MTD"}], "children": [{"type": 27, "name": "AT45DB_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "AT45DB frequency", "cond": "MTD_AT45DB && MTD", "defaults": [{"name": "1000000", "default": "1000000", "cond": "MTD_AT45DB && MTD"}]}, {"type": 3, "name": "AT45DB_PREWAIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable higher performance write logic", "cond": "MTD_AT45DB && MTD", "defaults": [{"name": "y", "default": "y", "cond": "MTD_AT45DB && MTD"}]}, {"type": 3, "name": "AT45DB_PWRSAVE", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable power save", "cond": "MTD_AT45DB && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_AT45DB && MTD"}]}]}, {"type": 3, "name": "MTD_IS25XP", "value": "n", "user_value": 0, "dep": "y", "prompt": "SPI-based IS25XP FLASH", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "selects": [{"symbol": "SPI", "cond": "MTD"}], "children": [{"type": 27, "name": "IS25XP_SPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "IS25 SPI Mode", "cond": "MTD_IS25XP && MTD", "defaults": [{"name": "0", "default": "0", "cond": "MTD_IS25XP && MTD"}]}, {"type": 27, "name": "IS25XP_SPIFREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "IS25 SPI Frequency", "cond": "MTD_IS25XP && MTD", "defaults": [{"name": "20000000", "default": "20000000", "cond": "MTD_IS25XP && MTD"}]}]}, {"type": 3, "name": "MTD_M25P", "value": "n", "user_value": 0, "rev_dep": "MIKROE_FLASH && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4", "dep": "y", "prompt": "SPI-based M25P FLASH", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "selects": [{"symbol": "SPI", "cond": "MTD"}], "children": [{"type": 27, "name": "M25P_SPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "M25P SPI mode", "cond": "MTD_M25P && MTD", "defaults": [{"name": "0", "default": "0", "cond": "MTD_M25P && MTD"}]}, {"type": 27, "name": "M25P_SPIFREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "M25P SPI Frequency", "cond": "MTD_M25P && MTD", "defaults": [{"name": "20000000", "default": "20000000", "cond": "MTD_M25P && MTD"}]}, {"type": 24, "name": "M25P_MANUFACTURER", "value": "", "user_value": null, "dep": "n", "prompt": "M25P manufacturers ID", "cond": "MTD_M25P && MTD", "defaults": [{"name": "0x20", "default": "0x20", "cond": "MTD_M25P && MTD"}], "help": "Various manufacturers may have produced the parts.  0x20 is the manufacturer ID\nfor the STMicro MP25x serial FLASH.  If, for example, you are using the a Macronix\nInternational MX25 serial FLASH, the correct manufacturer ID would be 0xc2."}, {"type": 24, "name": "M25P_MEMORY_TYPE", "value": "", "user_value": null, "dep": "n", "prompt": "M25P memory type ID", "cond": "MTD_M25P && MTD", "defaults": [{"name": "0x20", "default": "0x20", "cond": "MTD_M25P && MTD"}], "help": "The memory type for M25 \"P\" series is 0x20, but the driver also supports \"F\" series\ndevices, such as the EON EN25F80 part which adds a 4K sector erase capability.  The\nmemory type for \"F\" series parts from EON is 0x31.  The 4K sector erase size will\nautomatically be enabled when filesytems that can use it are enabled, such as SMART."}, {"type": 3, "name": "M25P_SUBSECTOR_ERASE", "value": "n", "user_value": null, "dep": "n", "prompt": "Sub-Sector Erase", "cond": "MTD_M25P && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_M25P && MTD"}], "help": "Some devices (such as the EON EN25F80) support a smaller erase block\nsize (4K vs 64K).  This option enables support for sub-sector erase.\nThe SMART file system can take advantage of this option if it is enabled."}]}, {"type": 3, "name": "MTD_MX25L", "value": "n", "user_value": 0, "dep": "y", "prompt": "SPI-based MX25L3233F / MX25L6433F", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "selects": [{"symbol": "SPI", "cond": "MTD"}], "help": "SPI-based driver for Macronix MX25L3233F or MX25L6433F.", "children": [{"type": 27, "name": "MX25L_SPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "MX25L SPI mode", "cond": "MTD_MX25L && MTD", "defaults": [{"name": "0", "default": "0", "cond": "MTD_MX25L && MTD"}]}, {"type": 27, "name": "MX25L_SPIFREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "MX25L SPI Frequency", "cond": "MTD_MX25L && MTD", "defaults": [{"name": "20000000", "default": "20000000", "cond": "MTD_MX25L && MTD"}]}, {"type": 3, "name": "MX25L_SECTOR512", "value": "n", "user_value": null, "dep": "n", "prompt": "Simulate 512 byte Erase Blocks", "cond": "MTD_MX25L && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_MX25L && MTD"}]}, {"type": 3, "name": "MX25L_SUBSECTOR_ERASE", "value": "n", "user_value": null, "dep": "n", "prompt": "Sub-Sector Erase", "cond": "MTD_MX25L && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_MX25L && MTD"}], "help": "Some devices (such as the EON EN25F80) support a smaller erase block\nsize (4K vs 64K).  This option enables support for sub-sector erase.\nThe SMART file system can take advantage of this option if it is enabled."}, {"type": 3, "name": "MX25L_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable driver debug features", "cond": "MTD_MX25L && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_MX25L && MTD"}]}]}, {"type": 3, "name": "MTD_S25FL1", "value": "n", "user_value": 0, "dep": "y", "prompt": "QuadSPI-based S25FL1 FLASH", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "children": [{"type": 27, "name": "S25FL1_QSPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "S25FL1 QuadSPI Mode", "cond": "MTD_S25FL1 && MTD", "defaults": [{"name": "0", "default": "0", "cond": "MTD_S25FL1 && MTD"}]}, {"type": 27, "name": "S25FL1_QSPI_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "S25FL1 QuadSPI Frequency", "cond": "MTD_S25FL1 && MTD", "defaults": [{"name": "108000000", "default": "108000000", "cond": "MTD_S25FL1 && MTD"}], "help": "Per data sheet:\n\u2013 Normal Read (Serial):\n        \u2013 50 MHz clock rate (-40\u00b0C to +85\u00b0C/105\u00b0C)\n        \u2013 45 MHz clock rate (-40\u00b0C to +125\u00b0C)\n\u2013 Fast Read (Serial):\n        \u2013 108 MHz clock rate (-40\u00b0C to +85\u00b0C/105\u00b0C)\n        \u2013 97 MHz clock rate (-40\u00b0C to +125\u00b0C)\n\u2013 Dual Read:\n        \u2013 108 MHz clock rate (-40\u00b0C to +85\u00b0C/105\u00b0C)\n        \u2013 97 MHz clock rate (-40\u00b0C to +125\u00b0C)\n\u2013 Quad Read:\n        \u2013 108 MHz clock rate (-40\u00b0C to +85\u00b0C/105\u00b0C)\n        \u2013 97 MHz clock rate for S25FL164K (-40\u00b0C to +125\u00b0C)\n\n- Clock frequency for all SPI commands except for Read Data\n  command (0x03) and Fast Read command (0x0b): 108 MHz\n- Clock frequency for Read Data command (0x03): 50 MHz\n- Clock frequency for all Fast Read commands SIO and MIO: 108 MHz\n\nIn this implementation, only \"Quad\" reads are performed."}, {"type": 3, "name": "S25FL1_SECTOR512", "value": "n", "user_value": null, "dep": "n", "prompt": "Simulate 512 byte Erase Blocks", "cond": "MTD_S25FL1 && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_S25FL1 && MTD"}]}, {"type": 3, "name": "S25FL1_SCRAMBLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Scramble data", "cond": "MTD_S25FL1 && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_S25FL1 && MTD"}], "help": "Requires driver support for data scrambling/descrambling.", "children": [{"type": 24, "name": "S25FL1_SCRAMBLE_KEY", "value": "", "user_value": null, "dep": "n", "prompt": "Scramble key", "cond": "S25FL1_SCRAMBLE && MTD_S25FL1 && MTD", "defaults": [{"name": "0x0baddead", "default": "0x0baddead", "cond": "S25FL1_SCRAMBLE && MTD_S25FL1 && MTD"}]}]}]}, {"type": 3, "name": "MTD_N25QXXX", "value": "n", "user_value": 0, "dep": "y", "prompt": "QuadSPI-based Micron N25QXXX family FLASH", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "help": "Support the N25Q016A, N25Q032A, N25Q064A, N25Q128A, N25Q256A", "children": [{"type": 27, "name": "N25QXXX_QSPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "N25QXXX QuadSPI Mode", "cond": "MTD_N25QXXX && MTD", "defaults": [{"name": "0", "default": "0", "cond": "MTD_N25QXXX && MTD"}], "help": "This device can operate in SPI mode 0 or 3."}, {"type": 27, "name": "N25QXXX_QSPI_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "N25QXXX QuadSPI Frequency", "cond": "MTD_N25QXXX && MTD", "defaults": [{"name": "108000000", "default": "108000000", "cond": "MTD_N25QXXX && MTD"}], "help": "- Clock frequency for all SPI commands except for Read Data\n  command (0x03)\n- Clock frequency for Read Data command (0x03): 54 MHz\nIn this implementation, only \"Quad\" reads are performed."}, {"type": 3, "name": "N25QXXX_SECTOR512", "value": "n", "user_value": null, "dep": "n", "prompt": "Simulate 512 byte Erase Blocks", "cond": "MTD_N25QXXX && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_N25QXXX && MTD"}]}]}, {"type": 3, "name": "MTD_MX25RXX", "value": "n", "user_value": 0, "rev_dep": "B_L475E_IOT01A_MTD_FLASH && ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A", "dep": "y", "prompt": "QuadSPI-based Macronix MX25RXX family FLASH", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "help": "Support the MX25R6435F chip", "children": [{"type": 27, "name": "MX25RXX_QSPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "MX25RXX QuadSPI Mode", "cond": "MTD_MX25RXX && MTD", "defaults": [{"name": "0", "default": "0", "cond": "MTD_MX25RXX && MTD"}], "help": "This device can operate in SPI mode 0 or 3."}, {"type": 27, "name": "MX25RXX_QSPI_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "MX25RXX QuadSPI Frequency", "cond": "MTD_MX25RXX && MTD", "defaults": [{"name": "33000000", "default": "33000000", "cond": "MTD_MX25RXX && MTD"}], "help": "Clock frequency for all SPI commands except for Read Data\ncommand. Dual and Quad read methods need different frequency\nin low power mode (Only Quad read is supported in this driver)."}, {"type": 27, "name": "MX25RXX_QSPI_READ_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "MX25RXX QuadSPI Read command frequency", "cond": "MTD_MX25RXX && MTD", "defaults": [{"name": "8000000", "default": "8000000", "cond": "MTD_MX25RXX && MTD"}], "help": "Clock frequency for read data command.\nOnly Quad read is supported in this driver."}]}, {"type": 3, "name": "MTD_SMART", "value": "y", "user_value": 2, "rev_dep": "(SIM_SPIFLASH && ARCH_SIM) || (SIM_QSPIFLASH && ARCH_SIM) || (MIKROE_FLASH && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4) || (STM32F103MINIMUM_FLASH && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM) || (STM32F429I_DISCO_FLASH && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO) || (B_L475E_IOT01A_MTD_FLASH && ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A)", "dep": "y", "prompt": "Sector Mapped Allocation for Really Tiny (SMART) Flash support", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "help": "The MP25x series of Flash devices are typically very small and have a very large\nerase block size.  This causes issues with the standard Flash Translation Layer\nblock driver since it tries to allocate a RAM block the size of a flash erase\nblock, which is typically 64K.  This block driver uses a different approach\nto sacrifice performance for RAM memory footprint by saving data in sectors\n(typically 2K - 4K based on memory size) and relocating sectors as needed when\nan erase block needs to be erased.", "children": [{"type": 3, "name": "SMART_DEV_LOOP", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable SMART loop device", "cond": "MTD_SMART && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_SMART && MTD"}], "selects": [{"symbol": "FILEMTD", "cond": "MTD_SMART && MTD"}], "help": "Supports a smart loop device that can be used to export a\nfile (or character device) as a SMART block device."}, {"type": 27, "name": "MTD_SMART_SECTOR_SIZE", "value": "4096", "user_value": "4096", "dep": "y", "prompt": "SMART Device sector size", "cond": "MTD_SMART && MTD", "defaults": [{"name": "1024", "default": "1024", "cond": "MTD_SMART && MTD"}], "help": "Sets the size of a single allocation on the SMART device.  Larger sector sizes\nreduce overhead per sector, but cause more wasted space with a lot of smaller\nfiles."}, {"type": 3, "name": "MTD_SMART_SKIP_SECTOR_SIZE_SCAN", "value": "y", "user_value": 2, "dep": "y", "prompt": "Skip secter size scan", "cond": "MTD_SMART && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_SMART && MTD"}], "help": "Activating this configuration will skip sector size scan at sector scan.\nSector size uses value of MTD_SMART_SECTOR_SIZE.\nScan sector by this configuration will end quickly."}, {"type": 3, "name": "MTD_SMART_WRITEBUFFER", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable SMART write buffering", "cond": "DRVR_WRITEBUFFER && MTD_SMART && MTD", "defaults": [{"name": "n", "default": "n", "cond": "DRVR_WRITEBUFFER && MTD_SMART && MTD"}]}, {"type": 3, "name": "MTD_SMART_READAHEAD", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable SMART read-ahead buffering", "cond": "DRVR_READAHEAD && MTD_SMART && MTD", "defaults": [{"name": "n", "default": "n", "cond": "DRVR_READAHEAD && MTD_SMART && MTD"}]}, {"type": 3, "name": "MTD_SMART_WEAR_LEVEL", "value": "n", "user_value": 0, "dep": "y", "prompt": "Support FLASH wear leveling", "cond": "MTD_SMART && MTD_SMART && MTD", "defaults": [{"name": "y", "default": "y", "cond": "MTD_SMART && MTD_SMART && MTD"}], "help": "Adds extra logic and RAM to guarantee equal wear leveling of the FLASH\ndevice by recording and monitoring erase block operations and selecting\nsector allocations to ensure all erase blocks are worn evenly.  This will\nevenly wear both dynamic and static data on the device.", "children": [{"type": 3, "name": "MTD_SMART_CONVERT_WEAR_FORMAT", "value": "n", "user_value": null, "dep": "n", "prompt": "Convert existing non wear leveling FLASH to wear leveling", "cond": "MTD_SMART_WEAR_LEVEL && !SMART_CRC_16 && MTD_SMART && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_SMART_WEAR_LEVEL && !SMART_CRC_16 && MTD_SMART && MTD"}], "help": "Adds a little extra code which detects an existing SMART format on a device\nthat was created prior to the wear leveling implementation.  This conversion\nonly works if either no CRC is being used or if CRC-8 is being used as other\nCRC versions use a different header format and require a mksmartfs on the\ndevice even if an existing format is there."}]}, {"type": 3, "name": "MTD_SMART_ENABLE_CRC", "value": "y", "user_value": 2, "dep": "y", "prompt": "Enable Sector CRC error detection", "cond": "MTD_SMART && MTD_SMART && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_SMART && MTD_SMART && MTD"}], "help": "Enables logic to compute and validate a CRC for logical sectors.  The\nCRC is calculated for all bytes in the logical sector.  The CRC size is\nselectable (8-bit, 16-bit, 32-bit).  For added protection, larger CRCs should\nbe used with larger (2K - 4K) sector sizes.  Enabling CRC protection will\ncause increased sector relocation and increased erase block erasures since\ndirectory and wear-level status updates can no longer be performed in-place\nand mandate re-writing the information to a new sector.\n\nAn 8-bit CRC protection scheme can be added to an existing non-CRC formatted\nSMART volume without needing to reformat the drive.  As sectors are re-written\nor relocated, they will be converted to CRC protected sectors.", "children": [{"type": 4, "user_value": 2, "dep": "y", "prompt": "CRC level selection", "cond": "MTD_SMART_ENABLE_CRC && MTD_SMART && MTD", "defaults": [{"name": "SMART_CRC_8", "default": "y", "cond": "MTD_SMART_ENABLE_CRC && MTD_SMART && MTD"}], "help": "Select the level of CRC protection implemented in the SMART MTD layer.\nSmaller CRC selection uses less overhead per logical sectors, but also has\na higher probability of not detecting multiple bit errors.  Devices with\nlarger logical sector sizes should use a larger CRC.", "children": [{"type": 3, "name": "SMART_CRC_8", "value": "y", "user_value": 2, "dep": "y", "prompt": "CRC-8", "cond": "y"}, {"type": 3, "name": "SMART_CRC_16", "value": "n", "user_value": 0, "dep": "y", "prompt": "CRC-16", "cond": "y"}]}]}, {"type": 3, "name": "MTD_SMART_FSCK", "value": "y", "user_value": 2, "dep": "y", "prompt": "Enable SMART file system check", "cond": "FS_WRITABLE && MTD_SMART && MTD", "defaults": [{"name": "n", "default": "n", "cond": "FS_WRITABLE && MTD_SMART && MTD"}], "help": "Enables fsck to check and repair the SMART file system.", "children": [{"type": 3, "name": "MTD_SMART_FSCK_ENABLE_CRC", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable SMART file system CRC check during fsck", "cond": "MTD_SMART_FSCK && MTD_SMART_ENABLE_CRC && MTD_SMART && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_SMART_FSCK && MTD_SMART_ENABLE_CRC && MTD_SMART && MTD"}], "help": "Enables CRC check during fsck. It's possible to check the file\nsystem strictly, but it takes long time to do fsck."}]}, {"type": 3, "name": "MTD_SMART_MINIMIZE_RAM", "value": "n", "user_value": 0, "rev_dep": "B_L475E_IOT01A_MTD_FLASH && ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A", "dep": "y", "prompt": "Minimize SMART RAM usage using logical sector cache", "cond": "MTD_SMART && MTD_SMART && MTD", "defaults": [{"name": "0", "default": "0", "cond": "MTD_SMART && MTD_SMART && MTD"}], "help": "Reduces RAM usage in the SMART MTD layer by replacing the 1-for-1 logical to\nphysical sector map with a smaller cache-based structure.  This can save a\nconsiderable amount of RAM on devices with a large sector count, but at the\nexpense of increased read/write times when a cache miss occurs.  If the\nrequested logical sector has not been cached, then the device will need to be\nscanned to located it on the physical medium.", "children": [{"type": 27, "name": "MTD_SMART_SECTOR_CACHE_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Number of entries in the SMART logical sector cache", "cond": "MTD_SMART_MINIMIZE_RAM && MTD_SMART && MTD", "defaults": [{"name": "512", "default": "512", "cond": "MTD_SMART_MINIMIZE_RAM && MTD_SMART && MTD"}], "help": "Sets the size of the cache used for logical to physical sector mapping.  A\nlarger number allows larger files to be \"seek\"ed randomly without encountering\ncache misses.  Any files larger than CACH_SIZE * SECTOR_SIZE that are seeked\nstart to end will cause the cache to flush forcing manual scanning of the\nMTD device to find the logical to physical mappings."}, {"type": 3, "name": "MTD_SMART_SECTOR_PACK_COUNTS", "value": "n", "user_value": null, "dep": "n", "prompt": "Pack free and release counts when possible", "cond": "MTD_SMART_MINIMIZE_RAM && MTD_SMART && MTD", "defaults": [{"name": "y", "default": "y", "cond": "MTD_SMART_MINIMIZE_RAM && MTD_SMART && MTD"}], "help": "For volumes with 16 sectors per erase block or less, this option causes the\nfree sector and released sector counts used for allocation and garbage\ncollection to be packed such that two values are stored per byte.  For\nvolumes with 16 sectors per erase block, the 4 LSBs are packed and all of\nthe high-order bits are packed separately (8 per byte).  This squeezes even\nmore RAM out."}]}, {"type": 3, "name": "MTD_SMART_SECTOR_ERASE_DEBUG", "value": "n", "user_value": 0, "dep": "y", "prompt": "Track Erase Block erasure counts", "cond": "MTD_SMART && MTD_SMART && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_SMART && MTD_SMART && MTD"}], "help": "Allocates an Erase Block erase count array and keeps track of the number\nof erases per erase block.  This data is then presented on the procfs\ninterface."}, {"type": 3, "name": "MTD_SMART_ALLOC_DEBUG", "value": "n", "user_value": 0, "dep": "y", "prompt": "RAM Allocation Debug", "cond": "MTD_SMART && MTD_SMART && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_SMART && MTD_SMART && MTD"}], "help": "Records all SMART MTD layer allocations for debug purposes and makes them\naccessible from the ProcFS interface if it is enabled."}]}, {"type": 3, "name": "MTD_RAMTRON", "value": "n", "user_value": 0, "dep": "y", "prompt": "SPI-based RAMTRON NVRAM Devices FM25V10", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "selects": [{"symbol": "SPI", "cond": "MTD"}], "help": "SPI-based RAMTRON NVRAM Devices FM25V10", "children": [{"type": 3, "name": "RAMTRON_WRITEWAIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Wait after write", "cond": "MTD_RAMTRON && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_RAMTRON && MTD"}], "help": "Wait after performing a RAMTRON write operation to assure that the\nwrite completed error-free.  The default behavior is to wait for the\nprevious write to complete BEFORE starting the next write.  This\noption, if selected, forces the driver to wait for the write to\ncomplete AFTER each write.  This is a tradoeff:  Selecting this\noption will significantly reduce RAMTRON performance but has the\nadvantage that it will correctly associate a write failure with a\nspecific write operation.\n\nOne RAMTRON read operations, this option also enables some additional\nstatus checking to check for device failures during the read."}, {"type": 3, "name": "RAMTRON_SETSPEED", "value": "n", "user_value": null, "dep": "n", "prompt": "Adjustable bus speed", "cond": "MTD_RAMTRON && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_RAMTRON && MTD"}], "help": "Select an option to provide an ioctl, MTDIOC_SETSPEED call that\nsupports dynamic selection of the RAMTRON bus speed."}, {"type": 3, "name": "RAMTRON_CHUNKING", "value": "n", "user_value": null, "dep": "n", "prompt": "Support chunked writes", "cond": "MTD_RAMTRON && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_RAMTRON && MTD"}], "help": "Some Re-RAMs like MB85AS4MT have write buffer size limitation and\nrequire smaller, \"chunked\" writes."}]}, {"type": 3, "name": "MTD_SST25", "value": "n", "user_value": 0, "rev_dep": "SPARK_FLASH && ARCH_BOARD_SPARK && ARCH_BOARD_SPARK", "dep": "y", "prompt": "SPI-based SST25 FLASH", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "selects": [{"symbol": "SPI", "cond": "MTD"}], "children": [{"type": 27, "name": "SST25_SPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "SST25 SPI Mode", "cond": "MTD_SST25 && MTD", "defaults": [{"name": "0", "default": "0", "cond": "MTD_SST25 && MTD"}]}, {"type": 27, "name": "SST25_SPIFREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "SST25 SPI Frequency", "cond": "MTD_SST25 && MTD", "defaults": [{"name": "20000000", "default": "20000000", "cond": "MTD_SST25 && MTD"}]}, {"type": 3, "name": "SST25_READONLY", "value": "n", "user_value": null, "dep": "n", "prompt": "SST25 Read-Only FLASH", "cond": "MTD_SST25 && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_SST25 && MTD"}]}, {"type": 3, "name": "SST25_SECTOR512", "value": "n", "user_value": null, "dep": "n", "prompt": "Simulate 512 byte Erase Blocks", "cond": "MTD_SST25 && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_SST25 && MTD"}]}, {"type": 3, "name": "SST25_SLOWWRITE", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "MTD_SST25 && MTD"}], "help": "There used to be a bug in the current code when using the higher speed AAI\nwrite sequence. The nature of the bug is that the WRDI instruction is not\nworking. At the end of the AAI sequence, the status register continues to\nreport that the SST25 is write enabled (WEL bit) and in AAI mode (AAI\nbit).  This has been fixed by David Sidrane!"}, {"type": 3, "name": "SST25_SLOWREAD", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "MTD_SST25 && MTD"}]}]}, {"type": 3, "name": "MTD_SST25XX", "value": "n", "user_value": 0, "rev_dep": "STM32F429I_DISCO_FLASH && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO", "dep": "y", "prompt": "SPI-based SST25XX FLASH (64-MBit and larger)", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "selects": [{"symbol": "SPI", "cond": "MTD"}], "help": "With the 64 MBit and larger parts, SST changed the write mechanism to\nsupport page write instead of byte/word write like the smaller parts.\nAs a result, the SST25 driver is not compatible with the larger density\nparts, and the SST25XX driver must be used instead.", "children": [{"type": 27, "name": "SST25XX_SPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "SST25 SPI Mode", "cond": "MTD_SST25XX && MTD", "defaults": [{"name": "0", "default": "0", "cond": "MTD_SST25XX && MTD"}]}, {"type": 27, "name": "SST25XX_SPIFREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "SST25 SPI Frequency", "cond": "MTD_SST25XX && MTD", "defaults": [{"name": "20000000", "default": "20000000", "cond": "MTD_SST25XX && MTD"}]}, {"type": 24, "name": "SST25XX_MANUFACTURER", "value": "", "user_value": null, "dep": "n", "prompt": "Manufacturers ID", "cond": "MTD_SST25XX && MTD", "defaults": [{"name": "0xBF", "default": "0xBF", "cond": "MTD_SST25XX && MTD"}], "help": "Various manufacturers may have produced the parts.  0xBF is the manufacturer ID\nfor the parts manufactured by SST."}, {"type": 24, "name": "SST25XX_MEMORY_TYPE", "value": "", "user_value": null, "dep": "n", "prompt": "Memory type ID", "cond": "MTD_SST25XX && MTD", "defaults": [{"name": "0x25", "default": "0x25", "cond": "MTD_SST25XX && MTD"}], "help": "The memory type for SST25VF065 series is 0x25, but this can be modified if needed\nto support compatible devices from different manufacturers."}]}, {"type": 3, "name": "MTD_SST26", "value": "n", "user_value": 0, "dep": "y", "prompt": "SPI/QSPI-based SST26XX FLASHes (16,32,64-MBit)", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "selects": [{"symbol": "SPI", "cond": "MTD"}], "help": "These part are also different from SST25 and SST25XX, they support both SPI and QSPI.", "children": [{"type": 27, "name": "SST26_SPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "SST26 (Q)SPI Mode", "cond": "MTD_SST26 && MTD", "defaults": [{"name": "0", "default": "0", "cond": "MTD_SST26 && MTD"}]}, {"type": 27, "name": "SST26_SPIFREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "SST26 (Q)SPI Frequency", "cond": "MTD_SST26 && MTD", "defaults": [{"name": "64000000", "default": "64000000", "cond": "MTD_SST26 && MTD"}]}, {"type": 24, "name": "SST26_MANUFACTURER", "value": "", "user_value": null, "dep": "n", "prompt": "Manufacturers ID", "cond": "MTD_SST26 && MTD", "defaults": [{"name": "0xBF", "default": "0xBF", "cond": "MTD_SST26 && MTD"}], "help": "Various manufacturers may have produced the parts.  0xBF is the manufacturer ID\nfor the parts manufactured by SST."}, {"type": 24, "name": "SST26_MEMORY_TYPE", "value": "", "user_value": null, "dep": "n", "prompt": "Memory type ID", "cond": "MTD_SST26 && MTD", "defaults": [{"name": "0x26", "default": "0x26", "cond": "MTD_SST26 && MTD"}], "help": "The memory type for SST26VF0xx series is 0x26, but this can be modified if needed\nto support compatible devices from different manufacturers."}, {"type": 3, "name": "SST26_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Debug output from the SST26 driver", "cond": "DEBUG_FS && MTD_SST26 && MTD", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FS && MTD_SST26 && MTD"}]}]}, {"type": 3, "name": "MTD_SST39FV", "value": "n", "user_value": 0, "dep": "y", "prompt": "SST39FV NOR FLASH", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "help": "Selects 16-bit SST NOR FLASH.  This includes support for:\n\nSST39FV1601/SST39FV1602:  2Mb\nSST39FV3201/SST39FV3202:  4Mb", "children": [{"type": 24, "name": "SST39VF_BASE_ADDRESS", "value": "", "user_value": null, "dep": "n", "prompt": "SST39FV bass address", "cond": "MTD_SST39FV && MTD", "defaults": [{"name": "0x00000000", "default": "0x00000000", "cond": "MTD_SST39FV && MTD"}], "help": "This is the address where the SST29VF FLASH can be found in memory."}]}, {"type": 3, "name": "MTD_W25", "value": "n", "user_value": 0, "rev_dep": "STM32F103MINIMUM_FLASH && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM", "dep": "y", "prompt": "SPI-based W25 FLASH", "cond": "MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD"}], "selects": [{"symbol": "SPI", "cond": "MTD"}], "children": [{"type": 27, "name": "W25_SPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "W25 SPI Mode", "cond": "MTD_W25 && MTD", "defaults": [{"name": "0", "default": "0", "cond": "MTD_W25 && MTD"}]}, {"type": 27, "name": "W25_SPIFREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "W25 SPI Frequency", "cond": "MTD_W25 && MTD", "defaults": [{"name": "20000000", "default": "20000000", "cond": "MTD_W25 && MTD"}]}, {"type": 3, "name": "W25_READONLY", "value": "n", "user_value": null, "dep": "n", "prompt": "W25 Read-Only FLASH", "cond": "MTD_W25 && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_W25 && MTD"}]}, {"type": 3, "name": "W25_SECTOR512", "value": "n", "user_value": null, "dep": "n", "prompt": "Simulate 512 byte Erase Blocks", "cond": "MTD_W25 && MTD", "defaults": [{"name": "n", "default": "n", "cond": "MTD_W25 && MTD"}]}, {"type": 3, "name": "W25_SLOWREAD", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "MTD_W25 && MTD"}]}]}]}, {"type": 3, "name": "EEPROM", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "EEPROM support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "This directory holds implementations of EEPROM drivers.", "children": [{"type": 3, "name": "SPI_EE_25XX", "value": "n", "user_value": null, "dep": "n", "prompt": "Microchip 25xxNNN / Atmel AT25NNN EEPROM devices", "cond": "SPI && EEPROM && EEPROM", "defaults": [{"name": "n", "default": "n", "cond": "SPI && EEPROM && EEPROM"}], "help": "This selection enables support for the Microchip/Atmel SPI EEPROM\ndevices", "children": [{"type": 27, "name": "EE25XX_SPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "SPI mode (0-3)", "cond": "SPI_EE_25XX && SPI_EE_25XX && EEPROM && EEPROM", "defaults": [{"name": "0", "default": "0", "cond": "SPI_EE_25XX && SPI_EE_25XX && EEPROM && EEPROM"}]}]}]}, {"type": 3, "name": "NETDEVICES", "value": "y", "user_value": 2, "menuconfig": true, "rev_dep": "(KINETIS_ENET && (ARCH_FAMILY_K60 || ARCH_FAMILY_K64 || ARCH_FAMILY_K66) && ARCH_CHIP_KINETIS && ARCH_ARM) || (TIVA_ETHERNET && TIVA_HAVE_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM) || (LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM) || (SAMA5_GMAC && SAMA5_HAVE_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_EMACA && SAMA5_HAVE_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_EMAC0 && SAMA5_HAVE_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_EMAC1 && SAMA5_HAVE_EMACB && SAMA5_HAVE_EMAC1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAM34_EMAC && (ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STM32_ETHMAC && STM32_HAVE_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32F7_ETHMAC && STM32F7_HAVE_ETHRNET && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS) || (MISOC_ETHERNET && ARCH_MISOC)", "dep": "y", "prompt": "Network Device/PHY Support", "cond": "NET", "defaults": [{"name": "n", "default": "n", "cond": "!ARCH_HAVE_PHY && NET"}, {"name": "y", "default": "y", "cond": "ARCH_HAVE_PHY && NET"}], "help": "Network interface driver and PHY selections.  This options enables\nselection of drivers for external Ethernet MAC chips.  The majority\nof MCUs, however, have built-in, internal Ethernet MAC peripherals\nand that Ethernet support is selected in the MCU-specific\nconfiguration menus.\n\nMost Ethernet MAC drivers, whether internal or external, will\nrequire configuration of an external PHY device.  That external PHY\ndevice is also selected via this menu.", "children": [{"type": 6, "dep": "y", "prompt": "General Ethernet MAC Driver Options", "cond": "NETDEVICES"}, {"type": 3, "name": "NETDEV_LOOPBACK", "value": "n", "user_value": 0, "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "!NET_LOOPBACK && NETDEVICES"}, {"name": "y", "default": "y", "cond": "NET_LOOPBACK && NETDEVICES"}], "selects": [{"symbol": "ARCH_HAVE_NETDEV_STATISTICS", "cond": "NETDEVICES"}], "help": "Add support for the local network loopback device, lo."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && NETDEV_LOOPBACK && NETDEVICES", "defaults": [{"name": "LOOPBACK_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && NETDEV_LOOPBACK && NETDEVICES"}, {"name": "LOOPBACK_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && NETDEV_LOOPBACK && NETDEVICES"}], "help": "Work queue support is required to use the loopback driver.  If the\nlow priority work queue is available, then it should be used by the\nloopback driver.", "children": [{"type": 3, "name": "LOOPBACK_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "LOOPBACK_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}, {"type": 3, "name": "NETDEV_TELNET", "value": "n", "user_value": 0, "dep": "y", "prompt": "Telnet driver", "cond": "NET && NET_TCP && NETDEVICES", "defaults": [{"name": "n", "default": "n", "cond": "NET && NET_TCP && NETDEVICES"}], "help": "The Telnet driver generates a character driver instance to support a\nTelnet session.  This driver is used by the Telnet daemon.  The\nTelnet daeman will instantiate a new Telnet driver to support\nstandard I/O on the new Telnet session.", "children": [{"type": 27, "name": "TELNET_RXBUFFER_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Telnet RX buffer size", "cond": "NETDEV_TELNET && NETDEVICES", "defaults": [{"name": "256", "default": "256", "cond": "NETDEV_TELNET && NETDEVICES"}]}, {"type": 27, "name": "TELNET_TXBUFFER_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Telnet TX buffer size", "cond": "NETDEV_TELNET && NETDEVICES", "defaults": [{"name": "256", "default": "256", "cond": "NETDEV_TELNET && NETDEVICES"}]}, {"type": 3, "name": "TELNET_DUMPBUFFER", "value": "n", "user_value": null, "dep": "n", "prompt": "Dump Telnet buffers", "cond": "DEBUG_NET && NETDEV_TELNET && NETDEVICES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_NET && NETDEV_TELNET && NETDEVICES"}]}]}, {"type": 3, "name": "ARCH_HAVE_NETDEV_STATISTICS", "value": "n", "user_value": 0, "rev_dep": "(KINETIS_ENET && (ARCH_FAMILY_K60 || ARCH_FAMILY_K64 || ARCH_FAMILY_K66) && ARCH_CHIP_KINETIS && ARCH_ARM) || (TIVA_ETHERNET && (ARCH_CHIP_LM3S || ARCH_CHIP_LM4F) && TIVA_HAVE_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM) || (SAMV7_EMAC && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS) || (MISOC_ETHERNET && ARCH_MISOC) || (EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80) || (NETDEV_LOOPBACK && NETDEVICES) || (NET_DM90x0 && NETDEVICES) || (NET_CS89x0 && EXPERIMENTAL && NETDEVICES) || (ENC28J60 && NETDEVICES) || (ENCX24J600 && NETDEVICES) || (NET_SLIP && NETDEVICES) || (SPIRIT_NETDEV && DRIVERS_WIRELESS) || (NET_TUN && NET) || (IEEE802154_NETDEV && (NET_6LOWPAN || NET_IEEE802154) && WIRELESS_IEEE802154 && WIRELESS) || (IEEE802154_LOOPBACK && (NET_6LOWPAN || NET_IEEE802154) && WIRELESS_IEEE802154 && WIRELESS) || (PKTRADIO_LOOPBACK && NET_6LOWPAN && NET_IPv6 && WIRELESS_PKTRADIO && WIRELESS)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "NETDEVICES"}]}, {"type": 3, "name": "NETDEV_STATISTICS", "value": "n", "user_value": null, "dep": "n", "prompt": "Network device driver statistics", "cond": "NET_STATISTICS && ARCH_HAVE_NETDEV_STATISTICS && NETDEVICES", "help": "Enable to collect statistics from the network drivers (if supported\nby the network driver)."}, {"type": 3, "name": "NETDEV_LATEINIT", "value": "y", "user_value": 2, "dep": "y", "prompt": "Late driver initialization", "cond": "NETDEVICES", "defaults": [{"name": "n", "default": "n", "cond": "NETDEVICES"}], "help": "Normally, networking initialization occur in the later phase of the\nboot process in the function up_initialize() when it calls the\ndriver initialization function, up_netintialize().  This\ninitialization occurs after a sufficient about of the OS has been\ninitialized so that driver registration can be performed, but\nbefore the completion of OS initialization and before the first\napplication is started.\n\nIn a few situations, however, you may want to suppress this early\nnetwork driver initialization.  As examples:\n\n        - If you are using SLIP or PPPD, then there will be no network\n          driver to be initialized,\n        - Certain multi-network configurations where a simple call to\n          up_netinitialize() may be insufficient, and\n        - Situations where there are other board-level hardware\n          dependencies so that the hardware is not in an appropriate\n          state for up_netinitialize() to be called.\n\nExamples of this latter situation includes such things as network\ndrivers that required some setup via an I2C I/O expander, or network\ndrivers that depend on USB, SPI, I2C, PCI, serial, or other\ninterfaces that may not be ready when up_netiniailize() is normally\ncalled."}, {"type": 3, "name": "NET_DUMPPACKET", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable packet dumping", "cond": "DEBUG_FEATURES && NETDEVICES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && NETDEVICES"}], "help": "Some Ethernet MAC drivers supporting dumping of received and\ntransmitted packets as a debug option.  This setting enables that\ndebug option. Also needs CONFIG_DEBUG_FEATURES."}, {"type": 6, "dep": "y", "prompt": "External Ethernet MAC Device Support", "cond": "NETDEVICES"}, {"type": 3, "name": "NET_DM90x0", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "Davicom dm9000/dm9010 support", "cond": "NETDEVICES", "defaults": [{"name": "n", "default": "n", "cond": "NETDEVICES"}], "selects": [{"symbol": "ARCH_HAVE_NETDEV_STATISTICS", "cond": "NETDEVICES"}], "help": "References: Davicom data sheets (DM9000-DS-F03-041906.pdf,\nDM9010-DS-F01-103006.pdf) and looking at lots of other DM90x0\ndrivers.", "children": [{"type": 24, "name": "DM9X_BASE", "value": "", "user_value": null, "dep": "n", "prompt": "DM90x0 base address", "cond": "NET_DM90x0 && NETDEVICES", "defaults": [{"name": "0x0", "default": "0x0", "cond": "NET_DM90x0 && NETDEVICES"}]}, {"type": 27, "name": "DM9X_IRQ", "value": "", "user_value": null, "dep": "n", "prompt": "DM90x0 IRQ number", "cond": "NET_DM90x0 && NETDEVICES", "defaults": [{"name": "0", "default": "0", "cond": "NET_DM90x0 && NETDEVICES"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "DM90x0 bus width", "cond": "NET_DM90x0 && NETDEVICES", "defaults": [{"name": "DM9X_BUSWIDTH16", "default": "n", "cond": "NET_DM90x0 && NETDEVICES"}], "children": [{"type": 3, "name": "DM9X_BUSWIDTH8", "value": "n", "user_value": null, "dep": "n", "prompt": "8-bits", "cond": "y"}, {"type": 3, "name": "DM9X_BUSWIDTH16", "value": "n", "user_value": null, "dep": "n", "prompt": "16-bits", "cond": "y"}, {"type": 3, "name": "DM9X_BUSWIDTH32", "value": "n", "user_value": null, "dep": "n", "prompt": "32-bits", "cond": "y"}]}, {"type": 3, "name": "DM9X_CHECKSUM", "value": "n", "user_value": null, "dep": "n", "prompt": "Checksum enable", "cond": "NET_DM90x0 && NETDEVICES", "defaults": [{"name": "n", "default": "n", "cond": "NET_DM90x0 && NETDEVICES"}]}, {"type": 3, "name": "DM9X_ETRANS", "value": "n", "user_value": null, "dep": "n", "prompt": "TX poll", "cond": "NET_DM90x0 && NETDEVICES", "defaults": [{"name": "n", "default": "n", "cond": "NET_DM90x0 && NETDEVICES"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "DM90x0 mode", "cond": "NET_DM90x0 && NETDEVICES", "defaults": [{"name": "DM9X_MODE_AUTO", "default": "n", "cond": "NET_DM90x0 && NETDEVICES"}], "children": [{"type": 3, "name": "DM9X_MODE_AUTO", "value": "n", "user_value": null, "dep": "n", "prompt": "Autonegotion", "cond": "y"}, {"type": 3, "name": "DM9X_MODE_10MHD", "value": "n", "user_value": null, "dep": "n", "prompt": "10BaseT half duplex", "cond": "y"}, {"type": 3, "name": "DM9X_MODE_10MFD", "value": "n", "user_value": null, "dep": "n", "prompt": "10BaseT full duplex", "cond": "y"}, {"type": 3, "name": "DM9X_MODE_100MHD", "value": "n", "user_value": null, "dep": "n", "prompt": "100BaseT half duplex", "cond": "y"}, {"type": 3, "name": "DM9X_MODE_100MFD", "value": "n", "user_value": null, "dep": "n", "prompt": "100BaseT full duplex", "cond": "y"}]}, {"type": 27, "name": "DM9X_NINTERFACES", "value": "", "user_value": null, "dep": "n", "prompt": "Nubmer of DM90x0 interfaces", "cond": "EXPERIMENTAL && NET_DM90x0 && NETDEVICES", "defaults": [{"name": "1", "default": "1", "cond": "EXPERIMENTAL && NET_DM90x0 && NETDEVICES"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && NET_DM90x0 && NETDEVICES", "defaults": [{"name": "DM9X_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && NET_DM90x0 && NETDEVICES"}, {"name": "DM9X_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && NET_DM90x0 && NETDEVICES"}], "help": "Work queue support is required to use the Ethernet driver.  If the\nlow priority work queue is available, then it should be used by the\ndriver.", "children": [{"type": 3, "name": "DM9X_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "DM9X_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}]}, {"type": 3, "name": "NET_CS89x0", "value": "n", "user_value": null, "dep": "n", "prompt": "CS89x0 support", "cond": "EXPERIMENTAL && NETDEVICES", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && NETDEVICES"}], "selects": [{"symbol": "ARCH_HAVE_NETDEV_STATISTICS", "cond": "EXPERIMENTAL && NETDEVICES"}], "help": "Under construction -- do not use"}, {"type": 3, "name": "ENC28J60", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "Microchip ENC28J60 support", "cond": "NETDEVICES", "defaults": [{"name": "n", "default": "n", "cond": "NETDEVICES"}], "selects": [{"symbol": "SPI", "cond": "NETDEVICES"}, {"symbol": "ARCH_HAVE_NETDEV_STATISTICS", "cond": "NETDEVICES"}], "help": "References:\nENC28J60 Data Sheet, Stand-Alone Ethernet Controller with SPI Interface,\nDS39662C, 2008 Microchip Technology Inc.", "children": [{"type": 27, "name": "ENC28J60_NINTERFACES", "value": "", "user_value": null, "dep": "n", "prompt": "Number of physical ENC28J60", "cond": "ENC28J60 && NETDEVICES", "defaults": [{"name": "1", "default": "1", "cond": "ENC28J60 && NETDEVICES"}], "ranges": [{"min": "1", "max": "1", "cond": "ENC28J60 && NETDEVICES"}], "help": "Specifies the number of physical ENC28J60\ndevices that will be supported."}, {"type": 27, "name": "ENC28J60_SPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "SPI mode", "cond": "ENC28J60 && NETDEVICES", "defaults": [{"name": "0", "default": "0", "cond": "ENC28J60 && NETDEVICES"}], "help": "Controls the SPI mode.  The ENC28J60 spec says that it supports SPI\nmode 0,0 only: \"The implementation used on this device supports SPI\nmode 0,0 only. In addition, the SPI port requires that SCK be at Idle\nin a low state; selectable clock polarity is not supported.\"\nHowever, sometimes you need to tinker with these things."}, {"type": 27, "name": "ENC28J60_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "SPI frequency", "cond": "ENC28J60 && NETDEVICES", "defaults": [{"name": "20000000", "default": "20000000", "cond": "ENC28J60 && NETDEVICES"}], "help": "Define to use a different bus frequency"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && ENC28J60 && NETDEVICES", "defaults": [{"name": "ENC28J60_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && ENC28J60 && NETDEVICES"}, {"name": "ENC28J60_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && ENC28J60 && NETDEVICES"}], "help": "Work queue support is required to use the ENC28J60 driver.  If the\nlow priority work queue is available, then it should be used by the\nENC28J60 driver.", "children": [{"type": 3, "name": "ENC28J60_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "ENC28J60_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}, {"type": 3, "name": "ENC28J60_HALFDUPPLEX", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable half dupplex", "cond": "ENC28J60 && NETDEVICES", "defaults": [{"name": "n", "default": "n", "cond": "ENC28J60 && NETDEVICES"}], "help": "Default is full duplex"}, {"type": 3, "name": "ENC28J60_DUMPPACKET", "value": "n", "user_value": null, "dep": "n", "prompt": "Dump Packets", "cond": "ENC28J60 && NETDEVICES", "defaults": [{"name": "n", "default": "n", "cond": "ENC28J60 && NETDEVICES"}], "help": "If selected, the ENC28J60 driver  will dump the contents of each\npacket to the console."}, {"type": 3, "name": "ENC28J60_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register-Level Debug", "cond": "DEBUG_FEATURES && DEBUG_NET && ENC28J60 && NETDEVICES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && DEBUG_NET && ENC28J60 && NETDEVICES"}], "help": "Enable very low-level register access debug.  Depends on\nCONFIG_DEBUG_FEATURES and CONFIG_DEBUG_NET."}]}, {"type": 3, "name": "ENCX24J600", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "Microchip ENCX24J600 support", "cond": "NETDEVICES", "defaults": [{"name": "n", "default": "n", "cond": "NETDEVICES"}], "selects": [{"symbol": "SPI", "cond": "NETDEVICES"}, {"symbol": "ARCH_HAVE_NETDEV_STATISTICS", "cond": "NETDEVICES"}], "help": "References:\nENC424J600/624J600 Data Sheet Stand-Alone 10/100 Ethernet Controller\nwith SPI or Parallel Interface DS39935B, 2009 Microchip Technology Inc.", "children": [{"type": 27, "name": "ENC28J60_NINTERFACES", "value": "", "user_value": null, "dep": "n", "prompt": "Number of physical ENCX24J600", "cond": "ENCX24J600 && NETDEVICES", "defaults": [{"name": "1", "default": "1", "cond": "ENCX24J600 && NETDEVICES"}], "ranges": [{"min": "1", "max": "1", "cond": "ENCX24J600 && NETDEVICES"}], "help": "Specifies the number of physical ENCX24J600\ndevices that will be supported."}, {"type": 27, "name": "ENCX24J600_SPIMODE", "value": "", "user_value": null, "dep": "n", "prompt": "SPI mode", "cond": "ENCX24J600 && NETDEVICES", "defaults": [{"name": "0", "default": "0", "cond": "ENCX24J600 && NETDEVICES"}], "help": "Controls the SPI mode.  The ENCX24J600 spec says that it supports SPI\nmode 0,0 only: \"The implementation used on this device supports SPI\nmode 0,0 only. In addition, the SPI port requires that SCK be at Idle\nin a low state; selectable clock polarity is not supported.\"\nHowever, sometimes you need to tinker with these things."}, {"type": 27, "name": "ENCX24J600_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "SPI frequency", "cond": "ENCX24J600 && NETDEVICES", "defaults": [{"name": "14000000", "default": "14000000", "cond": "ENCX24J600 && NETDEVICES"}], "help": "Define to use a different bus frequency"}, {"type": 27, "name": "ENCX24J600_NRXDESCR", "value": "", "user_value": null, "dep": "n", "prompt": "Descriptor Count", "cond": "ENCX24J600 && NETDEVICES", "defaults": [{"name": "8", "default": "8", "cond": "ENCX24J600 && NETDEVICES"}], "help": "Defines how many descriptors are preallocated for the\ntransmission and reception queues.\nThe ENC has a relative large packet buffer of 24kB which can\nbe used to buffer multiple packets silmutaneously"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && ENCX24J600 && NETDEVICES", "defaults": [{"name": "ENCX24J600_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && ENCX24J600 && NETDEVICES"}, {"name": "ENCX24J600_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && ENCX24J600 && NETDEVICES"}], "help": "Work queue support is required to use the ENCX24J600 driver.  If the\nlow priority work queue is available, then it should be used by the\nENCX24J600 driver.", "children": [{"type": 3, "name": "ENCX24J600_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "ENCX24J600_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}, {"type": 3, "name": "ENCX24J600_DUMPPACKET", "value": "n", "user_value": null, "dep": "n", "prompt": "Dump Packets", "cond": "ENCX24J600 && NETDEVICES", "defaults": [{"name": "n", "default": "n", "cond": "ENCX24J600 && NETDEVICES"}], "help": "If selected, the ENCX24J600 driver  will dump the contents of each\npacket to the console."}, {"type": 3, "name": "ENCX24J600_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Register-Level Debug", "cond": "DEBUG_FEATURES && DEBUG_NET && ENCX24J600 && NETDEVICES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && DEBUG_NET && ENCX24J600 && NETDEVICES"}], "help": "Enable very low-level register access debug.  Depends on\nCONFIG_DEBUG_FEATURES and CONFIG_DEBUG_NET."}]}, {"type": 3, "name": "NET_SLIP", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "SLIP (serial line) support", "cond": "NETDEVICES", "defaults": [{"name": "n", "default": "n", "cond": "NETDEVICES"}], "selects": [{"symbol": "ARCH_HAVE_NETDEV_STATISTICS", "cond": "NETDEVICES"}], "help": "Reference: RFC 1055", "children": [{"type": 27, "name": "NET_SLIP_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Daemon stack size", "cond": "NET_SLIP && NETDEVICES", "defaults": [{"name": "2048", "default": "2048", "cond": "NET_SLIP && NETDEVICES"}], "help": "Provides the stack size for SLIP RX and TX."}, {"type": 27, "name": "NET_SLIP_DEFPRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Daemon priority", "cond": "NET_SLIP && NETDEVICES", "defaults": [{"name": "128", "default": "128", "cond": "NET_SLIP && NETDEVICES"}], "help": "Provides the priority for SLIP RX and TX threads."}, {"type": 27, "name": "NET_SLIP_NINTERFACES", "value": "", "user_value": null, "dep": "n", "prompt": "Number of SLIP interfaces", "cond": "NET_SLIP && NETDEVICES", "defaults": [{"name": "1", "default": "1", "cond": "NET_SLIP && NETDEVICES"}], "help": "Determines the number of physical interfaces that will be supported."}]}, {"type": 3, "name": "NET_FTMAC100", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "Faraday 10/100 Ethernet", "cond": "NETDEVICES", "defaults": [{"name": "n", "default": "n", "cond": "NETDEVICES"}], "help": "Faraday 10/100 Ethernet support.", "children": [{"type": 24, "name": "FTMAC100_BASE", "value": "", "user_value": null, "dep": "n", "prompt": "FTMAC100 base address", "cond": "NET_FTMAC100 && NETDEVICES", "defaults": [{"name": "0x0", "default": "0x0", "cond": "NET_FTMAC100 && NETDEVICES"}]}, {"type": 27, "name": "FTMAC100_IRQ", "value": "", "user_value": null, "dep": "n", "prompt": "FTMAC100 IRQ number", "cond": "NET_FTMAC100 && NETDEVICES", "defaults": [{"name": "0", "default": "0", "cond": "NET_FTMAC100 && NETDEVICES"}]}, {"type": 27, "name": "FTMAC100_RX_DESC", "value": "", "user_value": null, "dep": "n", "prompt": "Number of RX descriptors", "cond": "NET_FTMAC100 && NETDEVICES", "defaults": [{"name": "64", "default": "64", "cond": "NET_FTMAC100 && NETDEVICES"}]}, {"type": 27, "name": "FTMAC100_TX_DESC", "value": "", "user_value": null, "dep": "n", "prompt": "Number of TX descriptors", "cond": "NET_FTMAC100 && NETDEVICES", "defaults": [{"name": "32", "default": "32", "cond": "NET_FTMAC100 && NETDEVICES"}]}, {"type": 24, "name": "FTMAC100_MAC0_ENV_ADDR", "value": "", "user_value": null, "dep": "n", "prompt": "MAC0 address location", "cond": "NET_FTMAC100 && NETDEVICES", "defaults": [{"name": "0", "default": "0", "cond": "NET_FTMAC100 && NETDEVICES"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && NET_FTMAC100 && NETDEVICES", "defaults": [{"name": "FTMAC100_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && NET_FTMAC100 && NETDEVICES"}, {"name": "FTMAC100_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && NET_FTMAC100 && NETDEVICES"}], "help": "Work queue support is required to use the FTMAC100 driver.  If the\nlow priority work queue is available, then it should be used by the\nFTMAC100 driver.", "children": [{"type": 3, "name": "FTMAC100_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "FTMAC100_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}]}, {"type": 6, "dep": "n", "prompt": "External Ethernet PHY Device Support", "cond": "ARCH_HAVE_PHY && NETDEVICES"}, {"type": 3, "name": "ARCH_PHY_INTERRUPT", "value": "n", "user_value": null, "rev_dep": "(TIVA_PHY_INTERRUPTS && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (ARCH_BOARD_SAMA5D3X_EK && NETDEVICES && (ARCH_CHIP_ATSAMA5D31 || ARCH_CHIP_ATSAMA5D33 || ARCH_CHIP_ATSAMA5D34 || ARCH_CHIP_ATSAMA5D35) && y) || (ARCH_BOARD_SAMA5D3_XPLAINED && NETDEVICES && ARCH_CHIP_ATSAMA5D36 && y) || (ARCH_BOARD_SAMA5D4_EK && NETDEVICES && ARCH_CHIP_ATSAMA5D44 && y) || (ARCH_BOARD_SAM4EEK && NETDEVICES && ARCH_CHIP_ATSAM4E16E && y) || (ARCH_BOARD_SAME70_XPLAINED && NETDEVICES && ARCH_CHIP_SAME70Q21 && y) || (ARCH_BOARD_SAMV71_XULT && NETDEVICES && ARCH_CHIP_SAMV71Q21 && y) || (BOARD_CUSTOM_INTERRUPT && NETDEVICES && NETDEVICES && ARCH_BOARD_CUSTOM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_PHY && NETDEVICES"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Board PHY Selection (ETH0)", "cond": "ARCH_HAVE_PHY && NETDEVICES", "defaults": [{"name": "ETH0_PHY_NONE", "default": "n", "cond": "ARCH_HAVE_PHY && NETDEVICES"}], "help": "Identify the PHY on your board.  This setting is not used by all Ethernet\ndrivers nor do all Ethernet drivers support all PHYs.", "children": [{"type": 3, "name": "ETH0_PHY_NONE", "value": "n", "user_value": null, "dep": "n", "prompt": "No PHY support", "cond": "y"}, {"type": 3, "name": "ETH0_PHY_AM79C874", "value": "n", "user_value": null, "dep": "n", "prompt": "AMD Am79C874 PHY", "cond": "y"}, {"type": 3, "name": "ETH0_PHY_KS8721", "value": "n", "user_value": null, "dep": "n", "prompt": "Micrel KS8721 PHY", "cond": "y"}, {"type": 3, "name": "ETH0_PHY_KSZ8041", "value": "n", "user_value": null, "dep": "n", "prompt": "Micrel KSZ8041 PHY", "cond": "y"}, {"type": 3, "name": "ETH0_PHY_KSZ8051", "value": "n", "user_value": null, "dep": "n", "prompt": "Micrel KSZ8051 PHY", "cond": "y"}, {"type": 3, "name": "ETH0_PHY_KSZ8061", "value": "n", "user_value": null, "dep": "n", "prompt": "Micrel KSZ8061 PHY", "cond": "y"}, {"type": 3, "name": "ETH0_PHY_KSZ8081", "value": "n", "user_value": null, "dep": "n", "prompt": "Micrel KSZ8081 PHY", "cond": "y"}, {"type": 3, "name": "ETH0_PHY_KSZ90x1", "value": "n", "user_value": null, "dep": "n", "prompt": "Micrel KSZ9021/31 PHY", "cond": "y"}, {"type": 3, "name": "ETH0_PHY_DP83848C", "value": "n", "user_value": null, "dep": "n", "prompt": "National Semiconductor DP83848C PHY", "cond": "y"}, {"type": 3, "name": "ETH0_PHY_LAN8720", "value": "n", "user_value": null, "dep": "n", "prompt": "SMSC LAN8720 PHY", "cond": "y"}, {"type": 3, "name": "ETH0_PHY_LAN8740", "value": "n", "user_value": null, "dep": "n", "prompt": "SMSC LAN8740 PHY", "cond": "y"}, {"type": 3, "name": "ETH0_PHY_LAN8740A", "value": "n", "user_value": null, "dep": "n", "prompt": "SMSC LAN8740A PHY", "cond": "y"}, {"type": 3, "name": "ETH0_PHY_LAN8742A", "value": "n", "user_value": null, "dep": "n", "prompt": "SMSC LAN8742A PHY", "cond": "y"}, {"type": 3, "name": "ETH0_PHY_DM9161", "value": "n", "user_value": null, "dep": "n", "prompt": "Davicom DM9161 PHY", "cond": "y"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Board PHY Selection (ETH1)", "cond": "ARCH_HAVE_PHY && NETDEVICES", "defaults": [{"name": "ETH1_PHY_NONE", "default": "n", "cond": "ARCH_HAVE_PHY && NETDEVICES"}], "help": "Identify the PHY on your board.  This setting is not used by all Ethernet\ndrivers nor do all Ethernet drivers support all PHYs.", "children": [{"type": 3, "name": "ETH1_PHY_NONE", "value": "n", "user_value": null, "dep": "n", "prompt": "No PHY support", "cond": "y"}, {"type": 3, "name": "ETH1_PHY_AM79C874", "value": "n", "user_value": null, "dep": "n", "prompt": "AMD Am79C874 PHY", "cond": "y"}, {"type": 3, "name": "ETH1_PHY_KS8721", "value": "n", "user_value": null, "dep": "n", "prompt": "Micrel KS8721 PHY", "cond": "y"}, {"type": 3, "name": "ETH1_PHY_KSZ8041", "value": "n", "user_value": null, "dep": "n", "prompt": "Micrel KSZ8041 PHY", "cond": "y"}, {"type": 3, "name": "ETH1_PHY_KSZ8051", "value": "n", "user_value": null, "dep": "n", "prompt": "Micrel KSZ8051 PHY", "cond": "y"}, {"type": 3, "name": "ETH1_PHY_KSZ8081", "value": "n", "user_value": null, "dep": "n", "prompt": "Micrel KSZ8081 PHY", "cond": "y"}, {"type": 3, "name": "ETH1_PHY_KSZ90x1", "value": "n", "user_value": null, "dep": "n", "prompt": "Micrel KSZ9021/31 PHY", "cond": "y"}, {"type": 3, "name": "ETH1_PHY_DP83848C", "value": "n", "user_value": null, "dep": "n", "prompt": "National Semiconductor DP83848C PHY", "cond": "y"}, {"type": 3, "name": "ETH1_PHY_LAN8720", "value": "n", "user_value": null, "dep": "n", "prompt": "SMSC LAN8720 PHY", "cond": "y"}, {"type": 3, "name": "ETH1_PHY_DM9161", "value": "n", "user_value": null, "dep": "n", "prompt": "Davicom DM9161 PHY", "cond": "y"}]}, {"type": 3, "name": "NETDEV_PHY_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "PHY debug", "cond": "DEBUG_FEATURES && ARCH_HAVE_PHY && NETDEVICES", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && ARCH_HAVE_PHY && NETDEVICES"}], "help": "Normally debug output is controlled by DEBUG_NET.  However, that\nmay generate a LOT of debug output, especially if CONFIG_DEBUG_INFO is\nalso selected.  This option is intended to force VERVOSE debug\noutput from certain PHY-related even if DEBUG_NET or CONFIG_DEBUG_INFO\nare not selected.  This allows for focused, unit-level debug of\nthe NSH network initialization logic."}]}, {"type": 3, "name": "PIPES", "value": "y", "user_value": 2, "menuconfig": true, "rev_dep": "(PSEUDOTERM && SERIAL) || (NET_LOCAL && NET && !DISABLE_PSEUDOFS_OPERATIONS && NET)", "dep": "y", "prompt": "FIFO and named pipe drivers", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "FIFO and named pipe drivers.  Standard interfaces are declared\nin include/unistd.h", "children": [{"type": 27, "name": "DEV_PIPE_MAXSIZE", "value": "1024", "user_value": "1024", "dep": "y", "prompt": "Maximum pipe/FIFO size", "cond": "PIPES", "defaults": [{"name": "1024", "default": "1024", "cond": "!DEFAULT_SMALL && PIPES"}, {"name": "256", "default": "256", "cond": "DEFAULT_SMALL && PIPES"}], "help": "Maximum configurable size of a pipe or FIFO at runtime."}, {"type": 27, "name": "DEV_PIPE_SIZE", "value": "1024", "user_value": "1024", "dep": "y", "prompt": "Default pipe size", "cond": "PIPES", "defaults": [{"name": "1024", "default": "1024", "cond": "!DEFAULT_SMALL && PIPES"}, {"name": "256", "default": "256", "cond": "DEFAULT_SMALL && PIPES"}], "help": "Sets the default size of the pipe ringbuffer in bytes.  A value of\nzero disables pipe support."}, {"type": 27, "name": "DEV_FIFO_SIZE", "value": "1024", "user_value": "1024", "dep": "y", "prompt": "Default FIFO size", "cond": "PIPES", "defaults": [{"name": "1024", "default": "1024", "cond": "!DEFAULT_SMALL && PIPES"}, {"name": "256", "default": "256", "cond": "DEFAULT_SMALL && PIPES"}], "help": "Sets the default size of the FIFO ringbuffer in bytes.  A value of\nzero disables FIFO support."}]}, {"type": 3, "name": "PM", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "Power management (PM) driver interfaces", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Power management (PM) driver interfaces.  These interfaces are used\nto manage power usage of a platform by monitoring driver activity\nand by placing drivers into reduce power usage modes when the\ndrivers are not active.", "children": [{"type": 27, "name": "PM_SLICEMS", "value": "", "user_value": null, "dep": "n", "prompt": "PM time slice (msec)", "cond": "PM", "defaults": [{"name": "100", "default": "100", "cond": "PM"}], "help": "The power management module collects activity counts in time slices.\nAt the end of the time slice, the count accumulated during that\ninterval is applied to an averaging algorithm to determine the\nactivity level.\n\nCONFIG_PM_SLICEMS provides the duration of that time slice in\nmilliseconds.  Default: 100 Milliseconds"}, {"type": 27, "name": "PM_NDOMAINS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of PM activity domains", "cond": "PM", "defaults": [{"name": "1", "default": "1", "cond": "PM"}], "help": "Defines the number of \"domains\" that activity may be monitored on.\nFor example, you may want to separately manage the power from the\nNetwork domain, shutting down the network when it is not be used,\nfrom the UI domain, shutting down the UI when it is not in use."}, {"type": 27, "name": "PM_MEMORY", "value": "", "user_value": null, "dep": "n", "prompt": "PM memory (msec)", "cond": "PM", "defaults": [{"name": "2", "default": "2", "cond": "PM"}], "ranges": [{"min": "1", "max": "6", "cond": "PM"}], "help": "The averaging algorithm is simply: Y = (An*X + SUM(Ai*Yi))/SUM(Aj),\nwhere i = 1..n-1 and j= 1..n, n is the length of the \"memory\",\nAi is the weight applied to each value, and X is the current\nactivity.  These weights may be negative and a limited to the\nrange of int16_t.\n\n        CONFIG_PM_MEMORY provides the memory for the algorithm.  Default: 2\n        CONFIG_PM_COEFn provides weight for each sample.  Default: 1\n\nSetting CONFIG_PM_MEMORY=1 disables all smoothing."}, {"type": 27, "name": "PM_COEFN", "value": "", "user_value": null, "dep": "n", "prompt": "PM coefficient", "cond": "PM", "defaults": [{"name": "1", "default": "1", "cond": "PM"}], "help": "See help associated with CONFIG_PM_MEMORY."}, {"type": 27, "name": "PM_COEF1", "value": "", "user_value": null, "dep": "n", "prompt": "PM coefficient 1", "cond": "PM", "defaults": [{"name": "1", "default": "1", "cond": "PM"}], "help": "See help associated with CONFIG_PM_MEMORY."}, {"type": 27, "name": "PM_COEF2", "value": "", "user_value": null, "dep": "n", "prompt": "PM coefficient 2", "cond": "PM", "defaults": [{"name": "1", "default": "1", "cond": "PM"}], "help": "See help associated with CONFIG_PM_MEMORY\n\nIgnored if CONFIG_PM_MEMORY <= 2"}, {"type": 27, "name": "PM_COEF3", "value": "", "user_value": null, "dep": "n", "prompt": "PM coefficient 3", "cond": "PM", "defaults": [{"name": "1", "default": "1", "cond": "PM"}], "help": "See help associated with CONFIG_PM_MEMORY\n\n Ignored if CONFIG_PM_MEMORY <= 3"}, {"type": 27, "name": "PM_COEF4", "value": "", "user_value": null, "dep": "n", "prompt": "PM coefficient 4", "cond": "PM", "defaults": [{"name": "1", "default": "1", "cond": "PM"}], "help": "See help associated with CONFIG_PM_MEMORY\n\nIgnored if CONFIG_PM_MEMORY <= 4"}, {"type": 27, "name": "PM_COEF5", "value": "", "user_value": null, "dep": "n", "prompt": "PM coefficient 5", "cond": "PM", "defaults": [{"name": "1", "default": "1", "cond": "PM"}], "help": "See help associated with CONFIG_PM_MEMORY\n\nIgnored if CONFIG_PM_MEMORY <= 5"}, {"type": 27, "name": "PM_IDLEENTER_THRESH", "value": "", "user_value": null, "dep": "n", "prompt": "PM IDLE enter threshold", "cond": "PM", "defaults": [{"name": "1", "default": "1", "cond": "PM"}], "help": "State changes then occur when the weight activity account crosses\nthreshold values for certain periods of time (time slice count).\n\n        CONFIG_PM_xxxENTER_THRESH is the threshold value for entering state xxx.\n        CONFIG_PM_xxxENTER_COUNT is the count for entering state xxx.\n\nResuming to normal state, on the other hand, is usually immediate and\ncontrolled by wakeup conditions established by the platform.  The PM\n\nDefault: <=1: Essentially no activity"}, {"type": 27, "name": "PM_IDLEEXIT_THRESH", "value": "", "user_value": null, "dep": "n", "prompt": "PM IDLE exit threshold", "cond": "PM", "defaults": [{"name": "2", "default": "2", "cond": "PM"}], "help": "State changes then occur when the weight activity account crosses\nthreshold values for certain periods of time (time slice count).\n\n        CONFIG_PM_xxxENTER_THRESH is the threshold value for entering state xxx.\n        CONFIG_PM_xxxENTER_COUNT is the count for entering state xxx.\n\nResuming to normal state, on the other hand, is usually immediate and\ncontrolled by wakeup conditions established by the platform.  The PM\n\nDefault: >=2: Active"}, {"type": 27, "name": "PM_IDLEENTER_COUNT", "value": "", "user_value": null, "dep": "n", "prompt": "PM IDLE enter count", "cond": "PM", "defaults": [{"name": "30", "default": "30", "cond": "PM"}], "help": "State changes then occur when the weight activity account crosses\nthreshold values for certain periods of time (time slice count).\n\n        CONFIG_PM_xxxENTER_THRESH is the threshold value for entering state xxx.\n        CONFIG_PM_xxxENTER_COUNT is the count for entering state xxx.\n\nResuming to normal state, on the other hand, is usually immediate and\ncontrolled by wakeup conditions established by the platform.  The PM\n\nDefault: Thirty IDLE slices to enter IDLE mode from normal"}, {"type": 27, "name": "PM_STANDBYENTER_THRESH", "value": "", "user_value": null, "dep": "n", "prompt": "PM STANDBY enter threshold", "cond": "PM", "defaults": [{"name": "1", "default": "1", "cond": "PM"}], "help": "State changes then occur when the weight activity account crosses\nthreshold values for certain periods of time (time slice count).\n\n        CONFIG_PM_xxxENTER_THRESH is the threshold value for entering state xxx.\n        CONFIG_PM_xxxENTER_COUNT is the count for entering state xxx.\n\nResuming to normal state, on the other hand, is usually immediate and\ncontrolled by wakeup conditions established by the platform.  The PM\n\nDefault: <=1: Essentially no activity"}, {"type": 27, "name": "PM_STANDBYEXIT_THRESH", "value": "", "user_value": null, "dep": "n", "prompt": "PM STANDBY exit threshold", "cond": "PM", "defaults": [{"name": "2", "default": "2", "cond": "PM"}], "help": "State changes then occur when the weight activity account crosses\nthreshold values for certain periods of time (time slice count).\n\n        CONFIG_PM_xxxENTER_THRESH is the threshold value for entering state xxx.\n        CONFIG_PM_xxxENTER_COUNT is the count for entering state xxx.\n\nResuming to normal state, on the other hand, is usually immediate and\ncontrolled by wakeup conditions established by the platform.  The PM\n\nDefault: >=2: Active"}, {"type": 27, "name": "PM_STANDBYENTER_COUNT", "value": "", "user_value": null, "dep": "n", "prompt": "PM STANDBY enter count", "cond": "PM", "defaults": [{"name": "50", "default": "50", "cond": "PM"}], "help": "State changes then occur when the weight activity account crosses\nthreshold values for certain periods of time (time slice count).\n\n        CONFIG_PM_xxxENTER_THRESH is the threshold value for entering state xxx.\n        CONFIG_PM_xxxENTER_COUNT is the count for entering state xxx.\n\nResuming to normal state, on the other hand, is usually immediate and\ncontrolled by wakeup conditions established by the platform.  The PM\n\nDefault: Fifty IDLE slices to enter STANDBY mode from IDLE"}, {"type": 27, "name": "PM_SLEEPENTER_THRESH", "value": "", "user_value": null, "dep": "n", "prompt": "PM SLEEP enter threshold", "cond": "PM", "defaults": [{"name": "1", "default": "1", "cond": "PM"}], "help": "State changes then occur when the weight activity account crosses\nthreshold values for certain periods of time (time slice count).\n\n        CONFIG_PM_xxxENTER_THRESH is the threshold value for entering state xxx.\n        CONFIG_PM_xxxENTER_COUNT is the count for entering state xxx.\n\nResuming to normal state, on the other hand, is usually immediate and\ncontrolled by wakeup conditions established by the platform.  The PM\n\nDefault: <=1: Essentially no activity"}, {"type": 27, "name": "PM_SLEEPEXIT_THRESH", "value": "", "user_value": null, "dep": "n", "prompt": "PM SLEEP exit threshold", "cond": "PM", "defaults": [{"name": "2", "default": "2", "cond": "PM"}], "help": "State changes then occur when the weight activity account crosses\nthreshold values for certain periods of time (time slice count).\n\n        CONFIG_PM_xxxENTER_THRESH is the threshold value for entering state xxx.\n        CONFIG_PM_xxxENTER_COUNT is the count for entering state xxx.\n\nResuming to normal state, on the other hand, is usually immediate and\ncontrolled by wakeup conditions established by the platform.  The PM\n\nDefault: >=2: Active"}, {"type": 27, "name": "PM_SLEEPENTER_COUNT", "value": "", "user_value": null, "dep": "n", "prompt": "PM SLEEP enter count", "cond": "PM", "defaults": [{"name": "70", "default": "70", "cond": "PM"}], "help": "State changes then occur when the weight activity account crosses\nthreshold values for certain periods of time (time slice count).\n\n        CONFIG_PM_xxxENTER_THRESH is the threshold value for entering state xxx.\n        CONFIG_PM_xxxENTER_COUNT is the count for entering state xxx.\n\nResuming to normal state, on the other hand, is usually immediate and\ncontrolled by wakeup conditions established by the platform.  The PM\n\nDefault: Fifty IDLE slices to enter SLEEP mode from STANDBY"}]}, {"type": 3, "name": "DRIVERS_SMPS", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "Switched-Mode Power Supply (SMPS)", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enables building of an SMPS upper half driver.", "children": [{"type": 3, "name": "SMPS_HAVE_OUTPUT_VOLTAGE", "value": "n", "user_value": null, "dep": "n", "prompt": "Have Output Voltage", "cond": "DRIVERS_SMPS", "defaults": [{"name": "n", "default": "n", "cond": "DRIVERS_SMPS"}]}, {"type": 3, "name": "SMPS_HAVE_OUTPUT_CURRENT", "value": "n", "user_value": null, "dep": "n", "prompt": "Have Output Current", "cond": "DRIVERS_SMPS", "defaults": [{"name": "n", "default": "n", "cond": "DRIVERS_SMPS"}]}, {"type": 3, "name": "SMPS_HAVE_OUTPUT_POWER", "value": "n", "user_value": null, "dep": "n", "prompt": "Have Output Power", "cond": "DRIVERS_SMPS", "defaults": [{"name": "n", "default": "n", "cond": "DRIVERS_SMPS"}]}, {"type": 3, "name": "SMPS_HAVE_INPUT_VOLTAGE", "value": "n", "user_value": null, "dep": "n", "prompt": "Have Input Voltage", "cond": "DRIVERS_SMPS", "defaults": [{"name": "n", "default": "n", "cond": "DRIVERS_SMPS"}]}, {"type": 3, "name": "SMPS_HAVE_INPUT_CURRENT", "value": "n", "user_value": null, "dep": "n", "prompt": "Have Input Current", "cond": "DRIVERS_SMPS", "defaults": [{"name": "n", "default": "n", "cond": "DRIVERS_SMPS"}]}, {"type": 3, "name": "SMPS_HAVE_INPUT_POWER", "value": "n", "user_value": null, "dep": "n", "prompt": "Have Input Power", "cond": "DRIVERS_SMPS", "defaults": [{"name": "n", "default": "n", "cond": "DRIVERS_SMPS"}]}, {"type": 3, "name": "SMPS_HAVE_EFFICIENCY", "value": "n", "user_value": null, "dep": "n", "prompt": "Have Power Efficiency", "cond": "DRIVERS_SMPS", "defaults": [{"name": "n", "default": "n", "cond": "DRIVERS_SMPS"}]}]}, {"type": 3, "name": "POWER", "value": "y", "user_value": 2, "menuconfig": true, "dep": "y", "prompt": "Power Management Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enable building of power-related devices (battery monitors, chargers,\netc).", "children": [{"type": 3, "name": "BATTERY_CHARGER", "value": "y", "user_value": 2, "dep": "y", "prompt": "Battery Charger support", "cond": "POWER", "defaults": [{"name": "n", "default": "n", "cond": "POWER"}], "children": [{"type": 3, "name": "BQ2425X", "value": "n", "user_value": 0, "dep": "y", "prompt": "BQ2425X Battery charger support", "cond": "BATTERY_CHARGER && POWER", "defaults": [{"name": "n", "default": "n", "cond": "BATTERY_CHARGER && POWER"}], "selects": [{"symbol": "I2C", "cond": "BATTERY_CHARGER && POWER"}, {"symbol": "I2C_BQ2425X", "cond": "BATTERY_CHARGER && POWER"}], "help": "The BQ24250/BQ24251 are battery charger for lithium-ion batteries."}, {"type": 3, "name": "BQ2429X", "value": "n", "user_value": 0, "dep": "y", "prompt": "BQ2429X Battery charger support", "cond": "BATTERY_CHARGER && POWER", "defaults": [{"name": "n", "default": "n", "cond": "BATTERY_CHARGER && POWER"}], "selects": [{"symbol": "I2C", "cond": "BATTERY_CHARGER && POWER"}, {"symbol": "I2C_BQ2429X", "cond": "BATTERY_CHARGER && POWER"}], "help": "The BQ24296/BQ24297/BQ24296M are battery charger for lithium-ion batteries.", "children": [{"type": 3, "name": "DEBUG_BQ2429X", "value": "n", "user_value": null, "dep": "n", "prompt": "BQ2429X Debug Features", "cond": "BQ2429X && POWER", "defaults": [{"name": "n", "default": "n", "cond": "BQ2429X && POWER"}], "help": "Enable BQ2429X battery management debug features."}]}]}, {"type": 3, "name": "BATTERY_GAUGE", "value": "y", "user_value": 2, "dep": "y", "prompt": "Battery Fuel Gauge support", "cond": "POWER", "defaults": [{"name": "n", "default": "n", "cond": "POWER"}], "children": [{"type": 3, "name": "MAX1704X", "value": "n", "user_value": 0, "dep": "y", "prompt": "MAX1704X Battery fuel gauge support", "cond": "BATTERY_GAUGE && POWER", "defaults": [{"name": "n", "default": "n", "cond": "BATTERY_GAUGE && POWER"}], "selects": [{"symbol": "I2C", "cond": "BATTERY_GAUGE && POWER"}, {"symbol": "I2C_MAX1704X", "cond": "BATTERY_GAUGE && POWER"}], "help": "The MAX17040/MAX17041 are ultra-compact, low-cost, host-side fuel-gauge\nsystems for lithium-ion (Li+) batteries in handheld and portable equipment.\nThe MAX17040 is configured to operate with a single lithium cell and the\nMAX17041 is configured for a dual-cell 2S pack."}]}, {"type": 3, "name": "I2C_BQ2425X", "value": "n", "user_value": 0, "rev_dep": "BQ2425X && BATTERY_CHARGER && POWER", "dep": "y", "defaults": [{"name": "y", "default": "y", "cond": "BQ2425X && POWER"}]}, {"type": 3, "name": "I2C_BQ2429X", "value": "n", "user_value": 0, "rev_dep": "BQ2429X && BATTERY_CHARGER && POWER", "dep": "y", "defaults": [{"name": "y", "default": "y", "cond": "BQ2429X && POWER"}]}, {"type": 3, "name": "I2C_MAX1704X", "value": "n", "user_value": 0, "rev_dep": "MAX1704X && BATTERY_GAUGE && POWER", "dep": "y", "defaults": [{"name": "y", "default": "y", "cond": "MAX1704X && POWER"}]}]}, {"type": 3, "name": "SENSORS", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "Sensor Device Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Drivers for various sensors", "children": [{"type": 3, "name": "SENSORS_AS5048B", "value": "n", "user_value": null, "dep": "n", "prompt": "AMS AS5048B Magnetic Rotary Encoder support", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "I2C", "cond": "SENSORS"}, {"symbol": "QENCODER", "cond": "SENSORS"}], "help": "Enable driver support for the AMS AS5048B magnetic rotary encoder."}, {"type": 3, "name": "SENSORS_BH1750FVI", "value": "n", "user_value": null, "dep": "n", "prompt": "Rohm BH1750FVI Ambient Light Sensor support", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "I2C", "cond": "SENSORS"}], "help": "Enable driver support for the Rohm BH1750FVI light sensor.", "children": [{"type": 27, "name": "BH1750FVI_I2C_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "BH1750FVI I2C frequency", "cond": "SENSORS_BH1750FVI && SENSORS", "defaults": [{"name": "400000", "default": "400000", "cond": "SENSORS_BH1750FVI && SENSORS"}]}]}, {"type": 3, "name": "SENSORS_BMG160", "value": "n", "user_value": null, "dep": "n", "prompt": "Bosch BMG160 Gyroscope Sensor support", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "SPI", "cond": "SENSORS"}], "help": "Enable driver support for the Bosch BMG160 gyroscope sensor."}, {"type": 3, "name": "SENSORS_BMP180", "value": "n", "user_value": null, "dep": "n", "prompt": "Bosch BMP180 Barometer Sensor support", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "I2C", "cond": "SENSORS"}], "help": "Enable driver support for the Bosch BMP180 barometer sensor."}, {"type": 3, "name": "SENSORS_HCSR04", "value": "n", "user_value": null, "dep": "n", "prompt": "HC-SR04 Distance Measurement Sensor", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "help": "Enable driver support for the HC-SR04 Distance Sensor.", "children": [{"type": 3, "name": "HCSR04_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Debug support for the HC-SR04", "cond": "SENSORS_HCSR04 && SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS_HCSR04 && SENSORS"}], "help": "Enables debug features for the HC-SR04"}, {"type": 27, "name": "HCSR04_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of waiters to poll", "cond": "SENSORS_HCSR04 && SENSORS", "defaults": [{"name": "1", "default": "1", "cond": "SENSORS_HCSR04 && SENSORS"}], "help": "Number of waiters to poll"}]}, {"type": 3, "name": "SENSORS_HTS221", "value": "n", "user_value": null, "dep": "n", "prompt": "STMicro HTS221 humidity sensor", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "I2C", "cond": "SENSORS"}], "help": "Enable driver support for the STMicro HTS221 humidity sensor.", "children": [{"type": 27, "name": "HTS221_I2C_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "HTS221 I2C frequency", "cond": "SENSORS_HTS221 && SENSORS", "defaults": [{"name": "400000", "default": "400000", "cond": "SENSORS_HTS221 && SENSORS"}], "ranges": [{"min": "1", "max": "400000", "cond": "SENSORS_HTS221 && SENSORS"}]}, {"type": 3, "name": "HTS221_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Debug support for the HTS221", "cond": "SENSORS_HTS221 && SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS_HTS221 && SENSORS"}], "help": "Enables debug features for the HTS221"}, {"type": 27, "name": "HTS221_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of waiters to poll", "cond": "SENSORS_HTS221 && SENSORS", "defaults": [{"name": "1", "default": "1", "cond": "SENSORS_HTS221 && SENSORS"}], "help": "Number of waiters to poll"}]}, {"type": 3, "name": "SENSORS_L3GD20", "value": "n", "user_value": null, "dep": "n", "prompt": "STMicro L3GD20 Gyroscope Sensor support", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "SPI", "cond": "SENSORS"}], "help": "Enable driver support for the STMicro L3GD20 gyroscope sensor."}, {"type": 3, "name": "SENSOR_KXTJ9", "value": "n", "user_value": null, "dep": "n", "prompt": "Kionix KXTJ9 Accelerometer support", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "I2C", "cond": "SENSORS"}]}, {"type": 27, "name": "KXTJ9_I2C_BUS_SPEED", "value": "", "user_value": null, "dep": "n", "prompt": "Kionix KXTJ9 Bus Speed in Hz", "cond": "SENSORS_KXTJ9 && SENSORS", "defaults": [{"name": "400000", "default": "400000", "cond": "SENSORS_KXTJ9 && SENSORS"}]}, {"type": 3, "name": "SENSORS_LIS2DH", "value": "n", "user_value": null, "dep": "n", "prompt": "STMicro LIS2DH device support", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "I2C", "cond": "SENSORS"}], "help": "Enable driver support for the STMicro LIS2DH accelerometer", "children": [{"type": 27, "name": "LIS2DH_I2C_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "LIS2DH I2C frequency", "cond": "SENSORS_LIS2DH && SENSORS", "defaults": [{"name": "400000", "default": "400000", "cond": "SENSORS_LIS2DH && SENSORS"}], "ranges": [{"min": "1", "max": "400000", "cond": "SENSORS_LIS2DH && SENSORS"}]}, {"type": 3, "name": "LIS2DH_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Debug support for the LIS2DH", "cond": "SENSORS_LIS2DH && SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS_LIS2DH && SENSORS"}], "help": "Enables debug features for the LIS2DH"}, {"type": 27, "name": "LIS2DH_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of waiters to poll", "cond": "SENSORS_LIS2DH && SENSORS", "defaults": [{"name": "2", "default": "2", "cond": "SENSORS_LIS2DH && SENSORS"}], "help": "Maximum number of threads that can be waiting on poll()"}, {"type": 3, "name": "LIS2DH_DRIVER_SELFTEST", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable selftest in LIS2DH driver", "cond": "SENSORS_LIS2DH && SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS_LIS2DH && SENSORS"}], "help": "Enable selftest in LIS2DH driver"}]}, {"type": 3, "name": "LIS3DSH", "value": "n", "user_value": null, "dep": "n", "prompt": "STMicro LIS3DSH 3-Axis accelerometer support", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "SPI", "cond": "SENSORS"}], "help": "Enable driver support for the STMicro LIS3DSH 3-Axis accelerometer."}, {"type": 3, "name": "LIS331DL", "value": "n", "user_value": null, "dep": "n", "prompt": "STMicro LIS331DL device support", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "I2C", "cond": "SENSORS"}], "children": [{"type": 27, "name": "LIS331DL_I2C_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "LIS331DL I2C frequency", "cond": "LIS331DL && SENSORS", "defaults": [{"name": "100000", "default": "100000", "cond": "LIS331DL && SENSORS"}], "ranges": [{"min": "1", "max": "100000", "cond": "LIS331DL && SENSORS"}]}]}, {"type": 3, "name": "SENSORS_LSM9DS1", "value": "n", "user_value": null, "dep": "n", "prompt": "STMicro LSM9DS1 support", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "I2C", "cond": "SENSORS"}], "help": "Enable driver support for the STMicro LSM9DS1."}, {"type": 27, "name": "LSM9DS1_I2C_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "LSM9DS1 I2C frequency", "cond": "SN_LSM9DS1 && SENSORS", "defaults": [{"name": "400000", "default": "400000", "cond": "SN_LSM9DS1 && SENSORS"}], "ranges": [{"min": "1", "max": "400000", "cond": "SN_LSM9DS1 && SENSORS"}]}, {"type": 3, "name": "SENSORS_LPS25H", "value": "n", "user_value": null, "dep": "n", "prompt": "STMicro LPS25H pressure sensor", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "I2C", "cond": "SENSORS"}], "help": "Enable driver support for the STMicro LPS25H barometer sensor.", "children": [{"type": 27, "name": "LPS25H_I2C_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "LPS25H I2C frequency", "cond": "SENSORS_LPS25H && SENSORS", "defaults": [{"name": "400000", "default": "400000", "cond": "SENSORS_LPS25H && SENSORS"}], "ranges": [{"min": "1", "max": "400000", "cond": "SENSORS_LPS25H && SENSORS"}]}, {"type": 3, "name": "DEBUG_LPS25H", "value": "n", "user_value": null, "dep": "n", "prompt": "Debug support for the LPS25H", "cond": "SENSORS_LPS25H && SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS_LPS25H && SENSORS"}], "help": "Enables debug features for the LPS25H"}]}, {"type": 3, "name": "SENSORS_LTC4151", "value": "n", "user_value": null, "dep": "n", "prompt": "LTC4151 current and voltage monitor", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "I2C", "cond": "SENSORS"}], "help": "Enable driver support for the LinearTechnology LTC4151 current and voltage monitor.", "children": [{"type": 27, "name": "LTC4151_I2C_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "LTC4151 I2C frequency", "cond": "SENSORS_LTC4151 && SENSORS", "defaults": [{"name": "400000", "default": "400000", "cond": "SENSORS_LTC4151 && SENSORS"}]}]}, {"type": 3, "name": "SENSORS_MB7040", "value": "n", "user_value": null, "dep": "n", "prompt": "MaxBotix MB7040 Sonar support", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "I2C", "cond": "SENSORS"}], "help": "Enable driver support for the MaxBotix MB7040 sonar.", "children": [{"type": 27, "name": "MB7040_I2C_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "MB7040 I2C frequency", "cond": "SENSORS_MB7040 && SENSORS", "defaults": [{"name": "400000", "default": "400000", "cond": "SENSORS_MB7040 && SENSORS"}], "ranges": [{"min": "1", "max": "400000", "cond": "SENSORS_MB7040 && SENSORS"}]}]}, {"type": 3, "name": "SENSORS_MLX90393", "value": "n", "user_value": null, "dep": "n", "prompt": "MLX90393 3-Axis Magnetometer", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "SPI", "cond": "SENSORS"}], "help": "Enable driver support for the Melex MLX90393 3-Axis magnetometer."}, {"type": 3, "name": "SENSORS_MCP9844", "value": "n", "user_value": null, "dep": "n", "prompt": "MCP9844 Temperature Sensor", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "I2C", "cond": "SENSORS"}], "help": "Enable driver support for the MCP9844 I2C Temperature sensor.", "children": [{"type": 27, "name": "MCP9844_I2C_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "MCP9844 I2C frequency", "cond": "SENSORS_MCP9844 && SENSORS", "defaults": [{"name": "400000", "default": "400000", "cond": "SENSORS_MCP9844 && SENSORS"}], "ranges": [{"min": "1", "max": "400000", "cond": "SENSORS_MCP9844 && SENSORS"}]}]}, {"type": 3, "name": "SENSORS_MS58XX", "value": "n", "user_value": null, "dep": "n", "prompt": "MEAS MS58XX Altimeter support", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "I2C", "cond": "SENSORS"}], "help": "Enable driver support for MEAS MS58XX altimeters.", "children": [{"type": 27, "name": "MS58XX_I2C_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "MS58XX I2C frequency", "cond": "SENSORS_MS58XX && SENSORS", "defaults": [{"name": "400000", "default": "400000", "cond": "SENSORS_MS58XX && SENSORS"}], "ranges": [{"min": "1", "max": "400000", "cond": "SENSORS_MS58XX && SENSORS"}]}, {"type": 27, "name": "MS58XX_VDD", "value": "", "user_value": null, "dep": "n", "prompt": "MEAS MS58XX VDD", "cond": "SENSORS_MS58XX && SENSORS", "defaults": [{"name": "30", "default": "30", "cond": "SENSORS_MS58XX && SENSORS"}]}]}, {"type": 3, "name": "SENSORS_MPL115A", "value": "n", "user_value": null, "dep": "n", "prompt": "Freescale MPL115A Barometer Sensor support", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "SPI", "cond": "SENSORS"}], "help": "Enable driver support for the Freescale MPL115A barometer sensor.", "children": [{"type": 3, "name": "MPL115A_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Debug support for the MPL115A", "cond": "SENSORS_MPL115A && SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS_MPL115A && SENSORS"}], "help": "Enables register level debug features for the MPL115A"}]}, {"type": 3, "name": "SENSORS_ADXL345", "value": "n", "user_value": null, "dep": "n", "prompt": "AnalogDevices ADXL345 Driver", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "help": "Enables support for the ADXL345 driver", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "ADXL345 Interface", "cond": "SENSORS_ADXL345 && SENSORS", "defaults": [{"name": "ADXL345_SPI", "default": "n", "cond": "SENSORS_ADXL345 && SENSORS"}], "children": [{"type": 3, "name": "ADXL345_SPI", "value": "n", "user_value": null, "dep": "n", "prompt": "ADXL345 SPI Interface", "cond": "y", "selects": [{"symbol": "SPI", "cond": "y"}], "help": "Enables support for the SPI interface."}, {"type": 3, "name": "ADXL345_I2C", "value": "n", "user_value": null, "dep": "n", "prompt": "ADXL345 I2C Interface", "cond": "y", "selects": [{"symbol": "I2C", "cond": "y"}], "help": "Enables support for the I2C interface"}]}, {"type": 3, "name": "ADXL345_ACTIVELOW", "value": "n", "user_value": null, "dep": "n", "prompt": "Active Low Interrupt", "cond": "SENSORS_ADXL345 && SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS_ADXL345 && SENSORS"}], "help": "The ADXL345 interrupt will be inverted. Instead starting low and going\nhigh, it will start high and will go low when an interrupt is fired.\nDefault:  Active high/rising edge."}, {"type": 3, "name": "ADXL345_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Register-Level ADXL345 Debug", "cond": "DEBUG_FEATURES && SENSORS_ADXL345 && SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && SENSORS_ADXL345 && SENSORS"}], "help": "Enable very low register-level debug output."}]}, {"type": 3, "name": "SENSORS_MAX31855", "value": "n", "user_value": null, "dep": "n", "prompt": "Maxim MAX31855 Driver", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "SPI", "cond": "SENSORS"}], "help": "Enables support for the MAX31855 driver"}, {"type": 3, "name": "SENSORS_MAX6675", "value": "n", "user_value": null, "dep": "n", "prompt": "Maxim MAX6675 Driver", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "SPI", "cond": "SENSORS"}], "help": "Enables support for the MAX6675 driver"}, {"type": 3, "name": "SENSORS_LIS3MDL", "value": "n", "user_value": null, "dep": "n", "prompt": "STMicro LIS3MDL 3-Axis magnetometer support", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "SPI", "cond": "SENSORS"}], "help": "Enable driver support for the STMicro LIS3MDL 3-axis magnetometer."}, {"type": 3, "name": "LM75_I2C", "value": "n", "user_value": null, "rev_dep": "SENSORS_LM75 && SENSORS", "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "LM75 && SENSORS"}]}, {"type": 3, "name": "SENSORS_LM75", "value": "n", "user_value": null, "dep": "n", "prompt": "STMicro LM-75 Temperature Sensor support", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "I2C", "cond": "SENSORS"}, {"symbol": "LM75_I2C", "cond": "SENSORS"}], "help": "Enable driver support for the STMicro LM-75 temperature sensor.\nThis should also work with compatible temperature sensors such as\nthe TI TMP100/101."}, {"type": 27, "name": "LM75_I2C_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "LM75 I2C frequency", "cond": "LM75_I2C && SENSORS", "defaults": [{"name": "100000", "default": "100000", "cond": "LM75_I2C && SENSORS"}], "ranges": [{"min": "1", "max": "100000", "cond": "LM75_I2C && SENSORS"}]}, {"type": 3, "name": "SENSORS_LM92", "value": "n", "user_value": null, "dep": "n", "prompt": "TI LM92 Temperature Sensor support", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "I2C", "cond": "SENSORS"}], "help": "Enable driver support for the TI LM92 Temperature Sensor."}, {"type": 27, "name": "LM92_I2C_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "LM92 I2C frequency", "cond": "LM92 && SENSORS", "defaults": [{"name": "400000", "default": "400000", "cond": "LM92 && SENSORS"}], "ranges": [{"min": "1", "max": "400000", "cond": "LM92 && SENSORS"}]}, {"type": 3, "name": "SENSORS_QENCODER", "value": "n", "user_value": null, "dep": "n", "prompt": "Qencoder", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}]}, {"type": 3, "name": "SENSORS_VEML6070", "value": "n", "user_value": null, "dep": "n", "prompt": "Vishay VEML6070 UV-A Light Sensor support", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "I2C", "cond": "SENSORS"}], "help": "Enable driver support for the Vishay VEML6070 UV-A light sensor.", "children": [{"type": 27, "name": "VEML6070_I2C_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "VEML6070 I2C frequency", "cond": "SENSORS_VEML6070 && SENSORS", "defaults": [{"name": "100000", "default": "100000", "cond": "SENSORS_VEML6070 && SENSORS"}]}]}, {"type": 3, "name": "SENSORS_XEN1210", "value": "n", "user_value": null, "dep": "n", "prompt": "Sensixs XEN1210 Magnetometer", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}], "selects": [{"symbol": "SPI", "cond": "SENSORS"}], "help": "Enable driver support for the Sensixs XEN1210 Magnetometer.", "children": [{"type": 3, "name": "XEN1210_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Debug support for the XEN1210", "cond": "SENSORS_XEN1210 && SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS_XEN1210 && SENSORS"}], "help": "Enables register level debug features for the XEN1210"}]}, {"type": 3, "name": "SENSORS_ZEROCROSS", "value": "n", "user_value": null, "dep": "n", "prompt": "Zero Cross Sensor", "cond": "SENSORS", "defaults": [{"name": "n", "default": "n", "cond": "SENSORS"}]}]}, {"type": 3, "name": "SERIAL", "value": "y", "user_value": 2, "menuconfig": true, "dep": "y", "prompt": "Serial Driver Support", "cond": "y", "defaults": [{"name": "y", "default": "y", "cond": "y"}], "help": "Front-end character drivers for chip-specific UARTs.  This provide\nsome TTY-like functionality and are commonly used (but not required\nfor) the NuttX system console.  See also include/nuttx/serial/serial.h", "children": [{"type": 3, "name": "DEV_LOWCONSOLE", "value": "n", "user_value": 0, "dep": "y", "prompt": "Low-level console support", "cond": "ARCH_LOWPUTC && DEV_CONSOLE && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_LOWPUTC && DEV_CONSOLE && SERIAL"}], "help": "Use the simple, low-level, write-only serial console driver (minimal support)"}, {"type": 3, "name": "SERIAL_REMOVABLE", "value": "y", "user_value": 2, "rev_dep": "(PL2303 && USBDEV) || (CDCACM && USBDEV) || (USBHOST_CDCACM && USBHOST_HAVE_ASYNCH && !USBHOST_BULK_DISABLE && !USBHOST_INT_DISABLE && USBHOST)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}]}, {"type": 3, "name": "SERIAL_CONSOLE", "value": "y", "user_value": 2, "rev_dep": "(ARCH_SIM && y) || (16550_UART0_SERIAL_CONSOLE && 16550_UART0 && y) || (16550_UART1_SERIAL_CONSOLE && 16550_UART1 && y) || (16550_UART2_SERIAL_CONSOLE && 16550_UART2 && y) || (16550_UART3_SERIAL_CONSOLE && 16550_UART3 && y) || (UART_SERIAL_CONSOLE && UART_SERIALDRIVER && y) || (UART0_SERIAL_CONSOLE && UART0_SERIALDRIVER && y) || (USART0_SERIAL_CONSOLE && USART0_SERIALDRIVER && y) || (UART1_SERIAL_CONSOLE && UART1_SERIALDRIVER && y) || (USART1_SERIAL_CONSOLE && USART1_SERIALDRIVER && y) || (UART2_SERIAL_CONSOLE && UART2_SERIALDRIVER && y) || (USART2_SERIAL_CONSOLE && USART2_SERIALDRIVER && y) || (UART3_SERIAL_CONSOLE && UART3_SERIALDRIVER && y) || (USART3_SERIAL_CONSOLE && USART3_SERIALDRIVER && y) || (UART4_SERIAL_CONSOLE && UART4_SERIALDRIVER && y) || (USART4_SERIAL_CONSOLE && USART4_SERIALDRIVER && y) || (UART5_SERIAL_CONSOLE && UART5_SERIALDRIVER && y) || (USART5_SERIAL_CONSOLE && USART5_SERIALDRIVER && y) || (UART6_SERIAL_CONSOLE && UART6_SERIALDRIVER && y) || (USART6_SERIAL_CONSOLE && USART6_SERIALDRIVER && y) || (UART7_SERIAL_CONSOLE && UART7_SERIALDRIVER && y) || (USART7_SERIAL_CONSOLE && USART7_SERIALDRIVER && y) || (UART8_SERIAL_CONSOLE && UART8_SERIALDRIVER && y) || (USART8_SERIAL_CONSOLE && USART8_SERIALDRIVER && y) || (SCI0_SERIAL_CONSOLE && SCI0_SERIALDRIVER && y) || (SCI1_SERIAL_CONSOLE && SCI1_SERIALDRIVER && y) || (OTHER_SERIAL_CONSOLE && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}]}, {"type": 3, "name": "16550_UART", "value": "n", "user_value": 0, "dep": "y", "prompt": "16550 UART Chip support", "cond": "SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "children": [{"type": 3, "name": "16550_UART0", "value": "n", "user_value": null, "dep": "n", "prompt": "16550 UART0", "cond": "16550_UART && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "16550_UART && SERIAL"}], "children": [{"type": 24, "name": "16550_UART0_BASE", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART0 base address", "cond": "16550_UART0 && 16550_UART && SERIAL"}, {"type": 27, "name": "16550_UART0_CLOCK", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART0 clock", "cond": "16550_UART0 && 16550_UART && SERIAL"}, {"type": 27, "name": "16550_UART0_IRQ", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART0 IRQ number", "cond": "16550_UART0 && 16550_UART && SERIAL"}, {"type": 27, "name": "16550_UART0_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART0 BAUD", "cond": "16550_UART0 && 16550_UART && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "16550_UART0 && 16550_UART && SERIAL"}]}, {"type": 27, "name": "16550_UART0_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART0 parity", "cond": "16550_UART0 && 16550_UART && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "16550_UART0 && 16550_UART && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "16550_UART0 && 16550_UART && SERIAL"}], "help": "16550 UART0 parity.  0=None, 1=Odd, 2=Even.  Default: None"}, {"type": 27, "name": "16550_UART0_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART0 number of bits", "cond": "16550_UART0 && 16550_UART && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "16550_UART0 && 16550_UART && SERIAL"}], "help": "16550 UART0 number of bits.  Default: 8"}, {"type": 27, "name": "16550_UART0_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART0 two stop bits", "cond": "16550_UART0 && 16550_UART && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "16550_UART0 && 16550_UART && SERIAL"}], "help": "0=1 stop bit, 1=Two stop bits.  Default: 1 stop bit"}, {"type": 27, "name": "16550_UART0_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART0 Rx buffer size", "cond": "16550_UART0 && 16550_UART && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "16550_UART0 && 16550_UART && SERIAL"}], "help": "16550 UART0 Rx buffer size.  Default: 256"}, {"type": 27, "name": "16550_UART0_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART0 Tx buffer size", "cond": "16550_UART0 && 16550_UART && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "16550_UART0 && 16550_UART && SERIAL"}], "help": "16550 UART0 Tx buffer size.  Default: 256"}, {"type": 3, "name": "16550_UART0_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "16550 UART0 RTS flow control", "cond": "16550_UART0 && 16550_UART && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "16550_UART0 && 16550_UART && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "16550_UART0 && 16550_UART && SERIAL"}], "help": "Enable 16550 UART0 RTS flow control"}, {"type": 3, "name": "16550_UART0_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "16550 UART0 CTS flow control", "cond": "16550_UART0 && 16550_UART && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "16550_UART0 && 16550_UART && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "16550_UART0 && 16550_UART && SERIAL"}], "help": "Enable 16550 UART0 CTS flow control"}]}, {"type": 3, "name": "16550_UART1", "value": "n", "user_value": null, "dep": "n", "prompt": "16550 UART1", "cond": "16550_UART && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "16550_UART && SERIAL"}], "children": [{"type": 24, "name": "16550_UART1_BASE", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART1 base address", "cond": "16550_UART1 && 16550_UART && SERIAL"}, {"type": 27, "name": "16550_UART1_CLOCK", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART1 clock", "cond": "16550_UART1 && 16550_UART && SERIAL"}, {"type": 27, "name": "16550_UART1_IRQ", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART1 IRQ number", "cond": "16550_UART1 && 16550_UART && SERIAL"}, {"type": 27, "name": "16550_UART1_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART1 BAUD", "cond": "16550_UART1 && 16550_UART && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "16550_UART1 && 16550_UART && SERIAL"}]}, {"type": 27, "name": "16550_UART1_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART1 parity", "cond": "16550_UART1 && 16550_UART && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "16550_UART1 && 16550_UART && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "16550_UART1 && 16550_UART && SERIAL"}], "help": "16550 UART1 parity.  0=None, 1=Odd, 2=Even.  Default: None"}, {"type": 27, "name": "16550_UART1_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART1 number of bits", "cond": "16550_UART1 && 16550_UART && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "16550_UART1 && 16550_UART && SERIAL"}], "help": "16550 UART1 number of bits.  Default: 8"}, {"type": 27, "name": "16550_UART1_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART1 two stop bits", "cond": "16550_UART1 && 16550_UART && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "16550_UART1 && 16550_UART && SERIAL"}], "help": "0=1 stop bit, 1=Two stop bits.  Default: 1 stop bit"}, {"type": 27, "name": "16550_UART1_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART1 Rx buffer size", "cond": "16550_UART1 && 16550_UART && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "16550_UART1 && 16550_UART && SERIAL"}], "help": "16550 UART1 Rx buffer size.  Default: 256"}, {"type": 27, "name": "16550_UART1_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART1 Tx buffer size", "cond": "16550_UART1 && 16550_UART && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "16550_UART1 && 16550_UART && SERIAL"}], "help": "16550 UART1 Tx buffer size.  Default: 256"}, {"type": 3, "name": "16550_UART1_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "16550 UART1 RTS flow control", "cond": "16550_UART1 && 16550_UART && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "16550_UART1 && 16550_UART && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "16550_UART1 && 16550_UART && SERIAL"}], "help": "Enable 16550 UART1 RTS flow control"}, {"type": 3, "name": "16550_UART1_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "16550 UART1 CTS flow control", "cond": "16550_UART1 && 16550_UART && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "16550_UART1 && 16550_UART && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "16550_UART1 && 16550_UART && SERIAL"}], "help": "Enable 16550 UART1 CTS flow control"}]}, {"type": 3, "name": "16550_UART2", "value": "n", "user_value": null, "dep": "n", "prompt": "16550 UART2", "cond": "16550_UART && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "16550_UART && SERIAL"}], "children": [{"type": 24, "name": "16550_UART2_BASE", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART2 base address", "cond": "16550_UART2 && 16550_UART && SERIAL"}, {"type": 27, "name": "16550_UART2_CLOCK", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART2 clock", "cond": "16550_UART2 && 16550_UART && SERIAL"}, {"type": 27, "name": "16550_UART2_IRQ", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART2 IRQ number", "cond": "16550_UART2 && 16550_UART && SERIAL"}, {"type": 27, "name": "16550_UART2_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART2 BAUD", "cond": "16550_UART2 && 16550_UART && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "16550_UART2 && 16550_UART && SERIAL"}]}, {"type": 27, "name": "16550_UART2_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART2 parity", "cond": "16550_UART2 && 16550_UART && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "16550_UART2 && 16550_UART && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "16550_UART2 && 16550_UART && SERIAL"}], "help": "16550 UART2 parity.  0=None, 1=Odd, 2=Even.  Default: None"}, {"type": 27, "name": "16550_UART2_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART2 number of bits", "cond": "16550_UART2 && 16550_UART && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "16550_UART2 && 16550_UART && SERIAL"}], "help": "16550 UART2 number of bits.  Default: 8"}, {"type": 27, "name": "16550_UART2_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART2 two stop bits", "cond": "16550_UART2 && 16550_UART && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "16550_UART2 && 16550_UART && SERIAL"}], "help": "0=1 stop bit, 1=Two stop bits.  Default: 1 stop bit"}, {"type": 27, "name": "16550_UART2_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART2 Rx buffer size", "cond": "16550_UART2 && 16550_UART && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "16550_UART2 && 16550_UART && SERIAL"}], "help": "16550 UART2 Rx buffer size.  Default: 256"}, {"type": 27, "name": "16550_UART2_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART2 Tx buffer size", "cond": "16550_UART2 && 16550_UART && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "16550_UART2 && 16550_UART && SERIAL"}], "help": "16550 UART2 Tx buffer size.  Default: 256"}, {"type": 3, "name": "16550_UART2_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "16550 UART2 RTS flow control", "cond": "16550_UART2 && 16550_UART && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "16550_UART2 && 16550_UART && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "16550_UART2 && 16550_UART && SERIAL"}], "help": "Enable 16550 UART2 RTS flow control"}, {"type": 3, "name": "16550_UART2_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "16550 UART2 CTS flow control", "cond": "16550_UART2 && 16550_UART && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "16550_UART2 && 16550_UART && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "16550_UART2 && 16550_UART && SERIAL"}], "help": "Enable 16550 UART2 CTS flow control"}]}, {"type": 3, "name": "16550_UART3", "value": "n", "user_value": null, "dep": "n", "prompt": "16550 UART3", "cond": "16550_UART && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "16550_UART && SERIAL"}], "children": [{"type": 24, "name": "16550_UART3_BASE", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART3 base address", "cond": "16550_UART3 && 16550_UART && SERIAL"}, {"type": 27, "name": "16550_UART3_CLOCK", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART3 clock", "cond": "16550_UART3 && 16550_UART && SERIAL"}, {"type": 27, "name": "16550_UART3_IRQ", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART3 IRQ number", "cond": "16550_UART3 && 16550_UART && SERIAL"}, {"type": 27, "name": "16550_UART3_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART3 BAUD", "cond": "16550_UART3 && 16550_UART && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "16550_UART3 && 16550_UART && SERIAL"}]}, {"type": 27, "name": "16550_UART3_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART3 parity", "cond": "16550_UART3 && 16550_UART && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "16550_UART3 && 16550_UART && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "16550_UART3 && 16550_UART && SERIAL"}], "help": "16550 UART3 parity.  0=None, 1=Odd, 2=Even.  Default: None"}, {"type": 27, "name": "16550_UART3_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART3 number of bits", "cond": "16550_UART3 && 16550_UART && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "16550_UART3 && 16550_UART && SERIAL"}], "help": "16550 UART3 number of bits.  Default: 8"}, {"type": 27, "name": "16550_UART3_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART3 two stop bits", "cond": "16550_UART3 && 16550_UART && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "16550_UART3 && 16550_UART && SERIAL"}], "help": "0=1 stop bit, 1=Two stop bits.  Default: 1 stop bit"}, {"type": 27, "name": "16550_UART3_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART3 Rx buffer size", "cond": "16550_UART3 && 16550_UART && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "16550_UART3 && 16550_UART && SERIAL"}], "help": "16550 UART3 Rx buffer size.  Default: 256"}, {"type": 27, "name": "16550_UART3_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "16550 UART3 Tx buffer size", "cond": "16550_UART3 && 16550_UART && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "16550_UART3 && 16550_UART && SERIAL"}], "help": "16550 UART3 Tx buffer size.  Default: 256"}, {"type": 3, "name": "16550_UART3_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "16550 UART3 RTS flow control", "cond": "16550_UART3 && 16550_UART && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "16550_UART3 && 16550_UART && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "16550_UART3 && 16550_UART && SERIAL"}], "help": "Enable 16550 UART3 RTS flow control"}, {"type": 3, "name": "16550_UART3_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "16550 UART3 CTS flow control", "cond": "16550_UART3 && 16550_UART && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "16550_UART3 && 16550_UART && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "16550_UART3 && 16550_UART && SERIAL"}], "help": "Enable 16550 UART3 CTS flow control"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "16550 Serial Console", "cond": "DEV_CONSOLE && 16550_UART && SERIAL", "defaults": [{"name": "16550_NO_SERIAL_CONSOLE", "default": "n", "cond": "DEV_CONSOLE && 16550_UART && SERIAL"}], "children": [{"type": 3, "name": "16550_UART0_SERIAL_CONSOLE", "value": "n", "user_value": null, "dep": "n", "prompt": "16550 UART0 serial console", "cond": "16550_UART0 && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "16550_UART0 && y"}]}, {"type": 3, "name": "16550_UART1_SERIAL_CONSOLE", "value": "n", "user_value": null, "dep": "n", "prompt": "16550 UART1 serial console", "cond": "16550_UART1 && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "16550_UART1 && y"}]}, {"type": 3, "name": "16550_UART2_SERIAL_CONSOLE", "value": "n", "user_value": null, "dep": "n", "prompt": "16550 UART2 serial console", "cond": "16550_UART2 && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "16550_UART2 && y"}]}, {"type": 3, "name": "16550_UART3_SERIAL_CONSOLE", "value": "n", "user_value": null, "dep": "n", "prompt": "16550 UART3 serial console", "cond": "16550_UART3 && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "16550_UART3 && y"}]}, {"type": 3, "name": "16550_NO_SERIAL_CONSOLE", "value": "n", "user_value": null, "dep": "n", "prompt": "No 16550 serial console", "cond": "y"}]}, {"type": 3, "name": "16550_SUPRESS_CONFIG", "value": "n", "user_value": null, "dep": "n", "prompt": "Suppress 16550 configuration", "cond": "16550_UART && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "16550_UART && SERIAL"}], "help": "This option is useful, for example, if you are using a bootloader\nthat configures the 16550_UART.  In that case, you may want to\njust leave the existing console configuration in place.  Default: n"}, {"type": 3, "name": "SERIAL_UART_ARCH_IOCTL", "value": "n", "user_value": null, "dep": "n", "prompt": "Platform has own custom IOCTL", "cond": "16550_UART && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "16550_UART && SERIAL"}]}, {"type": 27, "name": "16550_REGINCR", "value": "", "user_value": null, "dep": "n", "prompt": "Address increment between 16550 registers", "cond": "16550_UART && SERIAL", "defaults": [{"name": "1", "default": "1", "cond": "16550_UART && SERIAL"}], "help": "The address increment between 16550 registers.  Options are 1, 2, or 4.\nDefault: 1"}, {"type": 27, "name": "16550_REGWIDTH", "value": "", "user_value": null, "dep": "n", "prompt": "Bit width of 16550 registers", "cond": "16550_UART && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "16550_UART && SERIAL"}], "help": "The bit width of registers.  Options are 8, 16, or 32. Default: 8"}, {"type": 27, "name": "16550_ADDRWIDTH", "value": "", "user_value": null, "dep": "n", "prompt": "Address width of 16550 registers", "cond": "16550_UART && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "16550_UART && SERIAL"}], "help": "The bit width of registers.  Options are 8, 16, or 32. Default: 8"}]}, {"type": 3, "name": "UART_SERIALDRIVER", "value": "n", "user_value": 0, "rev_dep": "(LPC31_UART && ARCH_CHIP_LPC31XX && ARCH_ARM) || (SAM34_PICOUART && ARCH_CHIP_SAM4L && ARCH_CHIP_SAM34 && ARCH_ARM) || (ARCH_BOARD_NR5M100_NEXYS4 && ARCH_CHIP_NR5M100 && y) || (ARCH_BOARD_XTRS && ARCH_CHIP_Z80 && y) || (ARCH_BOARD_Z80SIM && ARCH_CHIP_Z80 && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "UART0_SERIALDRIVER", "value": "n", "user_value": 0, "rev_dep": "(A1X_UART0 && ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM) || (DM320_UART0 && ARCH_CHIP_DM320 && ARCH_CHIP_DM320 && ARCH_ARM) || (EFM32_UART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM) || (KINETIS_UART0 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KL_UART0 && ARCH_CHIP_KL && ARCH_ARM) || (LC823450_UART0 && ARCH_CHIP_LC823450 && ARCH_ARM) || (TIVA_UART0 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (LPC11_UART0 && ARCH_CHIP_LPC11XX && ARCH_ARM) || (LPC17_UART0 && ARCH_CHIP_LPC17XX && ARCH_ARM) || (LPC214X_UART0 && ARCH_CHIP_LPC214X && ARCH_ARM) || (LPC2378_UART0 && ARCH_CHIP_LPC2378 && ARCH_ARM) || (NUC_UART0 && ARCH_CHIP_NUC1XX && ARCH_ARM) || (SAMA5_UART0 && SAMA5_HAVE_UART0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAM34_UART0 && (ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAMV7_UART0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STR71X_UART0 && ARCH_CHIP_STR71X && ARCH_ARM) || (XMC4_USIC0_CHAN0_ISUART && y) || (M16C_UART0 && ARCH_M16C && ARCH_RENESAS) || (ESP32_UART0 && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA) || (Z16F_UART0 && ARCH_CHIP_Z16F && ARCH_Z16) || (Z8_UART0 && ARCH_CHIP_Z8 && ARCH_Z80) || (EZ80_UART0 && ARCH_CHIP_EZ80 && ARCH_Z80)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "UART1_SERIALDRIVER", "value": "y", "user_value": 2, "rev_dep": "(A1X_UART1 && ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM) || (DM320_UART1 && ARCH_CHIP_DM320 && ARCH_CHIP_DM320 && ARCH_ARM) || (EFM32_UART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM) || (IMX1_UART1 && ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM) || (IMX6_UART1 && ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM) || (KINETIS_UART1 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KL_UART1 && ARCH_CHIP_KL && ARCH_ARM) || (LC823450_UART1 && ARCH_CHIP_LC823450 && ARCH_ARM) || (TIVA_UART1 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (LPC17_UART1 && ARCH_CHIP_LPC17XX && ARCH_ARM) || (LPC214X_UART1 && ARCH_CHIP_LPC214X && ARCH_ARM) || (LPC2378_UART1 && ARCH_CHIP_LPC2378 && ARCH_ARM) || (LPC43_UART1 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (NUC_UART1 && ARCH_CHIP_NUC1XX && ARCH_ARM) || (SAMA5_UART1 && SAMA5_HAVE_UART1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_UART4 && SAMA5_HAVE_UART4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAM34_UART1 && (ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAMV7_UART1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STR71X_UART1 && ARCH_CHIP_STR71X && ARCH_ARM) || (XMC4_USIC0_CHAN1_ISUART && y) || (CXD56_UART1 && ARCH_CHIP_CXD56XX && ARCH_ARM) || (PIC32MX_UART1 && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (PIC32MZ_UART1 && ARCH_CHIP_PIC32MZ && ARCH_MIPS) || (MISOC_HAVE_UART1 && ARCH_MISOC) || (M16C_UART1 && ARCH_M16C && ARCH_RENESAS) || (NR5_HAVE_UART1 && ARCH_CHIP_NR5 && ARCH_RISCV) || (ESP32_UART1 && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA) || (Z16F_UART1 && ARCH_CHIP_Z16F && ARCH_Z16) || (Z8_UART1 && ARCH_CHIP_Z8 && ARCH_Z80) || (EZ80_UART1 && ARCH_CHIP_EZ80 && ARCH_Z80)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "UART2_SERIALDRIVER", "value": "y", "user_value": 2, "rev_dep": "(A1X_UART2 && ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM) || (IMX1_UART2 && ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM) || (IMX6_UART2 && ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM) || (KINETIS_UART2 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KL_UART2 && ARCH_CHIP_KL && ARCH_ARM) || (LC823450_UART2 && ARCH_CHIP_LC823450 && ARCH_ARM) || (TIVA_UART2 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (LPC17_UART2 && ARCH_CHIP_LPC17XX && ARCH_ARM) || (LPC2378_UART2 && ARCH_CHIP_LPC2378 && ARCH_ARM) || (NUC_UART2 && NUC_HAVE_UART2 && ARCH_CHIP_NUC1XX && ARCH_ARM) || (SAMA5_UART2 && SAMA5_HAVE_UART2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMV7_UART2 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STR71X_UART2 && ARCH_CHIP_STR71X && ARCH_ARM) || (XMC4_USIC1_CHAN0_ISUART && y) || (CXD56_UART2 && ARCH_CHIP_CXD56XX && ARCH_ARM) || (PIC32MX_UART2 && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (PIC32MZ_UART2 && ARCH_CHIP_PIC32MZ && ARCH_MIPS) || (M16C_UART2 && ARCH_M16C && ARCH_RENESAS) || (ESP32_UART2 && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA) || (EZ80_UART2 && ARCH_CHIP_EZ80 && ARCH_Z80)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "UART3_SERIALDRIVER", "value": "n", "user_value": 0, "rev_dep": "(A1X_UART3 && ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM) || (IMX1_UART3 && ARCH_CHIP_IMX1 && ARCH_CHIP_IMX1 && ARCH_ARM) || (IMX6_UART3 && ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM) || (KINETIS_UART3 && ARCH_CHIP_KINETIS && ARCH_ARM) || (TIVA_UART3 && TIVA_HAVE_UART3 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (LPC17_UART3 && ARCH_CHIP_LPC17XX && ARCH_ARM) || (LPC2378_UART3 && ARCH_CHIP_LPC2378 && ARCH_ARM) || (SAMA5_UART3 && SAMA5_HAVE_UART3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMV7_UART3 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STR71X_UART3 && ARCH_CHIP_STR71X && ARCH_ARM) || (XMC4_USIC1_CHAN1_ISUART && y) || (PIC32MX_UART3 && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (PIC32MZ_UART3 && ARCH_CHIP_PIC32MZ && ARCH_MIPS)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "UART4_SERIALDRIVER", "value": "n", "user_value": 0, "rev_dep": "(A1X_UART4 && ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM) || (IMX6_UART4 && ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM) || (KINETIS_UART4 && ARCH_CHIP_KINETIS && ARCH_ARM) || (TIVA_UART4 && TIVA_HAVE_UART4 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (LPC17_UART4 && ARCH_CHIP_LPC17XX && ARCH_ARM) || (LPC17_CAN1 && ARCH_CHIP_LPC17XX && ARCH_ARM) || (SAMV7_UART4 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STM32_UART4_SERIALDRIVER && y) || (STM32F7_UART4 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32L4_UART4 && STM32L4_HAVE_UART4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (XMC4_USIC2_CHAN0_ISUART && y) || (PIC32MX_UART4 && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (PIC32MZ_UART4 && ARCH_CHIP_PIC32MZ && ARCH_MIPS)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "UART5_SERIALDRIVER", "value": "n", "user_value": 0, "rev_dep": "(A1X_UART5 && ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM) || (IMX6_UART5 && ARCH_CHIP_IMX6 && ARCH_CHIP_IMX6 && ARCH_ARM) || (KINETIS_UART5 && KINETIS_HAVE_UART5 && ARCH_CHIP_KINETIS && ARCH_ARM) || (TIVA_UART5 && TIVA_HAVE_UART5 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (STM32_UART5_SERIALDRIVER && y) || (STM32F7_UART5 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32L4_UART5 && STM32L4_HAVE_UART5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (XMC4_USIC2_CHAN1_ISUART && y) || (PIC32MX_UART5 && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (PIC32MZ_UART5 && ARCH_CHIP_PIC32MZ && ARCH_MIPS)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "UART6_SERIALDRIVER", "value": "n", "user_value": 0, "rev_dep": "(A1X_UART6 && ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM) || (TIVA_UART6 && TIVA_HAVE_UART6 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (PIC32MX_UART6 && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (PIC32MZ_UART6 && ARCH_CHIP_PIC32MZ && ARCH_MIPS)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "UART7_SERIALDRIVER", "value": "n", "user_value": 0, "rev_dep": "(A1X_UART7 && ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM) || (TIVA_UART7 && TIVA_HAVE_UART7 && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM) || (STM32_UART7_SERIALDRIVER && y) || (STM32F7_UART7 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "UART8_SERIALDRIVER", "value": "n", "user_value": 0, "rev_dep": "(STM32_UART8_SERIALDRIVER && y) || (STM32F7_UART8 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (NUCLEO_CONSOLE_MORPHO && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "SCI0_SERIALDRIVER", "value": "n", "user_value": 0, "rev_dep": "(HCS12_SCI0 && ARCH_HSC12 && ARCH_HC) || (SH1_SCI0 && ARCH_SH1 && ARCH_RENESAS)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "SCI1_SERIALDRIVER", "value": "n", "user_value": 0, "rev_dep": "(TMS570_SCI1 && ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM) || (TMS570_SCI2 && TMS570_HAVE_SCI2 && ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM) || (HCS12_SCI1 && ARCH_HSC12 && ARCH_HC) || (SH1_SCI1 && ARCH_SH1 && ARCH_RENESAS)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "USART0_SERIALDRIVER", "value": "n", "user_value": 0, "rev_dep": "(EFM32_USART0_ISUART && y) || (LPC43_USART0 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (SAMA5_USART0 && SAMA5_HAVE_USART0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_FLEXCOM0_USART && y) || (SAMDL_SERCOM0_ISUSART && y) || (SAM34_USART0 && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAMV7_USART0 && SAMV7_HAVE_USART0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (AVR_USART0 && ARCH_CHIP_ATMEGA && ARCH_FAMILY_AVR && ARCH_AVR) || (AVR32_USART0_RS232 && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "USART1_SERIALDRIVER", "value": "n", "user_value": 0, "rev_dep": "(EFM32_USART1_ISUART && y) || (SAMA5_USART1 && SAMA5_HAVE_USART1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_FLEXCOM1_USART && y) || (SAMDL_SERCOM1_ISUSART && y) || (SAM34_USART1 && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAMV7_USART1 && SAMV7_HAVE_USART1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STM32_USART1_SERIALDRIVER && y) || (STM32F0_USART1_SERIALDRIVER && y) || (STM32F7_USART1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32L4_USART1 && STM32L4_HAVE_USART1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (AVR_USART1 && ARCH_CHIP_AT90USB && ARCH_FAMILY_AVR && ARCH_AVR) || (AVR_USART1 && ARCH_CHIP_ATMEGA && ARCH_FAMILY_AVR && ARCH_AVR) || (AVR32_USART1_RS232 && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "USART2_SERIALDRIVER", "value": "n", "user_value": 0, "rev_dep": "(EFM32_USART2_ISUART && y) || (LPC43_USART2 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (SAMA5_USART2 && SAMA5_HAVE_USART2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_FLEXCOM2_USART && y) || (SAMDL_SERCOM2_ISUSART && y) || (SAM34_USART2 && (ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4L) && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAMV7_USART2 && SAMV7_HAVE_USART2 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STM32_USART2_SERIALDRIVER && y) || (STM32F0_USART2_SERIALDRIVER && y) || (STM32F7_USART2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32L4_USART2 && STM32L4_HAVE_USART2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (AVR32_USART2_RS232 && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "USART3_SERIALDRIVER", "value": "n", "user_value": 0, "rev_dep": "(LPC43_USART3 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (SAMA5_USART3 && SAMA5_HAVE_USART3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_FLEXCOM3_SPI && y) || (SAMDL_SERCOM3_ISUSART && y) || (SAM34_USART3 && (ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4L) && ARCH_CHIP_SAM34 && ARCH_ARM) || (STM32_USART3_SERIALDRIVER && y) || (STM32F0_USART3_SERIALDRIVER && y) || (STM32F7_USART3 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32L4_USART3 && STM32L4_HAVE_USART3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (NUCLEO_CONSOLE_VIRTUAL && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "USART4_SERIALDRIVER", "value": "n", "user_value": 0, "rev_dep": "(SAMA5_USART4 && SAMA5_HAVE_USART4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_FLEXCOM4_USART && y) || (SAMDL_SERCOM4_ISUSART && y) || (STM32F0_USART4_SERIALDRIVER && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "USART5_SERIALDRIVER", "value": "n", "user_value": 0, "rev_dep": "(SAMDL_SERCOM5_ISUSART && y) || (STM32F0_USART5_SERIALDRIVER && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "USART6_SERIALDRIVER", "value": "n", "user_value": 0, "rev_dep": "(STM32_USART6_SERIALDRIVER && y) || (STM32F0_USART6_SERIALDRIVER && y) || (STM32F7_USART6 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (NUCLEO_CONSOLE_ARDUINO && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "USART7_SERIALDRIVER", "value": "n", "user_value": 0, "rev_dep": "STM32F0_USART7_SERIALDRIVER && y", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "USART8_SERIALDRIVER", "value": "n", "user_value": 0, "rev_dep": "STM32F0_USART8_SERIALDRIVER && y", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "OTHER_UART_SERIALDRIVER", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_C5471 && y) || (EFM32_LEUART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM) || (EFM32_LEUART1 && EFM32_HAVE_LEUART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM) || (KINETIS_LPUART0 && KINETIS_HAVE_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_LPUART1 && KINETIS_HAVE_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM) || (SAMA5_DBGU && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "MCU_SERIAL", "cond": "SERIAL"}]}, {"type": 3, "name": "MCU_SERIAL", "value": "y", "user_value": 2, "rev_dep": "(EFM32_LEUART && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM) || (KINETIS_UART && ARCH_CHIP_KINETIS && ARCH_ARM) || (XMC4_USCI_UART && ARCH_CHIP_XMC4 && ARCH_ARM) || (UART_SERIALDRIVER && SERIAL) || (UART0_SERIALDRIVER && SERIAL) || (UART1_SERIALDRIVER && SERIAL) || (UART2_SERIALDRIVER && SERIAL) || (UART3_SERIALDRIVER && SERIAL) || (UART4_SERIALDRIVER && SERIAL) || (UART5_SERIALDRIVER && SERIAL) || (UART6_SERIALDRIVER && SERIAL) || (UART7_SERIALDRIVER && SERIAL) || (UART8_SERIALDRIVER && SERIAL) || (SCI0_SERIALDRIVER && SERIAL) || (SCI1_SERIALDRIVER && SERIAL) || (USART0_SERIALDRIVER && SERIAL) || (USART1_SERIALDRIVER && SERIAL) || (USART2_SERIALDRIVER && SERIAL) || (USART3_SERIALDRIVER && SERIAL) || (USART4_SERIALDRIVER && SERIAL) || (USART5_SERIALDRIVER && SERIAL) || (USART6_SERIALDRIVER && SERIAL) || (USART7_SERIALDRIVER && SERIAL) || (USART8_SERIALDRIVER && SERIAL) || (OTHER_UART_SERIALDRIVER && SERIAL)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}]}, {"type": 3, "name": "STANDARD_SERIAL", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable standard \"upper-half\" serial driver", "cond": "!DEV_LOWCONSOLE && SERIAL", "defaults": [{"name": "y", "default": "y", "cond": "MCU_SERIAL && !DEV_LOWCONSOLE && SERIAL"}, {"name": "n", "default": "n", "cond": "!MCU_SERIAL && !DEV_LOWCONSOLE && SERIAL"}], "help": "Enable the standard, upper-half serial driver used by most MCU serial peripherals.", "children": [{"type": 27, "name": "SERIAL_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of poll threads", "cond": "!DISABLE_POLL && STANDARD_SERIAL && SERIAL", "defaults": [{"name": "2", "default": "2", "cond": "!DISABLE_POLL && STANDARD_SERIAL && SERIAL"}], "help": "Maximum number of threads than can be waiting for POLL events.\nDefault: 2"}]}, {"type": 3, "name": "SERIAL_IFLOWCONTROL", "value": "y", "user_value": 2, "rev_dep": "(LPUART0_IFLOWCONTROL && KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM) || (LPUART1_IFLOWCONTROL && KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM) || (16550_UART0_IFLOWCONTROL && 16550_UART0 && 16550_UART && SERIAL) || (16550_UART1_IFLOWCONTROL && 16550_UART1 && 16550_UART && SERIAL) || (16550_UART2_IFLOWCONTROL && 16550_UART2 && 16550_UART && SERIAL) || (16550_UART3_IFLOWCONTROL && 16550_UART3 && 16550_UART && SERIAL) || (UART_IFLOWCONTROL && UART_SERIALDRIVER && SERIAL) || (UART0_IFLOWCONTROL && UART0_SERIALDRIVER && SERIAL) || (USART0_IFLOWCONTROL && USART0_SERIALDRIVER && SERIAL) || (UART1_IFLOWCONTROL && UART1_SERIALDRIVER && SERIAL) || (USART1_IFLOWCONTROL && USART1_SERIALDRIVER && SERIAL) || (UART2_IFLOWCONTROL && UART2_SERIALDRIVER && SERIAL) || (USART2_IFLOWCONTROL && USART2_SERIALDRIVER && SERIAL) || (UART3_IFLOWCONTROL && UART3_SERIALDRIVER && SERIAL) || (USART3_IFLOWCONTROL && USART3_SERIALDRIVER && SERIAL) || (UART4_IFLOWCONTROL && UART4_SERIALDRIVER && SERIAL) || (USART4_IFLOWCONTROL && USART4_SERIALDRIVER && SERIAL) || (UART5_IFLOWCONTROL && UART5_SERIALDRIVER && SERIAL) || (USART5_IFLOWCONTROL && USART5_SERIALDRIVER && SERIAL) || (USART6_IFLOWCONTROL && USART6_SERIALDRIVER && SERIAL) || (UART6_IFLOWCONTROL && UART6_SERIALDRIVER && SERIAL) || (USART7_IFLOWCONTROL && USART7_SERIALDRIVER && SERIAL) || (UART7_IFLOWCONTROL && UART7_SERIALDRIVER && SERIAL) || (USART8_IFLOWCONTROL && USART8_SERIALDRIVER && SERIAL) || (UART8_IFLOWCONTROL && UART8_SERIALDRIVER && SERIAL) || (CDCACM_IFLOWCONTROL && EXPERIMENTAL && CDCACM && USBDEV)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}]}, {"type": 3, "name": "SERIAL_OFLOWCONTROL", "value": "y", "user_value": 2, "rev_dep": "(LPUART0_OFLOWCONTROL && KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM) || (LPUART1_OFLOWCONTROL && KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM) || (16550_UART0_OFLOWCONTROL && 16550_UART0 && 16550_UART && SERIAL) || (16550_UART1_OFLOWCONTROL && 16550_UART1 && 16550_UART && SERIAL) || (16550_UART2_OFLOWCONTROL && 16550_UART2 && 16550_UART && SERIAL) || (16550_UART3_OFLOWCONTROL && 16550_UART3 && 16550_UART && SERIAL) || (UART_OFLOWCONTROL && UART_SERIALDRIVER && SERIAL) || (UART0_OFLOWCONTROL && UART0_SERIALDRIVER && SERIAL) || (USART0_OFLOWCONTROL && USART0_SERIALDRIVER && SERIAL) || (UART1_OFLOWCONTROL && UART1_SERIALDRIVER && SERIAL) || (USART1_OFLOWCONTROL && USART1_SERIALDRIVER && SERIAL) || (UART2_OFLOWCONTROL && UART2_SERIALDRIVER && SERIAL) || (USART2_OFLOWCONTROL && USART2_SERIALDRIVER && SERIAL) || (UART3_OFLOWCONTROL && UART3_SERIALDRIVER && SERIAL) || (USART3_OFLOWCONTROL && USART3_SERIALDRIVER && SERIAL) || (UART4_OFLOWCONTROL && UART4_SERIALDRIVER && SERIAL) || (USART4_OFLOWCONTROL && USART4_SERIALDRIVER && SERIAL) || (UART5_OFLOWCONTROL && UART5_SERIALDRIVER && SERIAL) || (USART5_OFLOWCONTROL && USART5_SERIALDRIVER && SERIAL) || (USART6_OFLOWCONTROL && USART6_SERIALDRIVER && SERIAL) || (UART6_OFLOWCONTROL && UART6_SERIALDRIVER && SERIAL) || (USART7_OFLOWCONTROL && USART7_SERIALDRIVER && SERIAL) || (UART7_OFLOWCONTROL && UART7_SERIALDRIVER && SERIAL) || (USART8_OFLOWCONTROL && USART8_SERIALDRIVER && SERIAL) || (UART8_OFLOWCONTROL && UART8_SERIALDRIVER && SERIAL)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}]}, {"type": 3, "name": "SERIAL_DMA", "value": "n", "user_value": 0, "rev_dep": "(LPUART0_DMA && KINETIS_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM) || (LPUART1_DMA && KINETIS_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM) || (UART_DMA && UART_SERIALDRIVER && SERIAL) || (UART0_DMA && UART0_SERIALDRIVER && SERIAL) || (USART0_DMA && USART0_SERIALDRIVER && SERIAL) || (UART1_DMA && UART1_SERIALDRIVER && SERIAL) || (USART1_DMA && USART1_SERIALDRIVER && SERIAL) || (UART2_DMA && UART2_SERIALDRIVER && SERIAL) || (USART2_DMA && USART2_SERIALDRIVER && SERIAL) || (UART3_DMA && UART3_SERIALDRIVER && SERIAL) || (USART3_DMA && USART3_SERIALDRIVER && SERIAL) || (UART4_DMA && UART4_SERIALDRIVER && SERIAL) || (USART4_DMA && USART4_SERIALDRIVER && SERIAL) || (UART5_DMA && UART5_SERIALDRIVER && SERIAL) || (USART5_DMA && USART5_SERIALDRIVER && SERIAL) || (USART6_DMA && USART6_SERIALDRIVER && SERIAL) || (UART6_DMA && UART6_SERIALDRIVER && SERIAL) || (USART7_DMA && USART7_SERIALDRIVER && SERIAL) || (UART7_DMA && UART7_SERIALDRIVER && SERIAL) || (USART8_DMA && USART8_SERIALDRIVER && SERIAL) || (UART8_DMA && UART8_SERIALDRIVER && SERIAL)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}]}, {"type": 3, "name": "SERIAL_IFLOWCONTROL_WATERMARKS", "value": "n", "user_value": 0, "dep": "y", "prompt": "RX flow control watermarks", "cond": "SERIAL_IFLOWCONTROL && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL_IFLOWCONTROL && SERIAL"}], "help": "Call the \"lower half\" rxflowcontrol method whenever the number of\ncharacters in the serial RX buffer falls above an upper water mark\nlevel or below a lower watermark level.  The default behavior is to\ncall the rxflowcontrol method only when the RX buffer is empty or\nfull.", "children": [{"type": 27, "name": "SERIAL_IFLOWCONTROL_LOWER_WATERMARK", "value": "", "user_value": null, "dep": "n", "prompt": "RX lower Watermark (percent)", "cond": "SERIAL_IFLOWCONTROL_WATERMARKS && SERIAL", "defaults": [{"name": "10", "default": "10", "cond": "SERIAL_IFLOWCONTROL_WATERMARKS && SERIAL"}], "ranges": [{"min": "0", "max": "100", "cond": "SERIAL_IFLOWCONTROL_WATERMARKS && SERIAL"}], "help": "Call the rxflowcontrol method then there are this amount (or or less)\ndata buffered in the serial drivers RX buffer.  This is expressed\nas a percentage of the total size of the RX buffer which may vary\nfrom instance-to-instance."}, {"type": 27, "name": "SERIAL_IFLOWCONTROL_UPPER_WATERMARK", "value": "", "user_value": null, "dep": "n", "prompt": "RX upper Watermark (percent)", "cond": "SERIAL_IFLOWCONTROL_WATERMARKS && SERIAL", "defaults": [{"name": "90", "default": "90", "cond": "SERIAL_IFLOWCONTROL_WATERMARKS && SERIAL"}], "ranges": [{"min": "0", "max": "100", "cond": "SERIAL_IFLOWCONTROL_WATERMARKS && SERIAL"}], "help": "Call the rxflowcontrol method then there are this amount (or more)\ndata buffered in the serial drivers RX buffer.  This is expressed\nas a percentage of the total size of the RX buffer which may vary\nfrom instance-to-instance."}]}, {"type": 3, "name": "SERIAL_TIOCSERGSTRUCT", "value": "n", "user_value": null, "dep": "n", "prompt": "Support TIOCSERGSTRUCT", "cond": "DEBUG_FEATURES && (MCU_SERIAL || 16550_UART) && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && (MCU_SERIAL || 16550_UART) && SERIAL"}], "help": "As a debug option, many serial bottom half drivers support the TIOCSERGSTRUCT\nthat allows you to get the internal driver data structure.  By default, this\nIOCTL is not supported in order to reduce footprint.  But if (1) the driver\nsupports the TIOCSERGSTRUCT ioctl, and (2) this option is selected, then\nsupport for the TIOCSERGSTRUCT will be enabled."}, {"type": 3, "name": "ARCH_HAVE_SERIAL_TERMIOS", "value": "y", "user_value": 2, "rev_dep": "(ARCH_CHIP_MOXART && y) || (A1X_UART0 && ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM) || (A1X_UART1 && ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM) || (A1X_UART2 && ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM) || (A1X_UART3 && ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM) || (A1X_UART4 && ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM) || (A1X_UART5 && ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM) || (A1X_UART6 && ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM) || (A1X_UART7 && ARCH_CHIP_A1X && ARCH_CHIP_A1X && ARCH_ARM) || (EFM32_USART0 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM) || (EFM32_USART1 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM) || (EFM32_USART2 && EFM32_HAVE_USART2 && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM) || (KINETIS_UART0 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_UART1 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_UART2 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_UART3 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_UART4 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_UART5 && KINETIS_HAVE_UART5 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_LPUART0 && KINETIS_HAVE_LPUART0 && ARCH_CHIP_KINETIS && ARCH_ARM) || (KINETIS_LPUART1 && KINETIS_HAVE_LPUART1 && ARCH_CHIP_KINETIS && ARCH_ARM) || (LPC17_UART0 && ARCH_CHIP_LPC17XX && ARCH_ARM) || (LPC17_UART1 && ARCH_CHIP_LPC17XX && ARCH_ARM) || (LPC17_UART2 && ARCH_CHIP_LPC17XX && ARCH_ARM) || (LPC17_UART3 && ARCH_CHIP_LPC17XX && ARCH_ARM) || (LPC17_UART4 && ARCH_CHIP_LPC17XX && ARCH_ARM) || (LPC43_USART0 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (LPC43_UART1 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (LPC43_USART2 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (LPC43_USART3 && ARCH_CHIP_LPC43XX && ARCH_ARM) || (NUC_UART0 && ARCH_CHIP_NUC1XX && ARCH_ARM) || (NUC_UART1 && ARCH_CHIP_NUC1XX && ARCH_ARM) || (NUC_UART2 && NUC_HAVE_UART2 && ARCH_CHIP_NUC1XX && ARCH_ARM) || (SAMA5_UART0 && SAMA5_HAVE_UART0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_UART1 && SAMA5_HAVE_UART1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_UART2 && SAMA5_HAVE_UART2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_UART3 && SAMA5_HAVE_UART3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_UART4 && SAMA5_HAVE_UART4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_USART0 && SAMA5_HAVE_USART0 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_USART1 && SAMA5_HAVE_USART1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_USART2 && SAMA5_HAVE_USART2 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_USART3 && SAMA5_HAVE_USART3 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_USART4 && SAMA5_HAVE_USART4 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_FLEXCOM0_USART && y) || (SAMA5_FLEXCOM1_USART && y) || (SAMA5_FLEXCOM2_USART && y) || (SAMA5_FLEXCOM3_SPI && y) || (SAMA5_FLEXCOM4_USART && y) || (SAM34_UART0 && (ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_UART1 && (ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_USART0 && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_USART1 && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_USART2 && (ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4L) && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAM34_USART3 && (ARCH_CHIP_SAM3U || ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4CM || ARCH_CHIP_SAM4L) && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAMV7_UART0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (SAMV7_UART1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (SAMV7_UART2 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (SAMV7_UART3 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (SAMV7_UART4 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (SAMV7_USART0 && SAMV7_HAVE_USART0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (SAMV7_USART1 && SAMV7_HAVE_USART1 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (SAMV7_USART2 && SAMV7_HAVE_USART2 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STM32_USART1_SERIALDRIVER && y) || (STM32_USART2_SERIALDRIVER && y) || (STM32_USART3_SERIALDRIVER && y) || (STM32_UART4_SERIALDRIVER && y) || (STM32_UART5_SERIALDRIVER && y) || (STM32_USART6_SERIALDRIVER && y) || (STM32_UART7_SERIALDRIVER && y) || (STM32_UART8_SERIALDRIVER && y) || (STM32F0_USART1_SERIALDRIVER && y) || (STM32F0_USART2_SERIALDRIVER && y) || (STM32F0_USART3_SERIALDRIVER && y) || (STM32F0_USART4_SERIALDRIVER && y) || (STM32F0_USART5_SERIALDRIVER && y) || (STM32F0_USART6_SERIALDRIVER && y) || (STM32F0_USART7_SERIALDRIVER && y) || (STM32F0_USART8_SERIALDRIVER && y) || (STM32F7_USART1 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_USART2 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_USART3 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_UART4 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_UART5 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_USART6 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_UART7 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_UART8 && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32L4_USART2 && STM32L4_HAVE_USART2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_USART3 && STM32L4_HAVE_USART3 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_UART4 && STM32L4_HAVE_UART4 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_UART5 && STM32L4_HAVE_UART5 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_LPUART1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_USART1 && STM32L4_HAVE_USART1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (TMS570_SCI1 && ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM) || (TMS570_SCI2 && TMS570_HAVE_SCI2 && ARCH_CHIP_TMS570 && ARCH_CHIP_TMS570 && ARCH_ARM) || (CXD56_UART1 && ARCH_CHIP_CXD56XX && ARCH_ARM) || (ARCH_CHIP_PIC32MX && y) || (ARCH_CHIP_PIC32MZ && y) || (PIC32MX_UART1 && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (PIC32MX_UART2 && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (PIC32MX_UART3 && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (PIC32MX_UART4 && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (PIC32MX_UART5 && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (PIC32MX_UART6 && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (PIC32MZ_UART1 && ARCH_CHIP_PIC32MZ && ARCH_MIPS) || (PIC32MZ_UART2 && ARCH_CHIP_PIC32MZ && ARCH_MIPS) || (PIC32MZ_UART3 && ARCH_CHIP_PIC32MZ && ARCH_MIPS) || (PIC32MZ_UART4 && ARCH_CHIP_PIC32MZ && ARCH_MIPS) || (PIC32MZ_UART5 && ARCH_CHIP_PIC32MZ && ARCH_MIPS) || (PIC32MZ_UART6 && ARCH_CHIP_PIC32MZ && ARCH_MIPS) || (NR5_HAVE_UART1 && ARCH_CHIP_NR5 && ARCH_RISCV) || (NR5_UART1 && ARCH_CHIP_NR5 && ARCH_RISCV) || (ESP32_UART0 && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA) || (ESP32_UART1 && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA) || (ESP32_UART2 && ARCH_CHIP_ESP32 && ARCH_CHIP_ESP32 && ARCH_XTENSA) || (PSEUDOTERM && SERIAL)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}]}, {"type": 3, "name": "SERIAL_TERMIOS", "value": "y", "user_value": 2, "dep": "y", "prompt": "Serial TERMIOS support", "cond": "ARCH_HAVE_SERIAL_TERMIOS && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_SERIAL_TERMIOS && SERIAL"}], "help": "Serial driver supports termios.h interfaces (tcsetattr, tcflush, etc.).\nIf this is not defined, then the terminal settings (baud, parity, etc).\nare not configurable at runtime; serial streams cannot be flushed, etc.."}, {"type": 4, "user_value": 2, "dep": "y", "prompt": "Serial console", "cond": "MCU_SERIAL && SERIAL", "defaults": [{"name": "NO_SERIAL_CONSOLE", "default": "n", "cond": "!OTHER_UART_SERIALDRIVER && MCU_SERIAL && SERIAL"}, {"name": "OTHER_SERIAL_CONSOLE", "default": "n", "cond": "OTHER_UART_SERIALDRIVER && MCU_SERIAL && SERIAL"}], "children": [{"type": 3, "name": "UART_SERIAL_CONSOLE", "value": "n", "user_value": 0, "dep": "n", "prompt": "UART", "cond": "UART_SERIALDRIVER && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "UART_SERIALDRIVER && y"}]}, {"type": 3, "name": "UART0_SERIAL_CONSOLE", "value": "n", "user_value": 0, "dep": "n", "prompt": "UART0", "cond": "UART0_SERIALDRIVER && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "UART0_SERIALDRIVER && y"}]}, {"type": 3, "name": "USART0_SERIAL_CONSOLE", "value": "n", "user_value": 0, "dep": "n", "prompt": "USART0", "cond": "USART0_SERIALDRIVER && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "USART0_SERIALDRIVER && y"}]}, {"type": 3, "name": "UART1_SERIAL_CONSOLE", "value": "y", "user_value": 2, "dep": "y", "prompt": "UART1", "cond": "UART1_SERIALDRIVER && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "UART1_SERIALDRIVER && y"}]}, {"type": 3, "name": "USART1_SERIAL_CONSOLE", "value": "n", "user_value": 0, "dep": "n", "prompt": "USART1", "cond": "USART1_SERIALDRIVER && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "USART1_SERIALDRIVER && y"}]}, {"type": 3, "name": "UART2_SERIAL_CONSOLE", "value": "n", "user_value": 0, "dep": "y", "prompt": "UART2", "cond": "UART2_SERIALDRIVER && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "UART2_SERIALDRIVER && y"}]}, {"type": 3, "name": "USART2_SERIAL_CONSOLE", "value": "n", "user_value": 0, "dep": "n", "prompt": "USART2", "cond": "USART2_SERIALDRIVER && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "USART2_SERIALDRIVER && y"}]}, {"type": 3, "name": "UART3_SERIAL_CONSOLE", "value": "n", "user_value": 0, "dep": "n", "prompt": "UART3", "cond": "UART3_SERIALDRIVER && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "UART3_SERIALDRIVER && y"}]}, {"type": 3, "name": "USART3_SERIAL_CONSOLE", "value": "n", "user_value": 0, "rev_dep": "NUCLEO_CONSOLE_VIRTUAL && y", "dep": "n", "prompt": "USART3", "cond": "USART3_SERIALDRIVER && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "USART3_SERIALDRIVER && y"}]}, {"type": 3, "name": "UART4_SERIAL_CONSOLE", "value": "n", "user_value": 0, "dep": "n", "prompt": "UART4", "cond": "UART4_SERIALDRIVER && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "UART4_SERIALDRIVER && y"}]}, {"type": 3, "name": "USART4_SERIAL_CONSOLE", "value": "n", "user_value": 0, "dep": "n", "prompt": "USART4", "cond": "USART4_SERIALDRIVER && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "USART4_SERIALDRIVER && y"}]}, {"type": 3, "name": "UART5_SERIAL_CONSOLE", "value": "n", "user_value": 0, "dep": "n", "prompt": "UART5", "cond": "UART5_SERIALDRIVER && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "UART5_SERIALDRIVER && y"}]}, {"type": 3, "name": "USART5_SERIAL_CONSOLE", "value": "n", "user_value": 0, "dep": "n", "prompt": "USART5", "cond": "USART5_SERIALDRIVER && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "USART5_SERIALDRIVER && y"}]}, {"type": 3, "name": "UART6_SERIAL_CONSOLE", "value": "n", "user_value": 0, "dep": "n", "prompt": "UART6", "cond": "UART6_SERIALDRIVER && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "UART6_SERIALDRIVER && y"}]}, {"type": 3, "name": "USART6_SERIAL_CONSOLE", "value": "n", "user_value": 0, "rev_dep": "NUCLEO_CONSOLE_ARDUINO && y", "dep": "n", "prompt": "USART6", "cond": "USART6_SERIALDRIVER && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "USART6_SERIALDRIVER && y"}]}, {"type": 3, "name": "UART7_SERIAL_CONSOLE", "value": "n", "user_value": 0, "dep": "n", "prompt": "UART7", "cond": "UART7_SERIALDRIVER && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "UART7_SERIALDRIVER && y"}]}, {"type": 3, "name": "USART7_SERIAL_CONSOLE", "value": "n", "user_value": 0, "dep": "n", "prompt": "USART7", "cond": "USART7_SERIALDRIVER && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "USART7_SERIALDRIVER && y"}]}, {"type": 3, "name": "UART8_SERIAL_CONSOLE", "value": "n", "user_value": 0, "rev_dep": "NUCLEO_CONSOLE_MORPHO && y", "dep": "n", "prompt": "UART8", "cond": "UART8_SERIALDRIVER && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "UART8_SERIALDRIVER && y"}]}, {"type": 3, "name": "USART8_SERIAL_CONSOLE", "value": "n", "user_value": 0, "dep": "n", "prompt": "USART8", "cond": "USART8_SERIALDRIVER && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "USART8_SERIALDRIVER && y"}]}, {"type": 3, "name": "SCI0_SERIAL_CONSOLE", "value": "n", "user_value": 0, "dep": "n", "prompt": "SCI0", "cond": "SCI0_SERIALDRIVER && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "SCI0_SERIALDRIVER && y"}]}, {"type": 3, "name": "SCI1_SERIAL_CONSOLE", "value": "n", "user_value": 0, "dep": "n", "prompt": "SCI1", "cond": "SCI1_SERIALDRIVER && y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "SCI1_SERIALDRIVER && y"}]}, {"type": 3, "name": "OTHER_SERIAL_CONSOLE", "value": "n", "user_value": 0, "rev_dep": "(LEUART0_SERIAL_CONSOLE && EFM32_LEUART0 && y) || (LEUART1_SERIAL_CONSOLE && EFM32_LEUART1 && y) || (LPUART0_SERIAL_CONSOLE && KINETIS_LPUART0 && y) || (LPUART1_SERIAL_CONSOLE && KINETIS_LPUART1 && y)", "dep": "y", "prompt": "Other serial console", "cond": "y", "selects": [{"symbol": "SERIAL_CONSOLE", "cond": "y"}]}, {"type": 3, "name": "NO_SERIAL_CONSOLE", "value": "n", "user_value": 0, "dep": "y", "prompt": "No serial console", "cond": "y"}]}, {"type": 31, "dep": "n", "prompt": "UART Configuration", "cond": "UART_SERIALDRIVER && SERIAL", "children": [{"type": 27, "name": "UART_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "UART_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "UART_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "UART_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "UART_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "UART_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "UART_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "UART_SERIALDRIVER && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "UART_SERIALDRIVER && SERIAL"}], "help": "The configured BAUD of the UART."}, {"type": 27, "name": "UART_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character size", "cond": "UART_SERIALDRIVER && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "UART_SERIALDRIVER && SERIAL"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "UART_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "UART_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "UART_SERIALDRIVER && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "UART_SERIALDRIVER && SERIAL"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "UART_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "use 2 stop bits", "cond": "UART_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "UART_SERIALDRIVER && SERIAL"}], "help": "1=Two stop bits"}, {"type": 3, "name": "UART_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "UART RTS flow control", "cond": "UART_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "UART_SERIALDRIVER && SERIAL"}], "help": "Enable UART RTS flow control"}, {"type": 3, "name": "UART_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "UART CTS flow control", "cond": "UART_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "UART_SERIALDRIVER && SERIAL"}], "help": "Enable UART CTS flow control"}, {"type": 3, "name": "UART_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "UART DMA support", "cond": "UART_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_DMA", "cond": "UART_SERIALDRIVER && SERIAL"}], "help": "Enable DMA transfers on UART"}]}, {"type": 31, "dep": "n", "prompt": "UART0 Configuration", "cond": "UART0_SERIALDRIVER && SERIAL", "children": [{"type": 27, "name": "UART0_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "UART0_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "UART0_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "UART0_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "UART0_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "UART0_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "UART0_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "UART0_SERIALDRIVER && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "UART0_SERIALDRIVER && SERIAL"}], "help": "The configured BAUD of the UART."}, {"type": 27, "name": "UART0_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character size", "cond": "UART0_SERIALDRIVER && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "UART0_SERIALDRIVER && SERIAL"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "UART0_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "UART0_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "UART0_SERIALDRIVER && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "UART0_SERIALDRIVER && SERIAL"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "UART0_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "use 2 stop bits", "cond": "UART0_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "UART0_SERIALDRIVER && SERIAL"}], "help": "1=Two stop bits"}, {"type": 3, "name": "UART0_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "UART0 RTS flow control", "cond": "UART0_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART0_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "UART0_SERIALDRIVER && SERIAL"}], "help": "Enable UART0 RTS flow control"}, {"type": 3, "name": "UART0_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "UART0 CTS flow control", "cond": "UART0_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART0_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "UART0_SERIALDRIVER && SERIAL"}], "help": "Enable UART0 CTS flow control"}, {"type": 3, "name": "UART0_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "UART0 DMA support", "cond": "UART0_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART0_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_DMA", "cond": "UART0_SERIALDRIVER && SERIAL"}], "help": "Enable DMA transfers on UART0"}]}, {"type": 31, "dep": "n", "prompt": "USART0 Configuration", "cond": "USART0_SERIALDRIVER && SERIAL", "children": [{"type": 27, "name": "USART0_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "USART0_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "USART0_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "USART0_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "USART0_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "USART0_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "USART0_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "USART0_SERIALDRIVER && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "USART0_SERIALDRIVER && SERIAL"}], "help": "The configured BAUD of the USART."}, {"type": 27, "name": "USART0_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character size", "cond": "USART0_SERIALDRIVER && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "USART0_SERIALDRIVER && SERIAL"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "USART0_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "USART0_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "USART0_SERIALDRIVER && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "USART0_SERIALDRIVER && SERIAL"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "USART0_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "use 2 stop bits", "cond": "USART0_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "USART0_SERIALDRIVER && SERIAL"}], "help": "1=Two stop bits"}, {"type": 3, "name": "USART0_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "USART0 RTS flow control", "cond": "USART0_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART0_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "USART0_SERIALDRIVER && SERIAL"}], "help": "Enable USART0 RTS flow control"}, {"type": 3, "name": "USART0_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "USART0 CTS flow control", "cond": "USART0_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART0_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "USART0_SERIALDRIVER && SERIAL"}], "help": "Enable USART0 CTS flow control"}, {"type": 3, "name": "USART0_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART0 DMA support", "cond": "USART0_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART0_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_DMA", "cond": "USART0_SERIALDRIVER && SERIAL"}], "help": "Enable DMA transfers on USART0"}]}, {"type": 31, "dep": "y", "prompt": "UART1 Configuration", "cond": "UART1_SERIALDRIVER && SERIAL", "children": [{"type": 27, "name": "UART1_RXBUFSIZE", "value": "1024", "user_value": "1024", "dep": "y", "prompt": "Receive buffer size", "cond": "UART1_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "UART1_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "UART1_TXBUFSIZE", "value": "1024", "user_value": "1024", "dep": "y", "prompt": "Transmit buffer size", "cond": "UART1_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "UART1_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "UART1_BAUD", "value": "115200", "user_value": "115200", "dep": "y", "prompt": "BAUD rate", "cond": "UART1_SERIALDRIVER && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "UART1_SERIALDRIVER && SERIAL"}], "help": "The configured BAUD of the UART."}, {"type": 27, "name": "UART1_BITS", "value": "8", "user_value": "8", "dep": "y", "prompt": "Character size", "cond": "UART1_SERIALDRIVER && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "UART1_SERIALDRIVER && SERIAL"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "UART1_PARITY", "value": "0", "user_value": "0", "dep": "y", "prompt": "Parity setting", "cond": "UART1_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "UART1_SERIALDRIVER && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "UART1_SERIALDRIVER && SERIAL"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "UART1_2STOP", "value": "0", "user_value": "0", "dep": "y", "prompt": "Uses 2 stop bits", "cond": "UART1_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "UART1_SERIALDRIVER && SERIAL"}], "help": "1=Two stop bits"}, {"type": 3, "name": "UART1_IFLOWCONTROL", "value": "n", "user_value": 0, "dep": "y", "prompt": "UART1 RTS flow control", "cond": "UART1_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART1_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "UART1_SERIALDRIVER && SERIAL"}], "help": "Enable UART1 RTS flow control"}, {"type": 3, "name": "UART1_OFLOWCONTROL", "value": "n", "user_value": 0, "dep": "y", "prompt": "UART1 CTS flow control", "cond": "UART1_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART1_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "UART1_SERIALDRIVER && SERIAL"}], "help": "Enable UART1 CTS flow control"}, {"type": 3, "name": "UART1_DMA", "value": "n", "user_value": 0, "dep": "y", "prompt": "UART1 DMA support", "cond": "UART1_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART1_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_DMA", "cond": "UART1_SERIALDRIVER && SERIAL"}], "help": "Enable DMA transfers on UART1"}]}, {"type": 31, "dep": "n", "prompt": "USART1 Configuration", "cond": "USART1_SERIALDRIVER && SERIAL", "children": [{"type": 27, "name": "USART1_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "USART1_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "USART1_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "USART1_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "USART1_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "USART1_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "USART1_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "USART1_SERIALDRIVER && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "USART1_SERIALDRIVER && SERIAL"}], "help": "The configured BAUD of the USART."}, {"type": 27, "name": "USART1_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character size", "cond": "USART1_SERIALDRIVER && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "USART1_SERIALDRIVER && SERIAL"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "USART1_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "USART1_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "USART1_SERIALDRIVER && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "USART1_SERIALDRIVER && SERIAL"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "USART1_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "Uses 2 stop bits", "cond": "USART1_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "USART1_SERIALDRIVER && SERIAL"}], "help": "1=Two stop bits"}, {"type": 3, "name": "USART1_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1 RTS flow control", "cond": "USART1_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART1_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "USART1_SERIALDRIVER && SERIAL"}], "help": "Enable USART1 RTS flow control"}, {"type": 3, "name": "USART1_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1 CTS flow control", "cond": "USART1_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART1_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "USART1_SERIALDRIVER && SERIAL"}], "help": "Enable USART1 CTS flow control"}, {"type": 3, "name": "USART1_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART1 DMA support", "cond": "USART1_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART1_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_DMA", "cond": "USART1_SERIALDRIVER && SERIAL"}], "help": "Enable DMA transfers on USART1"}]}, {"type": 31, "dep": "y", "prompt": "UART2 Configuration", "cond": "UART2_SERIALDRIVER && SERIAL", "children": [{"type": 27, "name": "UART2_RXBUFSIZE", "value": "256", "user_value": "256", "dep": "y", "prompt": "Receive buffer size", "cond": "UART2_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "UART2_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "UART2_TXBUFSIZE", "value": "256", "user_value": "256", "dep": "y", "prompt": "Transmit buffer size", "cond": "UART2_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "UART2_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "UART2_BAUD", "value": "115200", "user_value": "115200", "dep": "y", "prompt": "BAUD rate", "cond": "UART2_SERIALDRIVER && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "UART2_SERIALDRIVER && SERIAL"}], "help": "The configured BAUD of the UART."}, {"type": 27, "name": "UART2_BITS", "value": "8", "user_value": "8", "dep": "y", "prompt": "Character size", "cond": "UART2_SERIALDRIVER && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "UART2_SERIALDRIVER && SERIAL"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "UART2_PARITY", "value": "0", "user_value": "0", "dep": "y", "prompt": "Parity setting", "cond": "UART2_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "UART2_SERIALDRIVER && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "UART2_SERIALDRIVER && SERIAL"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "UART2_2STOP", "value": "0", "user_value": "0", "dep": "y", "prompt": "Uses 2 stop bits", "cond": "UART2_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "UART2_SERIALDRIVER && SERIAL"}], "help": "1=Two stop bits"}, {"type": 3, "name": "UART2_IFLOWCONTROL", "value": "y", "user_value": 2, "dep": "y", "prompt": "UART2 RTS flow control", "cond": "UART2_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART2_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "UART2_SERIALDRIVER && SERIAL"}], "help": "Enable UART2 RTS flow control"}, {"type": 3, "name": "UART2_OFLOWCONTROL", "value": "y", "user_value": 2, "dep": "y", "prompt": "UART2 CTS flow control", "cond": "UART2_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART2_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "UART2_SERIALDRIVER && SERIAL"}], "help": "Enable UART2 CTS flow control"}, {"type": 3, "name": "UART2_DMA", "value": "n", "user_value": 0, "dep": "y", "prompt": "UART2 DMA support", "cond": "UART2_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART2_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_DMA", "cond": "UART2_SERIALDRIVER && SERIAL"}], "help": "Enable DMA transfers on UART2"}]}, {"type": 31, "dep": "n", "prompt": "USART2 Configuration", "cond": "USART2_SERIALDRIVER && SERIAL", "children": [{"type": 27, "name": "USART2_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "USART2_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "USART2_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "USART2_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "USART2_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "USART2_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "USART2_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "USART2_SERIALDRIVER && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "USART2_SERIALDRIVER && SERIAL"}], "help": "The configured BAUD of the USART."}, {"type": 27, "name": "USART2_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character size", "cond": "USART2_SERIALDRIVER && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "USART2_SERIALDRIVER && SERIAL"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "USART2_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "USART2_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "USART2_SERIALDRIVER && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "USART2_SERIALDRIVER && SERIAL"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "USART2_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "Uses 2 stop bits", "cond": "USART2_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "USART2_SERIALDRIVER && SERIAL"}], "help": "1=Two stop bits"}, {"type": 3, "name": "USART2_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2 RTS flow control", "cond": "USART2_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART2_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "USART2_SERIALDRIVER && SERIAL"}], "help": "Enable USART2 RTS flow control"}, {"type": 3, "name": "USART2_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2 CTS flow control", "cond": "USART2_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART2_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "USART2_SERIALDRIVER && SERIAL"}], "help": "Enable USART2 CTS flow control"}, {"type": 3, "name": "USART2_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART2 DMA support", "cond": "USART2_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART2_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_DMA", "cond": "USART2_SERIALDRIVER && SERIAL"}], "help": "Enable DMA transfers on USART2"}]}, {"type": 31, "dep": "n", "prompt": "UART3 Configuration", "cond": "UART3_SERIALDRIVER && SERIAL", "children": [{"type": 27, "name": "UART3_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "UART3_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "UART3_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "UART3_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "UART3_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "UART3_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "UART3_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "UART3_SERIALDRIVER && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "UART3_SERIALDRIVER && SERIAL"}], "help": "The configured BAUD of the UART."}, {"type": 27, "name": "UART3_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character size", "cond": "UART3_SERIALDRIVER && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "UART3_SERIALDRIVER && SERIAL"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "UART3_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "UART3_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "UART3_SERIALDRIVER && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "UART3_SERIALDRIVER && SERIAL"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "UART3_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "Uses 2 stop bits", "cond": "UART3_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "UART3_SERIALDRIVER && SERIAL"}], "help": "1=Two stop bits"}, {"type": 3, "name": "UART3_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "UART3 RTS flow control", "cond": "UART3_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART3_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "UART3_SERIALDRIVER && SERIAL"}], "help": "Enable UART3 RTS flow control"}, {"type": 3, "name": "UART3_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "UART3 CTS flow control", "cond": "UART3_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART3_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "UART3_SERIALDRIVER && SERIAL"}], "help": "Enable UART3 CTS flow control"}, {"type": 3, "name": "UART3_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "UART3 DMA support", "cond": "UART3_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART3_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_DMA", "cond": "UART3_SERIALDRIVER && SERIAL"}], "help": "Enable DMA transfers on UART3"}]}, {"type": 31, "dep": "n", "prompt": "USART3 Configuration", "cond": "USART3_SERIALDRIVER && SERIAL", "children": [{"type": 27, "name": "USART3_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "USART3_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "USART3_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "USART3_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "USART3_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "USART3_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "USART3_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "USART3_SERIALDRIVER && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "USART3_SERIALDRIVER && SERIAL"}], "help": "The configured BAUD of the USART."}, {"type": 27, "name": "USART3_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character size", "cond": "USART3_SERIALDRIVER && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "USART3_SERIALDRIVER && SERIAL"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "USART3_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "USART3_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "USART3_SERIALDRIVER && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "USART3_SERIALDRIVER && SERIAL"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "USART3_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "Uses 2 stop bits", "cond": "USART3_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "USART3_SERIALDRIVER && SERIAL"}], "help": "1=Two stop bits"}, {"type": 3, "name": "USART3_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "USART3 RTS flow control", "cond": "USART3_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART3_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "USART3_SERIALDRIVER && SERIAL"}], "help": "Enable USART3 RTS flow control"}, {"type": 3, "name": "USART3_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "USART3 CTS flow control", "cond": "USART3_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART3_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "USART3_SERIALDRIVER && SERIAL"}], "help": "Enable USART3 CTS flow control"}, {"type": 3, "name": "USART3_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART3 DMA support", "cond": "USART3_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART3_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_DMA", "cond": "USART3_SERIALDRIVER && SERIAL"}], "help": "Enable DMA transfers on USART3"}]}, {"type": 31, "dep": "n", "prompt": "UART4 Configuration", "cond": "UART4_SERIALDRIVER && SERIAL", "children": [{"type": 27, "name": "UART4_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "UART4_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "UART4_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "UART4_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "UART4_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "UART4_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "UART4_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "UART4_SERIALDRIVER && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "UART4_SERIALDRIVER && SERIAL"}], "help": "The configured BAUD of the UART."}, {"type": 27, "name": "UART4_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character size", "cond": "UART4_SERIALDRIVER && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "UART4_SERIALDRIVER && SERIAL"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "UART4_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "UART4_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "UART4_SERIALDRIVER && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "UART4_SERIALDRIVER && SERIAL"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "UART4_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "Uses 2 stop bits", "cond": "UART4_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "UART4_SERIALDRIVER && SERIAL"}], "help": "1=Two stop bits"}, {"type": 3, "name": "UART4_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "UART4 RTS flow control", "cond": "UART4_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART4_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "UART4_SERIALDRIVER && SERIAL"}], "help": "Enable UART4 RTS flow control"}, {"type": 3, "name": "UART4_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "UART4 CTS flow control", "cond": "UART4_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART4_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "UART4_SERIALDRIVER && SERIAL"}], "help": "Enable UART4 CTS flow control"}, {"type": 3, "name": "UART4_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "UART4 DMA support", "cond": "UART4_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART4_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_DMA", "cond": "UART4_SERIALDRIVER && SERIAL"}], "help": "Enable DMA transfers on UART4"}]}, {"type": 31, "dep": "n", "prompt": "USART4 Configuration", "cond": "USART4_SERIALDRIVER && SERIAL", "children": [{"type": 27, "name": "USART4_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "USART4_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "USART4_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "USART4_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "USART4_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "USART4_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "USART4_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "USART4_SERIALDRIVER && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "USART4_SERIALDRIVER && SERIAL"}], "help": "The configured BAUD of the USART."}, {"type": 27, "name": "USART4_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character size", "cond": "USART4_SERIALDRIVER && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "USART4_SERIALDRIVER && SERIAL"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "USART4_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "USART4_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "USART4_SERIALDRIVER && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "USART4_SERIALDRIVER && SERIAL"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "USART4_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "Uses 2 stop bits", "cond": "USART4_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "USART4_SERIALDRIVER && SERIAL"}], "help": "1=Two stop bits"}, {"type": 3, "name": "USART4_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "USART4 RTS flow control", "cond": "USART4_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART4_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "USART4_SERIALDRIVER && SERIAL"}], "help": "Enable USART4 RTS flow control"}, {"type": 3, "name": "USART4_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "USART4 CTS flow control", "cond": "USART4_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART4_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "USART4_SERIALDRIVER && SERIAL"}], "help": "Enable USART4 CTS flow control"}, {"type": 3, "name": "USART4_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART4 DMA support", "cond": "USART4_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART4_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_DMA", "cond": "USART4_SERIALDRIVER && SERIAL"}], "help": "Enable DMA transfers on USART4"}]}, {"type": 31, "dep": "n", "prompt": "UART5 Configuration", "cond": "UART5_SERIALDRIVER && SERIAL", "children": [{"type": 27, "name": "UART5_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "UART5_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "UART5_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "UART5_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "UART5_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "UART5_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "UART5_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "UART5_SERIALDRIVER && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "UART5_SERIALDRIVER && SERIAL"}], "help": "The configured BAUD of the UART."}, {"type": 27, "name": "UART5_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character size", "cond": "UART5_SERIALDRIVER && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "UART5_SERIALDRIVER && SERIAL"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "UART5_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "UART5_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "UART5_SERIALDRIVER && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "UART5_SERIALDRIVER && SERIAL"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "UART5_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "Uses 2 stop bits", "cond": "UART5_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "UART5_SERIALDRIVER && SERIAL"}], "help": "1=Two stop bits"}, {"type": 3, "name": "UART5_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "UART5 RTS flow control", "cond": "UART5_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART5_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "UART5_SERIALDRIVER && SERIAL"}], "help": "Enable UART5 RTS flow control"}, {"type": 3, "name": "UART5_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "UART5 CTS flow control", "cond": "UART5_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART5_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "UART5_SERIALDRIVER && SERIAL"}], "help": "Enable UART5 CTS flow control"}, {"type": 3, "name": "UART5_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "UART5 DMA support", "cond": "UART5_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART5_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_DMA", "cond": "UART5_SERIALDRIVER && SERIAL"}], "help": "Enable DMA transfers on UART5"}]}, {"type": 31, "dep": "n", "prompt": "USART5 Configuration", "cond": "USART5_SERIALDRIVER && SERIAL", "children": [{"type": 27, "name": "USART5_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "USART5_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "USART5_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "USART5_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "USART5_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "USART5_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "USART5_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "USART5_SERIALDRIVER && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "USART5_SERIALDRIVER && SERIAL"}], "help": "The configured BAUD of the USART."}, {"type": 27, "name": "USART5_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character size", "cond": "USART5_SERIALDRIVER && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "USART5_SERIALDRIVER && SERIAL"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "USART5_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "USART5_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "USART5_SERIALDRIVER && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "USART5_SERIALDRIVER && SERIAL"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "USART5_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "Uses 2 stop bits", "cond": "USART5_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "USART5_SERIALDRIVER && SERIAL"}], "help": "1=Two stop bits"}, {"type": 3, "name": "USART5_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "USART5 RTS flow control", "cond": "USART5_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART5_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "USART5_SERIALDRIVER && SERIAL"}], "help": "Enable USART5 RTS flow control"}, {"type": 3, "name": "USART5_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "USART5 CTS flow control", "cond": "USART5_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART5_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "USART5_SERIALDRIVER && SERIAL"}], "help": "Enable USART5 CTS flow control"}, {"type": 3, "name": "USART5_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART5 DMA support", "cond": "USART5_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART5_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_DMA", "cond": "USART5_SERIALDRIVER && SERIAL"}], "help": "Enable DMA transfers on USART5"}]}, {"type": 31, "dep": "n", "prompt": "USART6 Configuration", "cond": "USART6_SERIALDRIVER && SERIAL", "children": [{"type": 27, "name": "USART6_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "USART6_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "USART6_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "USART6_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "USART6_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "USART6_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "USART6_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "USART6_SERIALDRIVER && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "USART6_SERIALDRIVER && SERIAL"}], "help": "The configured BAUD of the USART."}, {"type": 27, "name": "USART6_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character size", "cond": "USART6_SERIALDRIVER && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "USART6_SERIALDRIVER && SERIAL"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "USART6_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "USART6_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "USART6_SERIALDRIVER && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "USART6_SERIALDRIVER && SERIAL"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "USART6_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "Uses 2 stop bits", "cond": "USART6_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "USART6_SERIALDRIVER && SERIAL"}], "help": "1=Two stop bits"}, {"type": 3, "name": "USART6_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "USART6 RTS flow control", "cond": "USART6_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART6_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "USART6_SERIALDRIVER && SERIAL"}], "help": "Enable USART6 RTS flow control"}, {"type": 3, "name": "USART6_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "USART6 CTS flow control", "cond": "USART6_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART6_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "USART6_SERIALDRIVER && SERIAL"}], "help": "Enable USART6 CTS flow control"}, {"type": 3, "name": "USART6_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART6 DMA support", "cond": "USART6_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART6_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_DMA", "cond": "USART6_SERIALDRIVER && SERIAL"}], "help": "Enable DMA transfers on USART6"}]}, {"type": 31, "dep": "n", "prompt": "UART6 Configuration", "cond": "UART6_SERIALDRIVER && SERIAL", "children": [{"type": 27, "name": "UART6_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "UART6_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "UART6_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "UART6_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "UART6_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "UART6_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "UART6_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "UART6_SERIALDRIVER && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "UART6_SERIALDRIVER && SERIAL"}], "help": "The configured BAUD of the UART."}, {"type": 27, "name": "UART6_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character size", "cond": "UART6_SERIALDRIVER && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "UART6_SERIALDRIVER && SERIAL"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "UART6_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "UART6_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "UART6_SERIALDRIVER && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "UART6_SERIALDRIVER && SERIAL"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "UART6_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "Uses 2 stop bits", "cond": "UART6_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "UART6_SERIALDRIVER && SERIAL"}], "help": "1=Two stop bits"}, {"type": 3, "name": "UART6_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "UART6 RTS flow control", "cond": "UART6_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART6_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "UART6_SERIALDRIVER && SERIAL"}], "help": "Enable UART6 RTS flow control"}, {"type": 3, "name": "UART6_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "UART6 CTS flow control", "cond": "UART6_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART6_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "UART6_SERIALDRIVER && SERIAL"}], "help": "Enable UART6 CTS flow control"}, {"type": 3, "name": "UART6_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "UART6 DMA support", "cond": "UART6_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART6_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_DMA", "cond": "UART6_SERIALDRIVER && SERIAL"}], "help": "Enable DMA transfers on UART6"}]}, {"type": 31, "dep": "n", "prompt": "USART7 Configuration", "cond": "USART7_SERIALDRIVER && SERIAL", "children": [{"type": 27, "name": "USART7_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "USART7_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "USART7_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "USART7_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "USART7_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "USART7_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "USART7_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "USART7_SERIALDRIVER && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "USART7_SERIALDRIVER && SERIAL"}], "help": "The configured BAUD of the USART."}, {"type": 27, "name": "USART7_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character size", "cond": "USART7_SERIALDRIVER && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "USART7_SERIALDRIVER && SERIAL"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "USART7_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "USART7_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "USART7_SERIALDRIVER && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "USART7_SERIALDRIVER && SERIAL"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "USART7_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "Uses 2 stop bits", "cond": "USART7_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "USART7_SERIALDRIVER && SERIAL"}], "help": "1=Two stop bits"}, {"type": 3, "name": "USART7_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "USART7 RTS flow control", "cond": "USART7_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART7_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "USART7_SERIALDRIVER && SERIAL"}], "help": "Enable USART7 RTS flow control"}, {"type": 3, "name": "USART7_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "USART7 CTS flow control", "cond": "USART7_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART7_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "USART7_SERIALDRIVER && SERIAL"}], "help": "Enable USART7 CTS flow control"}, {"type": 3, "name": "USART7_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART7 DMA support", "cond": "USART7_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART7_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_DMA", "cond": "USART7_SERIALDRIVER && SERIAL"}], "help": "Enable DMA transfers on USART7"}]}, {"type": 31, "dep": "n", "prompt": "UART7 Configuration", "cond": "UART7_SERIALDRIVER && SERIAL", "children": [{"type": 27, "name": "UART7_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "UART7_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "UART7_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "UART7_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "UART7_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "UART7_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "UART7_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "UART7_SERIALDRIVER && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "UART7_SERIALDRIVER && SERIAL"}], "help": "The configured BAUD of the UART."}, {"type": 27, "name": "UART7_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character size", "cond": "UART7_SERIALDRIVER && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "UART7_SERIALDRIVER && SERIAL"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "UART7_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "UART7_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "UART7_SERIALDRIVER && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "UART7_SERIALDRIVER && SERIAL"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "UART7_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "Uses 2 stop bits", "cond": "UART7_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "UART7_SERIALDRIVER && SERIAL"}], "help": "1=Two stop bits"}, {"type": 3, "name": "UART7_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "UART7 RTS flow control", "cond": "UART7_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART7_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "UART7_SERIALDRIVER && SERIAL"}], "help": "Enable UART7 RTS flow control"}, {"type": 3, "name": "UART7_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "UART7 CTS flow control", "cond": "UART7_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART7_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "UART7_SERIALDRIVER && SERIAL"}], "help": "Enable UART7 CTS flow control"}, {"type": 3, "name": "UART7_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "UART7 DMA support", "cond": "UART7_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART7_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_DMA", "cond": "UART7_SERIALDRIVER && SERIAL"}], "help": "Enable DMA transfers on UART7"}]}, {"type": 31, "dep": "n", "prompt": "USART8 Configuration", "cond": "USART8_SERIALDRIVER && SERIAL", "children": [{"type": 27, "name": "USART8_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "USART8_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "USART8_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "USART8_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "USART8_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "USART8_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "USART8_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "USART8_SERIALDRIVER && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "USART8_SERIALDRIVER && SERIAL"}], "help": "The configured BAUD of the USART."}, {"type": 27, "name": "USART8_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character size", "cond": "USART8_SERIALDRIVER && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "USART8_SERIALDRIVER && SERIAL"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "USART8_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "USART8_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "USART8_SERIALDRIVER && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "USART8_SERIALDRIVER && SERIAL"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "USART8_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "Uses 2 stop bits", "cond": "USART8_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "USART8_SERIALDRIVER && SERIAL"}], "help": "1=Two stop bits"}, {"type": 3, "name": "USART8_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "USART8 RTS flow control", "cond": "USART8_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART8_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "USART8_SERIALDRIVER && SERIAL"}], "help": "Enable USART8 RTS flow control"}, {"type": 3, "name": "USART8_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "USART8 CTS flow control", "cond": "USART8_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART8_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "USART8_SERIALDRIVER && SERIAL"}], "help": "Enable USART8 CTS flow control"}, {"type": 3, "name": "USART8_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "USART8 DMA support", "cond": "USART8_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "USART8_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_DMA", "cond": "USART8_SERIALDRIVER && SERIAL"}], "help": "Enable DMA transfers on USART8"}]}, {"type": 31, "dep": "n", "prompt": "UART8 Configuration", "cond": "UART8_SERIALDRIVER && SERIAL", "children": [{"type": 27, "name": "UART8_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "UART8_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "UART8_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "UART8_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "UART8_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "UART8_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "UART8_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "BAUD rate", "cond": "UART8_SERIALDRIVER && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "UART8_SERIALDRIVER && SERIAL"}], "help": "The configured BAUD of the UART."}, {"type": 27, "name": "UART8_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Character size", "cond": "UART8_SERIALDRIVER && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "UART8_SERIALDRIVER && SERIAL"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "UART8_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "UART8_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "UART8_SERIALDRIVER && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "UART8_SERIALDRIVER && SERIAL"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "UART8_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "Uses 2 stop bits", "cond": "UART8_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "UART8_SERIALDRIVER && SERIAL"}], "help": "1=Two stop bits"}, {"type": 3, "name": "UART8_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "UART8 RTS flow control", "cond": "UART8_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART8_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "UART8_SERIALDRIVER && SERIAL"}], "help": "Enable UART8 RTS flow control"}, {"type": 3, "name": "UART8_OFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "UART8 CTS flow control", "cond": "UART8_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART8_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_OFLOWCONTROL", "cond": "UART8_SERIALDRIVER && SERIAL"}], "help": "Enable UART8 CTS flow control"}, {"type": 3, "name": "UART8_DMA", "value": "n", "user_value": null, "dep": "n", "prompt": "UART8 DMA support", "cond": "UART8_SERIALDRIVER && SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "UART8_SERIALDRIVER && SERIAL"}], "selects": [{"symbol": "SERIAL_DMA", "cond": "UART8_SERIALDRIVER && SERIAL"}], "help": "Enable DMA transfers on UART8"}]}, {"type": 31, "dep": "n", "prompt": "SCI0 Configuration", "cond": "SCI0_SERIALDRIVER && SERIAL", "children": [{"type": 27, "name": "SCI0_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "SCI0 receive buffer size", "cond": "SCI0_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "SCI0_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "SCI0_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "SCI0 transmit buffer size", "cond": "SCI0_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "SCI0_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "SCI0_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "SCI0 BAUD rate", "cond": "SCI0_SERIALDRIVER && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "SCI0_SERIALDRIVER && SERIAL"}], "help": "The configured BAUD of the SCI."}, {"type": 27, "name": "SCI0_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "SCI0 character size", "cond": "SCI0_SERIALDRIVER && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "SCI0_SERIALDRIVER && SERIAL"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "SCI0_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "SCI0_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "SCI0_SERIALDRIVER && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "SCI0_SERIALDRIVER && SERIAL"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "SCI0_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "SCI0 use 2 stop bits", "cond": "SCI0_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "SCI0_SERIALDRIVER && SERIAL"}], "help": "1=Two stop bits"}]}, {"type": 31, "dep": "n", "prompt": "SCI1 Configuration", "cond": "SCI1_SERIALDRIVER && SERIAL", "children": [{"type": 27, "name": "SCI1_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "SCI1 receive buffer size", "cond": "SCI1_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "SCI1_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered as they are received. This specifies\nthe size of the receive buffer."}, {"type": 27, "name": "SCI1_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "SCI1 transmit buffer size", "cond": "SCI1_SERIALDRIVER && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "SCI1_SERIALDRIVER && SERIAL"}], "help": "Characters are buffered before being sent.  This specifies\nthe size of the transmit buffer."}, {"type": 27, "name": "SCI1_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "SCI1 BAUD rate", "cond": "SCI1_SERIALDRIVER && SERIAL", "defaults": [{"name": "115200", "default": "115200", "cond": "SCI1_SERIALDRIVER && SERIAL"}], "help": "The configured BAUD of the SCI."}, {"type": 27, "name": "SCI1_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "SCI1 character size", "cond": "SCI1_SERIALDRIVER && SERIAL", "defaults": [{"name": "8", "default": "8", "cond": "SCI1_SERIALDRIVER && SERIAL"}], "help": "The number of bits.  Must be either 7 or 8."}, {"type": 27, "name": "SCI1_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Parity setting", "cond": "SCI1_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "SCI1_SERIALDRIVER && SERIAL"}], "ranges": [{"min": "0", "max": "2", "cond": "SCI1_SERIALDRIVER && SERIAL"}], "help": "0=no parity, 1=odd parity, 2=even parity"}, {"type": 27, "name": "SCI1_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "SCI1 use 2 stop bits", "cond": "SCI1_SERIALDRIVER && SERIAL", "defaults": [{"name": "0", "default": "0", "cond": "SCI1_SERIALDRIVER && SERIAL"}], "help": "1=Two stop bits"}]}, {"type": 3, "name": "PSEUDOTERM", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "Pseudo-Terminal (PTY) suppport", "cond": "SERIAL", "defaults": [{"name": "n", "default": "n", "cond": "SERIAL"}], "selects": [{"symbol": "PIPES", "cond": "SERIAL"}, {"symbol": "ARCH_HAVE_SERIAL_TERMIOS", "cond": "SERIAL"}], "help": "Enable support support for master and slave pseudo-terminal devices.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "PTY model", "cond": "PSEUDOTERM && SERIAL", "defaults": [{"name": "PSEUDOTERM_BSD", "default": "n", "cond": "DISABLE_PSEUDOFS_OPERATIONS && PSEUDOTERM && SERIAL"}, {"name": "PSEUDOTERM_SUSV1", "default": "n", "cond": "!DISABLE_PSEUDOFS_OPERATIONS && PSEUDOTERM && SERIAL"}], "children": [{"type": 3, "name": "PSEUDOTERM_BSD", "value": "n", "user_value": null, "dep": "n", "prompt": "BSD style", "cond": "y", "help": "Deprecated BSD style PTYs.\n\nMaster: /dev/ptyN\nSlave: /dev/ttypN\n\nWhere N is the minor number"}, {"type": 3, "name": "PSEUDOTERM_SUSV1", "value": "n", "user_value": null, "dep": "n", "prompt": "SUSv1 style", "cond": "!DISABLE_PSEUDOFS_OPERATIONS && y", "help": "PTYs as specified in the Single Unix Specification (SUSv1).\n\nMaster: /dev/ptmx (multiplexor)\nSlave: /dev/pts/N\n\nWhere N is the minor number"}]}, {"type": 27, "name": "PSEUDOTERM_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Pseudo-Terminal Rx buffer size", "cond": "PSEUDOTERM && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "PSEUDOTERM && SERIAL"}], "help": "Master-to-slave pipe buffer size.  Default: 256"}, {"type": 27, "name": "PSEUDOTERM_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Pseudo-Terminal Tx buffer size", "cond": "PSEUDOTERM && SERIAL", "defaults": [{"name": "256", "default": "256", "cond": "PSEUDOTERM && SERIAL"}], "help": "Slave-to-master pipe buffer size.  Default: 256"}]}]}, {"type": 3, "name": "USBDEV", "value": "y", "user_value": 2, "menuconfig": true, "rev_dep": "(LPC17_USBDEV && ARCH_CHIP_LPC17XX && ARCH_ARM) || (SAMV7_USBDEVFS && SAMV7_HAVE_USBFS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (SAMV7_USBDEVHS && SAMV7_HAVE_USBHS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STM32_USB && STM32_HAVE_USBDEV && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32F0_USB && STM32F0_HAVE_USBDEV && ARCH_CHIP_STM32F0 && ARCH_ARM) || (STR71X_USB && ARCH_CHIP_STR71X && ARCH_ARM)", "dep": "y", "prompt": "USB Device Driver Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "USB device drivers.  See also include/nuttx/usb/usbdev.h", "children": [{"type": 6, "dep": "y", "prompt": "USB Device Controller Driver Options", "cond": "USBDEV"}, {"type": 3, "name": "USBDEV_ISOCHRONOUS", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable isochronous", "cond": "USBDEV", "defaults": [{"name": "n", "default": "n", "cond": "USBDEV"}], "help": "Build in extra support for isochronous endpoints"}, {"type": 3, "name": "USBDEV_DUALSPEED", "value": "y", "user_value": 2, "dep": "y", "prompt": "Enable high and full speed", "cond": "USBDEV", "defaults": [{"name": "n", "default": "n", "cond": "USBDEV"}], "help": "Hardware handles high and full speed operation (USB 2.0)"}, {"type": 4, "user_value": 2, "dep": "y", "prompt": "Select USB device powered", "cond": "USBDEV", "defaults": [{"name": "USBDEV_SELFPOWERED", "default": "y", "cond": "USBDEV"}], "children": [{"type": 3, "name": "USBDEV_SELFPOWERED", "value": "y", "user_value": 2, "dep": "y", "prompt": "Self powered", "cond": "<choice USBDEV_POWERED>", "help": "Will cause USB features to indicate that the device is self-powered"}, {"type": 3, "name": "USBDEV_BUSPOWERED", "value": "n", "user_value": 0, "dep": "y", "prompt": "Bus powered", "cond": "<choice USBDEV_POWERED>", "help": "Will cause USB features to indicate that the device is self-powered"}]}, {"type": 27, "name": "USBDEV_MAXPOWER", "value": "100", "user_value": "100", "dep": "y", "prompt": "Maximum power consumption in mA", "cond": "USBDEV", "defaults": [{"name": "100", "default": "100", "cond": "USBDEV"}], "help": "Maximum power consumption in mA.  This selection should only apply if\nthe device is bus powered (USBDEV_BUSPOWERED).  It is, however, used\nunconditionally in several USB device drivers."}, {"type": 3, "name": "USBDEV_DMA", "value": "y", "user_value": 2, "dep": "y", "prompt": "Enable DMA methods", "cond": "USBDEV", "defaults": [{"name": "n", "default": "n", "cond": "USBDEV"}], "help": "Select this enable DMA-related methods in USB device controller driver\ninterface.  These methods include the DMA buffer allocation methods:\nallobuffer() and freebuffer().\n\nThe USB class driver allocates packet I/O buffers for data transfer by\ncalling the driver allocbuffer() and freebuffer() methods.  Those methods\nare only available if USBDEV_DMA is defined in the system configuration.", "children": [{"type": 3, "name": "USBDEV_DMAMEMORY", "value": "n", "user_value": 0, "dep": "y", "prompt": "Board DMA Allocation Hooks", "cond": "USBDEV_DMA && USBDEV", "defaults": [{"name": "n", "default": "n", "cond": "USBDEV_DMA && USBDEV"}], "help": "The USB class driver allocates packet I/O buffers for data transfer by\ncalling the driver allocbuffer() and freebuffer() methods.  Those methods\nare only available if USBDEV_DMA is defined in the system configuration.\n\nIf USBDEV_DMAMEMORY is also defined in the NuttX configuration, then\nthe driver implementations of the allocbuffer() and freebuffer()\nmethods may use board-specific usbdev_dma_alloc() and usbdev_dma_free().\nIf USBDEV_DMA and USBDEV_DMAMEMORY are both defined, then the board-\nspecific logic must provide the functions usbdev_dma_alloc() and\nusbdev_dma_free(): usbdev_dma_alloc() will allocate DMA-capable\nmemory of the specified size; usbdev_dma_free() is the corresponding\nfunction that will be called to free the DMA-capable memory."}]}, {"type": 3, "name": "ARCH_USBDEV_STALLQUEUE", "value": "n", "user_value": 0, "rev_dep": "SAM34_UDP && (ARCH_CHIP_SAM4S || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "USBDEV"}], "help": "This option is set by the USB device controller driver (DCD)\nselection.  These selection means that the DCD can support\nqueuing of stall requests.  By this, it is meant that, (1) the\nstall is not sent until all write requests preceding the stall\nrequest are sent, (2) the stall is sent, and then after the\nstall is cleared, (3) all write requests queued after the stall\nare sent.\n\nIf the driver does not support this feature, that the class drivers\nwill enable some hokey and inefficient delay logic to workaround\nthe lack of queuing."}, {"type": 3, "name": "USBDEV_TRACE", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "Enable USB tracing for debug", "cond": "USBDEV", "defaults": [{"name": "n", "default": "n", "cond": "USBDEV"}], "selects": [{"symbol": "HAVE_USBTRACE", "cond": "USBDEV"}], "help": "Enables USB tracing for debug", "children": [{"type": 27, "name": "USBDEV_TRACE_NRECORDS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of trace entries to remember", "cond": "USBDEV_TRACE && USBDEV", "defaults": [{"name": "128", "default": "128", "cond": "USBDEV_TRACE && USBDEV"}], "help": "Number of trace entries to remember"}, {"type": 3, "name": "USBDEV_TRACE_STRINGS", "value": "n", "user_value": null, "dep": "n", "prompt": "Decode device controller events", "cond": "DEBUG_USB && USBDEV_TRACE && USBDEV", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_USB && USBDEV_TRACE && USBDEV"}], "help": "If USBDEV_TRACE_STRINGS is defined, then the USB device controller\ndriver must provide arrays of strings to support decoding of device-\nspecific trace events.  These arrays of strings (and the type struct\ntrace_msg_t) are defined in include/nuttx/usb/usbdev_trace.h:\n\n#ifdef CONFIG_USBDEV_TRACE_STRINGS\nextern const struct trace_msg_t g_usb_trace_strings_deverror[];\nextern const struct trace_msg_t g_usb_trace_strings_intdecode[];\n#endif"}, {"type": 3, "name": "USBDEV_TRACE_INITIALIDSET", "value": "n", "user_value": null, "dep": "n", "prompt": "Initial enable bits", "cond": "USBDEV_TRACE && USBDEV", "defaults": [{"name": "0", "default": "0", "cond": "USBDEV_TRACE && USBDEV"}], "help": "This is the set of initial USB features that are enabled at boot\ntime.  See the event ID class bit definitions in\ninclude/nuttx/usbdev_trace.h."}]}, {"type": 6, "dep": "y", "prompt": "USB Device Class Driver Options", "cond": "USBDEV"}, {"type": 3, "name": "USBDEV_COMPOSITE", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "USB composite device support", "cond": "USBDEV", "defaults": [{"name": "n", "default": "n", "cond": "USBDEV"}], "help": "Enables USB composite device support", "children": [{"type": 3, "name": "COMPOSITE_IAD", "value": "n", "user_value": null, "dep": "n", "prompt": "Use Interface Associate Descriptor (IAD)", "cond": "USBDEV_COMPOSITE && USBDEV", "defaults": [{"name": "n", "default": "n", "cond": "USBDEV_COMPOSITE && USBDEV"}], "help": "If one of the members of the composite has multiple interfaces\n(such as CDC/ACM), then an Interface Association Descriptor (IAD)\nwill be necessary.  Default:  IAD will be used automatically if\nneeded.  It should not be necessary to set this."}, {"type": 27, "name": "COMPOSITE_EP0MAXPACKET", "value": "", "user_value": null, "dep": "n", "prompt": "Max packet size for endpoint 0", "cond": "USBDEV_COMPOSITE && USBDEV", "defaults": [{"name": "64", "default": "64", "cond": "USBDEV_COMPOSITE && USBDEV"}], "help": "Max packet size for endpoint 0"}, {"type": 24, "name": "COMPOSITE_VENDORID", "value": "", "user_value": null, "dep": "n", "prompt": "Composite vendor ID", "cond": "USBDEV_COMPOSITE && USBDEV", "defaults": [{"name": "0x0000", "default": "0x0000", "cond": "USBDEV_COMPOSITE && USBDEV"}]}, {"type": 47, "name": "COMPOSITE_VENDORSTR", "value": "", "user_value": null, "dep": "n", "prompt": "Composite vendor ID", "cond": "USBDEV_COMPOSITE && USBDEV", "defaults": [{"name": "NuttX", "default": "NuttX", "cond": "USBDEV_COMPOSITE && USBDEV"}], "help": "The vendor ID code/string"}, {"type": 24, "name": "COMPOSITE_PRODUCTID", "value": "", "user_value": null, "dep": "n", "prompt": "Composite product id", "cond": "USBDEV_COMPOSITE && USBDEV", "defaults": [{"name": "0x0000", "default": "0x0000", "cond": "USBDEV_COMPOSITE && USBDEV"}]}, {"type": 47, "name": "COMPOSITE_PRODUCTSTR", "value": "", "user_value": null, "dep": "n", "prompt": "Composite product string", "cond": "USBDEV_COMPOSITE && USBDEV", "defaults": [{"name": "Composite device", "default": "Composite device", "cond": "USBDEV_COMPOSITE && USBDEV"}], "help": "The product ID code/string"}, {"type": 47, "name": "COMPOSITE_SERIALSTR", "value": "", "user_value": null, "dep": "n", "prompt": "Composite serial string", "cond": "USBDEV_COMPOSITE && USBDEV", "defaults": [{"name": "001", "default": "001", "cond": "USBDEV_COMPOSITE && USBDEV"}], "help": "Device serial number string"}, {"type": 47, "name": "COMPOSITE_CONFIGSTR", "value": "", "user_value": null, "dep": "n", "prompt": "Configuration string", "cond": "USBDEV_COMPOSITE && USBDEV", "defaults": [{"name": "NuttX COMPOSITE config", "default": "NuttX COMPOSITE config", "cond": "USBDEV_COMPOSITE && USBDEV"}], "help": "Configuration string"}, {"type": 24, "name": "COMPOSITE_VERSIONNO", "value": "", "user_value": null, "dep": "n", "prompt": "Composite version number", "cond": "USBDEV_COMPOSITE && USBDEV", "defaults": [{"name": "0x1010", "default": "0x1010", "cond": "USBDEV_COMPOSITE && USBDEV"}], "help": "Interface version number."}]}, {"type": 3, "name": "PL2303", "value": "n", "user_value": 0, "dep": "y", "prompt": "Prolific PL2303 serial/USB converter emulation", "cond": "USBDEV", "defaults": [{"name": "n", "default": "n", "cond": "USBDEV"}], "selects": [{"symbol": "SERIAL_REMOVABLE", "cond": "USBDEV"}], "help": "This logic emulates the Prolific PL2303 serial/USB converter", "children": [{"type": 3, "name": "PL2303_CONSOLE", "value": "n", "user_value": null, "dep": "n", "prompt": "PL2303 console device", "cond": "PL2303 && USBDEV", "defaults": [{"name": "n", "default": "n", "cond": "PL2303 && USBDEV"}], "help": "Register the USB device as /dev/console so that is will be used\nas the console device."}, {"type": 27, "name": "PL2303_EPINTIN", "value": "", "user_value": null, "dep": "n", "prompt": "Interrupt IN endpoint number", "cond": "PL2303 && USBDEV", "defaults": [{"name": "1", "default": "1", "cond": "PL2303 && USBDEV"}]}, {"type": 27, "name": "PL2303_EPBULKOUT", "value": "", "user_value": null, "dep": "n", "prompt": "Bulk OUT endpoint number", "cond": "PL2303 && USBDEV", "defaults": [{"name": "2", "default": "2", "cond": "PL2303 && USBDEV"}]}, {"type": 27, "name": "PL2303_EPBULKIN", "value": "", "user_value": null, "dep": "n", "prompt": "Bulk IN endpoint number", "cond": "PL2303 && USBDEV", "defaults": [{"name": "3", "default": "3", "cond": "PL2303 && USBDEV"}]}, {"type": 27, "name": "PL2303_EP0MAXPACKET", "value": "", "user_value": null, "dep": "n", "prompt": "Packet and request buffer sizes", "cond": "PL2303 && USBDEV", "defaults": [{"name": "64", "default": "64", "cond": "PL2303 && USBDEV"}]}, {"type": 27, "name": "PL2303_NWRREQS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of read requests that can be in flight", "cond": "PL2303 && USBDEV", "defaults": [{"name": "4", "default": "4", "cond": "PL2303 && USBDEV"}], "help": "The number of read requests that can be in flight"}, {"type": 27, "name": "PL2303_NRDREQS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of write requests that can be in flight", "cond": "PL2303 && USBDEV", "defaults": [{"name": "4", "default": "4", "cond": "PL2303 && USBDEV"}], "help": "The number of write/read requests that can be in flight"}, {"type": 27, "name": "PL2303_BULKIN_REQLEN", "value": "", "user_value": null, "dep": "n", "prompt": "Size of one write request buffer", "cond": "PL2303 && USBDEV", "defaults": [{"name": "768", "default": "768", "cond": "USBDEV_DUALSPEED && PL2303 && USBDEV"}, {"name": "96", "default": "96", "cond": "!USBDEV_DUALSPEED && PL2303 && USBDEV"}], "help": "Ideally, the BULKOUT request size should *not* be the same size as\nthe maxpacket size.  That is because IN transfers of exactly the\nmaxpacket size will be followed by a NULL packet.  The BULKOUT,\non the other hand, request buffer size is always the same as the\nmaxpacket size.\n\nThere is also no reason from PL2303_BULKIN_REQLEN to be greater\nthan PL2303_TXBUFSIZE-1, since a request larger than the TX\nbuffer can never be sent."}, {"type": 27, "name": "PL2303_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Receive buffer size", "cond": "PL2303 && USBDEV", "defaults": [{"name": "513", "default": "513", "cond": "USBDEV_DUALSPEED && PL2303 && USBDEV"}, {"name": "257", "default": "257", "cond": "!USBDEV_DUALSPEED && PL2303 && USBDEV"}], "help": "Size of the serial receive buffers.  The actual amount of data that\ncan be held in the buffer is this number minus one due to the way\nthat the circular buffer is managed.  So an RX buffer size of 257\nwill hold four full-speed, 64 byte packets; a buffer size of 513\nwill hold one high-speed, 512 byte packet."}, {"type": 27, "name": "PL2303_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Transmit buffer size", "cond": "PL2303 && USBDEV", "defaults": [{"name": "769", "default": "769", "cond": "USBDEV_DUALSPEED && PL2303 && USBDEV"}, {"name": "193", "default": "193", "cond": "!USBDEV_DUALSPEED && PL2303 && USBDEV"}], "help": "Size of the serial transmit buffers.  The actual amount of data that\ncan be held in the buffer is this number minus one due to the way\nthat the circular buffer is managed.  So a TX buffer size of 769\nwill hold one request of size 768; a buffer size of 193 will hold\ntwo requests of size 96 bytes."}, {"type": 24, "name": "PL2303_VENDORID", "value": "", "user_value": null, "dep": "n", "prompt": "Vendor ID", "cond": "PL2303 && USBDEV", "defaults": [{"name": "0x067b", "default": "0x067b", "cond": "PL2303 && USBDEV"}]}, {"type": 24, "name": "PL2303_PRODUCTID", "value": "", "user_value": null, "dep": "n", "prompt": "Product ID", "cond": "PL2303 && USBDEV", "defaults": [{"name": "0x2303", "default": "0x2303", "cond": "PL2303 && USBDEV"}]}, {"type": 47, "name": "PL2303_VENDORSTR", "value": "", "user_value": null, "dep": "n", "prompt": "Vendor string", "cond": "PL2303 && USBDEV", "defaults": [{"name": "NuttX", "default": "NuttX", "cond": "PL2303 && USBDEV"}]}, {"type": 47, "name": "PL2303_PRODUCTSTR", "value": "", "user_value": null, "dep": "n", "prompt": "Product string", "cond": "PL2303 && USBDEV", "defaults": [{"name": "PL2303 Emulation", "default": "PL2303 Emulation", "cond": "PL2303 && USBDEV"}]}]}, {"type": 3, "name": "CDCACM", "value": "y", "user_value": 2, "menuconfig": true, "dep": "y", "prompt": "USB Modem (CDC/ACM) support", "cond": "USBDEV", "defaults": [{"name": "n", "default": "n", "cond": "USBDEV"}], "selects": [{"symbol": "SERIAL_REMOVABLE", "cond": "USBDEV"}], "help": "Enables USB Modem (CDC/ACM) support", "children": [{"type": 3, "name": "CDCACM_CONSOLE", "value": "n", "user_value": 0, "dep": "y", "prompt": "CDC/ACM console device", "cond": "CDCACM && USBDEV", "defaults": [{"name": "n", "default": "n", "cond": "CDCACM && USBDEV"}], "help": "Register the USB device as /dev/console so that is will be used\nas the console device."}, {"type": 3, "name": "CDCACM_IFLOWCONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "CDC/ACM RTS flow control", "cond": "EXPERIMENTAL && CDCACM && USBDEV", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && CDCACM && USBDEV"}], "selects": [{"symbol": "SERIAL_IFLOWCONTROL", "cond": "EXPERIMENTAL && CDCACM && USBDEV"}], "help": "Enable CDC/ACM RTS flow control"}, {"type": 3, "name": "CDCACM_COMPOSITE", "value": "n", "user_value": null, "menuconfig": true, "dep": "n", "prompt": "CDC/ACM composite support", "cond": "USBDEV_COMPOSITE && CDCACM && USBDEV", "defaults": [{"name": "n", "default": "n", "cond": "USBDEV_COMPOSITE && CDCACM && USBDEV"}], "help": "Configure the CDC serial driver as part of a composite driver\n(only if USBDEV_COMPOSITE is also defined)"}, {"type": 27, "name": "CDCACM_EP0MAXPACKET", "value": "64", "user_value": "64", "dep": "y", "prompt": "Endpoint 0 max packet size", "cond": "!CDCACM_COMPOSITE && CDCACM && USBDEV", "defaults": [{"name": "64", "default": "64", "cond": "!CDCACM_COMPOSITE && CDCACM && USBDEV"}], "help": "Endpoint 0 max packet size. Default 64."}, {"type": 27, "name": "CDCACM_EPINTIN", "value": "6", "user_value": "6", "dep": "y", "prompt": "Interrupt IN endpoint number", "cond": "!CDCACM_COMPOSITE && CDCACM && USBDEV", "defaults": [{"name": "1", "default": "1", "cond": "!CDCACM_COMPOSITE && CDCACM && USBDEV"}], "help": "The logical 7-bit address of a hardware endpoint that supports\ninterrupt IN operation.  Default 1."}, {"type": 27, "name": "CDCACM_EPINTIN_FSSIZE", "value": "64", "user_value": "64", "dep": "y", "prompt": "Interupt IN full speed MAXPACKET size", "cond": "CDCACM && USBDEV", "defaults": [{"name": "64", "default": "64", "cond": "CDCACM && USBDEV"}], "help": "Max package size for the interrupt IN endpoint if full speed mode.\nDefault 64."}, {"type": 27, "name": "CDCACM_EPINTIN_HSSIZE", "value": "64", "user_value": "64", "dep": "y", "prompt": "Interupt IN high speed MAXPACKET size", "cond": "CDCACM && USBDEV", "defaults": [{"name": "64", "default": "64", "cond": "CDCACM && USBDEV"}], "help": "Max package size for the interrupt IN endpoint if high speed mode.\nDefault 64."}, {"type": 27, "name": "CDCACM_EPBULKOUT", "value": "5", "user_value": "5", "dep": "y", "prompt": "Bulk OUT endpoint number", "cond": "!CDCACM_COMPOSITE && CDCACM && USBDEV", "defaults": [{"name": "3", "default": "3", "cond": "!CDCACM_COMPOSITE && CDCACM && USBDEV"}], "help": "The logical 7-bit address of a hardware endpoint that supports\nbulk OUT operation.  Default: 3"}, {"type": 27, "name": "CDCACM_EPBULKOUT_FSSIZE", "value": "64", "user_value": "64", "dep": "y", "prompt": "Bulk OUT full speed  MAXPACKET size", "cond": "CDCACM && USBDEV", "defaults": [{"name": "64", "default": "64", "cond": "CDCACM && USBDEV"}], "help": "Max package size for the bulk OUT endpoint if full speed mode.\nDefault 64."}, {"type": 27, "name": "CDCACM_EPBULKOUT_HSSIZE", "value": "512", "user_value": "512", "dep": "y", "prompt": "Bulk OUT out high speed  MAXPACKET size", "cond": "CDCACM && USBDEV", "defaults": [{"name": "512", "default": "512", "cond": "CDCACM && USBDEV"}], "help": "Max package size for the bulk OUT endpoint if high speed mode.\nDefault 512."}, {"type": 27, "name": "CDCACM_EPBULKIN", "value": "4", "user_value": "4", "dep": "y", "prompt": "Bulk IN endpoint number", "cond": "!CDCACM_COMPOSITE && CDCACM && USBDEV", "defaults": [{"name": "2", "default": "2", "cond": "!CDCACM_COMPOSITE && CDCACM && USBDEV"}], "help": "The logical 7-bit address of a hardware endpoint that supports\nbulk IN operation.  Default: 2"}, {"type": 27, "name": "CDCACM_EPBULKIN_FSSIZE", "value": "64", "user_value": "64", "dep": "y", "prompt": "Bulk IN full speed  MAXPACKET size", "cond": "CDCACM && USBDEV", "defaults": [{"name": "64", "default": "64", "cond": "CDCACM && USBDEV"}], "help": "Max package size for the bulk IN endpoint if full speed mode.\nDefault 64."}, {"type": 27, "name": "CDCACM_EPBULKIN_HSSIZE", "value": "512", "user_value": "512", "dep": "y", "prompt": "Bulk IN high speed  MAXPACKET size", "cond": "CDCACM && USBDEV", "defaults": [{"name": "512", "default": "512", "cond": "CDCACM && USBDEV"}], "help": "Max package size for the bulk IN endpoint if high speed mode.\nDefault 512."}, {"type": 27, "name": "CDCACM_NRDREQS", "value": "4", "user_value": "4", "dep": "y", "prompt": "Number of read requests that can be in flight", "cond": "CDCACM && USBDEV", "defaults": [{"name": "4", "default": "4", "cond": "CDCACM && USBDEV"}], "help": "The number of read requests that can be in flight"}, {"type": 27, "name": "CDCACM_NWRREQS", "value": "4", "user_value": "4", "dep": "y", "prompt": "Number of write requests that can be in flight", "cond": "CDCACM && USBDEV", "defaults": [{"name": "4", "default": "4", "cond": "CDCACM && USBDEV"}], "help": "The number of write/read requests that can be in flight"}, {"type": 27, "name": "CDCACM_BULKIN_REQLEN", "value": "768", "user_value": "768", "dep": "y", "prompt": "Size of one write request buffer", "cond": "CDCACM && USBDEV", "defaults": [{"name": "768", "default": "768", "cond": "USBDEV_DUALSPEED && CDCACM && USBDEV"}, {"name": "96", "default": "96", "cond": "!USBDEV_DUALSPEED && CDCACM && USBDEV"}], "help": "Ideally, the BULKOUT request size should *not* be the same size as\nthe maxpacket size.  That is because IN transfers of exactly the\nmaxpacket size will be followed by a NULL packet.  The BULKOUT,\non the other hand, request buffer size is always the same as the\nmaxpacket size.\n\nThere is also no reason from CDCACM_BULKIN_REQLEN to be greater\nthan CDCACM_TXBUFSIZE-1, since a request larger than the TX\nbuffer can never be sent."}, {"type": 27, "name": "CDCACM_RXBUFSIZE", "value": "3080", "user_value": "3080", "dep": "y", "prompt": "Receive buffer size", "cond": "CDCACM && USBDEV", "defaults": [{"name": "513", "default": "513", "cond": "USBDEV_DUALSPEED && CDCACM && USBDEV"}, {"name": "257", "default": "257", "cond": "!USBDEV_DUALSPEED && CDCACM && USBDEV"}], "help": "Size of the serial receive buffers.  The actual amount of data that\ncan be held in the buffer is this number minus one due to the way\nthat the circular buffer is managed.  So an RX buffer size of 257\nwill hold four full-speed, 64 byte packets; a buffer size of 513\nwill hold one high-speed, 512 byte packet."}, {"type": 27, "name": "CDCACM_TXBUFSIZE", "value": "769", "user_value": "769", "dep": "y", "prompt": "Transmit buffer size", "cond": "CDCACM && USBDEV", "defaults": [{"name": "769", "default": "769", "cond": "USBDEV_DUALSPEED && CDCACM && USBDEV"}, {"name": "193", "default": "193", "cond": "!USBDEV_DUALSPEED && CDCACM && USBDEV"}], "help": "Size of the serial transmit buffers.  The actual amount of data that\ncan be held in the buffer is this number minus one due to the way\nthat the circular buffer is managed.  So a TX buffer size of 769\nwill hold one request of size 768; a buffer size of 193 will hold\ntwo requests of size 96 bytes."}, {"type": 24, "name": "CDCACM_VENDORID", "value": "0x054c", "user_value": "0x054c", "dep": "y", "prompt": "Vendor ID", "cond": "!CDCACM_COMPOSITE && CDCACM && USBDEV", "defaults": [{"name": "0x0525", "default": "0x0525", "cond": "!CDCACM_COMPOSITE && CDCACM && USBDEV"}], "help": "The vendor ID code/string.  Default 0x0525 and \"NuttX\"\n0x0525 is the Netchip vendor and should not be used in any\nproducts.  This default VID was selected for compatibility with\nthe Linux CDC ACM default VID."}, {"type": 24, "name": "CDCACM_PRODUCTID", "value": "0x0bc2", "user_value": "0x0bc2", "dep": "y", "prompt": "Product ID", "cond": "!CDCACM_COMPOSITE && CDCACM && USBDEV", "defaults": [{"name": "0xa4a7", "default": "0xa4a7", "cond": "!CDCACM_COMPOSITE && CDCACM && USBDEV"}], "help": "The product ID code/string. Default 0xa4a7 and \"CDC/ACM Serial\"\n0xa4a7 was selected for compatibility with the Linux CDC ACM\ndefault PID."}, {"type": 47, "name": "CDCACM_VENDORSTR", "value": "SONY", "user_value": "SONY", "dep": "y", "prompt": "Vendor string", "cond": "!CDCACM_COMPOSITE && CDCACM && USBDEV", "defaults": [{"name": "NuttX", "default": "NuttX", "cond": "!CDCACM_COMPOSITE && CDCACM && USBDEV"}]}, {"type": 47, "name": "CDCACM_PRODUCTSTR", "value": "CDC/ACM Serial", "user_value": "CDC/ACM Serial", "dep": "y", "prompt": "Product string", "cond": "!CDCACM_COMPOSITE && CDCACM && USBDEV", "defaults": [{"name": "CDC/ACM Serial", "default": "CDC/ACM Serial", "cond": "!CDCACM_COMPOSITE && CDCACM && USBDEV"}]}]}, {"type": 3, "name": "USBMSC", "value": "y", "user_value": 2, "menuconfig": true, "dep": "y", "prompt": "USB Mass storage class device", "cond": "USBDEV", "defaults": [{"name": "n", "default": "n", "cond": "USBDEV"}], "selects": [{"symbol": "FS_READABLE", "cond": "USBDEV"}, {"symbol": "FS_WRITABLE", "cond": "USBDEV"}], "help": "References:\n\"Universal Serial Bus Mass Storage Class, Specification Overview,\"\nRevision 1.2,  USB Implementer's Forum, June 23, 2003.\n\n\"Universal Serial Bus Mass Storage Class, Bulk-Only Transport,\"\nRevision 1.0, USB Implementer's Forum, September 31, 1999.\n\n\"SCSI Primary Commands - 3 (SPC-3),\"  American National Standard\nfor Information Technology, May 4, 2005\n\n\"SCSI Primary Commands - 4 (SPC-4),\"  American National Standard\nfor Information Technology, July 19, 2008\n\n\"SCSI Block Commands -2 (SBC-2),\" American National Standard\nfor Information Technology, November 13, 2004\n\n\"SCSI Multimedia Commands - 3 (MMC-3),\"  American National Standard\nfor Information Technology, November 12, 2001", "children": [{"type": 3, "name": "USBMSC_COMPOSITE", "value": "n", "user_value": null, "dep": "n", "prompt": "Mass storage composite support", "cond": "USBDEV_COMPOSITE && USBMSC && USBDEV", "defaults": [{"name": "n", "default": "n", "cond": "USBDEV_COMPOSITE && USBMSC && USBDEV"}], "help": "Configure the mass storage driver as part of a composite driver\n(only if USBDEV_COMPOSITE is also defined)"}, {"type": 27, "name": "USBMSC_EP0MAXPACKET", "value": "64", "user_value": "64", "dep": "y", "prompt": "Max packet size for endpoint 0", "cond": "USBMSC && USBDEV", "defaults": [{"name": "64", "default": "64", "cond": "USBMSC && USBDEV"}], "help": "Max packet size for endpoint 0"}, {"type": 27, "name": "USBMSC_EPBULKOUT", "value": "2", "user_value": "2", "dep": "y", "prompt": "Bulk OUT endpoint number", "cond": "!USBMSC_COMPOSITE && USBMSC && USBDEV", "defaults": [{"name": "2", "default": "2", "cond": "!USBMSC_COMPOSITE && USBMSC && USBDEV"}], "help": "The logical 7-bit address of a hardware endpoints that support\nbulk OUT and IN operations"}, {"type": 27, "name": "USBMSC_EPBULKIN", "value": "1", "user_value": "1", "dep": "y", "prompt": "Bulk IN endpoint number", "cond": "!USBMSC_COMPOSITE && USBMSC && USBDEV", "defaults": [{"name": "3", "default": "3", "cond": "!USBMSC_COMPOSITE && USBMSC && USBDEV"}], "help": "The logical 7-bit address of a hardware endpoints that support\nbulk OUT and IN operations"}, {"type": 27, "name": "USBMSC_NWRREQS", "value": "4", "user_value": "4", "dep": "y", "prompt": "The number of write requests that can be in flight", "cond": "USBMSC && USBDEV", "defaults": [{"name": "4", "default": "4", "cond": "USBMSC && USBDEV"}], "help": "The number of write/read requests that can be in flight"}, {"type": 27, "name": "USBMSC_NRDREQS", "value": "4", "user_value": "4", "dep": "y", "prompt": "The number of read requests that can be in flight", "cond": "USBMSC && USBDEV", "defaults": [{"name": "4", "default": "4", "cond": "USBMSC && USBDEV"}], "help": "The number of write/read requests that can be in flight"}, {"type": 27, "name": "USBMSC_BULKINREQLEN", "value": "512", "user_value": "512", "dep": "y", "prompt": "Bulk IN request size", "cond": "USBMSC && USBDEV", "defaults": [{"name": "512", "default": "512", "cond": "USBDEV_DUALSPEED && USBMSC && USBDEV"}, {"name": "64", "default": "64", "cond": "!USBDEV_DUALSPEED && USBMSC && USBDEV"}], "help": "The size of the buffer in each WRITE request.  This value should to be\nat least as large as the endpoint maxpacket size .  Most DCDs can divide\na large request buffer down and enqueue the smaller, outgoing packets\nfor better performance.  So, ideally, the size of write request buffer\nshould be the size of one block device sector which is, often, 512\nbytes.  The default, however, is the minimum size of 512 or 64 bytes\n(depending upon if dual speed operation is supported or not)."}, {"type": 27, "name": "USBMSC_BULKOUTREQLEN", "value": "512", "user_value": "512", "dep": "y", "prompt": "Bulk OUT request size", "cond": "USBMSC && USBDEV", "defaults": [{"name": "512", "default": "512", "cond": "USBDEV_DUALSPEED && USBMSC && USBDEV"}, {"name": "64", "default": "64", "cond": "!USBDEV_DUALSPEED && USBMSC && USBDEV"}], "help": "The size of the buffer in each READ request.  This value should to be\nat least as large as the endpoint maxpacket size.  Most DCDs will return\nthe completed READ request to the caller as each packet is received.\nTherefore, there is no benefit in increasing the size of this buffer\nbeyond the maximum size of one packet.  Default:  512 or 64 bytes\n(depending upon if dual speed operation is supported or not)."}, {"type": 24, "name": "USBMSC_VENDORID", "value": "0x054c", "user_value": "0x054c", "dep": "y", "prompt": "Mass storage Vendor ID", "cond": "!USBMSC_COMPOSITE && USBMSC && USBDEV", "defaults": [{"name": "0x584e", "default": "0x584e", "cond": "!USBMSC_COMPOSITE && USBMSC && USBDEV"}], "help": "The vendor ID (VID).  The value here is bogus.  You should not use\nit in any commercial products!  You must go through the proper\nchannels to request a vendor ID for your company if you do not\nalready have one!"}, {"type": 47, "name": "USBMSC_VENDORSTR", "value": "Sony", "user_value": "Sony", "dep": "y", "prompt": "Mass storage vendor string", "cond": "!USBMSC_COMPOSITE && USBMSC && USBDEV", "defaults": [{"name": "NuttX", "default": "NuttX", "cond": "!USBMSC_COMPOSITE && USBMSC && USBDEV"}], "help": "The vendor ID code/string"}, {"type": 24, "name": "USBMSC_PRODUCTID", "value": "0x0bc2", "user_value": "0x0bc2", "dep": "y", "prompt": "Mass storage Product ID", "cond": "!USBMSC_COMPOSITE && USBMSC && USBDEV", "defaults": [{"name": "0x5342", "default": "0x5342", "cond": "!USBMSC_COMPOSITE && USBMSC && USBDEV"}], "help": "The product ID (PID)."}, {"type": 47, "name": "USBMSC_PRODUCTSTR", "value": "Mass Storage", "user_value": "Mass Storage", "dep": "y", "prompt": "Mass storage product string", "cond": "!USBMSC_COMPOSITE && USBMSC && USBDEV", "defaults": [{"name": "Mass Storage", "default": "Mass Storage", "cond": "!USBMSC_COMPOSITE && USBMSC && USBDEV"}]}, {"type": 24, "name": "USBMSC_VERSIONNO", "value": "0x399", "user_value": "0x399", "dep": "y", "prompt": "USB MSC Version Number", "cond": "USBMSC && USBDEV", "defaults": [{"name": "0x399", "default": "0x399", "cond": "USBMSC && USBDEV"}]}, {"type": 3, "name": "USBMSC_REMOVABLE", "value": "y", "user_value": 2, "dep": "y", "prompt": "Mass storage removable", "cond": "USBMSC && USBDEV", "defaults": [{"name": "n", "default": "n", "cond": "USBMSC && USBDEV"}], "help": "Select if the media is removable\nUSB Composite Device Configuration"}, {"type": 27, "name": "USBMSC_SCSI_PRIO", "value": "128", "user_value": "128", "dep": "y", "prompt": "USBMSC SCSI daemon priority", "cond": "USBMSC && USBDEV", "defaults": [{"name": "128", "default": "128", "cond": "USBMSC && USBDEV"}], "help": "Priority of the SCSI kernel thread.  This must be a relatively high\npriority so that the SCSI daemon can be response to USB block driver\naccesses."}, {"type": 27, "name": "USBMSC_SCSI_STACKSIZE", "value": "2048", "user_value": "2048", "dep": "y", "prompt": "USBMSC SCSI daemon stack size", "cond": "USBMSC && USBDEV", "defaults": [{"name": "2048", "default": "2048", "cond": "USBMSC && USBDEV"}], "help": "Stack size used with the SCSI kernel thread.  The default value\nis not tuned."}]}]}, {"type": 3, "name": "USBHOST", "value": "n", "user_value": 0, "menuconfig": true, "rev_dep": "(LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM) || (SAMA5_OHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_EHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMV7_USBHOSTFS && SAMV7_HAVE_USBFS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (SAMV7_USBHOSTHS && SAMV7_HAVE_USBHS && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM)", "dep": "y", "prompt": "USB Host Driver Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "USB host drivers.  See also include/nuttx/usb/usbhost.h", "children": [{"type": 27, "name": "USBHOST_NPREALLOC", "value": "", "user_value": null, "dep": "n", "prompt": "Number of pre-allocated class instances", "cond": "USBHOST", "defaults": [{"name": "4", "default": "4", "cond": "USBHOST"}], "help": "Number of pre-allocated class instances"}, {"type": 3, "name": "USBHOST_BULK_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable bulk endpoint support", "cond": "USBHOST", "defaults": [{"name": "n", "default": "n", "cond": "USBHOST"}], "help": "On some architectures, selecting this setting will reduce driver size\nby disabling bulk endpoint support"}, {"type": 3, "name": "USBHOST_INT_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable interrupt endpoint support", "cond": "USBHOST", "defaults": [{"name": "n", "default": "n", "cond": "USBHOST"}], "help": "On some architectures, selecting this setting will reduce driver size\nby disabling interrupt endpoint support"}, {"type": 3, "name": "USBHOST_ISOC_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable isochronous endpoint support", "cond": "USBHOST", "defaults": [{"name": "n", "default": "n", "cond": "USBHOST"}], "help": "On some architectures, selecting this setting will reduce driver size\nby disabling isochronous endpoint support"}, {"type": 3, "name": "USBHOST_HAVE_ASYNCH", "value": "n", "user_value": null, "rev_dep": "(EFM32_OTGFS && USBHOST && EFM32_HAVE_OTGFS && EXPERIMENTAL && ARCH_CHIP_EFM32 && ARCH_CHIP_EFM32 && ARCH_ARM) || (LPC17_USBHOST && ARCH_CHIP_LPC17XX && ARCH_ARM) || (LPC31_USBOTG && ARCH_CHIP_LPC31XX && ARCH_ARM) || (LPC43_USBOTG && ARCH_CHIP_LPC43XX && ARCH_ARM) || (SAMA5_OHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_EHCI && SAMA5_UHPHS && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (STM32_OTGFS && USBHOST && STM32_HAVE_OTGFS && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32_OTGHS && USBHOST && (STM32_STM32F205 || STM32_STM32F207 || STM32_STM32F4XXX || STM32_STM32F429) && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32F7_OTGFS && USBHOST && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32F7_OTGHS && USBHOST && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (STM32L4_OTGFS && USBHOST && STM32L4_HAVE_OTGFS && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "USBHOST"}]}, {"type": 3, "name": "USBHOST_ASYNCH", "value": "n", "user_value": null, "rev_dep": "(USBHOST_HUB && USBHOST_HAVE_ASYNCH && !USBHOST_INT_DISABLE && USBHOST) || (USBHOST_CDCACM && USBHOST_HAVE_ASYNCH && !USBHOST_BULK_DISABLE && !USBHOST_INT_DISABLE && USBHOST)", "dep": "n", "prompt": "Asynchronous transfer support", "cond": "USBHOST_HAVE_ASYNCH && USBHOST", "defaults": [{"name": "n", "default": "n", "cond": "USBHOST_HAVE_ASYNCH && USBHOST"}], "help": "Select if the host controller driver needs to support asynchronous\nI/O transfer.  This may be required, for example, to receive\ninfrequent, asynchronous input from an interrupt pipe."}, {"type": 3, "name": "USBHOST_HUB", "value": "n", "user_value": null, "dep": "n", "prompt": "USB Hub Support", "cond": "USBHOST_HAVE_ASYNCH && !USBHOST_INT_DISABLE && USBHOST", "defaults": [{"name": "n", "default": "n", "cond": "USBHOST_HAVE_ASYNCH && !USBHOST_INT_DISABLE && USBHOST"}], "selects": [{"symbol": "USBHOST_ASYNCH", "cond": "USBHOST_HAVE_ASYNCH && !USBHOST_INT_DISABLE && USBHOST"}], "help": "Select this option to build in support for USB hubs.", "children": [{"type": 27, "name": "USBHOST_HUB_POLLMSEC", "value": "", "user_value": null, "dep": "n", "prompt": "USB Hub Polling Interval (MSec)", "cond": "USBHOST_HUB && USBHOST", "defaults": [{"name": "400", "default": "400", "cond": "USBHOST_HUB && USBHOST"}], "help": "On higher end host controllers (OHCI and EHCI), the asynchronous,\ninterrupt IN transfers will pend until data is available from the\nhub.  On lower end host controllers (like STM32 and EFM32), the\ntransfer will fail immediately when the device NAKs the first\nattempted interrupt IN transfer (with result == EGAIN) and the hub\nclass driver will fall back to polling the hub.\n\nFor the case of the higher end controllers, this polling interval\nis not critical since it would really only be used in the event of\nfailures to communicate with the hub.\n\nBut for the lower end host controllers, the asynchronous transfers\nare ineffective and this polling interval becomes a critical\nparameter that must be tuned to tradeoff CPU usage with\nresponsiveness to hub-related events (It would, I suppose, be more\nefficient to use synchronous transfers with these lower end host\ncontrollers)."}]}, {"type": 3, "name": "USBHOST_COMPOSITE", "value": "n", "user_value": null, "dep": "n", "prompt": "Composite device support", "cond": "USBHOST", "defaults": [{"name": "n", "default": "n", "cond": "USBHOST"}], "help": "Build in USB host support for connected composite devices", "children": [{"type": 3, "name": "USBHOST_COMPOSITE_STRICT", "value": "n", "user_value": null, "dep": "n", "prompt": "Strict composite membership", "cond": "USBHOST_COMPOSITE && USBHOST", "defaults": [{"name": "n", "default": "n", "cond": "USBHOST_COMPOSITE && USBHOST"}], "help": "If selected, then the composite device will not be enumerated unless\nevery member class in the composite is supported.  If not selected\nthen, for example, you could use the CDC/ACM interface of the device\nwith no support for the other interfaces."}]}, {"type": 3, "name": "USBHOST_MSC", "value": "n", "user_value": null, "dep": "n", "prompt": "Mass Storage Class Support", "cond": "!BULK_DISABLE && USBHOST", "defaults": [{"name": "n", "default": "n", "cond": "!BULK_DISABLE && USBHOST"}], "help": "Enable support for the mass storage class driver.  This also depends on\nNFILE_DESCRIPTORS > 0 && SCHED_WORKQUEUE=y"}, {"type": 3, "name": "USBHOST_CDCACM", "value": "n", "user_value": null, "dep": "n", "prompt": "CDC/ACM support", "cond": "USBHOST_HAVE_ASYNCH && !USBHOST_BULK_DISABLE && !USBHOST_INT_DISABLE && USBHOST", "defaults": [{"name": "n", "default": "n", "cond": "USBHOST_HAVE_ASYNCH && !USBHOST_BULK_DISABLE && !USBHOST_INT_DISABLE && USBHOST"}], "selects": [{"symbol": "USBHOST_ASYNCH", "cond": "USBHOST_HAVE_ASYNCH && !USBHOST_BULK_DISABLE && !USBHOST_INT_DISABLE && USBHOST"}, {"symbol": "SERIAL_REMOVABLE", "cond": "USBHOST_HAVE_ASYNCH && !USBHOST_BULK_DISABLE && !USBHOST_INT_DISABLE && USBHOST"}], "help": "Select this option to build in host support for CDC/ACM serial\ndevices.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "CDC/ACM Protocol", "cond": "USBHOST_CDCACM && USBHOST", "defaults": [{"name": "USBHOST_CDCACM_COMPLIANT", "default": "n", "cond": "SERIAL_OFLOWCONTROL && !USBHOST_INT_DISABLE && USBHOST_CDCACM && USBHOST"}, {"name": "USBHOST_CDCACM_REDUCED", "default": "n", "cond": "(!SERIAL_OFLOWCONTROL || USBHOST_INT_DISABLE) && USBHOST_CDCACM && USBHOST"}], "children": [{"type": 3, "name": "USBHOST_CDCACM_COMPLIANT", "value": "n", "user_value": null, "dep": "n", "prompt": "CDC/ACM compliant", "cond": "SERIAL_OFLOWCONTROL && !USBHOST_INT_DISABLE && y", "help": "The device needs to implement the Abstract Control Model (ACM)\nsubclass defined in the USB Communication Device Class (CDC)\nspecification. This protocol requires two USB interfaces, a data\ninterface which consists of two endpoints (bulk in + bulk out) and a\ncontrol interface which consists of one interrupt in endpoint.\nFurthermore, on EP0 the device must implement the class-specific\nrequests defined by the CDC specification. Because this USB protocol\nis compliant to the CDC/ACM standard on some other operating systems\n(e.g. Linux, MacOS) the device can work with in-box drivers."}, {"type": 3, "name": "USBHOST_CDCACM_REDUCED", "value": "n", "user_value": null, "dep": "n", "prompt": "CDC/ACM reduced", "cond": "y", "help": "This mode uses the CDC data interface (bulk in + bulk out endpoint)\nonly. No control interface (interrupt in endpoint) is required. The\ndevice needs to implement the CDC class-specific requests, so that\nis still possible to support baud rate settings and serial control/\nstatus lines. This mode is useful if the number of available\nendpoints is limited by hardware restrictions.\n\nIf the CDC/ACM compliant protocol is selected, then the reduced\nprotocol is supported for devices that provide not interrupt IN\nendpoint.  This option is then most useful for testing purposes or\nif there are insufficient resources to support the compliant\nprotocol.   The interrupt IN control interface will not be used even\nif it is available in this case."}, {"type": 3, "name": "USBHOST_CDCACM_BULKONLY", "value": "n", "user_value": null, "dep": "n", "prompt": "Bulk only protocol", "cond": "y", "help": "The device implements only the data interface (bulk in + bulk out\nendpoint). The device does not provide an additional control\ninterface and does not need to implement any class-specific requests\non EP0. Because bulk transfer mode provides flow control, there is\nno need to support serial control/status lines. The advantage of\nthe bulk-only protocol is that the implementation efforts on the\ndevice side are reduced to a minimum.\n\nBy default, both the CDC/ACM compliant protocol and the reduced\nprotocol are supported.  This option is then most useful for testing\npurposes.  The interrupt IN control interface will not be used even\nif it is available; nor will EP0 class requestes."}]}, {"type": 27, "name": "USBHOST_CDCACM_NTDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "CDC/ACM notification polling interval (MSec)", "cond": "USBHOST_CDCACM_COMPLIANT && USBHOST_CDCACM && USBHOST", "defaults": [{"name": "400", "default": "400", "cond": "USBHOST_CDCACM_COMPLIANT && USBHOST_CDCACM && USBHOST"}], "help": "On higher end host controllers (OHCI and EHCI), the asynchronous,\ninterrupt IN transfers will pend until data is available from the\nhub.  On lower end host controllers (like STM32 and EFM32), the\ntransfer will fail immediately when the device NAKs the first\nattempted interrupt IN transfer (with result == EGAIN) and the hub\nclass driver will fall back to polling the hub.\n\nFor the case of the higher end controllers, this polling interval\nis not critical since it would really only be used in the event of\nfailures to communicate with the hub.\n\nBut for the lower end host controllers, the asynchronous transfers\nare ineffective and this polling interval becomes a critical\nparameter that must be tuned to tradeoff CPU usage with\nresponsiveness to hub-related events (It would, I suppose, be more\nefficient to use synchronous transfers with these lower end host\ncontrollers)."}, {"type": 27, "name": "USBHOST_CDCACM_RXDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "RX poll delay (MSec)", "cond": "USBHOST_CDCACM && USBHOST", "defaults": [{"name": "200", "default": "200", "cond": "USBHOST_CDCACM && USBHOST"}], "help": "When the CDC/ACM device is inactive, the host must poll it at this\nrate in order to discover if it has serial data to send to us."}, {"type": 27, "name": "USBHOST_CDCACM_TXDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "TX poll delay (MSec)", "cond": "USBHOST_CDCACM && USBHOST", "defaults": [{"name": "200", "default": "200", "cond": "USBHOST_CDCACM && USBHOST"}], "help": "When the appellation is inactive, the host must poll it at this\nrate in order to discover if it has serial data to send to to the\ndevice."}, {"type": 27, "name": "USBHOST_CDCACM_NPREALLOC", "value": "", "user_value": null, "dep": "n", "prompt": "Preallocated state", "cond": "USBHOST_CDCACM && USBHOST", "defaults": [{"name": "0", "default": "0", "cond": "USBHOST_CDCACM && USBHOST"}], "help": "If this setting is zero, the CDC/ACM class driver will allocate\nmemory as needed for CDC/ACM device state.  If this value is non-\nzero, then it provides a number of preallocated CDC/ACM state\nstructures.  This increases the static size of the code image, but\neliminates all, direct, run-time allocations by the driver."}, {"type": 27, "name": "USBHOST_CDCACM_BAUD", "value": "", "user_value": null, "dep": "n", "prompt": "Initialize CDC/ACM BAUD", "cond": "USBHOST_CDCACM && USBHOST", "defaults": [{"name": "115200", "default": "115200", "cond": "USBHOST_CDCACM && USBHOST"}]}, {"type": 27, "name": "USBHOST_CDCACM_PARITY", "value": "", "user_value": null, "dep": "n", "prompt": "Initialize CDC/ACM parity", "cond": "USBHOST_CDCACM && USBHOST", "defaults": [{"name": "0", "default": "0", "cond": "USBHOST_CDCACM && USBHOST"}], "ranges": [{"min": "0", "max": "2", "cond": "USBHOST_CDCACM && USBHOST"}], "help": "Initialize CDC/ACM parity.  0=None, 1=Odd, 2=Even.  Default: None"}, {"type": 27, "name": "USBHOST_CDCACM_BITS", "value": "", "user_value": null, "dep": "n", "prompt": "Initialize CDC/ACM number of bits", "cond": "USBHOST_CDCACM && USBHOST", "defaults": [{"name": "8", "default": "8", "cond": "USBHOST_CDCACM && USBHOST"}], "help": "Initialize CDC/ACM number of bits.  Default: 8"}, {"type": 27, "name": "USBHOST_CDCACM_2STOP", "value": "", "user_value": null, "dep": "n", "prompt": "Initialize CDC/ACM two stop bits", "cond": "USBHOST_CDCACM && USBHOST", "defaults": [{"name": "0", "default": "0", "cond": "USBHOST_CDCACM && USBHOST"}], "help": "0=1 stop bit, 1=Two stop bits.  Default: 1 stop bit"}, {"type": 27, "name": "USBHOST_CDCACM_RXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Serial RX buffer size", "cond": "USBHOST_CDCACM && USBHOST", "defaults": [{"name": "128", "default": "128", "cond": "USBHOST_CDCACM && USBHOST"}], "help": "This is the size of the serial buffer that will be used to hold\nreceived data."}, {"type": 27, "name": "USBHOST_CDCACM_TXBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Serial TX buffer size", "cond": "USBHOST_CDCACM && USBHOST", "defaults": [{"name": "128", "default": "128", "cond": "USBHOST_CDCACM && USBHOST"}], "help": "This is the size of the serial buffer that will be used to hold\ndata waiting for tranmission."}]}, {"type": 3, "name": "USBHOST_HIDKBD", "value": "n", "user_value": null, "dep": "n", "prompt": "HID Keyboard Class Support", "cond": "!INT_DISABLE && USBHOST", "defaults": [{"name": "n", "default": "n", "cond": "!INT_DISABLE && USBHOST"}], "help": "Enable support for the keyboard class driver.  This also depends on\nSCHED_WORKQUEUE && !DISABLE_SIGNALS", "children": [{"type": 27, "name": "HIDKBD_POLLUSEC", "value": "", "user_value": null, "dep": "n", "prompt": "Keyboard Poll Rate (MSEC)", "cond": "USBHOST_HIDKBD && USBHOST", "defaults": [{"name": "100000", "default": "100000", "cond": "USBHOST_HIDKBD && USBHOST"}], "help": "Device poll rate in microseconds. Default: 100,000 microseconds."}, {"type": 27, "name": "HIDKBD_DEFPRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Polling Thread Priority", "cond": "USBHOST_HIDKBD && USBHOST", "defaults": [{"name": "50", "default": "50", "cond": "USBHOST_HIDKBD && USBHOST"}], "help": "Priority of the polling thread.  Default: 50."}, {"type": 27, "name": "HIDKBD_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Polling thread stack size", "cond": "USBHOST_HIDKBD && USBHOST", "defaults": [{"name": "1024", "default": "1024", "cond": "USBHOST_HIDKBD && USBHOST"}], "help": "Stack size for polling thread.  Default: 1024"}, {"type": 27, "name": "HIDKBD_BUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Scancode Buffer Size", "cond": "USBHOST_HIDKBD && USBHOST", "defaults": [{"name": "64", "default": "64", "cond": "USBHOST_HIDKBD && USBHOST"}], "help": "Scancode buffer size.  Default: 64."}, {"type": 27, "name": "HIDKBD_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "Max Number of Waiters for Poll Event", "cond": "!DISABLE_POLL && USBHOST_HIDKBD && USBHOST", "defaults": [{"name": "2", "default": "2", "cond": "!DISABLE_POLL && USBHOST_HIDKBD && USBHOST"}], "help": "If the poll() method is enabled, this defines the maximum number\nof threads that can be waiting for keyboard events.  Default: 2."}, {"type": 3, "name": "HIDKBD_RAWSCANCODES", "value": "n", "user_value": null, "dep": "n", "prompt": "Use Raw Scan Codes", "cond": "USBHOST_HIDKBD && USBHOST", "defaults": [{"name": "n", "default": "n", "cond": "USBHOST_HIDKBD && USBHOST"}], "help": "If set to y no conversions will be made on the raw keyboard scan\ncodes.  This option is useful during testing. Default: ASCII conversion."}, {"type": 3, "name": "HIDKBD_ENCODED", "value": "n", "user_value": null, "dep": "n", "prompt": "Encode Special Keys", "cond": "!HIDKBD_RAWSCANCODES && LIB_KBDCODEC && USBHOST_HIDKBD && USBHOST", "defaults": [{"name": "n", "default": "n", "cond": "!HIDKBD_RAWSCANCODES && LIB_KBDCODEC && USBHOST_HIDKBD && USBHOST"}], "help": "Encode special key press events in the user buffer.  In this case,\nthe user end must decode the encoded special key values using the\ninterfaces defined in include/nuttx/input/kbd_codec.h.  These\nspecial keys include such things as up/down arrows, home and end\nkeys, etc.  If this not defined, only 7-bit print-able and control\nASCII characters will be provided to the user."}, {"type": 3, "name": "HIDKBD_ALLSCANCODES", "value": "n", "user_value": null, "dep": "n", "prompt": "Use All Scancodes", "cond": "USBHOST_HIDKBD && USBHOST", "defaults": [{"name": "n", "default": "n", "cond": "USBHOST_HIDKBD && USBHOST"}], "help": "If set to y all 231 possible scancodes will be converted to\nsomething.  Default:  104 key US keyboard."}, {"type": 3, "name": "HIDKBD_NODEBOUNCE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable Debounce", "cond": "USBHOST_HIDKBD && USBHOST", "defaults": [{"name": "n", "default": "n", "cond": "USBHOST_HIDKBD && USBHOST"}], "help": "If set to y normal debouncing is disabled.  Default:\nDebounce enabled (No repeat keys)."}]}, {"type": 3, "name": "USBHOST_HIDMOUSE", "value": "n", "user_value": null, "dep": "n", "prompt": "HID Mouse Class Support", "cond": "!INT_DISABLE && USBHOST", "defaults": [{"name": "n", "default": "n", "cond": "!INT_DISABLE && USBHOST"}], "selects": [{"symbol": "INPUT", "cond": "!INT_DISABLE && USBHOST"}, {"symbol": "MOUSE", "cond": "!INT_DISABLE && USBHOST"}], "help": "Enable support for the mouse class driver.  This also depends on\nSCHED_WORKQUEUE && !DISABLE_SIGNALS\n\nNOTE:  This driver checks out on a Labtec and an AOpen mouse, but\ndoes not work correctly on a Microsoft mouse.  A little more work\nwould be needed to support the Microsoft mouse.", "children": [{"type": 3, "name": "HIDMOUSE_TSCIF", "value": "n", "user_value": null, "dep": "n", "prompt": "Touchscreen Emulation", "cond": "USBHOST_HIDMOUSE && USBHOST", "defaults": [{"name": "n", "default": "n", "cond": "USBHOST_HIDMOUSE && USBHOST"}], "help": "Normally, the HID mouse driver uses the mouse report structure\ndefined in include/nuttx/input/mouse.h.  The mouse driver can,\nhowever, be configured to use the touchscreen interface defined in\ninclude/nuttx/input/touchcreen.h.  If the touch screen interface is\nused, only support for the left button will be provided.\n\nNOTE:  Unlike touchscreen drivers, mouse drivers will report\nposition data even when the \"pen is up\", i.e., when no buttons are\npressed.  This behavior is necessary to provide the positional data\nwould would be needed to drive a cursor.  Without a cursor of some\nkind, the mouse is not very useful.  So this option may not be useful."}, {"type": 27, "name": "HIDMOUSE_DEFPRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Polling Thread Priority", "cond": "USBHOST_HIDMOUSE && USBHOST", "defaults": [{"name": "50", "default": "50", "cond": "USBHOST_HIDMOUSE && USBHOST"}], "help": "Priority of the polling thread.  Default: 50."}, {"type": 27, "name": "HIDMOUSE_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Polling thread stack size", "cond": "USBHOST_HIDMOUSE && USBHOST", "defaults": [{"name": "1024", "default": "1024", "cond": "USBHOST_HIDMOUSE && USBHOST"}], "help": "Stack size for polling thread.  Default: 1024"}, {"type": 27, "name": "HIDMOUSE_BUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Scancode Buffer Size", "cond": "USBHOST_HIDMOUSE && USBHOST", "defaults": [{"name": "64", "default": "64", "cond": "USBHOST_HIDMOUSE && USBHOST"}], "help": "Scancode buffer size.  Default: 64."}, {"type": 27, "name": "HIDMOUSE_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "Max Number of Waiters for Poll Event", "cond": "!DISABLE_POLL && USBHOST_HIDMOUSE && USBHOST", "defaults": [{"name": "2", "default": "2", "cond": "!DISABLE_POLL && USBHOST_HIDMOUSE && USBHOST"}], "help": "If the poll() method is enabled, this defines the maximum number\nof threads that can be waiting for mouse events.  Default: 2."}, {"type": 3, "name": "HIDMOUSE_SWAPXY", "value": "n", "user_value": null, "dep": "n", "prompt": "Swap X/Y", "cond": "USBHOST_HIDMOUSE && USBHOST", "defaults": [{"name": "n", "default": "n", "cond": "USBHOST_HIDMOUSE && USBHOST"}], "help": "Reverse the meaning of X and Y to handle different display orientations.\nNOTE:  All of the following settings apply AFTER X and Y have been swapped."}, {"type": 27, "name": "HIDMOUSE_XMAX", "value": "", "user_value": null, "dep": "n", "prompt": "Maximum X position", "cond": "USBHOST_HIDMOUSE && USBHOST", "defaults": [{"name": "320", "default": "320", "cond": "USBHOST_HIDMOUSE && USBHOST"}], "ranges": [{"min": "0", "max": "32767", "cond": "USBHOST_HIDMOUSE && USBHOST"}], "help": "This is the maximum value of the X position that will be reported.\nDefault: 320"}, {"type": 27, "name": "HIDMOUSE_YMAX", "value": "", "user_value": null, "dep": "n", "prompt": "Maximum Y position", "cond": "USBHOST_HIDMOUSE && USBHOST", "defaults": [{"name": "240", "default": "240", "cond": "USBHOST_HIDMOUSE && USBHOST"}], "ranges": [{"min": "0", "max": "32767", "cond": "USBHOST_HIDMOUSE && USBHOST"}], "help": "This is the maximum value of the Y position that will be reported.\nDefault: 240"}, {"type": 24, "name": "HIDMOUSE_XSCALE", "value": "", "user_value": null, "dep": "n", "prompt": "X scaling factor", "cond": "USBHOST_HIDMOUSE && USBHOST", "defaults": [{"name": "0x00010000", "default": "0x00010000", "cond": "USBHOST_HIDMOUSE && USBHOST"}], "help": "Mouse positions are accumulated from X/Y displacements reported by\nthe mouse device. This setting provides a scaling value for the X\ndisplacement.  This is a fixed precision floating point number with\n16 bits of fraction.  So a value of 0x00010000 is 1.0, 0x00018000\nis 1.5, 0x00024000 is 2.25, etc.\n\nNOTE that a negative value of HIDMOUSE_XSCALE such as 0xffff0000\n(-1.0) can be used to change the direction of movement.\n\nDefault: 0x00010000 (1.0)"}, {"type": 24, "name": "HIDMOUSE_YSCALE", "value": "", "user_value": null, "dep": "n", "prompt": "Y scaling factor", "cond": "USBHOST_HIDMOUSE && USBHOST", "defaults": [{"name": "0x00010000", "default": "0x00010000", "cond": "USBHOST_HIDMOUSE && USBHOST"}], "help": "Mouse positions are accumulated from X/Y displacements reported by\nthe mouse device. This setting provides a scaling value for the Y\ndisplacement.  This is a fixed precision floating point number with\n16 bits of fraction.  So a value of 0x00010000 is 1.0, 0x00018000\nis 1.5, 0x00024000 is 2.25, etc.\n\nNOTE that a negative value of HIDMOUSE_YSCALE such as 0xffff0000\n(-1.0) can be used to change the direction of movement.\n\nDefault: 0x00010000 (1.0)"}, {"type": 27, "name": "HIDMOUSE_XTHRESH", "value": "", "user_value": null, "dep": "n", "prompt": "X threshold", "cond": "USBHOST_HIDMOUSE && USBHOST", "defaults": [{"name": "12", "default": "12", "cond": "USBHOST_HIDMOUSE && USBHOST"}], "help": "New mouse positions will only be reported when the X or Y data changes by these\nthresholds. This tradeoff reduces data rate for some loss in dragging accuracy.\nBoth X and Y axis thresholding can be disabled by setting this value to zero.\n\nDefault: 12"}, {"type": 27, "name": "HIDMOUSE_THRESHY", "value": "", "user_value": null, "dep": "n", "prompt": "Y threshold", "cond": "USBHOST_HIDMOUSE && USBHOST", "defaults": [{"name": "12", "default": "12", "cond": "USBHOST_HIDMOUSE && USBHOST"}], "help": "New touch positions will only be reported when the X or Y data changes by these\nthresholds. This tradeoff reduces data rate for some loss in dragging accuracy.\nBoth X and Y axis thresholding can be disabled by setting this value to zero.\n\nDefault: 12"}, {"type": 27, "name": "HIDMOUSE_WMAX", "value": "", "user_value": null, "dep": "n", "prompt": "Maximum wheel position", "cond": "MOUSE_WHEEL && USBHOST_HIDMOUSE && USBHOST", "defaults": [{"name": "320", "default": "320", "cond": "MOUSE_WHEEL && USBHOST_HIDMOUSE && USBHOST"}], "ranges": [{"min": "0", "max": "32767", "cond": "MOUSE_WHEEL && USBHOST_HIDMOUSE && USBHOST"}], "help": "This is the maximum value of the wheel position that will be\nreported. Default: 320"}, {"type": 24, "name": "HIDMOUSE_WSCALE", "value": "", "user_value": null, "dep": "n", "prompt": "Wheel scaling factor", "cond": "MOUSE_WHEEL && USBHOST_HIDMOUSE && USBHOST", "defaults": [{"name": "0x00010000", "default": "0x00010000", "cond": "MOUSE_WHEEL && USBHOST_HIDMOUSE && USBHOST"}], "help": "Mouse wheel position are accumulated from wheel displacements\nreported by the mouse device. This setting provides a scaling\nvalue for the wheel displacement.  This is a fixed precision\nfloating point number with 16 bits of fraction.  So a value of\n0x00010000 is 1.0, 0x00018000 is 1.5, 0x00024000 is 2.25, etc.\n\nNOTE that a negative value of HIDMOUSE_XSCALE such as 0xffff0000\n(-1.0) can be used to change the direction of wheel output.\n\nDefault: 0x00010000 (1.0)"}, {"type": 27, "name": "HIDMOUSE_WTHRESH", "value": "", "user_value": null, "dep": "n", "prompt": "Wheel threshold", "cond": "MOUSE_WHEEL && USBHOST_HIDMOUSE && USBHOST", "defaults": [{"name": "1", "default": "1", "cond": "MOUSE_WHEEL && USBHOST_HIDMOUSE && USBHOST"}], "help": "New wheel positions will only be reported when the wheel position\nchanges by these thresholds. This tradeoff reduces data rate for some\nloss in wheel responsiveness.\n\nDefault: 1"}]}, {"type": 3, "name": "USBHOST_RTL8187", "value": "n", "user_value": null, "dep": "n", "prompt": "RTL8187-based wireless LAN", "cond": "NET && USBHOST", "defaults": [{"name": "n", "default": "n", "cond": "NET && USBHOST"}], "children": [{"type": 3, "name": "RTL8187B", "value": "n", "user_value": null, "dep": "n", "prompt": "RTL8187B chip", "cond": "USBHOST_RTL8187 && USBHOST", "defaults": [{"name": "y", "default": "y", "cond": "USBHOST_RTL8187 && USBHOST"}]}, {"type": 24, "name": "RTL8187_VID", "value": "", "user_value": null, "dep": "n", "prompt": "RTL8187 VID", "cond": "USBHOST_RTL8187 && USBHOST", "defaults": [{"name": "0x0bda", "default": "0x0bda", "cond": "USBHOST_RTL8187 && USBHOST"}]}, {"type": 24, "name": "RTL8187_PID", "value": "", "user_value": null, "dep": "n", "prompt": "RTL8187 PID", "cond": "USBHOST_RTL8187 && USBHOST", "defaults": [{"name": "0x8189", "default": "0x8189", "cond": "USBHOST_RTL8187 && USBHOST"}]}]}, {"type": 3, "name": "USBHOST_XBOXCONTROLLER", "value": "n", "user_value": null, "dep": "n", "prompt": "Xbox Controller Support", "cond": "!INT_DISABLE && USBHOST", "defaults": [{"name": "n", "default": "n", "cond": "!INT_DISABLE && USBHOST"}], "selects": [{"symbol": "INPUT", "cond": "!INT_DISABLE && USBHOST"}], "help": "Enable support for the Xbox Controller driver.", "children": [{"type": 27, "name": "XBOXCONTROLLER_DEFPRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Polling Thread Priority", "cond": "USBHOST_XBOXCONTROLLER && USBHOST", "defaults": [{"name": "50", "default": "50", "cond": "USBHOST_XBOXCONTROLLER && USBHOST"}], "help": "Priority of the polling thread.  Default: 50."}, {"type": 27, "name": "XBOXCONTROLLER_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Polling thread stack size", "cond": "USBHOST_XBOXCONTROLLER && USBHOST", "defaults": [{"name": "1024", "default": "1024", "cond": "USBHOST_XBOXCONTROLLER && USBHOST"}], "help": "Stack size for polling thread.  Default: 1024"}, {"type": 27, "name": "XBOXCONTROLLER_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "Max Number of Waiters for Poll Event", "cond": "!DISABLE_POLL && USBHOST_XBOXCONTROLLER && USBHOST", "defaults": [{"name": "2", "default": "2", "cond": "!DISABLE_POLL && USBHOST_XBOXCONTROLLER && USBHOST"}], "help": "If the poll() method is enabled, this defines the maximum number\nof threads that can be waiting for mouse events.  Default: 2."}]}, {"type": 3, "name": "USBHOST_TRACE", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable USB HCD tracing for debug", "cond": "USBHOST", "defaults": [{"name": "n", "default": "n", "cond": "USBHOST"}], "selects": [{"symbol": "HAVE_USBTRACE", "cond": "USBHOST"}], "help": "Enables USB tracing for debug.  Only supported for the HCD and,\nfurther, no supported by all HCD implementations.", "children": [{"type": 27, "name": "USBHOST_TRACE_NRECORDS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of trace entries to remember", "cond": "USBHOST_TRACE && USBHOST", "defaults": [{"name": "128", "default": "128", "cond": "USBHOST_TRACE && USBHOST"}], "help": "Number of trace entries to remember."}, {"type": 3, "name": "USBHOST_TRACE_VERBOSE", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable verbose debug trace", "cond": "USBHOST_TRACE && USBHOST", "defaults": [{"name": "n", "default": "n", "cond": "USBHOST_TRACE && USBHOST"}], "help": "Enable verbose trace output if supported by the platform.  The\nintent is that if USBHOST_TRACE_VERBOSE is not defined, then only\nerrors, warnings, and critical messages would be logged.  If\nUSBHOST_TRACE_VERBOSE is defined, then general informative trace\ninformation would also be included."}]}]}, {"type": 3, "name": "USBMISC", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "USB Miscellaneous drivers", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "USB Miscellaneous drivers.", "children": [{"type": 6, "dep": "n", "prompt": "USB Miscellaneous drivers", "cond": "USBMISC"}, {"type": 3, "name": "FUSB301", "value": "n", "user_value": null, "dep": "n", "prompt": "Fairchild FUSB301 USB type-C controller support", "cond": "USBMISC", "defaults": [{"name": "n", "default": "n", "cond": "USBMISC"}], "selects": [{"symbol": "I2C", "cond": "USBMISC"}], "help": "Enable device driver for Fairchild USB type-C controller", "children": [{"type": 27, "name": "FUSB301_I2C_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "FUSB301 I2C frequency", "cond": "FUSB301 && USBMISC", "defaults": [{"name": "400000", "default": "400000", "cond": "FUSB301 && USBMISC"}], "ranges": [{"min": "1", "max": "400000", "cond": "FUSB301 && USBMISC"}]}, {"type": 3, "name": "DEBUG_FUSB301", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable debug support for the FUSB301", "cond": "FUSB301 && USBMISC", "defaults": [{"name": "n", "default": "n", "cond": "FUSB301 && USBMISC"}], "help": "Enables debug support for the FUSB301"}, {"type": 27, "name": "FUSB301_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of waiters to poll", "cond": "FUSB301 && USBMISC", "defaults": [{"name": "2", "default": "2", "cond": "FUSB301 && USBMISC"}], "help": "Maximum number of threads that can be waiting on poll()"}]}]}, {"type": 3, "name": "HAVE_USBTRACE", "value": "n", "user_value": 0, "rev_dep": "(USBDEV_TRACE && USBDEV) || (USBHOST_TRACE && USBHOST)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "USBMONITOR", "value": "n", "user_value": null, "menuconfig": true, "dep": "n", "prompt": "USB Monitor", "cond": "HAVE_USBTRACE", "defaults": [{"name": "n", "default": "n", "cond": "HAVE_USBTRACE"}], "help": "If USB device tracing (USBDEV_TRACE) AND/OR USB host tracing\n(USBHOST_TRACE) are enabled then this option will select the USB\nmonitor.  The USB monitor is a daemon that will periodically collect\nthe buffered USB trace data and dump it to the SYSLOG device.", "children": [{"type": 27, "name": "USBMONITOR_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "USB Monitor daemon stack size", "cond": "USBMONITOR", "defaults": [{"name": "2048", "default": "2048", "cond": "USBMONITOR"}], "help": "The stack size to use the USB monitor daemon.  Default: 2048"}, {"type": 27, "name": "USBMONITOR_PRIORITY", "value": "", "user_value": null, "dep": "n", "prompt": "USB Monitor daemon priority", "cond": "USBMONITOR", "defaults": [{"name": "50", "default": "50", "cond": "USBMONITOR"}], "help": "The priority to use the USB monitor daemon.  Default: 50"}, {"type": 27, "name": "USBMONITOR_INTERVAL", "value": "", "user_value": null, "dep": "n", "prompt": "USB Monitor dump frequency", "cond": "USBMONITOR", "defaults": [{"name": "2", "default": "2", "cond": "USBMONITOR"}], "help": "The rate in seconds that the USB monitor will wait before dumping\nthe next set of buffered USB trace data.  Default:  2 seconds."}, {"type": 3, "name": "USBMONITOR_TRACEINIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Show USB device initialization events", "cond": "USBDEV && USBDEV_TRACE && USBMONITOR", "defaults": [{"name": "n", "default": "n", "cond": "USBDEV && USBDEV_TRACE && USBMONITOR"}], "help": "Show initialization events"}, {"type": 3, "name": "USBMONITOR_TRACECLASS", "value": "n", "user_value": null, "dep": "n", "prompt": "Show USB device class driver events", "cond": "USBDEV && USBDEV_TRACE && USBMONITOR", "defaults": [{"name": "n", "default": "n", "cond": "USBDEV && USBDEV_TRACE && USBMONITOR"}], "help": "Show class driver events"}, {"type": 3, "name": "USBMONITOR_TRACETRANSFERS", "value": "n", "user_value": null, "dep": "n", "prompt": "Show USB device data transfer events", "cond": "USBDEV && USBDEV_TRACE && USBMONITOR", "defaults": [{"name": "n", "default": "n", "cond": "USBDEV && USBDEV_TRACE && USBMONITOR"}], "help": "Show data transfer events"}, {"type": 3, "name": "USBMONITOR_TRACECONTROLLER", "value": "n", "user_value": null, "dep": "n", "prompt": "Show USB device controller events", "cond": "USBDEV && USBDEV_TRACE && USBMONITOR", "defaults": [{"name": "n", "default": "n", "cond": "USBDEV && USBDEV_TRACE && USBMONITOR"}], "help": "Show controller events"}, {"type": 3, "name": "USBMONITOR_TRACEINTERRUPTS", "value": "n", "user_value": null, "dep": "n", "prompt": "Show USB device interrupt-related events", "cond": "USBDEV && USBDEV_TRACE && USBMONITOR", "defaults": [{"name": "n", "default": "n", "cond": "USBDEV && USBDEV_TRACE && USBMONITOR"}], "help": "Show interrupt-related events"}]}, {"type": 3, "name": "DRIVERS_WIRELESS", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "Wireless Device Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Drivers for various wireless devices.", "children": [{"type": 3, "name": "WL_CC1101", "value": "n", "user_value": null, "dep": "n", "prompt": "CC1101 RF transceiver support", "cond": "DRIVERS_WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "DRIVERS_WIRELESS"}], "selects": [{"symbol": "SPI", "cond": "DRIVERS_WIRELESS"}]}, {"type": 3, "name": "WL_CC3000", "value": "n", "user_value": null, "menuconfig": true, "dep": "n", "prompt": "CC3000 Wireless Module support", "cond": "DRIVERS_WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "DRIVERS_WIRELESS"}], "selects": [{"symbol": "SPI", "cond": "DRIVERS_WIRELESS"}]}, {"type": 3, "name": "WL_CC3000", "value": "n", "user_value": null, "dep": "n", "prompt": "CC3000 Wireless Module", "cond": "DRIVERS_WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "DRIVERS_WIRELESS"}], "selects": [{"symbol": "SPI", "cond": "DRIVERS_WIRELESS"}, {"symbol": "ARCH_HAVE_NET", "cond": "DRIVERS_WIRELESS"}, {"symbol": "CRYPTO", "cond": "DRIVERS_WIRELESS"}, {"symbol": "CRYPTO_SW_AES", "cond": "DRIVERS_WIRELESS"}], "help": "Enable support for the TI CC3000 Wifi Module", "children": [{"type": 3, "name": "CC3000_MULTIPLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Multiple CC3000 Devices", "cond": "WL_CC3000 && DRIVERS_WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "WL_CC3000 && DRIVERS_WIRELESS"}], "help": "Can be defined to support multiple CC3000 devices on board."}, {"type": 27, "name": "CC3000_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number poll waiters", "cond": "!DISABLE_POLL && WL_CC3000 && DRIVERS_WIRELESS", "defaults": [{"name": "4", "default": "4", "cond": "!DISABLE_POLL && WL_CC3000 && DRIVERS_WIRELESS"}], "help": "Maximum number of threads that can be waiting on poll()"}, {"type": 27, "name": "CC3000_SPIDEV", "value": "", "user_value": null, "dep": "n", "prompt": "SPI bus number", "cond": "WL_CC3000 && DRIVERS_WIRELESS", "defaults": [{"name": "2", "default": "2", "cond": "WL_CC3000 && DRIVERS_WIRELESS"}], "help": "Selects the SPI bus number identying that SPI interface that\nconnects the CC3000 to the MCU."}, {"type": 27, "name": "CC3000_DEVMINOR", "value": "", "user_value": null, "dep": "n", "prompt": "Input device minor number", "cond": "WL_CC3000 && DRIVERS_WIRELESS", "defaults": [{"name": "0", "default": "0", "cond": "WL_CC3000 && DRIVERS_WIRELESS"}], "help": "The CC3000 device will be registered as /dev/wirelessN where N is the\nvalue provided by this setting."}, {"type": 27, "name": "CC3000_SPI_MODE", "value": "", "user_value": null, "dep": "n", "prompt": "SPI mode", "cond": "WL_CC3000 && DRIVERS_WIRELESS", "defaults": [{"name": "1", "default": "1", "cond": "WL_CC3000 && DRIVERS_WIRELESS"}], "ranges": [{"min": "0", "max": "3", "cond": "WL_CC3000 && DRIVERS_WIRELESS"}], "help": "Controls the SPI mode. The device should work in mode 1, but\nsometimes you need to experiment."}, {"type": 27, "name": "CC3000_SPI_FREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "SPI frequency", "cond": "WL_CC3000 && DRIVERS_WIRELESS", "defaults": [{"name": "16000000", "default": "16000000", "cond": "WL_CC3000 && DRIVERS_WIRELESS"}], "help": "Define to use a different SPI bus frequency."}, {"type": 27, "name": "CC3000_WORKER_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Worker thread stack size", "cond": "WL_CC3000 && DRIVERS_WIRELESS", "defaults": [{"name": "240", "default": "240", "cond": "WL_CC3000 && DRIVERS_WIRELESS"}]}, {"type": 27, "name": "CC3000_SELECT_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Select thread stack size", "cond": "WL_CC3000 && DRIVERS_WIRELESS", "defaults": [{"name": "368", "default": "368", "cond": "WL_CC3000 && DRIVERS_WIRELESS"}]}, {"type": 27, "name": "CC3000_UNSOLICED_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Unsolicited thread stack size", "cond": "WL_CC3000 && DRIVERS_WIRELESS", "defaults": [{"name": "264", "default": "264", "cond": "WL_CC3000 && DRIVERS_WIRELESS"}]}, {"type": 3, "name": "CC3000_PROBES", "value": "n", "user_value": null, "dep": "n", "prompt": "Thread probes", "cond": "WL_CC3000 && DRIVERS_WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "WL_CC3000 && DRIVERS_WIRELESS"}], "help": "Select to use DO and D1 to indicate worker thread and ISR"}]}, {"type": 3, "name": "WL_SPIRIT", "value": "n", "user_value": null, "rev_dep": "SPIRIT_NETDEV && DRIVERS_WIRELESS", "dep": "n", "prompt": "STMicro Spririt Radio Library", "cond": "DRIVERS_WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "DRIVERS_WIRELESS"}], "selects": [{"symbol": "SPI", "cond": "DRIVERS_WIRELESS"}], "help": "Enable support for the STMicro Spririt Radio Library", "children": [{"type": 27, "name": "WL_SPIRIT_SPIFREQUENCY", "value": "", "user_value": null, "dep": "n", "prompt": "Spirit SPI frequency", "cond": "WL_SPIRIT && DRIVERS_WIRELESS", "defaults": [{"name": "10000000", "default": "10000000", "cond": "WL_SPIRIT && DRIVERS_WIRELESS"}], "help": "Frequency at which to operate the SPI interface to the Spirit part.\nThe default is the absolution maximum and you may likely have to\nreduce this for your board."}, {"type": 3, "name": "WL_SPIRIT_REGDEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable register level debug", "cond": "DEBUG_WIRELESS_INFO && WL_SPIRIT && DRIVERS_WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WIRELESS_INFO && WL_SPIRIT && DRIVERS_WIRELESS"}], "help": "Enable logic to dump each value read from and written to the Sprit\nregisters."}, {"type": 3, "name": "WL_SPIRIT_FIFODUMP", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable debug FIFO dump", "cond": "DEBUG_WIRELESS_INFO && WL_SPIRIT && DRIVERS_WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WIRELESS_INFO && WL_SPIRIT && DRIVERS_WIRELESS"}], "help": "Enable logic to dump data written to and read from the linear FIFO."}]}, {"type": 3, "name": "SPIRIT_NETDEV", "value": "n", "user_value": null, "dep": "n", "prompt": "STMicro Spirit1-based Network Driver", "cond": "DRIVERS_WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "DRIVERS_WIRELESS"}], "selects": [{"symbol": "WL_SPIRIT", "cond": "DRIVERS_WIRELESS"}, {"symbol": "ARCH_HAVE_NETDEV_STATISTICS", "cond": "DRIVERS_WIRELESS"}], "help": "This selection enables support for the TMicro Spirit1-based device.\nThis configuration generates an IEEE802.15.4 work-alike radio device that\nworks with the 6LoWPAN stack.", "children": [{"type": 27, "name": "SPIRIT_PKTLEN", "value": "", "user_value": null, "dep": "n", "prompt": "Fixed packet length", "cond": "SPIRIT_NETDEV && DRIVERS_WIRELESS", "defaults": [{"name": "96", "default": "96", "cond": "SPIRIT_NETDEV && DRIVERS_WIRELESS"}], "ranges": [{"min": "1", "max": "96", "cond": "!SPIRIT_FIFOS && SPIRIT_NETDEV && DRIVERS_WIRELESS"}, {"min": "1", "max": "65535", "cond": "SPIRIT_FIFOS && SPIRIT_NETDEV && DRIVERS_WIRELESS"}], "help": "Fixed pkt sizes are used.  This setting describes that fixed packet\nsize.\n\nThis comment exists in the STMicro Spirit driver.  I have not\nexperienced this myself, but this is something you should be aware\nof:  \"Sometimes Spirit1 seems to NOT deliver (correctly) the\n'IRQ_RX_DATA_READY' event for packets which have a length which is\nclose to a multiple of RX FIFO size. Furthermore, in these cases\nalso the content delivery seems to be compromised as well as the\ngeneration of RX/TX FIFO errors. This can be avoided by reducing\nthe maximum packet length to a value which is lower than the RX FIFO\nsize.\""}, {"type": 3, "name": "SPIRIT_FIFOS", "value": "n", "user_value": null, "dep": "n", "prompt": "FIFO Watermarks", "cond": "EXPERIMENTAL && SPIRIT_NETDEV && DRIVERS_WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && SPIRIT_NETDEV && DRIVERS_WIRELESS"}], "help": "The Spirit hardware can provided interrupts when indicate when the\nRX or TX FIFOs are almost full or empty.  This is useful for\nsupporting very large packets, larger than the FIFO size.  The RX/TX\nFIFO size is 96 bytes.  If the packet size is significantly less than\n96 bytes, this feature is not needed.  It is required for packet sizes\ngreater than 96 bytes and if it is not selected, there may be\noccurrences of RX FIFO errors if the packet size is less than but close\nto 96.\n\nThis comment exists in the STMicro Spirit driver.  I have not\nexperienced this myself, but this is something you should be aware\nof:  \"Sometimes Spirit1 seems to NOT deliver (correctly) the\n'IRQ_RX_DATA_READY' event for packets which have a length which is\nclose to a multiple of RX FIFO size. Furthermore, in these cases\nalso the content delivery seems to be compromised as well as the\ngeneration of RX/TX FIFO errors. This can be avoided by reducing\nthe maximum packet length to a value which is lower than the RX FIFO\nsize.\"\n\nFrom my reading, the only known work-around is to reduce the maximum\npacket size so that it is smaller than 96.  Hence, this option is\nconditioned on EXPERMENTAL."}, {"type": 3, "name": "SPIRIT_PROMISICUOUS", "value": "n", "user_value": null, "dep": "n", "prompt": "Promiscuous mode", "cond": "SPIRIT_NETDEV && DRIVERS_WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "SPIRIT_NETDEV && DRIVERS_WIRELESS"}], "help": "Disables all address filtering.  Otherwise, filtering the node\naddress will be supported."}, {"type": 3, "name": "SPIRIT_MULTICAST", "value": "n", "user_value": null, "dep": "n", "prompt": "Multicast address filter", "cond": "!SPIRIT_PROMISICUOUS && SPIRIT_NETDEV && DRIVERS_WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "!SPIRIT_PROMISICUOUS && SPIRIT_NETDEV && DRIVERS_WIRELESS"}], "help": "Enables address filtering for the multicast addess 0xee."}, {"type": 3, "name": "SPIRIT_BROADCAST", "value": "n", "user_value": null, "dep": "n", "prompt": "Broadcast address filter", "cond": "!SPIRIT_PROMISICUOUS && SPIRIT_NETDEV && DRIVERS_WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "!SPIRIT_PROMISICUOUS && SPIRIT_NETDEV && DRIVERS_WIRELESS"}], "help": "Enables address filtering for the broadcast addess 0xff."}, {"type": 3, "name": "SPIRIT_CRCDISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable CRC", "cond": "SPIRIT_NETDEV && DRIVERS_WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "SPIRIT_NETDEV && DRIVERS_WIRELESS"}], "help": "Disables CRC calculation and filtering.  Default is enabled.\n\nErrata:  \"Using the STack packet format and no CRC field, the\nreading from RX FIFO to the last received byte, is not possible. ...\"\nWorkaround: \"By configuring the packet handler with at least one byte\nof CRC, the problem is solved. If the CRC is not required in the\napplication, configure one byte of CRC in the receiver only, to read\nthe payload correctly from RX FIFO.\""}, {"type": 24, "name": "SPIRIT_HUBNODE", "value": "", "user_value": null, "dep": "n", "prompt": "Address of hub node", "cond": "NET_STAR && SPIRIT_NETDEV && DRIVERS_WIRELESS", "defaults": [{"name": "0x34", "default": "0x34", "cond": "NET_STAR && SPIRIT_NETDEV && DRIVERS_WIRELESS"}], "help": "Provides the \"well known\" address of the hub node in the\nstar configuration."}]}, {"type": 3, "name": "DRIVERS_IEEE802154", "value": "n", "user_value": null, "menuconfig": true, "dep": "n", "prompt": "IEEE 802.15.4 Device Support", "cond": "DRIVERS_WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "DRIVERS_WIRELESS"}], "help": "This directory holds implementations of IEEE802.15.4 device drivers.", "children": [{"type": 3, "name": "IEEE802154_MRF24J40", "value": "n", "user_value": null, "dep": "n", "prompt": "Microchip MRF24J40 IEEE 802.15.4 transceiver", "cond": "DRIVERS_IEEE802154 && DRIVERS_WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "DRIVERS_IEEE802154 && DRIVERS_WIRELESS"}], "help": "This selection enables support for the Microchip MRF24J40 device."}, {"type": 3, "name": "IEEE802154_AT86RF233", "value": "n", "user_value": null, "dep": "n", "prompt": "ATMEL RF233 IEEE 802.15.4 transceiver", "cond": "DRIVERS_IEEE802154 && DRIVERS_WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "DRIVERS_IEEE802154 && DRIVERS_WIRELESS"}], "help": "This selection enables support for the Atmel RF233 device."}]}, {"type": 3, "name": "DRIVERS_IEEE80211", "value": "n", "user_value": null, "menuconfig": true, "dep": "n", "prompt": "IEEE 802.11 Device Support", "cond": "DRIVERS_WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "DRIVERS_WIRELESS"}], "help": "This directory holds implementations of IEEE802.11 device drivers.", "children": [{"type": 3, "name": "IEEE80211_BROADCOM_FULLMAC", "value": "n", "user_value": null, "rev_dep": "IEEE80211_BROADCOM_FULLMAC_SDIO && ARCH_HAVE_SDIO && DRIVERS_IEEE80211 && DRIVERS_WIRELESS", "dep": "n"}, {"type": 3, "name": "IEEE80211_BROADCOM_BCM43362", "value": "n", "user_value": null, "dep": "n", "prompt": "Broadcom 43362 chip support", "cond": "IEEE80211_BROADCOM_FULLMAC && DRIVERS_IEEE80211 && DRIVERS_WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "IEEE80211_BROADCOM_FULLMAC && DRIVERS_IEEE80211 && DRIVERS_WIRELESS"}]}, {"type": 3, "name": "IEEE80211_BROADCOM_FULLMAC_SDIO", "value": "n", "user_value": null, "dep": "n", "prompt": "Broadcom FullMAC driver on SDIO bus", "cond": "ARCH_HAVE_SDIO && DRIVERS_IEEE80211 && DRIVERS_WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_SDIO && DRIVERS_IEEE80211 && DRIVERS_WIRELESS"}], "selects": [{"symbol": "IEEE80211_BROADCOM_FULLMAC", "cond": "ARCH_HAVE_SDIO && DRIVERS_IEEE80211 && DRIVERS_WIRELESS"}], "help": "This selection enables support for broadcom\nFullMAC-compliant devices using SDIO bus."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Broadcom FullMAC driver work queue", "cond": "SCHED_WORKQUEUE && IEEE80211_BROADCOM_FULLMAC && DRIVERS_IEEE80211 && DRIVERS_WIRELESS", "defaults": [{"name": "IEEE80211_BROADCOM_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && IEEE80211_BROADCOM_FULLMAC && DRIVERS_IEEE80211 && DRIVERS_WIRELESS"}, {"name": "IEEE80211_BROADCOM_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && IEEE80211_BROADCOM_FULLMAC && DRIVERS_IEEE80211 && DRIVERS_WIRELESS"}], "help": "Work queue support is required to use the loopback driver.  If the\nlow priority work queue is available, then it should be used by the\nloopback driver.", "children": [{"type": 3, "name": "IEEE80211_BROADCOM_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "IEEE80211_BROADCOM_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}, {"type": 27, "name": "IEEE80211_BROADCOM_NINTERFACES", "value": "", "user_value": null, "dep": "n", "prompt": "Number of Broadcom FullMAC interfaces", "cond": "EXPERIMENTAL && IEEE80211_BROADCOM_FULLMAC && DRIVERS_IEEE80211 && DRIVERS_WIRELESS", "defaults": [{"name": "1", "default": "1", "cond": "EXPERIMENTAL && IEEE80211_BROADCOM_FULLMAC && DRIVERS_IEEE80211 && DRIVERS_WIRELESS"}]}]}, {"type": 3, "name": "WL_NRF24L01", "value": "n", "user_value": null, "dep": "n", "prompt": "nRF24l01+ transceiver support", "cond": "DRIVERS_WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "DRIVERS_WIRELESS"}], "selects": [{"symbol": "SPI", "cond": "DRIVERS_WIRELESS"}], "help": "This options adds driver support for the Nordic nRF24L01+ chip.", "children": [{"type": 27, "name": "WL_NRF24L01_DFLT_ADDR_WIDTH", "value": "", "user_value": null, "dep": "n", "prompt": "Default address width", "cond": "WL_NRF24L01 && DRIVERS_WIRELESS", "defaults": [{"name": "5", "default": "5", "cond": "WL_NRF24L01 && DRIVERS_WIRELESS"}], "ranges": [{"min": "3", "max": "5", "cond": "WL_NRF24L01 && DRIVERS_WIRELESS"}], "help": "Default address width to be used by the nRF24l01+ driver.\nNote that this default can be changed through the driver API."}, {"type": 3, "name": "WL_NRF24L01_CHECK_PARAMS", "value": "n", "user_value": null, "dep": "n", "prompt": "Check call parameters", "cond": "WL_NRF24L01 && DRIVERS_WIRELESS", "defaults": [{"name": "y", "default": "y", "cond": "WL_NRF24L01 && DRIVERS_WIRELESS"}], "help": "This option adds some sanity check code to parameters given in the\ndriver API functions. If this option is disabled, parameter\nvalues are passed 'as is' to the module hardware registers."}, {"type": 3, "name": "WL_NRF24L01_RXSUPPORT", "value": "n", "user_value": null, "dep": "n", "prompt": "Support messages reception", "cond": "WL_NRF24L01 && DRIVERS_WIRELESS", "defaults": [{"name": "y", "default": "y", "cond": "WL_NRF24L01 && DRIVERS_WIRELESS"}], "help": "If this opion is disabled the driver supports only the transmission of messages.\nReception of messages will be disabled (and corresponding functions removed).\nNote: this option is intended to reduce driver code size for 'transmission\nonly' devices.", "children": [{"type": 27, "name": "WL_NRF24L01_RXFIFO_LEN", "value": "", "user_value": null, "dep": "n", "prompt": "RX fifo length", "cond": "WL_NRF24L01_RXSUPPORT && WL_NRF24L01 && DRIVERS_WIRELESS", "defaults": [{"name": "128", "default": "128", "cond": "WL_NRF24L01_RXSUPPORT && WL_NRF24L01 && DRIVERS_WIRELESS"}], "ranges": [{"min": "34", "max": "2048", "cond": "WL_NRF24L01_RXSUPPORT && WL_NRF24L01 && DRIVERS_WIRELESS"}], "help": "Length of the software based fifo used to store content of\nreceived messages."}]}]}]}, {"type": 3, "name": "DRIVERS_CONTACTLESS", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "Contactless Device Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Drivers for various contactless devices.", "children": [{"type": 3, "name": "CL_MFRC522", "value": "n", "user_value": null, "dep": "n", "prompt": "NXP MFRC522 ISO14443/Mifare Transceiver", "cond": "DRIVERS_CONTACTLESS", "defaults": [{"name": "n", "default": "n", "cond": "DRIVERS_CONTACTLESS"}], "selects": [{"symbol": "SPI", "cond": "DRIVERS_CONTACTLESS"}], "help": "This options adds driver support for the MFRC522 ISO14443/Mifare chip.", "children": [{"type": 27, "name": "MFRC522_SPI_FREQ", "value": "", "user_value": null, "dep": "n", "prompt": "SPI frequency for MFRC522", "cond": "CL_MFRC522 && CL_MFRC522 && DRIVERS_CONTACTLESS", "defaults": [{"name": "1000000", "default": "1000000", "cond": "CL_MFRC522 && CL_MFRC522 && DRIVERS_CONTACTLESS"}]}, {"type": 3, "name": "CL_MFRC522_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable MFRC522 debug", "cond": "CL_MFRC522 && CL_MFRC522 && DRIVERS_CONTACTLESS", "defaults": [{"name": "n", "default": "n", "cond": "CL_MFRC522 && CL_MFRC522 && DRIVERS_CONTACTLESS"}]}, {"type": 3, "name": "CL_MFRC522_DEBUG_TX", "value": "n", "user_value": null, "dep": "n", "prompt": "trace TX frames", "cond": "MFRC522_DEBUG && CL_MFRC522 && DRIVERS_CONTACTLESS", "defaults": [{"name": "n", "default": "n", "cond": "MFRC522_DEBUG && CL_MFRC522 && DRIVERS_CONTACTLESS"}]}, {"type": 3, "name": "CL_MFRC522_DEBUG_RX", "value": "n", "user_value": null, "dep": "n", "prompt": "trace RX frames", "cond": "MFRC522_DEBUG && CL_MFRC522 && DRIVERS_CONTACTLESS", "defaults": [{"name": "n", "default": "n", "cond": "MFRC522_DEBUG && CL_MFRC522 && DRIVERS_CONTACTLESS"}]}]}, {"type": 3, "name": "CL_PN532", "value": "n", "user_value": null, "dep": "n", "prompt": "pn532 NFC-chip support", "cond": "DRIVERS_CONTACTLESS", "defaults": [{"name": "n", "default": "n", "cond": "DRIVERS_CONTACTLESS"}], "selects": [{"symbol": "SPI", "cond": "DRIVERS_CONTACTLESS"}], "help": "This options adds driver support for the PN532 NFC chip.", "children": [{"type": 27, "name": "PN532_SPI_FREQ", "value": "", "user_value": null, "dep": "n", "prompt": "SPI frequency for PN532", "cond": "CL_PN532 && CL_PN532 && DRIVERS_CONTACTLESS", "defaults": [{"name": "1000000", "default": "1000000", "cond": "CL_PN532 && CL_PN532 && DRIVERS_CONTACTLESS"}]}, {"type": 3, "name": "CL_PN532_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable PN532 debug", "cond": "CL_PN532 && CL_PN532 && DRIVERS_CONTACTLESS", "defaults": [{"name": "n", "default": "n", "cond": "CL_PN532 && CL_PN532 && DRIVERS_CONTACTLESS"}], "children": [{"type": 3, "name": "CL_PN532_DEBUG_TX", "value": "n", "user_value": null, "dep": "n", "prompt": "trace TX frames", "cond": "CL_PN532_DEBUG && CL_PN532 && DRIVERS_CONTACTLESS", "defaults": [{"name": "n", "default": "n", "cond": "CL_PN532_DEBUG && CL_PN532 && DRIVERS_CONTACTLESS"}]}, {"type": 3, "name": "CL_PN532_DEBUG_RX", "value": "n", "user_value": null, "dep": "n", "prompt": "trace RX frames", "cond": "CL_PN532_DEBUG && CL_PN532 && DRIVERS_CONTACTLESS", "defaults": [{"name": "n", "default": "n", "cond": "CL_PN532_DEBUG && CL_PN532 && DRIVERS_CONTACTLESS"}]}]}]}]}, {"type": 31, "dep": "y", "prompt": "System Logging", "cond": "y", "children": [{"type": 3, "name": "ARCH_SYSLOG", "value": "n", "user_value": 0, "rev_dep": "ARMV7M_ITMSYSLOG && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "SYSLOG_WRITE", "value": "y", "user_value": 2, "rev_dep": "(SYSLOG_CHAR && y) || (SYSLOG_CONSOLE && DEV_CONSOLE && y) || SYSLOG_FILE", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "RAMLOG", "value": "n", "user_value": 0, "dep": "y", "prompt": "RAM log device support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "This is a driver that was intended to support debugging output,\naka syslogging, when the normal serial output is not available.\nFor example, if you are using a telnet or USB serial console,\nthe debug output will get lost.  However, the RAMLOG device should\nbe usable even if system logging is disabled.\n\nThis driver is similar to a pipe in that it saves the debugging\noutput in a FIFO in RAM.  It differs from a pipe in numerous\ndetails as needed to support logging.", "children": [{"type": 3, "name": "RAMLOG_CONSOLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Use RAMLOG for /dev/console", "cond": "DEV_CONSOLE && RAMLOG", "defaults": [{"name": "n", "default": "n", "cond": "DEV_CONSOLE && RAMLOG"}], "help": "Use the RAM logging device as a system console. If this feature is enabled (along\nwith DEV_CONSOLE), then all console output will be re-directed to a circular\nbuffer in RAM.  This is useful, for example, if the only console is a Telnet\nconsole.  Then in that case, console output from non-Telnet threads will go to\nthe circular buffer and can be viewed using the NSH 'dmesg' command."}, {"type": 27, "name": "RAMLOG_BUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "RAMLOG buffer size", "cond": "(RAMLOG_SYSLOG || RAMLOG_CONSOLE) && RAMLOG", "defaults": [{"name": "1024", "default": "1024", "cond": "(RAMLOG_SYSLOG || RAMLOG_CONSOLE) && RAMLOG"}], "help": "Size of the console RAM log.  Default: 1024"}, {"type": 3, "name": "RAMLOG_CRLF", "value": "n", "user_value": null, "dep": "n", "prompt": "RAMLOG CR/LF", "cond": "RAMLOG", "defaults": [{"name": "n", "default": "n", "cond": "RAMLOG"}], "help": "Pre-pend a carriage return before every linefeed that goes into the\nRAM log."}, {"type": 3, "name": "RAMLOG_NONBLOCKING", "value": "n", "user_value": null, "dep": "n", "prompt": "RAMLOG non-block reads", "cond": "RAMLOG", "defaults": [{"name": "y", "default": "y", "cond": "RAMLOG"}], "help": "Reading from the RAMLOG will never block if the RAMLOG is empty.  If the RAMLOG\nis empty, then zero is returned (usually interpreted as end-of-file)."}, {"type": 27, "name": "RAMLOG_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "RAMLOG number of poll waiters", "cond": "!DISABLE_POLL && RAMLOG", "defaults": [{"name": "4", "default": "4", "cond": "!DISABLE_POLL && RAMLOG"}], "help": "The maximum number of threads that may be waiting on the poll method."}]}, {"type": 3, "name": "DRIVER_NOTE", "value": "n", "user_value": null, "dep": "n", "prompt": "Scheduler instrumentation driver", "cond": "SCHED_INSTRUMENTATION_BUFFER && SCHED_NOTE_GET", "defaults": [{"name": "n", "default": "n", "cond": "SCHED_INSTRUMENTATION_BUFFER && SCHED_NOTE_GET"}], "help": "Enable building a serial driver that can be used by an application\nto read data from the in-memory, scheduler instrumentation \"note\"\nbuffer."}, {"type": 3, "name": "SYSLOG_BUFFER", "value": "n", "user_value": 0, "dep": "y", "prompt": "Use buffered output", "cond": "SYSLOG_WRITE", "defaults": [{"name": "n", "default": "n", "cond": "SYSLOG_WRITE"}], "selects": [{"symbol": "MM_IOB", "cond": "SYSLOG_WRITE"}], "help": "Enables an buffering logic that will be used to serialize debug\noutput from concurrent tasks. This enables allocation of one buffer\nper thread, each of size CONFIG_IOB_BUFSIZE.\n\nThe use of SYSLOG buffering is optional.  If not enabled, however,\nthen the output from multiple tasks that attempt to generate SYSLOG\noutput may be interleaved and difficult to read."}, {"type": 3, "name": "SYSLOG_INTBUFFER", "value": "n", "user_value": 0, "dep": "y", "prompt": "Use interrupt buffer", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enables an interrupt buffer that will be used to serialize debug\noutput from interrupt handlers.", "children": [{"type": 27, "name": "SYSLOG_INTBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Interrupt buffer size", "cond": "SYSLOG_INTBUFFER", "defaults": [{"name": "512", "default": "512", "cond": "SYSLOG_INTBUFFER"}], "help": "The size of the interrupt buffer in bytes."}]}, {"type": 3, "name": "SYSLOG_TIMESTAMP", "value": "n", "user_value": 0, "dep": "y", "prompt": "Prepend timestamp to syslog message", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Prepend timestamp to syslog message.", "children": [{"type": 3, "name": "SYSLOG_TIMESTAMP_REALTIME", "value": "n", "user_value": null, "dep": "n", "prompt": "Use wall-clock for syslog timestamp", "cond": "SYSLOG_TIMESTAMP", "defaults": [{"name": "n", "default": "n", "cond": "SYSLOG_TIMESTAMP"}], "help": "Use wall-clock (CLOCK_REALTIME) for timestamp.  By default,\nCLOCK_MONOTONIC, if enabled, will be used or the system timer\nis not."}]}, {"type": 3, "name": "SYSLOG_SERIAL_CONSOLE", "value": "y", "user_value": 2, "rev_dep": "SYSLOG_CONSOLE && SERIAL_CONSOLE && DEV_CONSOLE && y", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 4, "user_value": 2, "dep": "y", "prompt": "System log device", "cond": "!ARCH_SYSLOG", "defaults": [{"name": "SYSLOG_CONSOLE", "default": "y", "cond": "DEV_CONSOLE && !ARCH_SYSLOG"}, {"name": "SYSLOG_NONE", "default": "n", "cond": "!DEV_CONSOLE && !ARCH_SYSLOG"}], "children": [{"type": 3, "name": "SYSLOG_CHAR", "value": "n", "user_value": 0, "dep": "y", "prompt": "Log to a character device", "cond": "y", "selects": [{"symbol": "SYSLOG_WRITE", "cond": "y"}], "help": "Enable the generic character device for the SYSLOG. The full path to the\nSYSLOG device is provided by SYSLOG_DEVPATH. A valid character device (or\nfile) must exist at this path.  It will by opened by syslog_initialize."}, {"type": 3, "name": "RAMLOG_SYSLOG", "value": "n", "user_value": 0, "dep": "n", "prompt": "Use RAMLOG for SYSLOG", "cond": "RAMLOG && !ARCH_SYSLOG && y", "help": "Use the RAM logging device for the syslogging interface.  If this\nfeature is enabled (along with SYSLOG), then all debug output (only)\nwill be re-directed to the circular buffer in RAM.  This RAM log can\nbe viewed from NSH using the 'dmesg'command."}, {"type": 3, "name": "SYSLOG_CONSOLE", "value": "y", "user_value": 2, "dep": "y", "prompt": "Log to /dev/console", "cond": "DEV_CONSOLE && y", "selects": [{"symbol": "SYSLOG_SERIAL_CONSOLE", "cond": "SERIAL_CONSOLE && DEV_CONSOLE && y"}, {"symbol": "SYSLOG_WRITE", "cond": "DEV_CONSOLE && y"}], "help": "Use the system console as a SYSLOG output device."}, {"type": 3, "name": "SYSLOG_NONE", "value": "n", "user_value": 0, "dep": "y", "prompt": "No SYSLOG device", "cond": "y", "help": "syslog() interfaces will be present, but all output will go to the\nbit-bucket."}]}, {"type": 3, "name": "SYSLOG_FILE", "value": "n", "user_value": 0, "dep": "y", "prompt": "Sylog file output", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "selects": [{"symbol": "SYSLOG_WRITE", "cond": "y"}], "help": "Build in support to use a file to collect SYSOG output.  File SYSLOG\nchannels differ from other SYSLOG channels in that they cannot be\nestablished until after fully booting and mounting the target file\nsystem.  The function syslog_file_channel() would need to be called\nfrom board-specific bring-up logic AFTER mounting the file system\ncontaining 'devpath'.\n\nNOTE interrupt level SYSLOG output will be lost in this case unless\nthe interrupt buffer is used."}, {"type": 3, "name": "CONSOLE_SYSLOG", "value": "n", "user_value": null, "dep": "n", "prompt": "Use SYSLOG for /dev/console", "cond": "DEV_CONSOLE && !SYSLOG_CONSOLE", "defaults": [{"name": "n", "default": "n", "cond": "DEV_CONSOLE && !SYSLOG_CONSOLE"}], "help": "Use the syslog logging device as a system console. If this feature is\nenabled (along with DEV_CONSOLE), then all console output will be\nre-directed to syslog output (syslog_putc). This is useful, for\nexample, if the only console is a Telnet console.  Then in that case,\nconsole output from non-Telnet threads will go to the syslog output."}, {"type": 3, "name": "SYSLOG_CHAR_CRLF", "value": "n", "user_value": null, "dep": "n", "prompt": "SYSLOG device CR/LF", "cond": "SYSLOG_CHAR", "defaults": [{"name": "y", "default": "y", "cond": "SYSLOG_CHAR"}], "help": "Pre-pend a carriage return before every linefeed that goes to the\ncharacter device."}, {"type": 47, "name": "SYSLOG_DEVPATH", "value": "", "user_value": null, "dep": "n", "prompt": "System log device", "cond": "SYSLOG_CHAR", "defaults": [{"name": "/dev/ttyS1", "default": "/dev/ttyS1", "cond": "SYSLOG_CHAR"}], "help": "The full path to the system logging device.  For the RAMLOG SYSLOG device,\nthis is normally \"/dev/ramlog\".  For character SYSLOG devices, it should be\nsome other existing character device (or file) supported by the configuration\n(such as \"/dev/ttyS1\")/"}, {"type": 3, "name": "SYSLOG_CHARDEV", "value": "n", "user_value": 0, "dep": "y", "prompt": "SYSLOG character device", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enables support for a simple character driver at /dev/syslog whose\nwrite() method will transfer data to the SYSLOG device.  This can be\nuseful if, for example, you want to redirect the output of a program\nto the SYSLOG.\n\nNOTE that unlike other syslog output, this data is unformatted raw\nbyte output with no time-stamping or any other SYSLOG features\nsupported."}]}]}, {"type": 31, "dep": "y", "prompt": "Networking Support", "cond": "y", "children": [{"type": 3, "name": "ARCH_HAVE_NET", "value": "y", "user_value": 2, "rev_dep": "(WL_CC3000 && DRIVERS_WIRELESS) || NET", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "ARCH_HAVE_PHY", "value": "n", "user_value": 0, "rev_dep": "(KINETIS_ENET && (ARCH_FAMILY_K60 || ARCH_FAMILY_K64 || ARCH_FAMILY_K66) && ARCH_CHIP_KINETIS && ARCH_ARM) || (LPC17_ETHERNET && ARCH_CHIP_LPC17XX && ARCH_ARM) || (LPC43_ETHERNET && ARCH_CHIP_LPC43XX && ARCH_ARM) || (SAMA5_GMAC && SAMA5_HAVE_GMAC && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_EMACA && SAMA5_HAVE_EMACA && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_EMAC0 && SAMA5_HAVE_EMACB && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_EMAC1 && SAMA5_HAVE_EMACB && SAMA5_HAVE_EMAC1 && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAM34_EMAC && (ARCH_CHIP_SAM3X || ARCH_CHIP_SAM3A || ARCH_CHIP_SAM4E) && ARCH_CHIP_SAM34 && ARCH_ARM) || (SAMV7_EMAC0 && ARCH_CHIP_SAMV7 && ARCH_CHIP_SAMV7 && ARCH_ARM) || (STM32_ETHMAC && STM32_HAVE_ETHMAC && ARCH_CHIP_STM32 && ARCH_ARM) || (STM32F7_ETHMAC && STM32F7_HAVE_ETHRNET && ARCH_CHIP_STM32F7 && ARCH_CHIP_STM32F7 && ARCH_ARM) || (PIC32MX_ETHERNET && ARCH_CHIP_PIC32MX && ARCH_MIPS) || (PIC32MZ_ETHERNET && ARCH_CHIP_PIC32MZ && ARCH_MIPS) || (MISOC_ETHERNET && ARCH_MISOC) || (ARCH_CHIP_EZ80 && ARCH_Z80) || (EZ80_EMAC && ARCH_CHIP_EZ80 && ARCH_Z80)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "NET", "value": "y", "user_value": 2, "rev_dep": "KINETIS_ENET && (ARCH_FAMILY_K60 || ARCH_FAMILY_K64 || ARCH_FAMILY_K66) && ARCH_CHIP_KINETIS && ARCH_ARM", "dep": "y", "prompt": "Networking support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "selects": [{"symbol": "ARCH_HAVE_NET", "cond": "y"}], "help": "Enable or disable all network features", "children": [{"type": 3, "name": "NET_PROMISCUOUS", "value": "n", "user_value": 0, "dep": "y", "prompt": "Promiscuous mode", "cond": "NET", "defaults": [{"name": "n", "default": "n", "cond": "NET"}], "help": "Force the Ethernet driver to operate in promiscuous mode (if supported\nby the Ethernet driver)."}, {"type": 31, "dep": "y", "prompt": "Driver buffer configuration", "cond": "NET", "children": [{"type": 27, "name": "NET_ETH_MTU", "value": "", "user_value": null, "dep": "n", "prompt": "Ethernet packet buffer size (MTU)", "cond": "NET_ETHERNET && NET", "defaults": [{"name": "1294", "default": "1294", "cond": "NET_IPv6 && NET_ETHERNET && NET"}, {"name": "590", "default": "590", "cond": "!NET_IPv6 && NET_ETHERNET && NET"}], "ranges": [{"min": "590", "max": "1518", "cond": "NET_ETHERNET && NET"}], "help": "Packet buffer size.  This size includes the TCP/UDP payload plus the\nsize of TCP/UDP header, the IP header, and the Ethernet header.\nThis value is normally referred to as the MTU (Maximum Transmission\nUnit); the payload is the MSS (Maximum Segment Size).\n\nIPv4 hosts are required to be able to handle an MSS of at least\n536 octets, resulting in a minimum buffer size of 536+20+20+14 =\n590.\n\nIPv6 hosts are required to be able to handle an MSS of 1220 octets,\nresulting in a minimum buffer size of of 1220+20+40+14 = 1294"}, {"type": 27, "name": "NET_ETH_TCP_RECVWNDO", "value": "", "user_value": null, "dep": "n", "prompt": "Ethernet TCP receive window size", "cond": "NET_ETHERNET && NET_TCP && NET", "defaults": [{"name": "1220", "default": "1220", "cond": "NET_IPv6 && NET_ETHERNET && NET_TCP && NET"}, {"name": "536", "default": "536", "cond": "!NET_IPv6 && NET_ETHERNET && NET_TCP && NET"}], "help": "The size of the advertised receiver's window.   Should be set low\n(i.e., to the size of the MSS) if the application is slow to process\nincoming data, or high (32768 bytes) if the application processes\ndata quickly."}, {"type": 27, "name": "NET_SLIP_MTU", "value": "", "user_value": null, "dep": "n", "defaults": [{"name": "296", "default": "296", "cond": "NET_SLIP && NET"}], "ranges": [{"min": "296", "max": "1518", "cond": "NET_SLIP && NET"}], "help": "Provides the size of the SLIP packet buffers.  This size includes\nthe TCP/UDP payload plus the size of TCP/UDP header and the IP header.\nThis value is normally referred to as the MTU (Maximum Transmission Unit);\nthe payload payload is the MSS (Maximum Segment Size).\n\nSLIP is required to support at lest 256+20+20 = 296.  Values other than\n296 are not recommended.\n\nThe Linux slip module hard-codes its MTU size to 296 (40 bytes for\nthe IP+TPC headers plus 256 bytes of data).  So you might as well\nset CONFIG_NET_SLIP_MTU to 296 as well.\n\nThere may be an issue with this setting, however.  I see that Linux\nuses a MTU of 296 and window of 256, but actually only sends 168\nbytes of data: 40 + 128.  I believe that is to allow for the 2x\nworst cast packet expansion.  Ideally we would like to advertise the\n256 MSS, but restrict transfers to 128 bytes (possibly by modifying\nthe MSS value in the TCP connection structure)."}, {"type": 27, "name": "NET_SLIP_TCP_RECVWNDO", "value": "", "user_value": null, "dep": "n", "prompt": "SLIP TCP receive window size", "cond": "NET_SLIP && NET_TCP && NET", "defaults": [{"name": "256", "default": "256", "cond": "NET_SLIP && NET_TCP && NET"}], "help": "The size of the advertised receiver's window.   Should be set low\n(i.e., to the size of the MSS) if the application is slow to process\nincoming data, or high (32768 bytes) if the application processes\ndata quickly."}, {"type": 27, "name": "NET_GUARDSIZE", "value": "2", "user_value": "2", "dep": "y", "prompt": "Driver I/O guard size", "cond": "NET", "defaults": [{"name": "2", "default": "2", "cond": "NET"}], "help": "Network drivers often receive packets with garbage at the end and\nare longer than the size of packet in the TCP header.  The following\n\"fudge\" factor increases the size of the I/O buffering by a small\namount to allocate slightly oversize packets.  After receipt, the\npacket size will be chopped down to the size indicated in the TCP\nheader."}]}, {"type": 31, "dep": "y", "prompt": "Link layer support", "cond": "NET", "children": [{"type": 3, "name": "NET_USER_DEVFMT", "value": "n", "user_value": null, "dep": "n", "prompt": "User provided devfmt", "cond": "EXPERIMENTAL && NET", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && NET"}], "help": "netdev_register will get devfmt form d_ifname if it is initialized."}, {"type": 3, "name": "NET_ETHERNET", "value": "n", "user_value": 0, "dep": "y", "prompt": "Ethernet support", "cond": "NET", "defaults": [{"name": "y", "default": "y", "cond": "NET"}], "help": "If NET_SLIP is not selected, then Ethernet will be used (there is\nno need to define anything special in the configuration file to use\nEthernet -- it is the default)."}, {"type": 3, "name": "NET_LOOPBACK", "value": "n", "user_value": 0, "dep": "y", "prompt": "Local loopback", "cond": "NET", "defaults": [{"name": "n", "default": "n", "cond": "NET"}], "help": "Add support for the local network loopback device, lo."}, {"type": 3, "name": "NET_SLIP", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "SLIP support", "cond": "NET", "defaults": [{"name": "n", "default": "n", "cond": "NET"}], "help": "Enables building of the SLIP driver. SLIP requires\nat least one IP protocol selected.\n\nSLIP supports point-to-point IP communications over a serial port.\nThe default data link layer for network layer is Ethernet. If\nNET_SLIP is defined in the NuttX configuration file, then SLIP will\nbe supported.  The basic differences between the SLIP and Ethernet\nconfigurations is that when SLIP is selected:\n\n        * The link level header (that comes before the IP header) is omitted.\n        * All MAC address processing is suppressed.\n        * ARP is disabled.\n\nIf NET_SLIP is not selected, then Ethernet will be used (there is\nno need to define anything special in the configuration file to use\nEthernet -- it is the default).", "children": [{"type": 27, "name": "SLIP_NINTERFACES", "value": "", "user_value": null, "dep": "n", "prompt": "Number of SLIP interfaces", "cond": "NET_SLIP && NET", "defaults": [{"name": "1", "default": "1", "cond": "NET_SLIP && NET"}], "help": "Selects the number of physical SLIP\ninterfaces to support.\nDefault: 1"}, {"type": 27, "name": "SLIP_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "SLIP stack size", "cond": "NET_SLIP && NET", "defaults": [{"name": "2048", "default": "2048", "cond": "NET_SLIP && NET"}], "help": "Select the stack size of the SLIP RX and TX tasks.  Default: 2048"}, {"type": 27, "name": "SLIP_DEFPRIO", "value": "", "user_value": null, "dep": "n", "prompt": "SLIP priority", "cond": "NET_SLIP && NET", "defaults": [{"name": "128", "default": "128", "cond": "NET_SLIP && NET"}], "help": "The priority of the SLIP RX and TX tasks. Default: 128"}]}, {"type": 3, "name": "NET_TUN", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "TUN Virtual Network Device support", "cond": "NET", "defaults": [{"name": "n", "default": "n", "cond": "NET"}], "selects": [{"symbol": "ARCH_HAVE_NETDEV_STATISTICS", "cond": "NET"}], "children": [{"type": 27, "name": "TUN_NINTERFACES", "value": "", "user_value": null, "dep": "n", "prompt": "Number of TUN interfaces", "cond": "NET_TUN && NET", "defaults": [{"name": "1", "default": "1", "cond": "NET_TUN && NET"}], "ranges": [{"min": "1", "max": "8", "cond": "NET_TUN && NET"}], "help": "Selects the number of TUN\ninterfaces to support.\nDefault: 1"}, {"type": 27, "name": "NET_TUN_MTU", "value": "", "user_value": null, "dep": "n", "prompt": "TUN packet buffer size (MTU)", "cond": "NET_TUN && NET", "defaults": [{"name": "296", "default": "296", "cond": "NET_TUN && NET"}], "ranges": [{"min": "296", "max": "1518", "cond": "NET_TUN && NET"}]}, {"type": 27, "name": "NET_TUN_TCP_RECVWNDO", "value": "", "user_value": null, "dep": "n", "prompt": "TUN TCP receive window size", "cond": "NET_TCP && NET_TUN && NET", "defaults": [{"name": "256", "default": "256", "cond": "NET_TCP && NET_TUN && NET"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && NET_TUN && NET", "defaults": [{"name": "LOOPBACK_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && NET_TUN && NET"}, {"name": "TUN_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && NET_TUN && NET"}], "help": "Work queue support is required to use the TUN driver.  If the\nlow priority work queue is available, then it should be used by the\nTUN driver.", "children": [{"type": 3, "name": "TUN_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "TUN_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}]}, {"type": 3, "name": "NET_USRSOCK", "value": "n", "user_value": 0, "dep": "y", "prompt": "User-space networking stack API", "cond": "NET", "defaults": [{"name": "n", "default": "n", "cond": "NET"}], "help": "Enable or disable user-space networking stack support.\n\nUser-space networking stack API allows user-space daemon to\nprovide TCP/IP stack implementation for NuttX network.\n\nMain use for this is to allow use and integration of\nHW-provided TCP/IP stacks for NuttX.\n\nFor example, user-space daemon can translate /dev/usrsock API\nrequests to HW TCP/IP API requests while rest of the user-space\ncan access standard socket API, with socket descriptors that\ncan be used with NuttX system calls."}]}, {"type": 31, "dep": "y", "prompt": "Network Device Operations", "cond": "NET", "children": [{"type": 3, "name": "NETDEV_IOCTL", "value": "n", "user_value": 0, "rev_dep": "(NETDEV_PHY_IOCTL && NET) || (NETDEV_WIRELESS_IOCTL && DRIVERS_WIRELESS && NET) || (NET_6LOWPAN && NET_IPv6 && NET) || (NET_IEEE802154 && WIRELESS_IEEE802154 && NET)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "NET"}]}, {"type": 3, "name": "NETDEV_PHY_IOCTL", "value": "n", "user_value": 0, "rev_dep": "TIVA_PHY_INTERRUPTS && ARCH_CHIP_TM4C && TIVA_ETHERNET && (ARCH_CHIP_LM || ARCH_CHIP_TIVA) && ARCH_ARM", "dep": "y", "prompt": "Enable PHY ioctl()", "cond": "NET", "defaults": [{"name": "n", "default": "n", "cond": "NET"}], "selects": [{"symbol": "NETDEV_IOCTL", "cond": "NET"}], "help": "Enable support for ioctl() commands to access PHY registers"}, {"type": 3, "name": "NETDEV_WIRELESS_IOCTL", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Wireless ioctl()", "cond": "DRIVERS_WIRELESS && NET", "defaults": [{"name": "n", "default": "n", "cond": "DRIVERS_WIRELESS && NET"}], "selects": [{"symbol": "NETDEV_IOCTL", "cond": "DRIVERS_WIRELESS && NET"}], "help": "Enable support for wireless device ioctl() commands"}]}, {"type": 31, "dep": "y", "prompt": "Internet Protocol Selection", "cond": "NET", "children": [{"type": 3, "name": "NET_IPv4", "value": "n", "user_value": 0, "dep": "y", "prompt": "IPv4", "cond": "NET", "defaults": [{"name": "y", "default": "y", "cond": "NET"}], "help": "Build in support for IPv4."}, {"type": 3, "name": "NET_IPv6", "value": "n", "user_value": 0, "dep": "y", "prompt": "IPv6", "cond": "NET", "defaults": [{"name": "n", "default": "n", "cond": "NET"}], "help": "Build in support for IPv6.", "children": [{"type": 27, "name": "NET_IPv6_NCONF_ENTRIES", "value": "", "user_value": null, "dep": "n", "prompt": "Number of IPv6 neighbors", "cond": "NET_IPv6 && NET", "defaults": [{"name": "8", "default": "8", "cond": "NET_IPv6 && NET"}]}, {"type": 3, "name": "NET_6LOWPAN", "value": "n", "user_value": null, "menuconfig": true, "dep": "n", "prompt": "6LoWPAN support", "cond": "NET_IPv6 && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_IPv6 && NET"}], "selects": [{"symbol": "NETDEV_IOCTL", "cond": "NET_IPv6 && NET"}, {"symbol": "NET_HAVE_STAR", "cond": "NET_IPv6 && NET"}], "help": "Enable support for Low power Wireless Personal Area Networking (6LoWPAN)\nfor IEEE 802.15.4 or other packet radios.", "children": [{"type": 3, "name": "NET_6LOWPAN_FRAG", "value": "n", "user_value": null, "dep": "n", "prompt": "6LoWPAN Fragmentation", "cond": "NET_6LOWPAN && NET", "defaults": [{"name": "y", "default": "y", "cond": "NET_6LOWPAN && NET"}], "help": "CONFIG_NET_6LOWPAN_FRAG specifies if 6lowpan fragmentation should be\nused or not. Fragmentation is on by default.", "children": [{"type": 27, "name": "NET_6LOWPAN_NREASSBUF", "value": "", "user_value": null, "dep": "n", "prompt": "Number of preallocated reassembly buffers", "cond": "NET_6LOWPAN_FRAG && NET_6LOWPAN && NET", "defaults": [{"name": "2", "default": "2", "cond": "NET_6LOWPAN_FRAG && NET_6LOWPAN && NET"}], "help": "Large IPv6 packets will be fragmented by 6LoWPAN into multiple\nframes and reconstitued into a reassembly buffer on the receiving\nside.  Each concurrent reassembly requires one buffer.  Reassembly\nbuffers are large:  The size of the 6LoWPAN MTU plus some overhead\nfor the reassembly state.\n\nSome reassembly buffers may be preallocated; some may be allocated\ndynamically from the stack.  The former require more static memory\nusage; the later require additional CPU cycles to perform the\nallocation and may effect deterministic behavior.  So this is a\ntrade-off between resources and performance.  If the number of pre-\nallocated reassembly buffers are exhausted, the reassembly will\ncontinue with dynamically allocated reassembly buffers.\n\nThis behavior can be changed with CONFIG_NET_6LOWPAN_REASS_STATIC"}, {"type": 3, "name": "NET_6LOWPAN_REASS_STATIC", "value": "n", "user_value": null, "dep": "n", "prompt": "Static reassembly buffers", "cond": "NET_6LOWPAN_FRAG && NET_6LOWPAN && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_6LOWPAN_FRAG && NET_6LOWPAN && NET"}], "help": "By default, reassembly buffers may be allocated dynamically from the\nstack when all of the statically allocation reassembly buffers are\nin use.  This will equire additional CPU cycles to perform the\nallocation and may effect deterministic behavior.  This option may\nbe selected to suppress all dynamica allocation of reassembly\nbuffers.  In that case, only static reassembly buffers are available;\nwhen those are exhausted, frames that require reassembly will be lost."}]}, {"type": 27, "name": "NET_6LOWPAN_FRAMELEN", "value": "", "user_value": null, "dep": "n", "prompt": "Max Radio Frame Size", "cond": "NET_6LOWPAN && NET", "defaults": [{"name": "127", "default": "127", "cond": "NET_6LOWPAN && NET"}], "ranges": [{"min": "1", "max": "999999", "cond": "NET_6LOWPAN && NET"}], "help": "Wireless devices use a variety of frame sizes.  For IEEE 802.15.4\nradios, this should be 127 bytes.  However, some IEEE 802.15.4\nradios may support non-standard frame lengths."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "6LoWPAN Compression", "cond": "NET_6LOWPAN && NET", "defaults": [{"name": "NET_6LOWPAN_COMPRESSION_HC06", "default": "n", "cond": "NET_6LOWPAN && NET"}], "children": [{"type": 3, "name": "NET_6LOWPAN_COMPRESSION_IPv6", "value": "n", "user_value": null, "dep": "n", "prompt": "IPv6 Dispatch", "cond": "y", "help": "Packets compression when only IPv6 dispatch is used.  There is no\ncompression in this case, all fields are sent inline. We just add\nthe IPv6 dispatch byte before the packet."}, {"type": 3, "name": "NET_6LOWPAN_COMPRESSION_HC1", "value": "n", "user_value": null, "dep": "n", "prompt": "6LoWPAN HC1", "cond": "y", "help": "Compress IP/UDP header using HC1 and HC_UDP"}, {"type": 3, "name": "NET_6LOWPAN_COMPRESSION_HC06", "value": "n", "user_value": null, "dep": "n", "prompt": "6LoWPAN HC06", "cond": "y", "help": "Compress IP/UDP header using HC06 compression"}]}, {"type": 27, "name": "NET_6LOWPAN_COMPRESSION_THRESHOLD", "value": "", "user_value": null, "dep": "n", "prompt": "Lower compression threshold", "cond": "!NET_6LOWPAN_COMPRESSION_IPv6 && NET_6LOWPAN && NET", "defaults": [{"name": "63", "default": "63", "cond": "!NET_6LOWPAN_COMPRESSION_IPv6 && NET_6LOWPAN && NET"}], "help": "CONFIG_NET_6LOWPAN_COMPRESSION_THRESHOLD sets a lower threshold for\nwhen packets should not be compressed."}, {"type": 24, "name": "NET_6LOWPAN_MINPORT", "value": "", "user_value": null, "dep": "n", "prompt": "Minimum port nubmer", "cond": "NET_6LOWPAN_COMPRESSION_HC1 && NET_6LOWPAN && NET", "defaults": [{"name": "0xf0b0", "default": "0xf0b0", "cond": "NET_6LOWPAN_COMPRESSION_HC1 && NET_6LOWPAN && NET"}], "help": "HC1 compression of UDP headersis feasible only if both src and dest\nports are between CONFIG_NET_6LOWPAN_MINPORT and\nCONFIG_NET_6LOWPAN_MINPORT + 15, inclusive.\n\nAll nodes must agree on the value of CONFIG_NET_6LOWPAN_MINPORT"}, {"type": 27, "name": "NET_6LOWPAN_MAXADDRCONTEXT", "value": "", "user_value": null, "dep": "n", "prompt": "Maximum address contexts", "cond": "NET_6LOWPAN_COMPRESSION_HC06 && NET_6LOWPAN && NET", "defaults": [{"name": "1", "default": "1", "cond": "NET_6LOWPAN_COMPRESSION_HC06 && NET_6LOWPAN && NET"}], "help": "If we use IPHC compression, how many address contexts do we support?"}, {"type": 24, "name": "NET_6LOWPAN_MAXADDRCONTEXT_PREFIX_0_0", "value": "", "user_value": null, "dep": "n", "prompt": "Address context 0 Prefix 0", "cond": "NET_6LOWPAN_COMPRESSION_HC06 && NET_6LOWPAN && NET", "defaults": [{"name": "0xaa", "default": "0xaa", "cond": "NET_6LOWPAN_COMPRESSION_HC06 && NET_6LOWPAN && NET"}], "help": "Prefix 0 for address context ze0ro (assumes CONFIG_NET_6LOWPAN_MAXADDRCONTEXT >= 0)"}, {"type": 24, "name": "NET_6LOWPAN_MAXADDRCONTEXT_PREFIX_0_1", "value": "", "user_value": null, "dep": "n", "prompt": "Address context 0 Prefix 1", "cond": "NET_6LOWPAN_COMPRESSION_HC06 && NET_6LOWPAN && NET", "defaults": [{"name": "0xaa", "default": "0xaa", "cond": "NET_6LOWPAN_COMPRESSION_HC06 && NET_6LOWPAN && NET"}], "help": "Prefix 1 for address context 0 (assumes CONFIG_NET_6LOWPAN_MAXADDRCONTEXT >= 0)"}, {"type": 3, "name": "NET_6LOWPAN_MAXADDRCONTEXT_PREINIT_1", "value": "n", "user_value": null, "dep": "n", "prompt": "Pre-initialize address context 1", "cond": "NET_6LOWPAN_COMPRESSION_HC06 && NET_6LOWPAN && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_6LOWPAN_COMPRESSION_HC06 && NET_6LOWPAN && NET"}], "help": "Preinitialize address context 1 for better header compression\n(Saves up to 13 bytes per 6lowpan packet).   Assumes\nCONFIG_NET_6LOWPAN_MAXADDRCONTEXT >= 1)", "children": [{"type": 24, "name": "NET_6LOWPAN_MAXADDRCONTEXT_PREFIX_1_0", "value": "", "user_value": null, "dep": "n", "prompt": "Address context 1 Prefix 0", "cond": "NET_6LOWPAN_MAXADDRCONTEXT_PREINIT_1 && NET_6LOWPAN_COMPRESSION_HC06 && NET_6LOWPAN && NET", "defaults": [{"name": "0xaa", "default": "0xaa", "cond": "NET_6LOWPAN_MAXADDRCONTEXT_PREINIT_1 && NET_6LOWPAN_COMPRESSION_HC06 && NET_6LOWPAN && NET"}], "help": "Prefix 0 for address context 1 (assumes CONFIG_NET_6LOWPAN_MAXADDRCONTEXT >= 1)"}, {"type": 24, "name": "NET_6LOWPAN_MAXADDRCONTEXT_PREFIX_1_1", "value": "", "user_value": null, "dep": "n", "prompt": "Address context 1 Prefix 1", "cond": "NET_6LOWPAN_MAXADDRCONTEXT_PREINIT_1 && NET_6LOWPAN_COMPRESSION_HC06 && NET_6LOWPAN && NET", "defaults": [{"name": "0xaa", "default": "0xaa", "cond": "NET_6LOWPAN_MAXADDRCONTEXT_PREINIT_1 && NET_6LOWPAN_COMPRESSION_HC06 && NET_6LOWPAN && NET"}], "help": "Prefix 1 for address context 1 (assumes CONFIG_NET_6LOWPAN_MAXADDRCONTEXT >= 1)"}, {"type": 3, "name": "NET_6LOWPAN_MAXADDRCONTEXT_PREINIT_2", "value": "n", "user_value": null, "dep": "n", "prompt": "Pre-initialize address context 2", "cond": "NET_6LOWPAN_MAXADDRCONTEXT_PREINIT_1 && NET_6LOWPAN_COMPRESSION_HC06 && NET_6LOWPAN && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_6LOWPAN_MAXADDRCONTEXT_PREINIT_1 && NET_6LOWPAN_COMPRESSION_HC06 && NET_6LOWPAN && NET"}], "help": "Preinitialize any address contexts for better header compression\n(Saves up to 13 bytes per 6lowpan packet).   Assumes\nCONFIG_NET_6LOWPAN_MAXADDRCONTEXT >= 2)", "children": [{"type": 24, "name": "NET_6LOWPAN_MAXADDRCONTEXT_PREFIX_2_0", "value": "", "user_value": null, "dep": "n", "prompt": "Address context 2 Prefix 0", "cond": "NET_6LOWPAN_MAXADDRCONTEXT_PREINIT_2 && NET_6LOWPAN_COMPRESSION_HC06 && NET_6LOWPAN && NET", "defaults": [{"name": "0xaa", "default": "0xaa", "cond": "NET_6LOWPAN_MAXADDRCONTEXT_PREINIT_2 && NET_6LOWPAN_COMPRESSION_HC06 && NET_6LOWPAN && NET"}], "help": "Prefix 0 for address context 2 (assumes CONFIG_NET_6LOWPAN_MAXADDRCONTEXT >= 2)"}, {"type": 24, "name": "NET_6LOWPAN_MAXADDRCONTEXT_PREFIX_2_1", "value": "", "user_value": null, "dep": "n", "prompt": "Address context 2 Prefix 1", "cond": "NET_6LOWPAN_MAXADDRCONTEXT_PREINIT_2 && NET_6LOWPAN_COMPRESSION_HC06 && NET_6LOWPAN && NET", "defaults": [{"name": "0xaa", "default": "0xaa", "cond": "NET_6LOWPAN_MAXADDRCONTEXT_PREINIT_2 && NET_6LOWPAN_COMPRESSION_HC06 && NET_6LOWPAN && NET"}], "help": "Prefix 1 for address context 2 (assumes CONFIG_NET_6LOWPAN_MAXADDRCONTEXT >= 2)"}]}]}, {"type": 3, "name": "NET_6LOWPAN_EXTENDEDADDR", "value": "n", "user_value": null, "dep": "n", "prompt": "Extended IEEE 802.15.4 address", "cond": "NET_6LOWPAN && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_6LOWPAN && NET"}], "help": "By default, a 2-byte short address is used for the IEEE802.15.4 MAC\ndevice's link layer address.  If this option is selected, then an\n8-byte extended address will be used.\n\nAll devices operating on a network have unique, 8-byte addresses,\nreferred to as extended addresses.  A device will use either the\nextended address for direct communication within the PAN or the\nshort 2-byte address that was allocated by the PAN coordinator when\nthe device associated."}, {"type": 27, "name": "NET_6LOWPAN_MAXAGE", "value": "", "user_value": null, "dep": "n", "prompt": "Packet reassembly timeout", "cond": "NET_6LOWPAN && NET", "defaults": [{"name": "20", "default": "20", "cond": "NET_6LOWPAN && NET"}], "help": "Timeout for packet reassembly at the 6lowpan layer in units of\nseconds (should be < 60s)"}, {"type": 27, "name": "NET_6LOWPAN_MAX_MACTRANSMITS", "value": "", "user_value": null, "dep": "n", "prompt": "Max MAC transmissions", "cond": "NET_6LOWPAN && NET", "defaults": [{"name": "4", "default": "4", "cond": "NET_6LOWPAN && NET"}], "ranges": [{"min": "1", "max": "255", "cond": "NET_6LOWPAN && NET"}], "help": "CONFIG_NET_6LOWPAN_MAX_MACTRANSMITS specifies how many times the MAC\nlayer should resend packets if no link-layer ACK wasreceived. This\nonly makes sense with the csma_driver."}, {"type": 27, "name": "NET_6LOWPAN_MTU", "value": "", "user_value": null, "dep": "n", "prompt": "6LoWPAN packet buffer size", "cond": "NET_6LOWPAN_FRAG && NET_6LOWPAN && NET", "defaults": [{"name": "1294", "default": "1294", "cond": "NET_6LOWPAN_FRAG && NET_6LOWPAN && NET"}], "ranges": [{"min": "590", "max": "1518", "cond": "NET_6LOWPAN_FRAG && NET_6LOWPAN && NET"}], "help": "Packet buffer size.  This size includes the TCP/UDP payload plus the\nsize of TCP/UDP header, the IP header, and the Ethernet header.\nThis value is normally referred to as the MTU (Maximum Transmission\nUnit); the payload is the MSS (Maximum Segment Size).\n\nNOTE that this option depends on fragmentation support.  By\nsupporting fragmentation, we can handle quite large \"logical\" packet\nsizes.  Without fragmentation support, the MTU is equal to the frame\nsize and that has already been selected."}, {"type": 27, "name": "NET_6LOWPAN_TCP_RECVWNDO", "value": "", "user_value": null, "dep": "n", "prompt": "6LoWPAN TCP receive window size", "cond": "NET_TCP && NET_6LOWPAN && NET", "defaults": [{"name": "1220", "default": "1220", "cond": "NET_6LOWPAN_FRAG && NET_TCP && NET_6LOWPAN && NET"}, {"name": "102", "default": "102", "cond": "!NET_6LOWPAN_FRAG && NET_TCP && NET_6LOWPAN && NET"}], "help": "The size of the advertised receiver's window.   Should be set low\n(i.e., to the size of the IEEE802.15.4 MTU or frame payload) if\nthe application is slow to process incoming data, or high (32768\nbytes) if the application processes data quickly."}, {"type": 3, "name": "NET_6LOWPAN_DUMPBUFFER", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable dumping of buffer data", "cond": "DEBUG_NET_INFO && NET_6LOWPAN && NET", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_NET_INFO && NET_6LOWPAN && NET"}], "help": "Enable dumping of all packet and frame buffers coming into and out\nof the 6LoWPAN logic.  This will generate a large volume of data if\nselected."}]}]}, {"type": 3, "name": "NET_IPFORWARD", "value": "n", "user_value": 0, "rev_dep": "NET_STARHUB && y", "dep": "y", "prompt": "Enable L2 forwarding", "cond": "NET", "defaults": [{"name": "n", "default": "n", "cond": "NET"}], "help": "Enable forwarding of packets.  Packets received with IP addresses\nthat are not supported by this platform will be forwarded to the\nappropriate network device.  Routing table support may be required.", "children": [{"type": 3, "name": "NET_IPFORWARD_BROADCAST", "value": "n", "user_value": null, "dep": "n", "prompt": "Forward broadcast/multicast packets", "cond": "NET_IPFORWARD && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_IPFORWARD && NET"}], "help": "If selected, broadcast packets received on one network device will\nbe forwarded though other network devices."}, {"type": 27, "name": "NET_IPFORWARD_NSTRUCT", "value": "", "user_value": null, "dep": "n", "prompt": "Number of pre-allocated forwarding structures", "cond": "NET_IPFORWARD && NET", "defaults": [{"name": "4", "default": "4", "cond": "NET_IPFORWARD && NET"}], "help": "When packets are forwarded from on device to another, a structure\nmust be allocated to hold the state of forwarding across several\nasynchronous events.  Those structures are pre-allocated for\nminimal, deterministic performance and to prevent hogging of memory\n(of course, that means that this value must be carefully selected\nfor your application).  This setting defines the number of such pre-\nallocated structures.\n\nNOTE: This setting effectively puts a maximum on the number of\npackets that may be waiting to be forwarded from one network device\nto another.  CONFIG_IOB_NBUFFERS also limits the forward because the\npayload of the packet (up to the MSS) is retain in IOBs."}]}]}, {"type": 31, "dep": "y", "prompt": "Socket Support", "cond": "NET", "children": [{"type": 27, "name": "NSOCKET_DESCRIPTORS", "value": "8", "user_value": "8", "dep": "y", "prompt": "Number of socket descriptor", "cond": "NET", "defaults": [{"name": "8", "default": "8", "cond": "NET"}], "help": "Maximum number of socket descriptors per task/thread."}, {"type": 27, "name": "NET_NACTIVESOCKETS", "value": "16", "user_value": "16", "dep": "y", "prompt": "Max socket operations", "cond": "NET", "defaults": [{"name": "16", "default": "16", "cond": "NET"}], "help": "Maximum number of concurrent socket operations (recv, send,\nconnection monitoring, etc.). Default: 16"}, {"type": 3, "name": "NET_SOCKOPTS", "value": "y", "user_value": 2, "dep": "y", "prompt": "Socket options", "cond": "NET", "defaults": [{"name": "n", "default": "n", "cond": "NET"}], "help": "Enable or disable support for socket options", "children": [{"type": 3, "name": "NET_SOLINGER", "value": "y", "user_value": 2, "dep": "y", "prompt": "SO_LINGER socket option", "cond": "NET_SOCKOPTS && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_SOCKOPTS && NET"}], "help": "Enable or disable support for the SO_LINGER socket option."}]}]}, {"type": 31, "dep": "y", "prompt": "Raw Socket Support", "cond": "NET", "children": [{"type": 3, "name": "NET_PKT", "value": "n", "user_value": null, "dep": "n", "prompt": "Socket packet socket support", "cond": "(NET_ETHERNET || EXPERIMENTAL) && NET", "defaults": [{"name": "n", "default": "n", "cond": "(NET_ETHERNET || EXPERIMENTAL) && NET"}], "help": "Enable or disable support for packet sockets.\n\nPacket sockets allow receiving and transmitting frames without\na transport protocol in between. Frames received are copied into\na packet socket tap before they enter the network. Data written into\na packet socket will bypass the network altogether and be placed in\nthe transmission buffer of the network interface driver.\n\nREVISIT: Currently only implemented for Ethernet.", "children": [{"type": 27, "name": "NET_PKT_CONNS", "value": "", "user_value": null, "dep": "n", "prompt": "Max packet sockets", "cond": "NET_PKT && NET", "defaults": [{"name": "1", "default": "1", "cond": "NET_PKT && NET"}]}]}]}, {"type": 31, "dep": "y", "prompt": "Unix Domain Socket Support", "cond": "NET && !DISABLE_PSEUDOFS_OPERATIONS && NET", "children": [{"type": 3, "name": "NET_LOCAL", "value": "n", "user_value": 0, "dep": "y", "prompt": "Unix domain (local) sockets", "cond": "NET && !DISABLE_PSEUDOFS_OPERATIONS && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET && !DISABLE_PSEUDOFS_OPERATIONS && NET"}], "selects": [{"symbol": "PIPES", "cond": "NET && !DISABLE_PSEUDOFS_OPERATIONS && NET"}], "help": "Enable or disable Unix domain (aka Local) sockets.", "children": [{"type": 3, "name": "NET_LOCAL_STREAM", "value": "n", "user_value": null, "dep": "n", "prompt": "Unix domain stream sockets", "cond": "NET_LOCAL && NET && !DISABLE_PSEUDOFS_OPERATIONS && NET", "defaults": [{"name": "y", "default": "y", "cond": "NET_LOCAL && NET && !DISABLE_PSEUDOFS_OPERATIONS && NET"}], "help": "Enable support for Unix domain SOCK_STREAM type sockets"}, {"type": 3, "name": "NET_LOCAL_DGRAM", "value": "n", "user_value": null, "dep": "n", "prompt": "Unix domain datagram sockets", "cond": "NET_LOCAL && NET && !DISABLE_PSEUDOFS_OPERATIONS && NET", "defaults": [{"name": "y", "default": "y", "cond": "NET_LOCAL && NET && !DISABLE_PSEUDOFS_OPERATIONS && NET"}], "help": "Enable support for Unix domain SOCK_DGRAM type sockets"}]}]}, {"type": 31, "dep": "y", "prompt": "TCP/IP Networking", "cond": "NET", "children": [{"type": 3, "name": "NET_TCP", "value": "y", "user_value": 2, "rev_dep": "(NET_TCP_NO_STACK && NET) || (NET_USRSOCK_TCP && NET_USRSOCK && NET)", "dep": "y", "prompt": "TCP/IP Networking", "cond": "NET", "defaults": [{"name": "n", "default": "n", "cond": "NET"}], "help": "Enable or disable TCP networking support."}, {"type": 3, "name": "NET_TCP_NO_STACK", "value": "y", "user_value": 2, "dep": "y", "prompt": "Disable TCP/IP Stack", "cond": "NET", "defaults": [{"name": "n", "default": "n", "cond": "NET"}], "selects": [{"symbol": "NET_TCP", "cond": "NET"}], "help": "Build without TCP/IP stack even if TCP networking support enabled."}, {"type": 3, "name": "NET_TCPURGDATA", "value": "n", "user_value": null, "dep": "n", "prompt": "Urgent data", "cond": "NET_TCP && !NET_TCP_NO_STACK && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_TCP && !NET_TCP_NO_STACK && NET"}], "help": "Determines if support for TCP urgent data notification should be\ncompiled in. Urgent data (out-of-band data) is a rarely used TCP feature\nthat is very seldom would be required."}, {"type": 3, "name": "NET_TCP_REASSEMBLY", "value": "n", "user_value": null, "dep": "n", "prompt": "TCP reassembly", "cond": "EXPERIMENTAL && NET_TCP && !NET_TCP_NO_STACK && NET", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && NET_TCP && !NET_TCP_NO_STACK && NET"}], "help": "Enable support for IP packet reassembly of fragmented IP packets.\n\nThis features requires an additional amount of RAM to hold the\nreassembly buffer and the reassembly code size is approximately 700\nbytes.  The reassembly buffer is of the same size as the d_buf buffer\n(configured by CONFIG_NET_xxx_MTU).\n\nNote: IP packet reassembly is not heavily tested (and, hence,\nEXPERIMENTAL).", "children": [{"type": 27, "name": "NET_TCP_REASS_MAXAGE", "value": "", "user_value": null, "dep": "n", "prompt": "IP fragment timeout", "cond": "NET_TCP_REASSEMBLY && NET_TCP && !NET_TCP_NO_STACK && NET", "defaults": [{"name": "200", "default": "200", "cond": "NET_TCP_REASSEMBLY && NET_TCP && !NET_TCP_NO_STACK && NET"}], "help": "The maximum time an IP fragment should wait in the reassembly buffer\nbefore it is dropped.  Units are deci-seconds, the range of the timer\nis 8-bits.  Default: 20 seconds."}]}, {"type": 27, "name": "NET_TCP_CONNS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of TCP/IP connections", "cond": "NET_TCP && !NET_TCP_NO_STACK && NET", "defaults": [{"name": "8", "default": "8", "cond": "NET_TCP && !NET_TCP_NO_STACK && NET"}], "help": "Maximum number of TCP/IP connections (all tasks)"}, {"type": 27, "name": "NET_MAX_LISTENPORTS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of listening ports", "cond": "NET_TCP && !NET_TCP_NO_STACK && NET", "defaults": [{"name": "20", "default": "20", "cond": "NET_TCP && !NET_TCP_NO_STACK && NET"}], "help": "Maximum number of listening TCP/IP ports (all tasks).  Default: 20"}, {"type": 3, "name": "NET_TCP_READAHEAD", "value": "n", "user_value": null, "rev_dep": "VNCSERVER && NET_TCP && !NX_LCDDRIVER && EXPERIMENTAL && NX", "dep": "n", "prompt": "Enable TCP/IP read-ahead buffering", "cond": "NET_TCP && !NET_TCP_NO_STACK && NET", "defaults": [{"name": "y", "default": "y", "cond": "NET_TCP && !NET_TCP_NO_STACK && NET"}], "selects": [{"symbol": "MM_IOB", "cond": "NET_TCP && !NET_TCP_NO_STACK && NET"}], "help": "Read-ahead buffers allows buffering of TCP/IP packets when there is no\nreceive in place to catch the TCP packet.  In that case, the packet\nwill be retained in the NuttX read-ahead buffers.\n\nYou might want to disable TCP/IP read-ahead buffering on a highly\nmemory constrained system that does not have any TCP/IP packet rate\nissues.  But, if disabled, there will probably be more packet\nretransmissions or even packet loss.\n\nMake sure that you check the setting in the I/O Buffering menu.\nThese settings are critical to the reasonable operation of read-\nahead buffering."}, {"type": 3, "name": "NET_TCP_WRITE_BUFFERS", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable TCP/IP write buffering", "cond": "NET_TCP && !NET_TCP_NO_STACK && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_TCP && !NET_TCP_NO_STACK && NET"}], "selects": [{"symbol": "MM_IOB", "cond": "NET_TCP && !NET_TCP_NO_STACK && NET"}], "help": "Write buffers allows buffering of ongoing TCP/IP packets, providing\nfor higher performance, streamed output.\n\nYou might want to disable TCP/IP write buffering on a highly memory\nmemory constrained system where there are no performance issues.", "children": [{"type": 27, "name": "NET_TCP_NWRBCHAINS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of pre-allocated I/O buffer chain heads", "cond": "NET_TCP_WRITE_BUFFERS && NET_TCP && !NET_TCP_NO_STACK && NET", "defaults": [{"name": "8", "default": "8", "cond": "NET_TCP_WRITE_BUFFERS && NET_TCP && !NET_TCP_NO_STACK && NET"}], "help": "These tiny nodes are used as \"containers\" to support queueing of\nTCP write buffers.  This setting will limit the number of TCP write\noperations that can be \"in-flight\" at any give time.  So a good\nchoice for this value would be the same as the maximum number of\nTCP connections."}, {"type": 3, "name": "NET_TCP_WRBUFFER_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Force write buffer debug", "cond": "DEBUG_FEATURES && NET_TCP_WRITE_BUFFERS && NET_TCP && !NET_TCP_NO_STACK && NET", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && NET_TCP_WRITE_BUFFERS && NET_TCP && !NET_TCP_NO_STACK && NET"}], "selects": [{"symbol": "IOB_DEBUG", "cond": "DEBUG_FEATURES && NET_TCP_WRITE_BUFFERS && NET_TCP && !NET_TCP_NO_STACK && NET"}], "help": "This option will force debug output from TCP write buffer logic,\neven without network debug output.  This is not normally something\nthat would want to do but is convenient if you are debugging the\nwrite buffer logic and do not want to get overloaded with other\nnetwork-related debug output."}, {"type": 3, "name": "NET_TCP_WRBUFFER_DUMP", "value": "n", "user_value": null, "dep": "n", "prompt": "Force write buffer dump", "cond": "(DEBUG_NET || NET_TCP_WRBUFFER_DEBUG) && NET_TCP_WRITE_BUFFERS && NET_TCP && !NET_TCP_NO_STACK && NET", "defaults": [{"name": "n", "default": "n", "cond": "(DEBUG_NET || NET_TCP_WRBUFFER_DEBUG) && NET_TCP_WRITE_BUFFERS && NET_TCP && !NET_TCP_NO_STACK && NET"}], "selects": [{"symbol": "IOB_DEBUG", "cond": "(DEBUG_NET || NET_TCP_WRBUFFER_DEBUG) && NET_TCP_WRITE_BUFFERS && NET_TCP && !NET_TCP_NO_STACK && NET"}], "help": "Dump the contents of the write buffers.  You do not want to do this\nunless you really want to analyze the write buffer transfers in\ndetail."}]}, {"type": 27, "name": "NET_TCP_RECVDELAY", "value": "", "user_value": null, "dep": "n", "prompt": "TCP Rx delay", "cond": "NET_TCP && !NET_TCP_NO_STACK && NET", "defaults": [{"name": "0", "default": "0", "cond": "NET_TCP && !NET_TCP_NO_STACK && NET"}], "help": "If NET_TCP_READAHEAD_BUFFERS is undefined, then there will be no buffering\nof TCP/IP packets:  Any TCP/IP packet received will be ACKed, but its contents\nwill be dropped in the bit-bucket.\n\nOne low-performance option is delay for a short period of time after a\nTCP/IP packet is received to see if another comes right behind it. Then\nthe packet data from both can be combined.  This option only makes since\nif performance is not an issue and you need to handle short bursts of\nsmall, back-to-back packets.  The delay is in units of deciseconds."}, {"type": 3, "name": "NET_TCPBACKLOG", "value": "n", "user_value": null, "dep": "n", "prompt": "TCP/IP backlog support", "cond": "NET_TCP && !NET_TCP_NO_STACK && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_TCP && !NET_TCP_NO_STACK && NET"}], "help": "Incoming connections pend in a backlog until accept() is called.\nThe size of the backlog is selected when listen() is called."}, {"type": 3, "name": "NET_TCP_SPLIT", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable packet splitting", "cond": "!NET_TCP_WRITE_BUFFERS && NET_TCP && !NET_TCP_NO_STACK && NET", "defaults": [{"name": "n", "default": "n", "cond": "!NET_TCP_WRITE_BUFFERS && NET_TCP && !NET_TCP_NO_STACK && NET"}], "help": "send() will not return until the transfer has been ACKed by the\nrecipient.  But under RFC 1122, the host need not ACK each packet\nimmediately; the host may wait for 500 MS before ACKing.  This\ncombination can cause very slow performance with small transfers are\nmade to an RFC 1122 client.  However, the RFC 1122 must ACK at least\nevery second (odd) packet.\n\nThis option enables logic to trick the RFC 1122 host be exploiting\nthis last RFC 1122 requirement:  If an odd number of packets were to\nbe sent, then send() will split the last even packet to guarantee\nthat an even number of packets will be sent and the RFC 1122 host\nwill ACK the final packet immediately.", "children": [{"type": 27, "name": "NET_TCP_SPLIT_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Split size threshold", "cond": "NET_TCP_SPLIT && NET_TCP && !NET_TCP_NO_STACK && NET", "defaults": [{"name": "40", "default": "40", "cond": "NET_TCP_SPLIT && NET_TCP && !NET_TCP_NO_STACK && NET"}], "help": "Packets of this size or smaller than this will not be split."}]}, {"type": 3, "name": "NET_SENDFILE", "value": "n", "user_value": null, "dep": "n", "prompt": "Optimized network sendfile()", "cond": "NET_TCP && !NET_TCP_NO_STACK && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_TCP && !NET_TCP_NO_STACK && NET"}], "help": "Support larger, higher performance sendfile() for transferring\nfiles out a TCP connection."}]}, {"type": 31, "dep": "y", "prompt": "UDP Networking", "cond": "NET", "children": [{"type": 3, "name": "NET_UDP", "value": "y", "user_value": 2, "rev_dep": "(NET_UDP_NO_STACK && NET) || (NET_USRSOCK_UDP && NET_USRSOCK && NET)", "dep": "y", "prompt": "UDP Networking", "cond": "NET && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET && NET"}], "help": "Enable or disable UDP networking support."}, {"type": 3, "name": "NET_UDP_NO_STACK", "value": "y", "user_value": 2, "dep": "y", "prompt": "Disable UDP/IP Stack", "cond": "NET", "defaults": [{"name": "n", "default": "n", "cond": "NET"}], "selects": [{"symbol": "NET_UDP", "cond": "NET"}], "help": "Build without UDP/IP stack even if UDP networking support enabled."}, {"type": 3, "name": "NET_UDP_CHECKSUMS", "value": "n", "user_value": null, "dep": "n", "prompt": "UDP checksums", "cond": "NET_UDP && !NET_UDP_NO_STACK && NET", "defaults": [{"name": "y", "default": "y", "cond": "NET_IPv6 && NET_UDP && !NET_UDP_NO_STACK && NET"}, {"name": "n", "default": "n", "cond": "!NET_IPv6 && NET_UDP && !NET_UDP_NO_STACK && NET"}], "help": "Enable/disable UDP checksum support.  UDP checksum support is\nREQUIRED for IPv6."}, {"type": 27, "name": "NET_UDP_CONNS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of UDP sockets", "cond": "NET_UDP && !NET_UDP_NO_STACK && NET", "defaults": [{"name": "8", "default": "8", "cond": "NET_UDP && !NET_UDP_NO_STACK && NET"}], "help": "The maximum amount of open concurrent UDP sockets"}, {"type": 3, "name": "NET_BROADCAST", "value": "n", "user_value": null, "dep": "n", "prompt": "UDP broadcast Rx support", "cond": "NET_UDP && !NET_UDP_NO_STACK && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_UDP && !NET_UDP_NO_STACK && NET"}], "help": "Incoming UDP broadcast support"}, {"type": 3, "name": "NET_UDP_READAHEAD", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable UDP/IP read-ahead buffering", "cond": "NET_UDP && !NET_UDP_NO_STACK && NET", "defaults": [{"name": "y", "default": "y", "cond": "NET_UDP && !NET_UDP_NO_STACK && NET"}], "selects": [{"symbol": "MM_IOB", "cond": "NET_UDP && !NET_UDP_NO_STACK && NET"}]}]}, {"type": 31, "dep": "y", "prompt": "IEEE 802.15.4 socket support", "cond": "NET", "children": [{"type": 3, "name": "NET_IEEE802154", "value": "n", "user_value": null, "dep": "n", "prompt": "IEEE 802.15.4 socket support", "cond": "WIRELESS_IEEE802154 && NET", "defaults": [{"name": "n", "default": "n", "cond": "WIRELESS_IEEE802154 && NET"}], "selects": [{"symbol": "NETDEV_IOCTL", "cond": "WIRELESS_IEEE802154 && NET"}], "help": "Enable support for raw, IEEE 802.15.4 sockets.\n\nRaw sockets allow receiving and transmitting IEEE 802.15.3 radio\nframes without a layer2 protocol such as 6LoWPAN in between. Frames\nreceived are copied into a IEEE 802.15.4 socket tap before they\nenter the network. Frames written into a IEEE 802.15.4 socket will\nbypass the network altogether and will be sent directly to the\nIEEE 802.15.4 MAC network interface driver outgoing frame queue.", "children": [{"type": 27, "name": "NET_IEEE802154_FRAMELEN", "value": "", "user_value": null, "dep": "n", "prompt": "IEEE802.15.4 Frame Length", "cond": "NET_IEEE802154 && NET", "defaults": [{"name": "127", "default": "127", "cond": "NET_IEEE802154 && NET"}], "ranges": [{"min": "1", "max": "999999", "cond": "NET_IEEE802154 && NET"}], "help": "For standard IEEE 802.15.4 radios, this should always be 127 bytes.\nHowever, some IEEE 802.15.4 radios may non-standard frame lengths.\n\nThis setting is currently used only for detection data transfers\nthat would exceed the radio frame length."}, {"type": 27, "name": "NET_IEEE802154_NCONNS", "value": "", "user_value": null, "dep": "n", "prompt": "Max IEEE 802.15.4 sockets", "cond": "NET_IEEE802154 && NET", "defaults": [{"name": "4", "default": "4", "cond": "NET_IEEE802154 && NET"}]}, {"type": 27, "name": "NET_IEEE802154_NCONTAINERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of pre-allocated frame containers", "cond": "NET_IEEE802154 && NET", "defaults": [{"name": "8", "default": "8", "cond": "NET_IEEE802154 && NET"}], "help": "This specifies the total number of preallocated frame containers.\nOne must be allocated with each incoming frame."}, {"type": 27, "name": "NET_IEEE802154_BACKLOG", "value": "", "user_value": null, "dep": "n", "prompt": "Maximum frame backlog", "cond": "NET_IEEE802154 && NET", "defaults": [{"name": "8", "default": "8", "cond": "NET_IEEE802154 && NET"}], "ranges": [{"min": "0", "max": "255", "cond": "NET_IEEE802154 && NET"}], "help": "As frames are received, then are help in an RX queue.  They remain\nin the RX queue until application logic reads the queue frames.  To\nprevent overrun, the maximum backlog may be set to a nonzero value.\nWhat the backlog of queue frames reaches that count, the olds frame\nwill be freed, preventing overrun at the cost of losing the oldest\nframes.\n\nNOTE: The special value of zero will disable all backlog checkes."}]}]}, {"type": 31, "dep": "n", "prompt": "ICMP Networking Support", "cond": "NET_IPv4 && NET", "children": [{"type": 3, "name": "NET_ICMP", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable ICMP networking", "cond": "NET_IPv4 && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_IPv4 && NET"}], "help": "Enable minimal ICMP support. Includes built-in support\nfor sending replies to received ECHO (ping) requests.", "children": [{"type": 3, "name": "NET_ICMP_PING", "value": "n", "user_value": null, "dep": "n", "prompt": "ICMP ping interfaces", "cond": "BUILD_FLAT && NET_ICMP && NET_IPv4 && NET", "defaults": [{"name": "n", "default": "n", "cond": "BUILD_FLAT && NET_ICMP && NET_IPv4 && NET"}], "help": "Provide interfaces to support application level support for\nfor sending ECHO (ping) requests and associating ECHO replies.\n\nNOTE: Calling these interfaces from application space is a\nviolation of the OS/application interface but for historical\nreasons, is permitted in the flat build."}]}]}, {"type": 31, "dep": "n", "prompt": "ICMPv6 Networking Support", "cond": "NET_IPv6 && NET", "children": [{"type": 3, "name": "NET_ICMPv6", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable ICMPv6 networking", "cond": "NET && NET_IPv6 && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET && NET_IPv6 && NET"}], "help": "Enable minimal ICMPv6 support. Includes built-in support\nfor sending replies to received ECHO (ping) requests.", "children": [{"type": 3, "name": "NET_ICMPv6_PING", "value": "n", "user_value": null, "dep": "n", "prompt": "ICMPv6 ping interfaces", "cond": "BUILD_FLAT && NET_ICMPv6 && NET_IPv6 && NET", "defaults": [{"name": "n", "default": "n", "cond": "BUILD_FLAT && NET_ICMPv6 && NET_IPv6 && NET"}], "help": "Provide interfaces to support application level support for\nfor sending ECHO (ping) requests and associating ECHO replies.\n\nNOTE: Calling these interfaces from application space is a\nviolation of the OS/application interface but for historical\nreasons, is permitted in the flat build."}, {"type": 3, "name": "NET_ICMPv6_NEIGHBOR", "value": "n", "user_value": null, "dep": "n", "prompt": "Solicit destination addresses", "cond": "NET_ICMPv6 && NET_IPv6 && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_ICMPv6 && NET_IPv6 && NET"}], "help": "Enable logic to send ICMPv6 neighbor solicitation requests if\nthe target IPv6 address mapping does not appear in the Neighbor\ntable.", "children": [{"type": 27, "name": "ICMPv6_NEIGHBOR_MAXTRIES", "value": "", "user_value": null, "dep": "n", "prompt": "ICMPv6 neighbor solicitation retries", "cond": "NET_ICMPv6_NEIGHBOR && NET_ICMPv6 && NET_IPv6 && NET", "defaults": [{"name": "5", "default": "5", "cond": "NET_ICMPv6_NEIGHBOR && NET_ICMPv6 && NET_IPv6 && NET"}], "help": "Send the Neighbor solicitation this number of times before giving\nup and deciding that the target IP6 address is non reachable."}, {"type": 27, "name": "ICMPv6_NEIGHBOR_DELAYMSEC", "value": "", "user_value": null, "dep": "n", "prompt": "ICMPv6 neighbor re-solicit delay", "cond": "NET_ICMPv6_NEIGHBOR && NET_ICMPv6 && NET_IPv6 && NET", "defaults": [{"name": "20", "default": "20", "cond": "NET_ICMPv6_NEIGHBOR && NET_ICMPv6 && NET_IPv6 && NET"}], "help": "Wait this number of milliseconds after sending the Neighbor\nSolicitation before checking if the IPv6 address mapping is present\nin the Neighbor Table.  This time should be related to the maximum\nround trip time on the network since it is basically the time from\nwhen an Neighbor Solicitation is sent until the Neighbor\nAdvertisement is received."}]}, {"type": 3, "name": "NET_ICMPv6_AUTOCONF", "value": "n", "user_value": null, "dep": "n", "prompt": "ICMPv6 auto-configuration", "cond": "NET_ICMPv6 && NET_IPv6 && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_ICMPv6 && NET_IPv6 && NET"}], "help": "Enable ioctl() logic that implements ICMPv6 auto configuration.\nICMPv6 auto configuration is an alternative to DHCPv6 for obtaining\nan IPv6 address from a router.", "children": [{"type": 27, "name": "ICMPv6_AUTOCONF_MAXTRIES", "value": "", "user_value": null, "dep": "n", "prompt": "ICMPv6 router solicitation retries", "cond": "NET_ICMPv6_AUTOCONF && NET_ICMPv6 && NET_IPv6 && NET", "defaults": [{"name": "5", "default": "5", "cond": "NET_ICMPv6_AUTOCONF && NET_ICMPv6 && NET_IPv6 && NET"}], "help": "Send the Router solicitation this number of times before giving\nup and deciding that no router is going to provide an IP address."}, {"type": 27, "name": "ICMPv6_AUTOCONF_DELAYMSEC", "value": "", "user_value": null, "dep": "n", "prompt": "ICMPv6 router re-solicit delay", "cond": "NET_ICMPv6_AUTOCONF && NET_ICMPv6 && NET_IPv6 && NET", "defaults": [{"name": "20", "default": "20", "cond": "NET_ICMPv6_AUTOCONF && NET_ICMPv6 && NET_IPv6 && NET"}], "help": "Wait this number of milliseconds before re-sending the Router\nSolicitation.  This time should be related to the maximum\nround trip time on the network since it is basically the time from\nwhen an Router Solicitation is sent until the Router\nAdvertisement is received."}]}, {"type": 3, "name": "NET_ICMPv6_ROUTER", "value": "n", "user_value": null, "dep": "n", "prompt": "Router Advertisement", "cond": "NET_ICMPv6 && NET_IPv6 && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_ICMPv6 && NET_IPv6 && NET"}], "help": "In a router-less environment, NuttX can be configured to provide a\nresponse to Router Solicitation messages and, hence, providing\naddressing to IPv6 nodes on the network.", "children": [{"type": 27, "name": "NET_ICMPv6_PREFLEN", "value": "", "user_value": null, "dep": "n", "prompt": "Prefix length", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET", "defaults": [{"name": "64", "default": "64", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET"}], "ranges": [{"min": "0", "max": "128", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET"}], "help": "The length (in bits) of the IPv6 address prefix.  This is the number\nof MS bits under the network mask.  The default of 64 would\ncorrespond to a network mask of:\n\n        0xffff:0xffff:0xffff:0xffff:0x0000:0x0000:0x0000:0x0000."}, {"type": 6, "dep": "n", "prompt": "Router Prefix", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET"}, {"type": 24, "name": "NET_ICMPv6_PREFIX_1", "value": "", "user_value": null, "dep": "n", "prompt": "[0]", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET", "defaults": [{"name": "0xfc00", "default": "0xfc00", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET"}], "ranges": [{"min": "0x0", "max": "0xffff", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET"}], "help": "This the IPv6 address prefix that will be provided in the IPv6 Router\nAdvertisement message.  This is the first of the 8-values.  The\ndefault for all eight values is fc00::0."}, {"type": 24, "name": "NET_ICMPv6_PREFIX_2", "value": "", "user_value": null, "dep": "n", "prompt": "[1]", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET", "defaults": [{"name": "0x0000", "default": "0x0000", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET"}], "ranges": [{"min": "0x0", "max": "0xffff", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET"}], "help": "This the IPv6 address prefix that will be provided in the IPv6 Router\nAdvertisement message.  This is the second of the 8-values.  The\ndefault for all eight values is fc00::0."}, {"type": 24, "name": "NET_ICMPv6_PREFIX_3", "value": "", "user_value": null, "dep": "n", "prompt": "[2]", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET", "defaults": [{"name": "0x0000", "default": "0x0000", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET"}], "ranges": [{"min": "0x0", "max": "0xffff", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET"}], "help": "This the IPv6 address prefix that will be provided in the IPv6 Router\nAdvertisement message.  This is the third of the 8-values.  The\ndefault for all eight values is fc00::0."}, {"type": 24, "name": "NET_ICMPv6_PREFIX_4", "value": "", "user_value": null, "dep": "n", "prompt": "[3]", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET", "defaults": [{"name": "0x0000", "default": "0x0000", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET"}], "ranges": [{"min": "0x0", "max": "0xffff", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET"}], "help": "This the IPv6 address prefix that will be provided in the IPv6 Router\nAdvertisement message.  This is the fourth of the 8-values.  The\ndefault for all eight values is fc00::0."}, {"type": 24, "name": "NET_ICMPv6_PREFIX_5", "value": "", "user_value": null, "dep": "n", "prompt": "[4]", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET", "defaults": [{"name": "0x0000", "default": "0x0000", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET"}], "ranges": [{"min": "0x0", "max": "0xffff", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET"}], "help": "This the IPv6 address prefix that will be provided in the IPv6 Router\nAdvertisement message.  This is the fifth of the 8-values.  The\ndefault for all eight values is fc00::0."}, {"type": 24, "name": "NET_ICMPv6_PREFIX_6", "value": "", "user_value": null, "dep": "n", "prompt": "[5]", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET", "defaults": [{"name": "0x0000", "default": "0x0000", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET"}], "ranges": [{"min": "0x0", "max": "0xffff", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET"}], "help": "This the IPv6 address prefix that will be provided in the IPv6 Router\nAdvertisement message.  This is the sixth of the 8-values.  The\ndefault for all eight values is fc00::0."}, {"type": 24, "name": "NET_ICMPv6_PREFIX_7", "value": "", "user_value": null, "dep": "n", "prompt": "[6]", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET", "defaults": [{"name": "0x0000", "default": "0x0000", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET"}], "ranges": [{"min": "0x0", "max": "0xffff", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET"}], "help": "This the IPv6 address prefix that will be provided in the IPv6 Router\nAdvertisement message.  This is the seventh of the 8-values.  The\ndefault for all eight values is fc00::0."}, {"type": 24, "name": "NET_ICMPv6_PREFIX_8", "value": "", "user_value": null, "dep": "n", "prompt": "[7]", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET", "defaults": [{"name": "0x0000", "default": "0x0000", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET"}], "ranges": [{"min": "0x0", "max": "0xffff", "cond": "NET_ICMPv6_ROUTER && NET_ICMPv6 && NET_IPv6 && NET"}], "help": "This the IPv6 address prefix that will be provided in the IPv6 Router\nAdvertisement message.  This is the last of the 8-values.  The\ndefault for all eight values is fc00::0."}]}]}]}, {"type": 3, "name": "NET_IGMP", "value": "n", "user_value": 0, "dep": "y", "prompt": "IGMPv2 client support", "cond": "NET && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET && NET"}], "help": "Enable IGMPv2 client support."}, {"type": 31, "dep": "y", "prompt": "ARP Configuration", "cond": "NET", "children": [{"type": 3, "name": "NET_ARP", "value": "n", "user_value": null, "dep": "n", "defaults": [{"name": "y", "default": "y", "cond": "NET_ETHERNET && NET_IPv4 && NET"}], "help": "This setting is currently overridden by logic in include/nuttx/net"}, {"type": 27, "name": "NET_ARPTAB_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "ARP table size", "cond": "NET_ARP && NET", "defaults": [{"name": "16", "default": "16", "cond": "NET_ARP && NET"}], "help": "The size of the ARP table (in entries)."}, {"type": 27, "name": "NET_ARP_MAXAGE", "value": "", "user_value": null, "dep": "n", "prompt": "Max ARP entry age", "cond": "NET_ARP && NET", "defaults": [{"name": "120", "default": "120", "cond": "NET_ARP && NET"}], "help": "The maximum age of ARP table entries measured in deciseconds.  The\ndefault value of 120 corresponds to 20 minutes (BSD default)."}, {"type": 3, "name": "NET_ARP_IPIN", "value": "n", "user_value": null, "dep": "n", "prompt": "ARP address harvesting", "cond": "NET_ARP && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_ARP && NET"}], "help": "Harvest IP/MAC address mappings from the ARP table\nfrom incoming IP packets."}, {"type": 3, "name": "NET_ARP_SEND", "value": "n", "user_value": null, "dep": "n", "prompt": "ARP send", "cond": "NET_ARP && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_ARP && NET"}], "help": "Enable logic to send ARP requests if the target IP address mapping\ndoes not appear in the ARP table.", "children": [{"type": 27, "name": "ARP_SEND_MAXTRIES", "value": "", "user_value": null, "dep": "n", "prompt": "ARP send retries", "cond": "NET_ARP_SEND && NET_ARP && NET", "defaults": [{"name": "5", "default": "5", "cond": "NET_ARP_SEND && NET_ARP && NET"}], "help": "Send the ARP request this number of times before giving up and\ndeciding that the target IP address is non reachable."}, {"type": 27, "name": "ARP_SEND_DELAYMSEC", "value": "", "user_value": null, "dep": "n", "prompt": "ARP re-send delay", "cond": "NET_ARP_SEND && NET_ARP && NET", "defaults": [{"name": "20", "default": "20", "cond": "NET_ARP_SEND && NET_ARP && NET"}], "help": "Wait this number of milliseconds after sending the ARP request\nbefore checking if the IP address mapping is present in the ARP\ntable.  This time should be related to the maximum round trip time\non the network since it is basically the time from when an ARP\nrequest is sent until the response is received."}]}, {"type": 3, "name": "NET_ARP_DUMP", "value": "n", "user_value": null, "dep": "n", "prompt": "Dump ARP packet header", "cond": "DEBUG_NET_INFO && NET_ARP && NET", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_NET_INFO && NET_ARP && NET"}], "help": "Dump ARP packets to the SYSLOG device."}]}, {"type": 31, "dep": "y", "prompt": "User-space networking stack API", "cond": "NET", "children": [{"type": 3, "name": "NET_USRSOCK", "value": "n", "user_value": 0, "dep": "y", "prompt": "User-space networking stack API", "cond": "NET && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET && NET"}], "help": "Enable or disable user-space networking stack support.", "children": [{"type": 27, "name": "NET_USRSOCK_CONNS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of usrsock connections", "cond": "NET_USRSOCK && NET", "defaults": [{"name": "6", "default": "6", "cond": "NET_USRSOCK && NET"}], "help": "Maximum number of usrsock connections (all tasks).\n\nNote: Usrsock daemon can impose additional restrictions for\nmaximum number of concurrent connections supported."}, {"type": 3, "name": "NET_USRSOCK_NO_INET", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable PF_INET for usrsock", "cond": "NET_USRSOCK && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_USRSOCK && NET"}], "help": ""}, {"type": 3, "name": "NET_USRSOCK_NO_INET6", "value": "n", "user_value": null, "dep": "n", "prompt": "Disable PF_INET6 for usrsock", "cond": "NET_USRSOCK && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_USRSOCK && NET"}], "help": ""}, {"type": 3, "name": "NET_USRSOCK_UDP", "value": "n", "user_value": null, "dep": "n", "prompt": "User-space daemon provides UDP sockets", "cond": "NET_USRSOCK && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_USRSOCK && NET"}], "selects": [{"symbol": "NET_UDP", "cond": "NET_USRSOCK && NET"}], "help": ""}, {"type": 3, "name": "NET_USRSOCK_TCP", "value": "n", "user_value": null, "dep": "n", "prompt": "User-space daemon provides TCP sockets", "cond": "NET_USRSOCK && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_USRSOCK && NET"}], "selects": [{"symbol": "NET_TCP", "cond": "NET_USRSOCK && NET"}], "help": ""}, {"type": 3, "name": "NET_USRSOCK_OTHER", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable other protocol families in addition of INET & INET6", "cond": "NET_USRSOCK && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_USRSOCK && NET"}], "help": ""}]}]}, {"type": 31, "dep": "y", "prompt": "Deivce-specific networking stack API", "cond": "NET", "children": [{"type": 3, "name": "NET_DEV_SPEC_SOCK", "value": "y", "user_value": 2, "dep": "y", "prompt": "Deivce-specific networking stack API", "cond": "NET && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET && NET"}], "help": "Enable or disable deivce-specific networking stack support.\nImplement socket interface depending on device specification\nand register that using devspecsock_register.", "children": [{"type": 27, "name": "NET_DEV_SPEC_SOCK_CONNS", "value": "10", "user_value": "10", "dep": "y", "prompt": "Number of deivce-specific connections", "cond": "NET_DEV_SPEC_SOCK && NET", "defaults": [{"name": "10", "default": "10", "cond": "NET_DEV_SPEC_SOCK && NET"}], "help": "Maximum number of deivce-specific connections (all tasks)."}]}]}, {"type": 3, "name": "NET_ARCH_INCR32", "value": "n", "user_value": 0, "dep": "y", "prompt": "Architecture-specific net_incr32()", "cond": "NET", "defaults": [{"name": "n", "default": "n", "cond": "NET"}], "help": "Define if you architecture provided an optimized version of\nnet_incr32() with prototype:\n\n        void net_incr32(FAR uint8_t *op32, uint16_t op16)"}, {"type": 3, "name": "NET_ARCH_CHKSUM", "value": "n", "user_value": 0, "dep": "y", "prompt": "Architecture-specific net_chksum()", "cond": "NET", "defaults": [{"name": "n", "default": "n", "cond": "NET"}], "help": "Define if you architecture provided an optimized version of\nfunctions with the following prototypes:\n\n        uint16_t net_chksum(FAR uint16_t *data, uint16_t len)\n        uint16_t ipv4_chksum(FAR struct net_driver_s *dev)\n        uint16_t tcp_ipv4_chksum(FAR struct net_driver_s *dev);\n        uint16_t tcp_ipv6_chksum(FAR struct net_driver_s *dev);\n        uint16_t udp_ipv4_chksum(FAR struct net_driver_s *dev);\n        uint16_t udp_ipv6_chksum(FAR struct net_driver_s *dev);"}, {"type": 3, "name": "NET_STATISTICS", "value": "n", "user_value": 0, "dep": "y", "prompt": "Collect network statistics", "cond": "NET", "defaults": [{"name": "n", "default": "n", "cond": "NET"}], "help": "Network layer statistics on or off"}, {"type": 3, "name": "NET_HAVE_STAR", "value": "n", "user_value": 0, "rev_dep": "NET_6LOWPAN && NET_IPv6 && NET", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "NET"}], "help": "Automatically enabled if at least one selected L2 protocol supports\na STAR topology.  In order to support the star topology, the L2\nprotocol must support relaying all packets to a well-known hub node."}, {"type": 31, "dep": "y", "prompt": "Network Topologies", "cond": "NET", "children": [{"type": 3, "name": "NET_STAR", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable star topology", "cond": "NET_HAVE_STAR && NET_IPv6 && NET", "defaults": [{"name": "n", "default": "n", "cond": "NET_HAVE_STAR && NET_IPv6 && NET"}], "help": "Enable support for a star network topology.\n\nNOTE: Currently only supported by 6LoWPAN.\nNOTE: L2 forwarding only supported for IPv6.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Node role", "cond": "NET_STAR && NET", "defaults": [{"name": "NET_STARPOINT", "default": "n", "cond": "NET_STAR && NET"}], "help": "Specifies the role of this not in the star configuration.", "children": [{"type": 3, "name": "NET_STARPOINT", "value": "n", "user_value": null, "dep": "n", "prompt": "Point node in star", "cond": "y", "help": "The node is a \"point\" in the star configuration and must send all\npackets to the star hub node."}, {"type": 3, "name": "NET_STARHUB", "value": "n", "user_value": null, "dep": "n", "prompt": "Hub node of star", "cond": "y", "selects": [{"symbol": "NET_IPFORWARD", "cond": "y"}], "help": "This is the \"hub\" node in the star configurations.  It will receive\npackets packets from all \"point\" nodes and perform L2 forwarding of\nthe packets that are not destined for this node."}]}]}]}, {"type": 31, "dep": "y", "prompt": "Routing Table Configuration", "cond": "NET", "children": [{"type": 3, "name": "NET_ROUTE", "value": "n", "user_value": 0, "dep": "y", "prompt": "Routing table support", "cond": "NET", "defaults": [{"name": "n", "default": "n", "cond": "NET"}], "help": "Build in support for a routing table.  See include/net/route.h", "children": [{"type": 27, "name": "NET_MAXROUTES", "value": "", "user_value": null, "dep": "n", "prompt": "Routing table size", "cond": "NET_ROUTE && NET", "defaults": [{"name": "4", "default": "4", "cond": "NET_ROUTE && NET"}], "help": "The size of the routing table (in entries)."}]}]}, {"type": 47, "name": "NET_HOSTNAME", "value": "", "user_value": "", "dep": "y", "prompt": "Host name for this device", "cond": "NET", "defaults": [{"name": "", "default": "", "cond": "NET"}], "help": "A unique name to identify device on the network"}]}]}, {"type": 31, "dep": "y", "prompt": "Crypto API", "cond": "y", "children": [{"type": 3, "name": "CRYPTO", "value": "n", "user_value": 0, "rev_dep": "WL_CC3000 && DRIVERS_WIRELESS", "dep": "y", "prompt": "Crypto API support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enable or disable Crypto API features", "children": [{"type": 3, "name": "CRYPTO_AES", "value": "n", "user_value": null, "dep": "n", "prompt": "AES cypher support", "cond": "CRYPTO", "defaults": [{"name": "n", "default": "n", "cond": "CRYPTO"}]}, {"type": 3, "name": "CRYPTO_ALGTEST", "value": "n", "user_value": null, "dep": "n", "prompt": "Perform automatic crypto algorithms test on startup", "cond": "CRYPTO", "defaults": [{"name": "n", "default": "n", "cond": "CRYPTO"}], "children": [{"type": 3, "name": "CRYPTO_AES128_DISABLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Omit 128-bit AES tests", "cond": "CRYPTO_ALGTEST && CRYPTO", "defaults": [{"name": "n", "default": "n", "cond": "CRYPTO_ALGTEST && CRYPTO"}]}, {"type": 3, "name": "CRYPTO_AES192_DISABLE", "value": "n", "user_value": null, "rev_dep": "STM32_AES && CRYPTO_ALGTEST && STM32_HAVE_AES && ARCH_CHIP_STM32 && ARCH_ARM", "dep": "n", "prompt": "Omit 192-bit AES tests", "cond": "CRYPTO_ALGTEST && CRYPTO", "defaults": [{"name": "n", "default": "n", "cond": "CRYPTO_ALGTEST && CRYPTO"}]}, {"type": 3, "name": "CRYPTO_AES256_DISABLE", "value": "n", "user_value": null, "rev_dep": "STM32_AES && CRYPTO_ALGTEST && STM32_HAVE_AES && ARCH_CHIP_STM32 && ARCH_ARM", "dep": "n", "prompt": "Omit 256-bit AES tests", "cond": "CRYPTO_ALGTEST && CRYPTO", "defaults": [{"name": "n", "default": "n", "cond": "CRYPTO_ALGTEST && CRYPTO"}]}]}, {"type": 3, "name": "CRYPTO_CRYPTODEV", "value": "n", "user_value": null, "dep": "n", "prompt": "cryptodev support", "cond": "CRYPTO", "defaults": [{"name": "n", "default": "n", "cond": "CRYPTO"}]}, {"type": 3, "name": "CRYPTO_SW_AES", "value": "n", "user_value": null, "rev_dep": "WL_CC3000 && DRIVERS_WIRELESS", "dep": "n", "prompt": "Software AES library", "cond": "CRYPTO", "defaults": [{"name": "n", "default": "n", "cond": "CRYPTO"}], "help": "Enable the software AES library as described in\ninclude/nuttx/crypto/aes.h\n\nTODO: Adapt interfaces so that they are consistent with H/W AES\nimplemenations.  This needs to support up_aesinitialize() and\naes_cypher() per include/nuttx/crypto/crypto.h."}, {"type": 3, "name": "CRYPTO_BLAKE2S", "value": "n", "user_value": null, "rev_dep": "CRYPTO_RANDOM_POOL && CRYPTO", "dep": "n", "prompt": "BLAKE2s hash algorithm", "cond": "CRYPTO", "defaults": [{"name": "n", "default": "n", "cond": "CRYPTO"}], "help": "Enable the BLAKE2s hash algorithm"}, {"type": 3, "name": "CRYPTO_RANDOM_POOL", "value": "n", "user_value": null, "dep": "n", "prompt": "Entropy pool and strong randon number generator", "cond": "CRYPTO", "defaults": [{"name": "n", "default": "n", "cond": "CRYPTO"}], "selects": [{"symbol": "CRYPTO_BLAKE2S", "cond": "CRYPTO"}], "help": "Entropy pool gathers environmental noise from device drivers,\nuser-space, etc., and returns good random numbers, suitable\nfor cryptographic use. Based on entropy pool design from\n*BSDs and uses BLAKE2Xs algorithm for CSPRNG output.\n\nNOTE: May not actually be cyptographically secure, if\nnot enough entropy is made available to the entropy pool.", "children": [{"type": 3, "name": "CRYPTO_RANDOM_POOL_COLLECT_IRQ_RANDOMNESS", "value": "n", "user_value": null, "dep": "n", "prompt": "Use interrupts to feed timing randomness to entropy pool", "cond": "CRYPTO_RANDOM_POOL && CRYPTO", "defaults": [{"name": "y", "default": "y", "cond": "CRYPTO_RANDOM_POOL && CRYPTO"}], "help": "Feed entropy pool with interrupt randomness from interrupt\ndispatch function 'irq_dispatch'. This adds some overhead\nfor every interrupt handled."}]}]}]}, {"type": 31, "dep": "y", "prompt": "File Systems", "cond": "y", "children": [{"type": 6, "dep": "y", "prompt": "File system configuration", "cond": "y"}, {"type": 3, "name": "DISABLE_MOUNTPOINT", "value": "n", "user_value": 0, "dep": "y", "prompt": "Disable support for mount points", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "FS_AUTOMOUNTER", "value": "n", "user_value": 0, "dep": "y", "prompt": "Auto-mounter", "cond": "!DISABLE_MOUNTPOINT", "defaults": [{"name": "n", "default": "n", "cond": "!DISABLE_MOUNTPOINT"}], "selects": [{"symbol": "SCHED_LPWORK", "cond": "!DISABLE_MOUNTPOINT"}], "help": "The automounter provides an OS-internal mechanism for automatically\nmounting and unmounting removable media as the media is inserted and\nremoved.  See include/nuttx/fs/automout.h for interfacing details.", "children": [{"type": 3, "name": "FS_AUTOMOUNTER_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Auto-mounter debug", "cond": "FS_AUTOMOUNTER && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "FS_AUTOMOUNTER && DEBUG_FEATURES"}], "help": "Normally, the auto-mounter will generate debug output when sub-system\nlevel file system debug is enabled.  This option will select debug\noutput from the logic related to the auto-mount feature even when file\nsystem debug is not enable.  This is useful primarily for in vivo\nunit testing of the auto-mount feature."}]}, {"type": 3, "name": "DISABLE_PSEUDOFS_OPERATIONS", "value": "n", "user_value": 0, "dep": "y", "prompt": "Disable pseudo-filesystem operations", "cond": "y", "defaults": [{"name": "y", "default": "y", "cond": "DEFAULT_SMALL"}, {"name": "n", "default": "n", "cond": "!DEFAULT_SMALL"}], "help": "Disable certain operations on pseudo-file systems include mkdir,\nrmdir, unlink, and rename.  These are necessary for the logical\ncompleteness of the illusion created by the pseudo-filesystem.\nHowever, in practical embedded system, they are seldom needed and\nyou can save a little FLASH space by disabling the capability."}, {"type": 3, "name": "PSEUDOFS_SOFTLINKS", "value": "n", "user_value": 0, "dep": "y", "prompt": "Pseudo-filesystem soft links", "cond": "!DISABLE_PSEUDOFS_OPERATIONS", "defaults": [{"name": "n", "default": "n", "cond": "!DISABLE_PSEUDOFS_OPERATIONS"}], "help": "Enable support for soft links in the pseudeo file system.  Soft\nlinks are not supported within mounted volumes by any NuttX file\nsystem.  However, if this option is selected, then soft links\nmay be add in the pseudo file system.  This might be useful, for\nto link a directory in the pseudo-file system, such as /bin, to\nto a directory in a mounted volume, say /mnt/sdcard/bin."}, {"type": 3, "name": "FS_READABLE", "value": "y", "user_value": 2, "rev_dep": "(USBMSC && USBDEV) || (FS_FAT && !DISABLE_MOUNTPOINT) || (NFS && NET_UDP && NET_IPv4 && !DISABLE_MOUNTPOINT) || (FS_NXFFS && !DISABLE_MOUNTPOINT) || (FS_ROMFS && !DISABLE_MOUNTPOINT) || (FS_TMPFS && !DISABLE_MOUNTPOINT) || (FS_SMARTFS && !DISABLE_MOUNTPOINT) || (FS_BINFS && BUILTIN) || FS_PROCFS || (FS_HOSTFS && !DISABLE_MOUNTPOINT && ARCH_SIM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Automatically selected if any readable file system is selected"}, {"type": 3, "name": "FS_WRITABLE", "value": "y", "user_value": 2, "rev_dep": "(USBMSC && USBDEV) || (FS_FAT && !DISABLE_MOUNTPOINT) || (NFS && NET_UDP && NET_IPv4 && !DISABLE_MOUNTPOINT) || (FS_NXFFS && !DISABLE_MOUNTPOINT) || (FS_TMPFS && !DISABLE_MOUNTPOINT) || (FS_SMARTFS && !DISABLE_MOUNTPOINT) || (FS_HOSTFS && !DISABLE_MOUNTPOINT && ARCH_SIM)", "dep": "y", "prompt": "Writable file system", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Automatically selected if any writable file system is selected.  If\nnot selected, support for writing will be disabled in all block\ndrivers and also the block-to-character (BCH) layer and the MTD FTL\nlayer.\n\nThis selection can also be manually selected.  You might want to do\nthis if there are no writable file systems enabled, but you still\nwant support for write access in block drivers and/or FTL."}, {"type": 3, "name": "FS_AIO", "value": "n", "user_value": 0, "dep": "y", "prompt": "Asynchronous I/O support", "cond": "SCHED_LPWORK", "defaults": [{"name": "n", "default": "n", "cond": "SCHED_LPWORK"}], "help": "Enable support for aynchronous I/O.  This selection enables the\ninterfaces declared in include/aio.h.", "children": [{"type": 27, "name": "FS_NAIOC", "value": "", "user_value": null, "dep": "n", "prompt": "Pre-allocated AIO containers", "cond": "FS_AIO", "defaults": [{"name": "8", "default": "8", "cond": "FS_AIO"}], "help": "The AIO containers hold an AIO control block and appends information\nneeded by the logic running within the RTOS.  These structures are\npre-allocated, the number pre-allocated controlled by this setting.\n\nThis setting controls the number of asynchronous I/O operations that\ncan be queued at one time.  When this count is exhausted, the caller\nof aio_read(), aio_write(), or aio_fsync() will be forced to wait\nfor an available container.  That wait is minimized because each\ncontainer is released prior to starting the next I/O.\n\nThe AIO logic includes priority inheritance logic to prevent\npriority inversion problems:  The priority of the low-priority work\nqueue will be boosted, if necessary, to level of the waiting thread."}]}, {"type": 3, "name": "FS_NAMED_SEMAPHORES", "value": "n", "user_value": 0, "dep": "y", "prompt": "Named semaphore support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Include support for named semaphores.", "children": [{"type": 47, "name": "FS_NAMED_SEMPATH", "value": "", "user_value": null, "dep": "n", "prompt": "Path to semaphore storage", "cond": "FS_NAMED_SEMAPHORES", "defaults": [{"name": "/var/lock", "default": "/var/lock", "cond": "FS_NAMED_SEMAPHORES"}], "help": "The path to where named semaphores will exist in the VFS namespace."}]}, {"type": 47, "name": "FS_MQUEUE_MPATH", "value": "/var/mqueue", "user_value": "/var/mqueue", "dep": "y", "prompt": "Path to message queuee", "cond": "!DISABLE_MQUEUE", "defaults": [{"name": "/var/mqueue", "default": "/var/mqueue", "cond": "!DISABLE_MQUEUE"}], "help": "The path to where POSIX message queues will exist in the VFS namespace."}, {"type": 3, "name": "FS_SHM", "value": "n", "user_value": null, "dep": "n", "prompt": "Shared memory support", "cond": "MM_SHM && EXPERIMENTAL", "defaults": [{"name": "n", "default": "n", "cond": "MM_SHM && EXPERIMENTAL"}], "help": "Include support for shm_open() and shm_close.", "children": [{"type": 47, "name": "FS_SHMPATH", "value": "", "user_value": null, "dep": "n", "prompt": "Path to shared memory object storage", "cond": "FS_SHM", "defaults": [{"name": "/var/shm", "default": "/var/shm", "cond": "FS_SHM"}], "help": "The path to where shared memory objects will exist in the VFS\nnamespace."}]}, {"type": 3, "name": "FS_RAMMAP", "value": "n", "user_value": 0, "dep": "y", "prompt": "File mapping emulation", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "NuttX operates in a flat open address space and is focused on MCUs that do\nsupport Memory Management Units (MMUs).  Therefore, NuttX generally does not\nrequire mmap() functionality and the MCUs generally cannot support true\nmemory-mapped files.\n\nHowever, memory mapping of files is the mechanism used by NXFLAT, the NuttX\ntiny binary format, to get files into memory in order to execute them.\nmmap() support is therefore required to support NXFLAT.\n\nIf FS_RAMMAP is defined in the configuration, then mmap() will\nsupport simulation of memory mapped files by copying files whole\ninto RAM.  These copied files have some of the properties of\nstandard memory mapped files.\n\nSee nuttx/fs/mmap/README.txt for additonal information."}, {"type": 3, "name": "FS_FAT", "value": "y", "user_value": 2, "rev_dep": "SPARK_FLASH && ARCH_BOARD_SPARK && ARCH_BOARD_SPARK", "dep": "y", "prompt": "FAT file system", "cond": "!DISABLE_MOUNTPOINT", "defaults": [{"name": "n", "default": "n", "cond": "!DISABLE_MOUNTPOINT"}], "selects": [{"symbol": "FS_READABLE", "cond": "!DISABLE_MOUNTPOINT"}, {"symbol": "FS_WRITABLE", "cond": "!DISABLE_MOUNTPOINT"}], "help": "Enable FAT filesystem support", "children": [{"type": 3, "name": "FAT_LCNAMES", "value": "y", "user_value": 2, "dep": "y", "prompt": "FAT upper/lower names", "cond": "FS_FAT", "defaults": [{"name": "n", "default": "n", "cond": "FS_FAT"}], "help": "Enable use of the NT-style upper/lower case 8.3\nfile name support."}, {"type": 3, "name": "FAT_LFN", "value": "y", "user_value": 2, "dep": "y", "prompt": "FAT long file names", "cond": "FS_FAT", "defaults": [{"name": "n", "default": "n", "cond": "FS_FAT"}], "help": "Enable FAT long file names.  NOTE:  Microsoft claims\npatents on FAT long file name technology.  Please read the\ndisclaimer in the top-level COPYING file and only enable this\nfeature if you understand these issues.", "children": [{"type": 27, "name": "FAT_MAXFNAME", "value": "64", "user_value": "64", "dep": "y", "prompt": "FAT maximum file name size", "cond": "FAT_LFN && FS_FAT", "defaults": [{"name": "32", "default": "32", "cond": "FAT_LFN && FS_FAT"}], "help": "If FAT_LFN is defined, then the default, maximum long file\nname is 255 bytes.  This can eat up a lot of memory (especially stack\nspace).  If you are willing to live with some non-standard, short long\nfile names, then define this value to be something more reasonable.  A\ngood choice would be the same value as selected for NAME_MAX which will\nlimit the visibility of longer file names anyway."}]}, {"type": 3, "name": "FS_FATTIME", "value": "n", "user_value": 0, "dep": "y", "prompt": "FAT timestamps", "cond": "FS_FAT", "defaults": [{"name": "n", "default": "n", "cond": "FS_FAT"}], "help": "Support FAT date and time. NOTE:  There is not\nmuch sense in supporting FAT date and time unless you have a\nhardware RTC or other way to get the time and date."}, {"type": 3, "name": "FAT_FORCE_INDIRECT", "value": "n", "user_value": 0, "dep": "y", "prompt": "Force direct transfers", "cond": "FS_FAT", "defaults": [{"name": "n", "default": "n", "cond": "FS_FAT"}], "help": "Normally, the default behavior for the FAT file system is to perform\ndata transfers indirectly though specially allocated sector buffers\nor, under certain circumstances, directly through user provided\nbuffers .  These circumstances are:  (1) The transfer is being\nperformed from the beginning of a sector (2) the user-provided\nbuffer will hold the full sector of data.\n\nSome hardware, however, may require special DMA-capable memory or\nspecially aligned memory in order to perform the transfers.  In this\ncase, there may be no circumstance where the user buffer can be used.\nSelecting this option will disable all attempts to use the user-\nprovided buffer:  All transfers will be force to be performed\nindirectly through the FAT file systems sector buffers.\n\nNote: This will have the negative impact of:  (1) An extra data\ncopy to transfer the data between the user buffer and the FAT file\nsystems internal sector buffers, and (2) A loss of performance\nbecause I/O will be limited to one sector at a time.\n\nThis would typically be used with CONFIG_FAT_DMAMEMORY so that\nspecial memory allocators are also used and transfers are also\nperformed using only that specially allocated memory.\nCONFIG_FAT_DMAMEMORY, on the other hand, is often used without\nCONFIG_FAT_FORCE_INDIRECT when the user memory buffers may come\nfrom mixed locations, some of which are DMA-able and some of\nwhich are not.  But CONFIG_FAT_FORCE_INDIRECT could be used\nwithout CONFIG_FAT_DMAMEMORY if there is, for example, only a\nmemory aligment constraints.\n\n        FORCE_   DMA    DIRECT EXAMPLE USAGE\n        INDIRECT MEMORY RETRY\n          Y        Y      *    Use specially allocated memory;\n                               Never use caller provided buffer\n          Y        N      *    Not recommended\n          N        Y     **    Special memory required; user memory\n                               has mixed capability; sometimes\n                               caller memory is not usable\n          N        N      Y    No special memory but there are\n                               alignment requirements; return is\n                               caller buffer is not properly aligned\n          N        N      N    User memory can always be used for\n                               transfer.\n\n        *  CONFIG_DIRECT_RETRY cannot be selected with CONFIG_FORCE_INDIRECT\n        ** CONFIG_DIRECT_RETRY is automatically selected with CONFIG_DMA_MEMORY"}, {"type": 3, "name": "FAT_DMAMEMORY", "value": "n", "user_value": 0, "dep": "y", "prompt": "DMA memory allocator", "cond": "FS_FAT", "defaults": [{"name": "n", "default": "n", "cond": "FS_FAT"}], "selects": [{"symbol": "FAT_DIRECT_RETRY", "cond": "!FAT_FORCE_INDIRECT && FS_FAT"}], "help": "The FAT file system allocates two I/O buffers for data transfer, each\nare the size of one device sector.  One of the buffers is allocated\nonce for each FAT volume that is mounted; the other buffers are\nallocated each time a FAT file is opened.\n\nSome hardware, however, may require special DMA-capable memory in\norder to perform the transfers.  If FAT_DMAMEMORY is defined\nthen the architecture-specific hardware must provide the functions\nfat_dma_alloc() and fat_dma_free():  fat_dmalloc() will allocate\nDMA-capable memory of the specified size; fat_dmafree() is the\ncorresponding function that will be called to free the DMA-capable\nmemory.\n\n        FORCE_   DMA    DIRECT EXAMPLE USAGE\n        INDIRECT MEMORY RETRY\n          Y        Y      *    Use specially allocated memory;\n                               Never use caller provided buffer\n          Y        N      *    Not recommended\n          N        Y     **    Special memory required; user memory\n                               has mixed capability; sometimes\n                               caller memory is not usable\n          N        N      Y    No special memory but there are\n                               alignment requirements; return is\n                               caller buffer is not properly aligned\n          N        N      N    User memory can always be used for\n                               transfer.\n\n        *  CONFIG_DIRECT_RETRY cannot be selected with CONFIG_FORCE_INDIRECT\n        ** CONFIG_DIRECT_RETRY is automatically selected with CONFIG_DMA_MEMORY"}, {"type": 3, "name": "FAT_DIRECT_RETRY", "value": "n", "user_value": 0, "rev_dep": "FAT_DMAMEMORY && !FAT_FORCE_INDIRECT && FS_FAT", "dep": "y", "prompt": "Direct transfer retry", "cond": "!FAT_FORCE_INDIRECT && FS_FAT", "defaults": [{"name": "y", "default": "y", "cond": "FAT_DMAMEMORY && !FAT_FORCE_INDIRECT && FS_FAT"}, {"name": "n", "default": "n", "cond": "!FAT_DMAMEMORY && !FAT_FORCE_INDIRECT && FS_FAT"}], "help": "The FAT file system contains internal, well aligned sector buffers\nfor indirect data transfer.  These transfers are indirect in the\nsense that that the actual transfer occurs into/out of the sector\nbuffers and an additional copy is necessary to/from the user-\nprovided I/O buffers.  But under certain conditions, the FAT file\nsystem will use the caller-provided I/O buffers directly to improve\nefficiency.  Those conditions are (1) CONFIG_FAT_FORCE_INDIRECT is\nnot defined, (2) The access is to/from the beginning of a sector,\nand (3) the user provided buffer is large enough to hold an entire\nsector.\n\nThe lower level SDIO driver may have, certain requirements on the\nmemory buffer in order to perform the transfer.  Perhaps special\nDMA memory should be used (with CONFIG_FAT_DMAMEMORY) or perhaps\nsome special memory alignment is required to interace with the\nhardware.\n\nIf this option is selected, then the FAT file system will first\ntry the user provided I/O buffer under above conditions.  If the\ntransfer fails with -EFAULT. then the FAT file system will try one\nmore time using the internal sector buffers.\n\n        FORCE_   DMA    DIRECT EXAMPLE USAGE\n        INDIRECT MEMORY RETRY\n          Y        Y      *    Use specially allocated memory;\n                               Never use caller provided buffer\n          Y        N      *    Not recommended\n          N        Y     **    Special memory required; user memory\n                               has mixed capability; sometimes\n                               caller memory is not usable\n          N        N      Y    No special memory but there are\n                               alignment requirements; return is\n                               caller buffer is not properly aligned\n          N        N      N    User memory can always be used for\n                               transfer.\n\n        *  CONFIG_DIRECT_RETRY cannot be selected with CONFIG_FORCE_INDIRECT\n        ** CONFIG_DIRECT_RETRY is automatically selected with CONFIG_DMA_MEMORY"}]}, {"type": 3, "name": "NFS", "value": "n", "user_value": null, "dep": "n", "prompt": "NFS client file system", "cond": "NET_UDP && NET_IPv4 && !DISABLE_MOUNTPOINT", "defaults": [{"name": "n", "default": "n", "cond": "NET_UDP && NET_IPv4 && !DISABLE_MOUNTPOINT"}], "selects": [{"symbol": "FS_READABLE", "cond": "NET_UDP && NET_IPv4 && !DISABLE_MOUNTPOINT"}, {"symbol": "FS_WRITABLE", "cond": "NET_UDP && NET_IPv4 && !DISABLE_MOUNTPOINT"}], "help": "Enable network file system (NFS) client file system", "children": [{"type": 3, "name": "NFS_STATISTICS", "value": "n", "user_value": null, "dep": "n", "prompt": "NFS Stastics", "cond": "NFS", "defaults": [{"name": "n", "default": "n", "cond": "NFS"}], "help": "Collect support for NFS statistics.  There is no user interface to\nobtain these statistics, however.  So they would only be of value\nif you add debug instrumentation or use a debugger."}]}, {"type": 3, "name": "FS_NXFFS", "value": "n", "user_value": 0, "dep": "y", "prompt": "NXFFS file system", "cond": "!DISABLE_MOUNTPOINT", "defaults": [{"name": "n", "default": "n", "cond": "!DISABLE_MOUNTPOINT"}], "selects": [{"symbol": "FS_READABLE", "cond": "!DISABLE_MOUNTPOINT"}, {"symbol": "FS_WRITABLE", "cond": "!DISABLE_MOUNTPOINT"}], "help": "Enable NuttX FLASH file system (NXFF) support.", "children": [{"type": 3, "name": "NXFFS_SCAN_VOLUME", "value": "n", "user_value": null, "dep": "n", "prompt": "Scan volume", "cond": "FS_NXFFS", "defaults": [{"name": "n", "default": "n", "cond": "FS_NXFFS"}], "help": "Scan the media for bad blocks on start-up.  If too many bad or\nunformatted blocks are found, then re-format the volume.  Otherwise,\nthe volume will be reformatted only if no NXFFS file system is\nfound.\n\nWhy might you want to do this?  If too many bad blocks accumulate\nover time, then attempting to reformat my be the only way to\nrecover.  And what if you power down the device while formatting\nthe FLASH so that you have only a partially formatted device?\nScanning the volume can get you out of these situations.\n\nThe down side is that scanning the volume can adversely affect\nyour start-up time.  An option is to just erase the FLASH and\nreboot in these cases.  That can be done with MDIOC_BULKERASE\nIOCTL command."}, {"type": 3, "name": "NXFFS_NAND", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable NAND support", "cond": "EXPERIMENTAL && FS_NXFFS", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL && FS_NXFFS"}], "help": "NAND differs from other other FLASH types several ways.  For one\nthing, NAND requires error correction (ECC) bytes that must be set\nin order to work around bit failures.  This affects NXFFS in two\nways:\n\nFirst, write failures are not fatal. Rather, they should be tried by\nbad blocks and simply ignored.  This is because unrecoverable bit\nfailures will cause read failures when reading from NAND.  Setting\nthis option will enable this behavior.\n\nSecondly, NXFFS will write a block many times.  It tries to keep\nbits in the erased state and assumes that it can overwrite those\nbits to change them from the erased to the non-erased state.  This\nworks will with NOR-like FLASH.  NAND behaves this way too.  But the\nproblem with NAND is that the ECC bits cannot be re-written in this\nway.  So once a block has been written, it cannot be modified.  This\nbehavior has NOT been fixed in NXFFS.  Currently, NXFFS will attempt\nto re-write the ECC bits causing the ECC to become corrupted because\nthe ECC bits cannot be overwritten without erasing the entire block.\n\nThis may prohibit NXFFS from ever being used with NAND."}, {"type": 27, "name": "NXFFS_REFORMAT_THRESH", "value": "", "user_value": null, "dep": "n", "prompt": "Reformat percentage", "cond": "NXFFS_SCAN_VOLUME && FS_NXFFS", "defaults": [{"name": "20", "default": "20", "cond": "NXFFS_SCAN_VOLUME && FS_NXFFS"}], "ranges": [{"min": "0", "max": "100", "cond": "NXFFS_SCAN_VOLUME && FS_NXFFS"}], "help": "This defines the threshold for re-formatting.  Is less than this\npercentage of good blocks are found, then the volume is re-\nformatted."}, {"type": 3, "name": "NXFFS_PREALLOCATED", "value": "n", "user_value": null, "dep": "n", "prompt": "Single, preallocated volume", "cond": "FS_NXFFS", "defaults": [{"name": "y", "default": "y", "cond": "FS_NXFFS"}], "help": "If CONFIG_NXFSS_PREALLOCATED is defined, then this is the single, pre-\nallocated NXFFS volume instance.  Currently required because full,\ndynamic allocation of NXFFS volumes in not yet supporte."}, {"type": 24, "name": "NXFFS_ERASEDSTATE", "value": "", "user_value": null, "dep": "n", "prompt": "FLASH erased state", "cond": "FS_NXFFS", "defaults": [{"name": "0xff", "default": "0xff", "cond": "FS_NXFFS"}], "help": "The erased state of FLASH.\nThis must have one of the values of 0xff or 0x00.\nDefault: 0xff."}, {"type": 27, "name": "NXFFS_PACKTHRESHOLD", "value": "", "user_value": null, "dep": "n", "prompt": "Re-packing threshold", "cond": "FS_NXFFS", "defaults": [{"name": "32", "default": "32", "cond": "FS_NXFFS"}], "help": "When packing flash file data,\ndon't both with file chunks smaller than this number of data bytes.\nDefault: 32."}, {"type": 27, "name": "NXFFS_MAXNAMLEN", "value": "", "user_value": null, "dep": "n", "prompt": "Maximum file name length", "cond": "FS_NXFFS", "defaults": [{"name": "255", "default": "255", "cond": "FS_NXFFS"}], "help": "The maximum size of an NXFFS file name.\nDefault: 255."}, {"type": 27, "name": "NXFFS_TAILTHRESHOLD", "value": "", "user_value": null, "dep": "n", "prompt": "Tail threshold", "cond": "FS_NXFFS", "defaults": [{"name": "8192", "default": "8192", "cond": "FS_NXFFS"}], "help": "Clean-up can either mean packing files together toward the end of\nthe file or, if files are deleted at the end of the file, clean up\ncan simply mean erasing the end of FLASH memory so that it can be\nre-used again.  However, doing this can also harm the life of the\nFLASH part because it can mean that the tail end of the FLASH is\nre-used too often. This threshold determines if/when it is worth\nerased the tail end of FLASH and making it available for re-use\n(and possible over-wear). Default: 8192."}]}, {"type": 3, "name": "FS_ROMFS", "value": "y", "user_value": 2, "dep": "y", "prompt": "ROMFS file system", "cond": "!DISABLE_MOUNTPOINT", "defaults": [{"name": "n", "default": "n", "cond": "!DISABLE_MOUNTPOINT"}], "selects": [{"symbol": "FS_READABLE", "cond": "!DISABLE_MOUNTPOINT"}], "help": "Enable ROMFS filesystem support"}, {"type": 3, "name": "FS_TMPFS", "value": "n", "user_value": 0, "dep": "y", "prompt": "TMPFS file system", "cond": "!DISABLE_MOUNTPOINT", "defaults": [{"name": "n", "default": "n", "cond": "!DISABLE_MOUNTPOINT"}], "selects": [{"symbol": "FS_READABLE", "cond": "!DISABLE_MOUNTPOINT"}, {"symbol": "FS_WRITABLE", "cond": "!DISABLE_MOUNTPOINT"}], "help": "Enable TMPFS filesystem support", "children": [{"type": 27, "name": "FS_TMPFS_BLOCKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Reported block size", "cond": "FS_TMPFS", "defaults": [{"name": "512", "default": "512", "cond": "FS_TMPFS"}], "help": "Various queries expect the file system to report resources in units\nof blocks.  There are, of course, no blocks with the TMPFS.  This\noptions is available to control how sizes are reported.  For very\nsmall TMPFS systems, you might want to set this to something smaller\nthe usual 512 bytes."}, {"type": 27, "name": "FS_TMPFS_DIRECTORY_ALLOCGUARD", "value": "", "user_value": null, "dep": "n", "prompt": "Directory object over-allocation", "cond": "FS_TMPFS", "defaults": [{"name": "64", "default": "64", "cond": "FS_TMPFS"}], "help": "In order to avoid frequent reallocations, a little more memory than\nneeded is always allocated.  This permits the directory to grow\nwithout so many realloctions."}, {"type": 27, "name": "FS_TMPFS_DIRECTORY_FREEGUARD", "value": "", "user_value": null, "dep": "n", "prompt": "Directory under free", "cond": "FS_TMPFS", "defaults": [{"name": "128", "default": "128", "cond": "FS_TMPFS"}], "help": "In order to avoid frequent reallocations, a lot of free memory has\nto be available before a directory entry shrinks (via reallocation)\nlittle more memory than needed is always allocated.  This permits\nthe directory to shrink without so many realloctions."}, {"type": 27, "name": "FS_TMPFS_FILE_ALLOCGUARD", "value": "", "user_value": null, "dep": "n", "prompt": "Directory object over-allocation", "cond": "FS_TMPFS", "defaults": [{"name": "512", "default": "512", "cond": "FS_TMPFS"}], "help": "In order to avoid frequent reallocations, a little more memory than\nneeded is always allocated.  This permits the file to grow without\nso many realloctions.\n\nYou will probably want to use smaller value than the default on tiny\nTMFPS systems."}, {"type": 27, "name": "FS_TMPFS_FILE_FREEGUARD", "value": "", "user_value": null, "dep": "n", "prompt": "Directory under free", "cond": "FS_TMPFS", "defaults": [{"name": "1024", "default": "1024", "cond": "FS_TMPFS"}], "help": "In order to avoid frequent reallocations, a lot of free memory has\nto be available before a directory entry shrinks (via reallocation)\nlittle more memory than needed is always allocated.  This permits\nthe file to shrink without so many realloctions."}]}, {"type": 3, "name": "FS_SMARTFS", "value": "y", "user_value": 2, "rev_dep": "(SIM_SPIFLASH && ARCH_SIM) || (SIM_QSPIFLASH && ARCH_SIM) || (MIKROE_FLASH && ARCH_BOARD_MIKROE_STM32F4 && ARCH_BOARD_MIKROE_STM32F4) || (STM32F103MINIMUM_FLASH && ARCH_BOARD_STM32F103_MINIMUM && ARCH_BOARD_STM32F103_MINIMUM) || (STM32F429I_DISCO_FLASH && ARCH_BOARD_STM32F429I_DISCO && ARCH_BOARD_STM32F429I_DISCO) || (B_L475E_IOT01A_MTD_FLASH && ARCH_BOARD_B_L475E_IOT01A && ARCH_BOARD_B_L475E_IOT01A)", "dep": "y", "prompt": "SMART file system", "cond": "!DISABLE_MOUNTPOINT", "defaults": [{"name": "n", "default": "n", "cond": "!DISABLE_MOUNTPOINT"}], "selects": [{"symbol": "FS_READABLE", "cond": "!DISABLE_MOUNTPOINT"}, {"symbol": "FS_WRITABLE", "cond": "!DISABLE_MOUNTPOINT"}], "help": "Enable NuttX SMART Flash file system (SMARTFS) support.", "children": [{"type": 24, "name": "SMARTFS_ERASEDSTATE", "value": "0xff", "user_value": "0xff", "dep": "y", "prompt": "FLASH erased state", "cond": "FS_SMARTFS", "defaults": [{"name": "0xff", "default": "0xff", "cond": "FS_SMARTFS"}], "help": "The erased state of FLASH.\nThis must have one of the values of 0xff or 0x00.\nDefault: 0xff."}, {"type": 27, "name": "SMARTFS_MAXNAMLEN", "value": "30", "user_value": "30", "dep": "y", "prompt": "Maximum file name length", "cond": "FS_SMARTFS", "defaults": [{"name": "16", "default": "16", "cond": "FS_SMARTFS"}], "help": "The maximum size of a SMARTFS file name at a given\ndirectory level.  Overall path name is not restricted\nby this value, only individual segments in a path,\nsuch as (assuming /usr is the mount point):\n\n        /usr/games/chess/player_stats/game1.xml\n\nDefault: 16."}, {"type": 3, "name": "SMARTFS_MULTI_ROOT_DIRS", "value": "y", "user_value": 2, "dep": "y", "prompt": "Support multiple Root Directories / Mount Points", "cond": "FS_SMARTFS", "defaults": [{"name": "n", "default": "n", "cond": "FS_SMARTFS"}], "help": "Enables support for multiple root directory entries\non the SMART FLASH.  Multiple root directories means\nthe device can have multiple mount point in the VFS,\neach with it's own unique directory structure under it.\n\nWhen this option is enabled, instead of reporting the\nSMART block devices as \"/dev/mtdsmart0\", they will be\nreported as \"/dev/mtdsmart0d1\", \"/dev/mtdsmart0d2\", etc.\nThe number of root entries actually created is set\nduring the \"mksmartfs\" command when the device is\ninitialized.\n\nDefault: y."}, {"type": 3, "name": "SMARTFS_ALIGNED_ACCESS", "value": "y", "user_value": 2, "dep": "y", "prompt": "Ensure 16 and 32 bit accesses are aligned", "cond": "FS_SMARTFS", "defaults": [{"name": "n", "default": "n", "cond": "FS_SMARTFS"}], "help": "Performs little endian byte accesses to 16 and 32 values\nwithin the directory list to ensure processors that can't\nhandle un-aligned accesses don't bomb out.  Default should\nprobably by 'Y', but set to 'N' in case any existing Big\nEndian instances of SmartFS exist that already have\ndirectories with data stored in big endian mode."}]}, {"type": 3, "name": "FS_BINFS", "value": "n", "user_value": 0, "dep": "y", "prompt": "BINFS File System", "cond": "BUILTIN", "defaults": [{"name": "n", "default": "n", "cond": "BUILTIN"}], "selects": [{"symbol": "FS_READABLE", "cond": "BUILTIN"}], "help": "The BINFS file system is provides access to builtin applications through\nthe NuttX file system.  The BINFS may, for example, be mount at /bin.\nThen all of the built-in applications will appear as executable files in\n/bin.  Then, for example, you list them from NSH like:\n\nnsh> ls -l /bin\n\nIf the BINFS BINFMT loader is also enabled, then the builtin applications\ncan be executed through the normal mechanisms (posix_spawn(), exev(), etc.)"}, {"type": 3, "name": "FS_PROCFS", "value": "y", "user_value": 2, "dep": "y", "prompt": "PROCFS File System", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "selects": [{"symbol": "FS_READABLE", "cond": "y"}], "help": "The PROCFS file system provides access to task status and other driver\nstatus through the NuttX file system.  The PROCFS may, for example, be\nmount at /proc.  Then information about all of the currently active\ntasks and threads will be available in /proc.", "children": [{"type": 3, "name": "FS_PROCFS_REGISTER", "value": "y", "user_value": 2, "dep": "y", "prompt": "Run-time registration", "cond": "FS_PROCFS", "defaults": [{"name": "n", "default": "n", "cond": "FS_PROCFS"}], "help": "Support run-time registration of the new entries in the procfs file\nsystem."}, {"type": 31, "dep": "y", "prompt": "Exclude individual procfs entries", "cond": "FS_PROCFS", "children": [{"type": 3, "name": "FS_PROCFS_EXCLUDE_PROCESS", "value": "n", "user_value": 0, "dep": "y", "prompt": "Exclude process information", "cond": "FS_PROCFS", "defaults": [{"name": "n", "default": "n", "cond": "FS_PROCFS"}], "help": "Causes the process information to be excluded from the procfs system.\nThis will reduce code space, but then giving access to process info\nwas kinda the whole point of procfs, but hey, whatever."}, {"type": 3, "name": "FS_PROCFS_EXCLUDE_MODULE", "value": "n", "user_value": null, "dep": "n", "prompt": "Exclude module information", "cond": "MODULE && FS_PROCFS", "defaults": [{"name": "n", "default": "n", "cond": "MODULE && FS_PROCFS"}], "help": "Causes the module information to be excluded from the procfs system."}, {"type": 3, "name": "FS_PROCFS_EXCLUDE_UPTIME", "value": "n", "user_value": 0, "dep": "y", "prompt": "Exclude uptime", "cond": "FS_PROCFS", "defaults": [{"name": "n", "default": "n", "cond": "FS_PROCFS"}]}, {"type": 3, "name": "FS_PROCFS_EXCLUDE_CPULOAD", "value": "n", "user_value": null, "dep": "n", "prompt": "Exclude CPU load", "cond": "SCHED_CPULOAD && FS_PROCFS", "defaults": [{"name": "n", "default": "n", "cond": "SCHED_CPULOAD && FS_PROCFS"}]}, {"type": 3, "name": "FS_PROCFS_EXCLUDE_KMM", "value": "n", "user_value": null, "dep": "n", "prompt": "Exclude kmm", "cond": "MM_KERNEL_HEAP && FS_PROCFS", "defaults": [{"name": "n", "default": "n", "cond": "MM_KERNEL_HEAP && FS_PROCFS"}]}, {"type": 3, "name": "FS_PROCFS_EXCLUDE_MOUNTS", "value": "n", "user_value": 0, "dep": "y", "prompt": "Exclude mounts", "cond": "!DISABLE_MOUNTPOINT && FS_PROCFS", "defaults": [{"name": "n", "default": "n", "cond": "!DISABLE_MOUNTPOINT && FS_PROCFS"}]}, {"type": 3, "name": "FS_PROCFS_EXCLUDE_NET", "value": "n", "user_value": 0, "dep": "y", "prompt": "Exclude network", "cond": "NET && FS_PROCFS", "defaults": [{"name": "n", "default": "n", "cond": "NET && FS_PROCFS"}]}, {"type": 3, "name": "FS_PROCFS_EXCLUDE_ROUTE", "value": "n", "user_value": null, "dep": "n", "prompt": "Exclude routing table", "cond": "!FS_PROCFS_EXCLUDE_NET && NET_ROUTE && FS_PROCFS", "defaults": [{"name": "n", "default": "n", "cond": "!FS_PROCFS_EXCLUDE_NET && NET_ROUTE && FS_PROCFS"}]}, {"type": 3, "name": "FS_PROCFS_EXCLUDE_MTD", "value": "n", "user_value": 0, "dep": "y", "prompt": "Exclude mtd", "cond": "MTD && FS_PROCFS", "defaults": [{"name": "n", "default": "n", "cond": "MTD && FS_PROCFS"}]}, {"type": 3, "name": "FS_PROCFS_EXCLUDE_PARTITIONS", "value": "n", "user_value": null, "dep": "n", "prompt": "Exclude partitions", "cond": "MTD_PARTITION && FS_PROCFS", "defaults": [{"name": "n", "default": "n", "cond": "MTD_PARTITION && FS_PROCFS"}]}, {"type": 3, "name": "FS_PROCFS_EXCLUDE_SMARTFS", "value": "n", "user_value": 0, "dep": "y", "prompt": "Exclude fs/smartfs", "cond": "FS_SMARTFS && FS_PROCFS", "defaults": [{"name": "n", "default": "n", "cond": "FS_SMARTFS && FS_PROCFS"}]}]}]}, {"type": 3, "name": "FS_UNIONFS", "value": "n", "user_value": 0, "dep": "y", "prompt": "Union File System", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "The Union file system is provides a mechanism to overlay two\ndifferent, mounted file systems so that they appear as one.  In\ngeneral this works like this:\n\n        1) Mount file system 1 at some location, say /mnt/file1\n        2) Mount file system 2 at some location, say /mnt/file2\n        3) Call unionfs_mount() to combine and overly /mnt/file1 and\n        mnt/file2 as a new mount point, say /mnt/unionfs.\n\n/mnt/file1 and /mnt/file2 will disappear and be replaced by the\nsingle mountpoint /mnut/unionfs.  The previous contents under\n/mnt/file1 and /mnt/file2 will appear merged under /mnt/unionfs.\nFiles at the same relative path in file system1 will take presence.\nIf another file of the same name and same relative location exists\nin file system 2, it will not be visible because it will be occluded\nby the file in file system1.\n\nSee include/nutts/unionfs.h for additional information."}, {"type": 3, "name": "FS_HOSTFS", "value": "n", "user_value": null, "dep": "n", "prompt": "Host File System", "cond": "!DISABLE_MOUNTPOINT && ARCH_SIM", "defaults": [{"name": "n", "default": "n", "cond": "!DISABLE_MOUNTPOINT && ARCH_SIM"}], "selects": [{"symbol": "FS_READABLE", "cond": "!DISABLE_MOUNTPOINT && ARCH_SIM"}, {"symbol": "FS_WRITABLE", "cond": "!DISABLE_MOUNTPOINT && ARCH_SIM"}], "help": "The Host file system provides a mechanism to mount directories\nfrom the host OS during simulation mode.  The host directory\nto be \"mounted\" is specified during the mount command using\nthe -o command line switch, such as:\n\n        mount -t hostfs -o fs=/home/user/nuttx_root /host\n\nFor non-NSH operation, the option \"fs=home/user/nuttx_root\" would\nbe passed to the 'mount()' routine using the optional 'void *data'\nparameter."}]}, {"type": 31, "dep": "y", "prompt": "Graphics Support", "cond": "y", "children": [{"type": 3, "name": "NX", "value": "y", "user_value": 2, "dep": "y", "prompt": "NX Graphics", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enables overall support for graphics library and NX", "children": [{"type": 3, "name": "NX_LCDDRIVER", "value": "y", "user_value": 2, "rev_dep": "LCD && NX", "dep": "y", "prompt": "LCD driver", "cond": "LCD && NX", "defaults": [{"name": "y", "default": "y", "cond": "LCD && NX"}], "help": "By default, the NX graphics system uses the frame buffer driver interface\ndefined in include/nuttx/video/fb.h.  However, if LCD is support is enabled,\nthis this option is provide to select, instead, the LCD driver interface\ndefined in include/nuttx/lcd/lcd.h."}, {"type": 27, "name": "NX_NPLANES", "value": "1", "user_value": "1", "dep": "y", "prompt": "Number of Color Planes", "cond": "NX", "defaults": [{"name": "1", "default": "1", "cond": "NX"}], "help": "Some YUV color formats requires support for multiple planes, one for\neach color component.  Unless you have such special hardware (and\nare willing to debug a lot of untested logic), this value should be\nset to 1."}, {"type": 24, "name": "NX_BGCOLOR", "value": "0x0", "user_value": "0x0", "dep": "y", "prompt": "Initial background color", "cond": "NX", "defaults": [{"name": "0x0", "default": "0x0", "cond": "NX"}], "help": "NX will clear the background plane initially.  This is the default\ncolor that will be used when the background is cleared.  Note: This\nlogic would have to be extended if you want to support multiple\ncolor planes."}, {"type": 3, "name": "NX_ANTIALIASING", "value": "n", "user_value": null, "dep": "n", "prompt": "Anti-aliasing support", "cond": "(!NX_DISABLE_16BPP || !NX_DISABLE_24BPP || !NX_DISABLE_32BPP) && !NX_LCDDRIVER && NX", "defaults": [{"name": "n", "default": "n", "cond": "(!NX_DISABLE_16BPP || !NX_DISABLE_24BPP || !NX_DISABLE_32BPP) && !NX_LCDDRIVER && NX"}], "help": "Enable support for ant-aliasing when rendering lines as various\norientations."}, {"type": 3, "name": "NX_WRITEONLY", "value": "n", "user_value": 0, "dep": "y", "prompt": "Write-only Graphics Device", "cond": "NX", "defaults": [{"name": "y", "default": "y", "cond": "NX_LCDDRIVER && LCD_NOGETRUN && NX"}, {"name": "n", "default": "n", "cond": "(!NX_LCDDRIVER || !LCD_NOGETRUN) && NX"}], "help": "Define if the underlying graphics device does not support read operations.\nAutomatically defined if NX_LCDDRIVER and LCD_NOGETRUN are\ndefined."}, {"type": 3, "name": "NX_UPDATE", "value": "n", "user_value": 0, "rev_dep": "VNCSERVER && NET_TCP && !NX_LCDDRIVER && EXPERIMENTAL && NX", "dep": "y", "prompt": "Display update hooks", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "Enable a callout to inform some external module that the display has\nbeen updated.  This would be useful in a couple for cases.\n\n- When a serial LCD is used, but a framebuffer is used to access the\n  LCD.  In this case, the update callout can be used to refresh the\n  affected region of the display.\n\n- When VNC is enabled.  This is case, this callout is necessary to\n  update the remote frame buffer to match the local framebuffer.\n\nWhen this feature is enabled, some external logic must provide this\ninterface:\n\n  void nx_notify_rectangle(FAR NX_PLANEINFOTYPE *pinfo,\n                           FAR const struct nxgl_rect_s *rect);\n\nThat is the function that will handle the notification.  It\nreceives the rectangular region that was updated in the provided\nplane."}, {"type": 31, "dep": "y", "prompt": "Supported Pixel Depths", "cond": "NX", "children": [{"type": 3, "name": "NX_DISABLE_1BPP", "value": "y", "user_value": 2, "dep": "y", "prompt": "Disable 1 BPP", "cond": "NX", "defaults": [{"name": "y", "default": "y", "cond": "NX"}], "help": "NX supports a variety of pixel depths.  You can save some memory by disabling\nsupport for unused color depths.  The selection disables support for 1BPP\npixel depth."}, {"type": 3, "name": "NX_DISABLE_2BPP", "value": "y", "user_value": 2, "dep": "y", "prompt": "Disable 2 BPP", "cond": "NX", "defaults": [{"name": "y", "default": "y", "cond": "NX"}], "help": "NX supports a variety of pixel depths.  You can save some memory by disabling\nsupport for unused color depths.  The selection disables support for 2BPP\npixel depth."}, {"type": 3, "name": "NX_DISABLE_4BPP", "value": "y", "user_value": 2, "dep": "y", "prompt": "Disable 4 BPP", "cond": "NX", "defaults": [{"name": "y", "default": "y", "cond": "NX"}], "help": "NX supports a variety of pixel depths.  You can save some memory by disabling\nsupport for unused color depths.  The selection disables support for 4BPP\npixel depth."}, {"type": 3, "name": "NX_DISABLE_8BPP", "value": "n", "user_value": 0, "dep": "y", "prompt": "Disable 8 BPP", "cond": "NX", "defaults": [{"name": "y", "default": "y", "cond": "NX"}], "help": "NX supports a variety of pixel depths.  You can save some memory by disabling\nsupport for unused color depths.  The selection disables support for 8BPP\npixel depth."}, {"type": 3, "name": "NX_DISABLE_16BPP", "value": "n", "user_value": 0, "dep": "y", "prompt": "Disable 16 BPP", "cond": "NX", "defaults": [{"name": "y", "default": "y", "cond": "NX"}], "help": "NX supports a variety of pixel depths.  You can save some memory by disabling\nsupport for unused color depths.  The selection disables support for 16BPP\npixel depth."}, {"type": 3, "name": "NX_DISABLE_24BPP", "value": "y", "user_value": 2, "dep": "y", "prompt": "Disable 24 BPP", "cond": "NX", "defaults": [{"name": "y", "default": "y", "cond": "NX"}], "help": "NX supports a variety of pixel depths.  You can save some memory by disabling\nsupport for unused color depths.  The selection disables support for 24BPP\npixel depth."}, {"type": 3, "name": "NX_DISABLE_32BPP", "value": "y", "user_value": 2, "dep": "y", "prompt": "Disable 32 BPP", "cond": "NX", "defaults": [{"name": "y", "default": "y", "cond": "NX"}], "help": "NX supports a variety of pixel depths.  You can save some memory by disabling\nsupport for unused color depths.  The selection disables support for 32BPP\npixel depth."}]}, {"type": 3, "name": "NX_PACKEDMSFIRST", "value": "y", "user_value": 2, "dep": "y", "prompt": "Packed MS First", "cond": "(NX_DISABLE_1BPP || NX_DISABLE_2BPP || NX_DISABLE_4BPP) && NX", "defaults": [{"name": "y", "default": "y", "cond": "(NX_DISABLE_1BPP || NX_DISABLE_2BPP || NX_DISABLE_4BPP) && NX"}], "help": "If a pixel depth of less than 8-bits is used, then NX needs to know if the\npixels pack from the MS to LS or from LS to MS"}, {"type": 31, "dep": "y", "prompt": "Input Devices", "cond": "NX", "children": [{"type": 3, "name": "NX_XYINPUT", "value": "n", "user_value": 0, "rev_dep": "(NX_XYINPUT_MOUSE && y) || (NX_XYINPUT_TOUCHSCREEN && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "NX"}]}, {"type": 4, "user_value": 2, "dep": "y", "prompt": "Mouse/Touchscreen Support", "cond": "NX", "defaults": [{"name": "NX_XYINPUT_NONE", "default": "y", "cond": "NX"}], "children": [{"type": 3, "name": "NX_XYINPUT_NONE", "value": "y", "user_value": 2, "dep": "y", "prompt": "No X/Y input device", "cond": "y", "help": "There is no X/Y positional input device connected"}, {"type": 3, "name": "NX_XYINPUT_MOUSE", "value": "n", "user_value": 0, "dep": "y", "prompt": "Mouse device support", "cond": "y", "selects": [{"symbol": "NX_XYINPUT", "cond": "y"}], "help": "X/Y positional input is provided by a mouse.  The only difference\nbetween the mouse and touchscreen selection is in the presence or\nabsence of the mouse buttons.  This difference is not used within\nNuttX itself, however, graphics applications may need this\ninformation, for example, to handle the different ways that graphic\nelements are selected and dragged."}, {"type": 3, "name": "NX_XYINPUT_TOUCHSCREEN", "value": "n", "user_value": 0, "dep": "y", "prompt": "Touchscreen device support", "cond": "y", "selects": [{"symbol": "NX_XYINPUT", "cond": "y"}], "help": "X/Y positional input is provided by a touchscreen.  The only difference\nbetween the mouse and touchscreen selection is in the presence or\nabsence of the mouse buttons.  This difference is not used within\nNuttX itself, however, graphics applications may need this\ninformation, for example, to handle the different ways that graphic\nelements are selected and dragged."}]}, {"type": 3, "name": "NX_KBD", "value": "n", "user_value": 0, "dep": "y", "prompt": "Keyboard Support", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "Build in support of keypad/keyboard input."}]}, {"type": 31, "dep": "y", "prompt": "Framed Window Borders", "cond": "NX", "children": [{"type": 27, "name": "NXTK_BORDERWIDTH", "value": "4", "user_value": "4", "dep": "y", "prompt": "Border Width", "cond": "NX", "defaults": [{"name": "4", "default": "4", "cond": "NX"}], "help": "Specifies with with of the border (in pixels) used with framed windows.\nThe default is 4."}, {"type": 3, "name": "NXTK_DEFAULT_BORDERCOLORS", "value": "y", "user_value": 2, "dep": "y", "prompt": "Use Default Border Colors", "cond": "NX", "defaults": [{"name": "y", "default": "y", "cond": "NX"}], "help": "If this option is defined, the default system border colors will be\nused on framed windows.  Otherwise, additional options will be\npresent so that you can define custom board colors."}, {"type": 24, "name": "NXTK_BORDERCOLOR1", "value": "", "user_value": null, "dep": "n", "prompt": "Border Color", "cond": "!NXTK_DEFAULT_BORDERCOLORS && NX", "defaults": [{"name": "0x0", "default": "0x0", "cond": "!NXTK_DEFAULT_BORDERCOLORS && NX"}], "help": "Specify the colors of the border used with framed windows.\nNXTL_BORDERCOLOR1 is the \"normal\" color of the border.\nNXTK_BORDERCOLOR2 is the shadow side color and so is normally darker.\nNXTK_BORDERCOLOR3 is the shiny side color and so is normally brighter."}, {"type": 24, "name": "NXTK_BORDERCOLOR2", "value": "", "user_value": null, "dep": "n", "prompt": "Darker Border Color", "cond": "!NXTK_DEFAULT_BORDERCOLORS && NX", "defaults": [{"name": "0x0", "default": "0x0", "cond": "!NXTK_DEFAULT_BORDERCOLORS && NX"}], "help": "Specify the colors of the border used with framed windows.\nNXTL_BORDERCOLOR1 is the \"normal\" color of the border.\nNXTK_BORDERCOLOR2 is the shadow side color and so is normally darker.\nNXTK_BORDERCOLOR3 is the shiny side color and so is normally brighter."}, {"type": 24, "name": "NXTK_BORDERCOLOR3", "value": "", "user_value": null, "dep": "n", "prompt": "Brighter Border Color", "cond": "!NXTK_DEFAULT_BORDERCOLORS && NX", "defaults": [{"name": "0x0", "default": "0x0", "cond": "!NXTK_DEFAULT_BORDERCOLORS && NX"}], "help": "Specify the colors of the border used with framed windows.\nNXTL_BORDERCOLOR1 is the \"normal\" color of the border.\nNXTK_BORDERCOLOR2 is the shadow side color and so is normally darker.\nNXTK_BORDERCOLOR3 is the shiny side color and so is normally brighter."}]}, {"type": 3, "name": "NXTK_AUTORAISE", "value": "n", "user_value": 0, "dep": "y", "prompt": "Autoraise", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "If set, a window will be raised to the top if the mouse position is over a\nvisible portion of the window.  Default: A mouse button must be clicked over\na visible portion of the window."}, {"type": 31, "dep": "y", "prompt": "Font Selections", "cond": "NX", "children": [{"type": 27, "name": "NXFONTS_CHARBITS", "value": "7", "user_value": "7", "dep": "y", "prompt": "Bits in Character Set", "cond": "NX", "defaults": [{"name": "7", "default": "7", "cond": "NX"}], "ranges": [{"min": "7", "max": "8", "cond": "NX"}], "help": "The number of bits in the character set.  Current options are only 7 and 8.\nThe default is 7."}, {"type": 3, "name": "NXFONT_MONO5X8", "value": "n", "user_value": 0, "dep": "y", "prompt": "Mono 5x8", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "Tiny mono-spaced 5x8 font (font ID FONTID_MONO5X8 = 18)"}, {"type": 3, "name": "NXFONT_SANS17X22", "value": "n", "user_value": 0, "dep": "y", "prompt": "Sans 17x22", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a tiny, 17x22 san serif font\n(font ID FONTID_SANS17X22 == 14)."}, {"type": 3, "name": "NXFONT_SANS20X26", "value": "n", "user_value": 0, "dep": "y", "prompt": "Sans 20x26", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a tiny, 20x26 san serif font\n(font ID FONTID_SANS20X26 == 15)."}, {"type": 3, "name": "NXFONT_SANS23X27", "value": "n", "user_value": 0, "dep": "y", "prompt": "Sans 23x27", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a tiny, 23x27 san serif font\n(font ID FONTID_SANS23X27 == 1)."}, {"type": 3, "name": "NXFONT_SANS22X29", "value": "n", "user_value": 0, "dep": "y", "prompt": "Sans 22x29", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a small, 22x29 san serif font\n(font ID FONTID_SANS22X29 == 2)."}, {"type": 3, "name": "NXFONT_SANS28X37", "value": "n", "user_value": 0, "dep": "y", "prompt": "Sans 28x37", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a medium, 28x37 san serif font\n(font ID FONTID_SANS28X37 == 3)."}, {"type": 3, "name": "NXFONT_SANS39X48", "value": "n", "user_value": 0, "dep": "y", "prompt": "Sans 39x48", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a large, 39x48 san serif font\n(font ID FONTID_SANS39X48 == 4)."}, {"type": 3, "name": "NXFONT_SANS17X23B", "value": "n", "user_value": 0, "dep": "y", "prompt": "Sans 17x23 Bold", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a tiny, 17x23 san serif bold font\n(font ID FONTID_SANS17X23B == 16)."}, {"type": 3, "name": "NXFONT_SANS20X27B", "value": "n", "user_value": 0, "dep": "y", "prompt": "Sans 20x27 Bold", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a tiny, 20x27 san serif bold font\n(font ID FONTID_SANS20X27B == 17)."}, {"type": 3, "name": "NXFONT_SANS22X29B", "value": "n", "user_value": 0, "dep": "y", "prompt": "Sans 22x29 Bold", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a small, 22x29 san serif bold font\n(font ID FONTID_SANS22X29B == 5)."}, {"type": 3, "name": "NXFONT_SANS28X37B", "value": "n", "user_value": 0, "dep": "y", "prompt": "Sans 28x37 Bold", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a medium, 28x37 san serif bold font\n(font ID FONTID_SANS28X37B == 6)."}, {"type": 3, "name": "NXFONT_SANS40X49B", "value": "y", "user_value": 2, "dep": "y", "prompt": "Sans 40x49 Bold", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a large, 40x49 san serif bold font\n(font ID FONTID_SANS40X49B == 7)."}, {"type": 3, "name": "NXFONT_SERIF22X29", "value": "n", "user_value": 0, "dep": "y", "prompt": "Serif 22x29", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a small, 22x29 font (with serifs)\n(font ID FONTID_SERIF22X29 == 8)."}, {"type": 3, "name": "NXFONT_SERIF29X37", "value": "n", "user_value": 0, "dep": "y", "prompt": "Serif 29x37", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a medium, 29x37 font (with serifs)\n(font ID FONTID_SERIF29X37 == 9)."}, {"type": 3, "name": "NXFONT_SERIF38X48", "value": "n", "user_value": 0, "dep": "y", "prompt": "Serif 38x48", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a large, 38x48 font (with serifs)\n(font ID FONTID_SERIF38X48 == 10)."}, {"type": 3, "name": "NXFONT_SERIF22X28B", "value": "n", "user_value": 0, "dep": "y", "prompt": "Serif 22x28 Bold", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a small, 27x38 bold font (with serifs)\n(font ID FONTID_SERIF22X28B == 11)."}, {"type": 3, "name": "NXFONT_SERIF27X38B", "value": "n", "user_value": 0, "dep": "y", "prompt": "Serif 27x38 Bold", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a medium, 27x38 bold font (with serifs)\n(font ID FONTID_SERIF27X38B == 12)."}, {"type": 3, "name": "NXFONT_SERIF38X49B", "value": "n", "user_value": 0, "dep": "y", "prompt": "Serif 38x49 Bold", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a large, 38x49 bold font (with serifs)\n(font ID FONTID_SERIF38X49B == 13)."}, {"type": 3, "name": "NXFONT_PIXEL_UNICODE", "value": "n", "user_value": 0, "dep": "y", "prompt": "Pixel UniCode", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a small LCD, The \"Pixel UniCode\"\n(font ID FONTID_PIXEL_UNICODE == 19)."}, {"type": 3, "name": "NXFONT_PIXEL_LCD_MACHINE", "value": "n", "user_value": 0, "dep": "y", "prompt": "Pixel lcd machine", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a small LCD, The \"Pixel lcd machine\"\n(font ID FONTID_PIXEL_LCD_MACHINE == 20)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_4X6", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 4x6", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-4x6\".\n(font ID FONTID_X11_MISC_FIXED_4X6 == 21)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_5X7", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 5x7", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-5x7\".\n(font ID FONTID_X11_MISC_FIXED_5X7 == 22)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_5X8", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 5x8", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-5x8\".\n(font ID FONTID_X11_MISC_FIXED_5X8 == 23)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_6X9", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 6x9", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-6x9\".\n(font ID FONTID_X11_MISC_FIXED_6X9 == 24)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_6X10", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 6x10", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-6x10\".\n(font ID FONTID_X11_MISC_FIXED_6X10 == 25)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_6X12", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 6x12", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-6x12\".\n(font ID FONTID_X11_MISC_FIXED_6X12 == 26)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_6X13", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 6x13", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-6x13\".\n(font ID FONTID_X11_MISC_FIXED_6X13 == 27)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_6X13B", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 6x13B", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-6x13B\".\n(font ID FONTID_X11_MISC_FIXED_6X13B == 28)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_6X13O", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 6x13O", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-6x13O\".\n(font ID FONTID_X11_MISC_FIXED_6X13O == 29)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_7X13", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 7x13", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-7x13\".\n(font ID FONTID_X11_MISC_FIXED_7X13 == 30)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_7X13B", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 7x13B", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-7x13B\".\n(font ID FONTID_X11_MISC_FIXED_7X13B == 31)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_7X13O", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 7x13O", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-7x13O\".\n(font ID FONTID_X11_MISC_FIXED_7X13O == 32)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_7X14", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 7x14", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-7x14\".\n(font ID FONTID_X11_MISC_FIXED_7X14 == 33)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_7X14B", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 7x14B", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-7x14B\".\n(font ID FONTID_X11_MISC_FIXED_7X14B == 34)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_8X13", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 8x13", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-8x13\".\n(font ID FONTID_X11_MISC_FIXED_8X13 == 35)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_8X13B", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 8x13B", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-8x13B\".\n(font ID FONTID_X11_MISC_FIXED_8X13B == 36)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_8X13O", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 8x13O", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-8x13O\".\n(font ID FONTID_X11_MISC_FIXED_8X13O == 37)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_9X15", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 9x15", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-9x15\".\n(font ID FONTID_X11_MISC_FIXED_9X15 == 38)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_9X15B", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 9x15B", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-9x15B\".\n(font ID FONTID_X11_MISC_FIXED_9X15B == 39)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_9X18", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 9x18", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-9x18\".\n(font ID FONTID_X11_MISC_FIXED_9X18 == 40)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_9X18B", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 9x18B", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-9x18B\".\n(font ID FONTID_X11_MISC_FIXED_9X18B == 41)."}, {"type": 3, "name": "NXFONT_X11_MISC_FIXED_10X20", "value": "n", "user_value": 0, "dep": "y", "prompt": "x11 misc fixed 10x20", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a \"x11-misc-fixed-10x20\".\n(font ID FONTID_X11_MISC_FIXED_10X20 == 42)."}, {"type": 3, "name": "NXFONT_TOM_THUMB_4X6", "value": "n", "user_value": 0, "dep": "y", "prompt": "Tom Thumb Monospace 4x6", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "This option enables support for a small, 3x5 font (with blank space\npadding to 4x6) (font ID FONTID_TOM_THUMB_4X6 == 43)."}]}, {"type": 3, "name": "NXTERM", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "NxTerm", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "Enables building of the NxTerm driver.", "children": [{"type": 6, "dep": "n", "prompt": "NxTerm Output Text/Graphics Options", "cond": "NXTERM && NX"}, {"type": 27, "name": "NXTERM_BPP", "value": "", "user_value": null, "dep": "n", "prompt": "NxTerm BPP", "cond": "NXTERM && NX", "defaults": [{"name": "1", "default": "1", "cond": "!NX_DISABLE_1BPP && NXTERM && NX"}, {"name": "2", "default": "2", "cond": "!NX_DISABLE_2BPP && NXTERM && NX"}, {"name": "4", "default": "4", "cond": "!NX_DISABLE_4BPP && NXTERM && NX"}, {"name": "8", "default": "8", "cond": "!NX_DISABLE_8BPP && NXTERM && NX"}, {"name": "16", "default": "16", "cond": "!NX_DISABLE_16BPP && NXTERM && NX"}, {"name": "24", "default": "24", "cond": "!NX_DISABLE_24BPP && NXTERM && NX"}, {"name": "32", "default": "32", "cond": "!NX_DISABLE_32BPP && NXTERM && NX"}], "help": "Currently, NxTerm supports only a single pixel depth. This\nconfiguration setting must be provided to support that single pixel depth.\nDefault: The smallest enabled pixel depth. (see NX_DISABLE_*BPP)"}, {"type": 27, "name": "NXTERM_CURSORCHAR", "value": "", "user_value": null, "dep": "n", "prompt": "Character code to use as the cursor", "cond": "NXTERM && NX", "defaults": [{"name": "137", "default": "137", "cond": "NXTERM && NX"}], "help": "The bitmap code to use as the cursor.  Default '_' (137)"}, {"type": 27, "name": "NXTERM_MXCHARS", "value": "", "user_value": null, "dep": "n", "prompt": "Max Characters on Display", "cond": "NXTERM && NX", "defaults": [{"name": "128", "default": "128", "cond": "NXTERM && NX"}], "help": "NxTerm needs to remember every character written to the console so\nthat it can redraw the window. This setting determines the size of some\ninternal memory allocations used to hold the character data. Default: 128."}, {"type": 27, "name": "NXTERM_CACHESIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Font Cache Size", "cond": "NXTERM && NX", "defaults": [{"name": "16", "default": "16", "cond": "NXTERM && NX"}], "help": "NxTerm supports caching of rendered fonts. This font caching is required\nfor two reasons: (1) First, it improves text performance, but more\nimportantly (2) it preserves the font memory. Since the NX server runs on\na separate server thread, it requires that the rendered font memory persist\nuntil the server has a chance to render the font. Unfortunately, the font\ncache would be quite large if all fonts were saved. The NXTERM_CACHESIZE\nsetting will control the size of the font cache (in number of glyphs). Only that\nnumber of the most recently used glyphs will be retained. Default: 16.\nNOTE: There can still be a race condition between the NxTerm driver and the\nNX task.  If you every see character corruption (especially when printing\na lot of data or scrolling), then increasing the value of NXTERM_CACHESIZE\nis something that you should try.  Alternatively, you can reduce the size of\nMQ_MAXMSGSIZE which will force NxTerm task to pace the server task.\nNXTERM_CACHESIZE should be larger than MQ_MAXMSGSIZE in any event."}, {"type": 27, "name": "NXTERM_LINESEPARATION", "value": "", "user_value": null, "dep": "n", "prompt": "Line Separation", "cond": "NXTERM && NX", "defaults": [{"name": "0", "default": "0", "cond": "NXTERM && NX"}], "help": "This the space (in rows) between each row of test.  Default: 0"}, {"type": 3, "name": "NXTERM_NOWRAP", "value": "n", "user_value": null, "dep": "n", "prompt": "No wrap", "cond": "NXTERM && NX", "defaults": [{"name": "n", "default": "n", "cond": "NXTERM && NX"}], "help": "By default, lines will wrap when the test reaches the right hand side\nof the window. This setting can be defining to change this behavior so\nthat the text is simply truncated until a new line is  encountered."}, {"type": 6, "dep": "n", "prompt": "NxTerm Input options", "cond": "NXTERM && NX"}, {"type": 3, "name": "NXTERM_NXKBDIN", "value": "n", "user_value": null, "dep": "n", "prompt": "NX KBD input", "cond": "NXTERM && NX", "defaults": [{"name": "n", "default": "n", "cond": "NXTERM && NX"}], "help": "Take input from the NX keyboard input callback.  By default, keyboard\ninput is taken from stdin (/dev/console).  If this option is set, then\nthe interface nxterm_kdbin() is enabled.  That interface may be driven\nby window callback functions so that keyboard input *only* goes to the\ntop window."}, {"type": 27, "name": "NXTERM_KBDBUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Keyboard Input Buffer Size", "cond": "NXTERM && NX", "defaults": [{"name": "16", "default": "16", "cond": "NXTERM && NX"}], "help": "If NXTERM_NXKBDIN is enabled, then this value may be used to\ndefine the size of the per-window keyboard input buffer.  Default: 16"}, {"type": 27, "name": "NXTERM_NPOLLWAITERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of Poll Waiters", "cond": "NXTERM && NX", "defaults": [{"name": "4", "default": "4", "cond": "NXTERM && NX"}], "help": "The number of threads that can be waiting for read data available.\nDefault: 4"}]}, {"type": 6, "dep": "y", "prompt": "NX Multi-user only options", "cond": "NX"}, {"type": 3, "name": "NX_MULTIUSER", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "Multi-user NX Server", "cond": "NX", "defaults": [{"name": "n", "default": "n", "cond": "NX"}], "help": "Configures NX in multi-user mode", "children": [{"type": 3, "name": "NX_BLOCKING", "value": "n", "user_value": null, "dep": "n", "prompt": "Blocking", "cond": "NX_MULTIUSER && NX", "defaults": [{"name": "n", "default": "n", "cond": "NX_MULTIUSER && NX"}], "help": "Open the client message queues in blocking mode.  In this case,\nnx_eventhandler() will not return until a message is received and processed."}, {"type": 27, "name": "NX_MXSERVERMSGS", "value": "", "user_value": null, "dep": "n", "prompt": "Max Server Messages", "cond": "NX_MULTIUSER && NX", "defaults": [{"name": "32", "default": "32", "cond": "NX_MULTIUSER && NX"}], "help": "Specifies the maximum number of messages that can fit in the message queues.\nNo additional resources are allocated, but this can be set to prevent\nflooding of the client or server with too many messages (PREALLOC_MQ_MSGS\ncontrols how many messages are pre-allocated)."}, {"type": 27, "name": "NX_MXCLIENTMSGS", "value": "", "user_value": null, "dep": "n", "prompt": "Max Client Messages", "cond": "NX_MULTIUSER && NX", "defaults": [{"name": "16", "default": "16", "cond": "NX_MULTIUSER && NX"}], "help": "Specifies the maximum number of messages that can fit in the message queues.\nNo additional resources are allocated, but this can be set to prevent\nflooding of the client or server with too many messages (PREALLOC_MQ_MSGS\ncontrols how many messages are pre-allocated)."}, {"type": 3, "name": "NXSTART_EXTERNINIT", "value": "n", "user_value": null, "dep": "n", "prompt": "External display Initialization", "cond": "NX_MULTIUSER && NX", "defaults": [{"name": "n", "default": "n", "cond": "NX_MULTIUSER && NX"}], "help": "Define to support external display initialization by platform-\nspecific code.  This this option is defined, then nx_start() will\ncall board_graphics_setup(CONFIG_NXSTART_DEVNO) to initialize the\ngraphics device.  This option is necessary if display is used that\ncannot be initialized using the standard LCD or framebuffer\ninterfaces."}, {"type": 27, "name": "NXSTART_SERVERPRIO", "value": "", "user_value": null, "dep": "n", "prompt": "NX Server priority", "cond": "NX_MULTIUSER && NX", "defaults": [{"name": "110", "default": "110", "cond": "NX_MULTIUSER && NX"}], "help": "Priority of the NX server.  This applies only if NX is configured in\nmulti-user mode (NX_MULTIUSER=y).  Default: 110.\n\nNOTE:  NXSTART_SERVERPRIO should have a relatively high priority to\navoid data overrun race conditions."}, {"type": 27, "name": "NXSTART_SERVERSTACK", "value": "", "user_value": null, "dep": "n", "prompt": "NX Server Stack Size", "cond": "NX_MULTIUSER && NX", "defaults": [{"name": "2048", "default": "2048", "cond": "NX_MULTIUSER && NX"}], "help": "NX server thread stack size (in multi-user mode).  Default 2048"}, {"type": 27, "name": "NXSTART_DEVNO", "value": "", "user_value": null, "dep": "n", "prompt": "LCD Device Number", "cond": "(NX_LCDDRIVER || NXSTART_EXTERNINIT) && NX_MULTIUSER && NX", "defaults": [{"name": "0", "default": "0", "cond": "(NX_LCDDRIVER || NXSTART_EXTERNINIT) && NX_MULTIUSER && NX"}], "help": "LCD device number (in case there are more than one LCDs connected).\nDefault: 0"}, {"type": 27, "name": "NXSTART_DISPLAYNO", "value": "", "user_value": null, "dep": "n", "prompt": "Display Number", "cond": "!NX_LCDDRIVER && !NXSTART_EXTERNINIT && NX_MULTIUSER && NX", "defaults": [{"name": "0", "default": "0", "cond": "!NX_LCDDRIVER && !NXSTART_EXTERNINIT && NX_MULTIUSER && NX"}], "help": "Framebuffer display number (in case there are more than one framebuffers).\nDefault: 0"}, {"type": 27, "name": "NXSTART_VPLANE", "value": "", "user_value": null, "dep": "n", "prompt": "Plane Number", "cond": "!NX_LCDDRIVER && !NXSTART_EXTERNINIT && NX_MULTIUSER && NX", "defaults": [{"name": "0", "default": "0", "cond": "!NX_LCDDRIVER && !NXSTART_EXTERNINIT && NX_MULTIUSER && NX"}], "help": "Only a single video plane is supported. Default: 0"}]}, {"type": 3, "name": "VNCSERVER", "value": "n", "user_value": null, "menuconfig": true, "dep": "n", "prompt": "VNC server", "cond": "NET_TCP && !NX_LCDDRIVER && EXPERIMENTAL && NX", "defaults": [{"name": "n", "default": "n", "cond": "NET_TCP && !NX_LCDDRIVER && EXPERIMENTAL && NX"}], "selects": [{"symbol": "NET_TCP_READAHEAD", "cond": "NET_TCP && !NX_LCDDRIVER && EXPERIMENTAL && NX"}, {"symbol": "NX_UPDATE", "cond": "NET_TCP && !NX_LCDDRIVER && EXPERIMENTAL && NX"}], "help": "Enable support for a VNC Remote Frame Buffer (RFB) server.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "VNC server protocol", "cond": "VNCSERVER && NX", "defaults": [{"name": "VNCSERVER_PROTO3p8", "default": "n", "cond": "VNCSERVER && NX"}], "children": [{"type": 3, "name": "VNCSERVER_PROTO3p3", "value": "n", "user_value": null, "dep": "n", "prompt": "Version 3.3", "cond": "EXPERIMENTAL && y"}, {"type": 3, "name": "VNCSERVER_PROTO3p8", "value": "n", "user_value": null, "dep": "n", "prompt": "Version 3.8", "cond": "y"}]}, {"type": 27, "name": "VNCSERVER_NDISPLAYS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of displays", "cond": "VNCSERVER && NX", "defaults": [{"name": "1", "default": "1", "cond": "VNCSERVER && NX"}], "ranges": [{"min": "1", "max": "99", "cond": "VNCSERVER && NX"}], "help": "Specifies the number of RFB displays supported by the server.\nNormally this should be one."}, {"type": 47, "name": "VNCSERVER_NAME", "value": "", "user_value": null, "dep": "n", "prompt": "VNC display name", "cond": "VNCSERVER && NX", "defaults": [{"name": "NuttX", "default": "NuttX", "cond": "VNCSERVER && NX"}]}, {"type": 27, "name": "VNCSERVER_PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "VNC server task priority", "cond": "VNCSERVER && NX", "defaults": [{"name": "100", "default": "100", "cond": "VNCSERVER && NX"}]}, {"type": 27, "name": "VNCSERVER_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "VNC server stack size", "cond": "VNCSERVER && NX", "defaults": [{"name": "2048", "default": "2048", "cond": "VNCSERVER && NX"}]}, {"type": 27, "name": "VNCSERVER_UPDATER_PRIO", "value": "", "user_value": null, "dep": "n", "prompt": "VNC updater thread priority", "cond": "VNCSERVER && NX", "defaults": [{"name": "100", "default": "100", "cond": "VNCSERVER && NX"}]}, {"type": 27, "name": "VNCSERVER_UPDATER_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "VNC updater thread stack size", "cond": "VNCSERVER && NX", "defaults": [{"name": "2048", "default": "2048", "cond": "VNCSERVER && NX"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "VNC color format", "cond": "VNCSERVER && NX", "defaults": [{"name": "VNCSERVER_COLORFMT_RGB16", "default": "n", "cond": "VNCSERVER && NX"}], "children": [{"type": 3, "name": "VNCSERVER_COLORFMT_RGB8", "value": "n", "user_value": null, "dep": "n", "prompt": "RGB8 3:3:2", "cond": "y"}, {"type": 3, "name": "VNCSERVER_COLORFMT_RGB16", "value": "n", "user_value": null, "dep": "n", "prompt": "RGB16 5:6:5", "cond": "y"}, {"type": 3, "name": "VNCSERVER_COLORFMT_RGB32", "value": "n", "user_value": null, "dep": "n", "prompt": "RGB32 8:8:8", "cond": "y"}]}, {"type": 27, "name": "VNCSERVER_SCREENWIDTH", "value": "", "user_value": null, "dep": "n", "prompt": "Framebuffer width (pixels)", "cond": "VNCSERVER && NX", "defaults": [{"name": "320", "default": "320", "cond": "VNCSERVER && NX"}], "help": "This setting defines the width in pixels of the local framebuffer.\n\n        Memory usage: PixelWidth * ScreenWidth * ScreenHeight\n\nSo, for example, a 320x240 screen with RGB16 pixels would require\n2x320x240 = 150 KB of RAM."}, {"type": 27, "name": "VNCSERVER_SCREENHEIGHT", "value": "", "user_value": null, "dep": "n", "prompt": "Framebuffer height (rows)", "cond": "VNCSERVER && NX", "defaults": [{"name": "240", "default": "240", "cond": "VNCSERVER && NX"}], "help": "This setting defines the height in rows of the local framebuffer.\n\n        Memory usage: PixelWidth * ScreenWidth * ScreenHeight\n\nSo, for example, a 320x240 screen with RGB16 pixels would require\n2x320x240 = 150 KB of RAM."}, {"type": 27, "name": "VNCSERVER_NUPDATES", "value": "", "user_value": null, "dep": "n", "prompt": "Number of pre-allocate update structures", "cond": "VNCSERVER && NX", "defaults": [{"name": "48", "default": "48", "cond": "VNCSERVER && NX"}], "help": "This setting provides the number of pre-allocated update structures\nthat will be used.  Dynamic memory allocations are never made.  In\nthe likely event that we run out of update structures, the graphics\nsubsystem will pause and wait for the next structures to be released.\n\nOverhead is 12-bytes per update structure."}, {"type": 27, "name": "VNCSERVER_UPDATE_BUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Max update buffer size (bytes)", "cond": "VNCSERVER && NX", "defaults": [{"name": "1024", "default": "1024", "cond": "VNCSERVER && NX"}], "help": "A single buffer is pre-allocated for rendering updates.  This\nsetting specifies the maximum in bytes of that update buffer.  For\nexample, an update buffers of 32 pixels at 8-bits per pixel and\n32-rows would yield a buffer size of 1024!\n\nIdeally, this buffer should fit in one network packet to avoid\naccessive re-assembly of partial TCP packets."}, {"type": 3, "name": "VNCSERVER_KBDENCODE", "value": "n", "user_value": null, "dep": "n", "prompt": "Encode keyboard input", "cond": "LIB_KBDCODEC && VNCSERVER && NX", "defaults": [{"name": "n", "default": "n", "cond": "LIB_KBDCODEC && VNCSERVER && NX"}], "help": "Use a special encoding of keyboard characters as defined in\ninclude/nuttx/input/kbd_coded.h."}, {"type": 27, "name": "VNCSERVER_INBUFFER_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Input buffer size", "cond": "VNCSERVER && NX", "defaults": [{"name": "80", "default": "80", "cond": "VNCSERVER && NX"}]}, {"type": 3, "name": "VNCSERVER_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "VNC Server debug", "cond": "DEBUG_FEATURES && !DEBUG_GRAPHICS && VNCSERVER && NX", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && !DEBUG_GRAPHICS && VNCSERVER && NX"}], "help": "Normally VNC debug output is selected with DEBUG_GRAPHICS.  The VNC\nserver server suupport this special option to enable GRAPHICS debug\noutput for the VNC server while GRAPHICS debug is disabled.  This\nprovides an cleaner, less cluttered output when you only wish to\ndebug the VNC server versus enabling DEBUG_GRAPHICS globally."}, {"type": 3, "name": "VNCSERVER_UPDATE_DEBUG", "value": "n", "user_value": null, "dep": "n", "prompt": "Detailed updater debug", "cond": "(DEBUG_GRAPHICS || VNCSERVER_DEBUG) && VNCSERVER && NX", "defaults": [{"name": "n", "default": "n", "cond": "(DEBUG_GRAPHICS || VNCSERVER_DEBUG) && VNCSERVER && NX"}]}]}, {"type": 3, "name": "VNCCLIENT", "value": "n", "user_value": null, "menuconfig": true, "dep": "n", "prompt": "VNC client", "cond": "NET_TCP && !NX_LCDDRIVER && !VNC_SERVER && EXPERIMENTAL && NX", "defaults": [{"name": "n", "default": "n", "cond": "NET_TCP && !NX_LCDDRIVER && !VNC_SERVER && EXPERIMENTAL && NX"}], "help": "Enable support for a VNC Remote Frame Buffer (RFB) client"}]}]}, {"type": 31, "dep": "y", "prompt": "Memory Management", "cond": "y", "children": [{"type": 3, "name": "MM_KERNEL_HEAP", "value": "n", "user_value": null, "dep": "n", "prompt": "Support a protected, kernel heap", "cond": "BUILD_PROTECTED || BUILD_KERNEL", "defaults": [{"name": "y", "default": "y", "cond": "BUILD_PROTECTED || BUILD_KERNEL"}], "help": "Partition heap memory into two parts:  (1) a protected, kernel-mode\nheap accessible only by the NuttX kernel, and (2) an unprotected\nuser-mode heap for use by applications.  If you are only interested\nin protected the kernel from read access, then this option is not\nnecessary.  If you wish to secure the kernel data as well, then\nthis option should be selected.\n\nThe kernel heap size that is used is provided a a platform-specific\nup_allocate_kheap() interface.  This configuration setting is made\navailable to that platform specific code.  However, the\nup_allocate_kheap() interface may chose to ignore this setting if it\nhas a more appropriate heap allocation strategy.", "children": [{"type": 27, "name": "MM_KERNEL_HEAPSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Kernal heap size", "cond": "MM_KERNEL_HEAP", "defaults": [{"name": "8192", "default": "8192", "cond": "MM_KERNEL_HEAP"}], "help": "This is the size of the a protected, kernel-mode heap (in bytes).\nThe remaining of available memory is given to the unprotected\nuser-mode heap.  This value may need to be aligned to units of the\nsize of the smallest memory protection region."}]}, {"type": 3, "name": "MM_SMALL", "value": "n", "user_value": 0, "rev_dep": "(ARCH_CHIP_ATMEGA && y) || (ARCH_CHIP_AT90USB && y) || (ARCH_CHIP_MCS92S12NEC64 && y) || (ARCH_CHIP_M30262F8 && y) || (ARCH_CHIP_Z80 && y) || (ARCH_CHIP_Z180 && ARCH_Z80) || (ARCH_CHIP_Z8 && ARCH_Z80) || (ARCH_CHIP_EZ80 && EZ80_Z80MODE && ARCH_Z80)", "dep": "y", "prompt": "Small memory model", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Each memory allocation has a small allocation overhead.  The size\nof that overhead is normally determined by the \"width\" of the\naddress support by the MCU.  MCUs that support 16-bit addressability\nhave smaller overhead than devices that support 32-bit addressability.\nHowever, there are many MCUs that support 32-bit addressability *but*\nhave internal SRAM of size less than or equal to 64Kb.  In this case,\nMM_SMALL can be defined so that those MCUs will also benefit\nfrom the smaller, 16-bit-based allocation overhead.\n\nWARNING:  This selection will also change the alignment of allocated\nmemory.  For example, on ARM memory will have 8-byte alignment by\ndefault.  If MM_SMALL is selected, then allocated memory will have\nonly 4-byte alignment.  This may be important on some platforms where\n64-bit data is in allocated structures and 8-byte alignment is required."}, {"type": 27, "name": "MM_REGIONS", "value": "1", "user_value": "1", "dep": "y", "prompt": "Number of memory regions", "cond": "y", "defaults": [{"name": "1", "default": "1", "cond": "y"}], "help": "If the architecture includes multiple, non-contiguous regions of\nmemory to allocate from, this specifies the number of memory regions\nthat the memory manager must handle and enables the API\nmm_addregion(heap, start, end);"}, {"type": 3, "name": "ARCH_HAVE_HEAP2", "value": "n", "user_value": 0, "rev_dep": "(ARCH_Z16 && y) || (ARCH_Z80 && y) || (ARCH_CHIP_IMX1 && y) || (STM32_FSMC_SRAM && STM32_FSMC && ARCH_CHIP_STM32 && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 24, "name": "HEAP2_BASE", "value": "", "user_value": null, "dep": "n", "prompt": "Start address of second user heap region", "cond": "ARCH_HAVE_HEAP2", "defaults": [{"name": "0x00000000", "default": "0x00000000", "cond": "ARCH_HAVE_HEAP2"}], "help": "The base address of the second heap region."}, {"type": 27, "name": "HEAP2_SIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Size of the second user heap region", "cond": "ARCH_HAVE_HEAP2", "defaults": [{"name": "0", "default": "0", "cond": "ARCH_HAVE_HEAP2"}], "help": "The size of the second heap region."}, {"type": 3, "name": "GRAN", "value": "n", "user_value": 0, "rev_dep": "MM_PGALLOC && ARCH_USE_MMU", "dep": "y", "prompt": "Enable Granule Allocator", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enable granule allocator support.  Allocations will be aligned to the\ngranule size; allocations will be in units of the granule size.\nLarger granules will give better performance and less overhead but\nmore losses of memory due to alignment and quantization waste.\n\nNOTE: The current implementation also restricts the maximum\nallocation size to 32 granaules.  That restriction could be\neliminated with some additional coding effort.", "children": [{"type": 3, "name": "GRAN_SINGLE", "value": "n", "user_value": null, "dep": "n", "prompt": "Single Granule Allocator", "cond": "GRAN", "defaults": [{"name": "n", "default": "n", "cond": "GRAN"}], "help": "Select if there is only one instance of the granule allocator (i.e.,\ngran_initialize will be called only once. In this case, (1) there\nare a few optimizations that can can be done and (2) the GRAN_HANDLE\nis not needed."}, {"type": 3, "name": "GRAN_INTR", "value": "n", "user_value": null, "dep": "n", "prompt": "Interrupt level support", "cond": "GRAN", "defaults": [{"name": "n", "default": "n", "cond": "GRAN"}], "help": "Normally mutual exclusive access to granule allocator data is assured\nusing a semaphore.  If this option is set then, instead, mutual\nexclusion logic will disable interrupts.  While this options is more\ninvasive to system performance, it will also support use of the granule\nallocator from interrupt level logic."}, {"type": 3, "name": "DEBUG_GRAN", "value": "n", "user_value": null, "dep": "n", "prompt": "Granule Allocator Debug", "cond": "GRAN && DEBUG_FEATURES", "defaults": [{"name": "n", "default": "n", "cond": "GRAN && DEBUG_FEATURES"}], "help": "Just like DEBUG_MM, but only generates output from the gran\nallocation logic."}]}, {"type": 3, "name": "MM_PGALLOC", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Page Allocator", "cond": "ARCH_USE_MMU", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_USE_MMU"}], "selects": [{"symbol": "GRAN", "cond": "ARCH_USE_MMU"}], "help": "Enable support for a MMU physical page allocator based on the\ngranule allocator.", "children": [{"type": 27, "name": "MM_PGSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Page Size", "cond": "MM_PGALLOC", "defaults": [{"name": "4096", "default": "4096", "cond": "MM_PGALLOC"}], "help": "The MMU page size.  Must be one of {1024, 2048, 4096, 8192, or\n16384}.  This is easily extensible, but only those values are\ncurrently support."}, {"type": 3, "name": "DEBUG_PGALLOC", "value": "n", "user_value": null, "dep": "n", "prompt": "Page Allocator Debug", "cond": "DEBUG_FEATURES && MM_PGALLOC", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && MM_PGALLOC"}], "help": "Just like DEBUG_MM, but only generates output from the page\nallocation logic."}, {"type": 3, "name": "MM_SHM", "value": "n", "user_value": null, "dep": "n", "prompt": "Shared memory support", "cond": "MM_PGALLOC && BUILD_KERNEL && EXPERIMENTAL", "defaults": [{"name": "n", "default": "n", "cond": "MM_PGALLOC && BUILD_KERNEL && EXPERIMENTAL"}], "help": "Build in support for the shared memory interfaces shmget(), shmat(),\nshmctl(), and shmdt()."}]}, {"type": 31, "dep": "y", "prompt": "Common I/O Buffer Support", "cond": "y", "children": [{"type": 3, "name": "MM_IOB", "value": "n", "user_value": 0, "rev_dep": "(SYSLOG_BUFFER && SYSLOG_WRITE) || (NET_TCP_READAHEAD && NET_TCP && !NET_TCP_NO_STACK && NET) || (NET_TCP_WRITE_BUFFERS && NET_TCP && !NET_TCP_NO_STACK && NET) || (NET_UDP_READAHEAD && NET_UDP && !NET_UDP_NO_STACK && NET) || (WIRELESS_IEEE802154 && WIRELESS && WIRELESS) || (WIRELESS_PKTRADIO && WIRELESS && WIRELESS)", "dep": "y", "prompt": "Enable generic I/O buffer support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "This setting will build the common I/O buffer (IOB) support\nlibrary.", "children": [{"type": 27, "name": "IOB_NBUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of pre-allocated I/O buffers", "cond": "MM_IOB", "defaults": [{"name": "24", "default": "24", "cond": "((NET_TCP_WRITE_BUFFERS && !NET_TCP_READAHEAD) || (!NET_TCP_WRITE_BUFFERS && NET_TCP_READAHEAD)) && MM_IOB"}, {"name": "36", "default": "36", "cond": "NET_TCP_WRITE_BUFFERS && NET_TCP_READAHEAD && MM_IOB"}, {"name": "8", "default": "8", "cond": "!NET_TCP_WRITE_BUFFERS && !NET_TCP_READAHEAD && MM_IOB"}], "help": "Each packet is represented by a series of small I/O buffers in a\nchain.  This setting determines the number of preallocated I/O\nbuffers available for packet data."}, {"type": 27, "name": "IOB_BUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Payload size of one I/O buffer", "cond": "MM_IOB", "defaults": [{"name": "196", "default": "196", "cond": "MM_IOB"}], "help": "Each packet is represented by a series of small I/O buffers in a\nchain.  This setting determines the data payload each preallocated\nI/O buffer."}, {"type": 27, "name": "IOB_NCHAINS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of pre-allocated I/O buffer chain heads", "cond": "MM_IOB", "defaults": [{"name": "0", "default": "0", "cond": "!NET_TCP_READAHEAD && !NET_UDP_READAHEAD && MM_IOB"}, {"name": "8", "default": "8", "cond": "(NET_TCP_READAHEAD || NET_UDP_READAHEAD) && MM_IOB"}], "help": "These tiny nodes are used as \"containers\" to support queueing of\nI/O buffer chains.  This will limit the number of I/O transactions\nthat can be \"in-flight\" at any give time.  The default value of\nzero disables this features.\n\nThese generic I/O buffer chain containers are not currently used\nby any logic in NuttX.  That is because their other other specialized\nI/O buffer chain containers that also carry a payload of usage\nspecific information."}, {"type": 27, "name": "IOB_THROTTLE", "value": "", "user_value": null, "dep": "n", "prompt": "I/O buffer throttle value", "cond": "MM_IOB", "defaults": [{"name": "0", "default": "0", "cond": "(!NET_TCP_WRITE_BUFFERS || !NET_TCP_READAHEAD) && MM_IOB"}, {"name": "8", "default": "8", "cond": "NET_TCP_WRITE_BUFFERS && NET_TCP_READAHEAD && MM_IOB"}], "help": "TCP write buffering and read-ahead buffer use the same pool of free\nI/O buffers.  In order to prevent uncontrolled incoming TCP packets\nfrom hogging all of the available, pre-allocated I/O buffers, a\nthrottling value is required.  This throttle value assures that\nI/O buffers will be denied to the read-ahead logic before TCP writes\nare halted."}, {"type": 3, "name": "IOB_DEBUG", "value": "n", "user_value": null, "rev_dep": "(NET_TCP_WRBUFFER_DEBUG && DEBUG_FEATURES && NET_TCP_WRITE_BUFFERS && NET_TCP && !NET_TCP_NO_STACK && NET) || (NET_TCP_WRBUFFER_DUMP && (DEBUG_NET || NET_TCP_WRBUFFER_DEBUG) && NET_TCP_WRITE_BUFFERS && NET_TCP && !NET_TCP_NO_STACK && NET)", "dep": "n", "prompt": "Force I/O buffer debug", "cond": "DEBUG_FEATURES && !SYSLOG_BUFFER && MM_IOB", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_FEATURES && !SYSLOG_BUFFER && MM_IOB"}], "help": "This option will force debug output from I/O buffer logic.  This\nis not normally something that would want to do but is convenient\nif you are debugging the I/O buffer logic and do not want to get\noverloaded with other un-related debug output.\n\nNOTE that this selection is not available if IOBs are being used\nto syslog buffering logic (CONFIG_SYSLOG_BUFFER=y)!"}]}]}]}, {"type": 31, "dep": "y", "prompt": "Audio Support", "cond": "y", "children": [{"type": 3, "name": "AUDIO", "value": "n", "user_value": 0, "rev_dep": "(SAMA5_SSC0 && (SAMA5_DMAC0 || SAMA5_XDMAC0 || SAMA5_XDMAC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (SAMA5_SSC1 && (SAMA5_DMAC1 || SAMA5_XDMAC0 || SAMA5_XDMAC1) && ARCH_CHIP_SAMA5 && ARCH_CHIP_SAMA5 && ARCH_ARM) || (STM32L4_SAI1_A && STM32L4_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_SAI1_B && STM32L4_SAI1 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_SAI2_A && STM32L4_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM) || (STM32L4_SAI2_B && STM32L4_SAI2 && ARCH_CHIP_STM32L4 && ARCH_CHIP_STM32L4 && ARCH_ARM)", "dep": "y", "prompt": "Audio Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enables overall support for Audio library.", "children": [{"type": 3, "name": "AUDIO_MULTI_SESSION", "value": "n", "user_value": null, "dep": "n", "prompt": "Support multiple sessions", "cond": "AUDIO", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO"}], "help": "Some audio devices, such as USB attached sound cards, may support more\nthan one streaming session at a time (each with one or more audio channels).\nSelecting this feature adds support for tracking multiple concurrent\nsessions with the lower-level audio devices."}, {"type": 31, "dep": "n", "prompt": "Audio Buffer Configuration", "cond": "AUDIO", "children": [{"type": 3, "name": "AUDIO_LARGE_BUFFERS", "value": "n", "user_value": null, "dep": "n", "prompt": "Support Audio Buffers with greater than 65K samples", "cond": "AUDIO", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO"}], "help": "By default, the Audio Pipeline Buffers use a 16-bit max sample count, limiting\nthe number of samples per buffer to 65K.  Enable this option to specify a\n32-bit max sample count for increased samples / buffer capability.\nchannel capability."}, {"type": 27, "name": "AUDIO_NUM_BUFFERS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of buffers for audio processing", "cond": "AUDIO", "defaults": [{"name": "2", "default": "2", "cond": "AUDIO"}], "help": "Specifies the number of buffers to allocate for audio processing.\nIf Driver Specified buffer sizes is enabled (below), then the\nlow-level drivers will have the opportunity to override this\nvalue."}, {"type": 27, "name": "AUDIO_BUFFER_NUMBYTES", "value": "", "user_value": null, "dep": "n", "prompt": "Size of each audio buffer for audio processing", "cond": "AUDIO", "defaults": [{"name": "8192", "default": "8192", "cond": "AUDIO"}], "help": "Specifies the allocation size for each audio buffer\nIf Driver Specified buffer sizes is enabled (below), then the\nlow-level drivers will have the opportunity to override this\nvalue."}, {"type": 3, "name": "AUDIO_DRIVER_SPECIFIC_BUFFERS", "value": "n", "user_value": null, "dep": "n", "prompt": "Support for Driver specified buffer sizes", "cond": "AUDIO", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO"}], "help": "By default, the Audio system uses the same size and number of buffers\nregardless of the specific audio device in use.  Specifying 'y' here\nadds extra code which allows the lower-level audio device to specify\na partucular size and number of buffers."}]}, {"type": 31, "dep": "n", "prompt": "Supported Audio Formats", "cond": "AUDIO", "children": [{"type": 3, "name": "AUDIO_FORMAT_AC3", "value": "n", "user_value": null, "dep": "n", "prompt": "AC3 Format", "cond": "AUDIO", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO"}], "help": "Build in support for AC3 (Dolby Digital) Audio format."}, {"type": 3, "name": "AUDIO_FORMAT_DTS", "value": "n", "user_value": null, "dep": "n", "prompt": "DTS Format", "cond": "AUDIO", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO"}], "help": "Add in support for DTS format."}, {"type": 3, "name": "AUDIO_FORMAT_PCM", "value": "n", "user_value": null, "dep": "n", "prompt": "PCM Audio", "cond": "AUDIO", "defaults": [{"name": "y", "default": "y", "cond": "AUDIO"}], "help": "Build in support for PCM Audio format."}, {"type": 3, "name": "AUDIO_FORMAT_MP3", "value": "n", "user_value": null, "dep": "n", "prompt": "MPEG 3 Layer 1", "cond": "AUDIO", "defaults": [{"name": "y", "default": "y", "cond": "AUDIO"}], "help": "Build in support for MP3 Audio format."}, {"type": 3, "name": "AUDIO_FORMAT_MIDI", "value": "n", "user_value": null, "dep": "n", "prompt": "Midi Format", "cond": "AUDIO", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO"}], "help": "Add in support for MIDI format."}, {"type": 3, "name": "AUDIO_FORMAT_WMA", "value": "n", "user_value": null, "dep": "n", "prompt": "WMA Format (see copyright notice)", "cond": "AUDIO", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO"}], "help": "Add in support for Microsoft Windows Media format."}, {"type": 3, "name": "AUDIO_FORMAT_OGG_VORBIS", "value": "n", "user_value": null, "dep": "n", "prompt": "Ogg Vorbis format", "cond": "AUDIO", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO"}], "help": "Build in support for the Open Source Ogg Vorbis format."}]}, {"type": 31, "dep": "n", "prompt": "Exclude Specific Audio Features", "cond": "AUDIO", "children": [{"type": 3, "name": "AUDIO_EXCLUDE_VOLUME", "value": "n", "user_value": null, "dep": "n", "prompt": "Exclude volume controls", "cond": "AUDIO", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO"}], "help": "Exclude building support for changing the playback volume."}, {"type": 3, "name": "AUDIO_EXCLUDE_BALANCE", "value": "n", "user_value": null, "dep": "n", "prompt": "Exclude balance controls", "cond": "AUDIO", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO"}], "help": "Exclude building support for changing the balance."}, {"type": 3, "name": "AUDIO_EXCLUDE_EQUALIZER", "value": "n", "user_value": null, "dep": "n", "prompt": "Exclude equalizer controls", "cond": "AUDIO", "defaults": [{"name": "y", "default": "y", "cond": "AUDIO"}], "help": "Exclude building support for setting equalization."}, {"type": 27, "name": "AUDIO_EQUALIZER_NBANDS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of equalizer bands", "cond": "!AUDIO_EXCLUDE_EQUALIZER && AUDIO", "defaults": [{"name": "8", "default": "8", "cond": "!AUDIO_EXCLUDE_EQUALIZER && AUDIO"}], "help": "If equalizer support is not excluded, then it will be necessary to\nprovide the (maximum) number of equalization bands to be supported."}, {"type": 3, "name": "AUDIO_EXCLUDE_TONE", "value": "n", "user_value": null, "dep": "n", "prompt": "Exclude tone (bass and treble) controls", "cond": "AUDIO", "defaults": [{"name": "y", "default": "y", "cond": "!AUDIO_EXCLUDE_EQUALIZER && AUDIO"}, {"name": "n", "default": "n", "cond": "AUDIO_EXCLUDE_EQUALIZER && AUDIO"}], "help": "Exclude building support for changing the bass and treble.  Normally\nyou would not select both tone controls and equalizer support unless\nyour underlying hardware supports both options."}, {"type": 3, "name": "AUDIO_EXCLUDE_PAUSE_RESUME", "value": "n", "user_value": null, "dep": "n", "prompt": "Exclude pause and resume controls", "cond": "AUDIO", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO"}], "help": "Exclude building support for pausing and resuming audio files\nonce they are submitted.  If the sound system is being used to play\nshort system notification or error type sounds that typicaly only\nlast a second or two, then there is no need (or chance) to pause or\nresume sound playback once it has started."}, {"type": 3, "name": "AUDIO_EXCLUDE_STOP", "value": "n", "user_value": null, "dep": "n", "prompt": "Exclude stop playback controls", "cond": "AUDIO", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO"}], "help": "Exclude building support for stopping audio files once they are\nsubmitted.  If the sound system is being used to play short sytem\nnotification or error type sounds that typically only last a second\nor two, then there is no need (or chance) to stop the sound\nplayback once it has started."}, {"type": 3, "name": "AUDIO_EXCLUDE_FFORWARD", "value": "n", "user_value": null, "dep": "n", "prompt": "Exclude fast forward controls", "cond": "AUDIO", "defaults": [{"name": "n", "default": "n", "cond": "!AUDIO_EXCLUDE_STOP && AUDIO"}, {"name": "y", "default": "y", "cond": "AUDIO_EXCLUDE_STOP && AUDIO"}], "help": "Exclude building support for fast forwarding through audio files\nonce they are submitted.  Selecting this option would only make\nif the underlying audio decoding logic is capable of sub-sampling\nin the stream of audio data."}, {"type": 3, "name": "AUDIO_EXCLUDE_REWIND", "value": "n", "user_value": null, "dep": "n", "prompt": "Exclude rewind controls", "cond": "AUDIO", "defaults": [{"name": "y", "default": "y", "cond": "AUDIO"}], "help": "Rewind may be supported by some audio devices, but not the typical\ndevice that receives a non-seekable, stream of audio buffers."}]}, {"type": 3, "name": "AUDIO_CUSTOM_DEV_PATH", "value": "n", "user_value": null, "dep": "n", "prompt": "Use custom device path", "cond": "AUDIO", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO"}], "help": "By default, all audio devices on the target are are registered in the\n/dev/audio directory.  Select this option to change the default location\nfor the device registration.", "children": [{"type": 3, "name": "AUDIO_DEV_ROOT", "value": "n", "user_value": null, "dep": "n", "prompt": "Place audio devices in /dev", "cond": "AUDIO_CUSTOM_DEV_PATH && AUDIO", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO_CUSTOM_DEV_PATH && AUDIO"}], "help": "This option causes all device entries to appear in /dev with all the\nother device entries.  This option generates the smallest code and\nRAM footprint."}, {"type": 47, "name": "AUDIO_DEV_PATH", "value": "", "user_value": null, "dep": "n", "prompt": "Base path for Audio devices", "cond": "!AUDIO_DEV_ROOT && AUDIO_CUSTOM_DEV_PATH && AUDIO", "defaults": [{"name": "/dev/audio", "default": "/dev/audio", "cond": "!AUDIO_DEV_ROOT && AUDIO_CUSTOM_DEV_PATH && AUDIO"}], "help": "The path on the target where audio devices are registered.  The default\nis to place all audio devices in the /dev/audio/ directory."}]}, {"type": 3, "name": "AUDIO_MIXER", "value": "n", "user_value": null, "dep": "n", "prompt": "Planned - Enable support for the software based Audio Mixer", "cond": "AUDIO_PLANNED && AUDIO", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO_PLANNED && AUDIO"}], "help": "The Audio mixer is a software-only based component that can be used\nto perform audio channel or device mixing."}, {"type": 3, "name": "AUDIO_MIDI_SYNTH", "value": "n", "user_value": null, "dep": "n", "prompt": "Planned - Enable support for the software-based MIDI synthisizer", "cond": "AUDIO_PLANNED && AUDIO", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO_PLANNED && AUDIO"}], "help": "Builds a simple MIDI synthisizer."}, {"type": 3, "name": "AUDIO_OUTPUT_JACK_CONTROL", "value": "n", "user_value": null, "dep": "n", "prompt": "Planned - Enable support for output jack control", "cond": "AUDIO_PLANNED && AUDIO", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO_PLANNED && AUDIO"}], "help": "Builds a simple MIDI synthisizer."}, {"type": 3, "name": "AUDIO_FONT", "value": "n", "user_value": null, "dep": "n", "prompt": "Planned - Enable support for the Audio Font", "cond": "AUDIO_PLANNED && AUDIO", "defaults": [{"name": "n", "default": "n", "cond": "AUDIO_PLANNED && AUDIO"}], "help": "The Audio font provides common audio symbols."}]}]}, {"type": 31, "dep": "y", "prompt": "Wireless Support", "cond": "y", "children": [{"type": 3, "name": "WIRELESS", "value": "n", "user_value": 0, "dep": "y", "prompt": "Wireless Support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enables overall support for Wireless library.", "children": [{"type": 3, "name": "WIRELESS_IEEE802154", "value": "n", "user_value": null, "menuconfig": true, "dep": "n", "prompt": "IEEE 802.15.4 Support", "cond": "WIRELESS && WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "WIRELESS && WIRELESS"}], "selects": [{"symbol": "MM_IOB", "cond": "WIRELESS && WIRELESS"}], "help": "Enables a Media Access Controller for any IEEE802.15.4 radio\ndevice. This in turn can be used by higher layer entities\nsuch as 6lowpan.", "children": [{"type": 24, "name": "IEEE802154_DEFAULT_EADDR", "value": "", "user_value": null, "dep": "n", "prompt": "IEEE 802.15.4 Default Extended Address", "cond": "WIRELESS_IEEE802154 && WIRELESS", "defaults": [{"name": "0x00fade00deadbeef", "default": "0x00fade00deadbeef", "cond": "WIRELESS_IEEE802154 && WIRELESS"}], "help": "Set the default extended address to be used by MAC networks on init"}, {"type": 4, "user_value": null, "dep": "n", "prompt": "IEEE 802.15.4 work queue", "cond": "SCHED_WORKQUEUE && WIRELESS_IEEE802154 && WIRELESS", "defaults": [{"name": "MAC802154_HPWORK", "default": "n", "cond": "SCHED_HPWORK && SCHED_WORKQUEUE && WIRELESS_IEEE802154 && WIRELESS"}, {"name": "MAC802154_LPWORK", "default": "n", "cond": "!SCHED_HPWORK && SCHED_LPWORK && SCHED_WORKQUEUE && WIRELESS_IEEE802154 && WIRELESS"}], "help": "Work queue support is required to use the IEEE 802.15.4 MAC layer.\nIf the high priority work queue is available, then it should be used by\nthe driver.\n\nWARNING!! The IEEE802.15.4 network device must never run on the same\nwork queue as does the IEEE 802.15.4 MAC.  That configuration will\ncause deadlocks:  The network logic may be blocked on the work queue\nwaiting on resources that can only be freed by the MAC logic but the\nMAC is unable to run because the work queue is blocked.  The\nrecommended configuration is:  Network on the LP work queue; MAC on HP\nwork queue.  Blocking on the HP work queue is a very bad thing in\nany case.", "children": [{"type": 3, "name": "MAC802154_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "MAC802154_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}, {"type": 27, "name": "MAC802154_NTXDESC", "value": "", "user_value": null, "dep": "n", "prompt": "Number or TX descriptors", "cond": "WIRELESS_IEEE802154 && WIRELESS", "defaults": [{"name": "3", "default": "3", "cond": "WIRELESS_IEEE802154 && WIRELESS"}], "help": "Configured number of Tx descriptors. Default: 3\n\nWhen used with 6LoWPAN, the descriptor allocator runs on a work\nand must avoid blocking if possible.  Each frame will be provided in\nan IOB and each TX frame will need a TX descriptor.  So the safe\nthing to do is set CONFIG_MAC802154_NTXDESC to CONFIG_IOB_NBUFFERS.\nThen there should be the maximum pre-allocated buffers for each\npossible TX frame."}, {"type": 27, "name": "MAC802154_NNOTIF", "value": "", "user_value": null, "dep": "n", "prompt": "Number or notification structures", "cond": "WIRELESS_IEEE802154 && WIRELESS", "defaults": [{"name": "3", "default": "3", "cond": "WIRELESS_IEEE802154 && WIRELESS"}], "help": "Configured number of notification strucures Default: 3\n\nWhen various MAC management events occur, the MAC notifies the registered\nreceiver with an allocated notification structure indicating the event. The\nevents are primitives such as Association Indication etc."}, {"type": 27, "name": "MAC802154_NPANDESC", "value": "", "user_value": null, "dep": "n", "prompt": "Number of PAN descriptors", "cond": "WIRELESS_IEEE802154 && WIRELESS", "defaults": [{"name": "5", "default": "5", "cond": "WIRELESS_IEEE802154 && WIRELESS"}], "help": "Configured number of PAN descriptors Default: 5\n\nWhen performing a scan to find a suitable PAN, the MAC must store\ninformation for all unique beacons received. This is the number of unique\ndescriptors that can be held before the scan cancels with LIMIT_REACHED."}, {"type": 3, "name": "MAC802154_SFEVENT_VERBOSE", "value": "n", "user_value": null, "dep": "n", "prompt": "Verbose logging related to superframe events", "cond": "DEBUG_WIRELESS_INFO && WIRELESS_IEEE802154 && WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WIRELESS_INFO && WIRELESS_IEEE802154 && WIRELESS"}], "help": "Enable verbose logging of superframe events Default: false"}, {"type": 3, "name": "MAC802154_LOCK_VERBOSE", "value": "n", "user_value": null, "dep": "n", "prompt": "Verbose logging related to MAC lock management", "cond": "DEBUG_WIRELESS_INFO && WIRELESS_IEEE802154 && WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_WIRELESS_INFO && WIRELESS_IEEE802154 && WIRELESS"}], "help": "Enable verbose logging of MAC lock management. Default: false"}, {"type": 27, "name": "IEEE802154_IND_PREALLOC", "value": "", "user_value": null, "dep": "n", "prompt": "Number of pre-allocated meta-data structures", "cond": "WIRELESS_IEEE802154 && WIRELESS", "defaults": [{"name": "20", "default": "20", "cond": "WIRELESS_IEEE802154 && WIRELESS"}], "help": "This specifies the total number of preallocated meta data structures\nmust be allocated with each incoming packet.  These may be allocated\nfrom either from tasking logic or from interrupt level logic."}, {"type": 27, "name": "IEEE802154_IND_IRQRESERVE", "value": "", "user_value": null, "dep": "n", "prompt": "Reserved pre-allocated meta-data structures", "cond": "EXPERIMENTAL && WIRELESS_IEEE802154 && WIRELESS", "defaults": [{"name": "0", "default": "0", "cond": "EXPERIMENTAL && WIRELESS_IEEE802154 && WIRELESS"}], "help": "If meta-data structures can be allocated from interrupt handlers,\nthen this specifies the number of pre-allocatd meta-data structures\nthat are reserved for for use only by interrupt handlers.  This may\nbe zero to reserve no meta-data structures for interrupt handlers.\nIn that case, the allocation will fail if tasking logic has\nallocated them all.\n\nInterrupt logic will first attempt to allocate from the general,\npre-allocated structure pool that will contain up to (size\nCONFIG_IEEE802154_IND_PREALLOC - CONFIG_IEEE802154_IND_IRQRESERVE)\nentries.  If that fails, then it will try to take a structure from\nthe reserve (size CONFIG_IEEE802154_IND_IRQRESERVE).\n\nNon-interrupt logic will also first attempt to allocate from the\ngeneral, pre-allocated structure pool.  If that fails, it will\ndynamically allocate the meta data structure with an additional cost\nin performance.\n\nNOTE: Currently marked as experimental and with a default of zero\nbecause there are no interrupt level allocations performed by the\ncurrent IEEE 802.15.4 MAC code."}, {"type": 3, "name": "IEEE802154_MACDEV", "value": "n", "user_value": null, "dep": "n", "prompt": "Character driver for IEEE 802.15.4 MAC layer", "cond": "WIRELESS_IEEE802154 && WIRELESS_IEEE802154 && WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "WIRELESS_IEEE802154 && WIRELESS_IEEE802154 && WIRELESS"}], "help": "Enable the device driver to expose the IEEE 802.15.4 MAC layer\naccess to user space as IOCTLs", "children": [{"type": 27, "name": "IEEE802154_MACDEV_RECVRPRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Priority of frame receiver registerd with the MAC layer", "cond": "IEEE802154_MACDEV && WIRELESS_IEEE802154 && WIRELESS", "defaults": [{"name": "0", "default": "0", "cond": "IEEE802154_MACDEV && WIRELESS_IEEE802154 && WIRELESS"}], "help": "When the MAC layer receives an incoming data frame, it passes the frame\nto registered receivers, in order of receiver priority, until one of the\nreceivers claim the frame.\n\nAn example case would be when 6LoWPAN and the MAC character driver are\nenabled. Both have receivers registered with the MAC. The 6LoWPAN layer\nshould get assigned a higher priority than the character driver. In this\ncase, the 6LoWPAN receiver will receive the frame first. If the frame is\na 6LoWPAN frame, it will claim the frame and the MAC will not pass the\nframe to any additional receivers. If it does not claim the frame, the\nMAC layer will call the next highest priority receiver, in this case,\nthe MAC character driver (which should always be lowest priority since\nit is a \"catch-all\" type receiver)."}]}, {"type": 3, "name": "IEEE802154_NETDEV", "value": "n", "user_value": null, "dep": "n", "prompt": "IEEE802154 6LoWPAN Network Device", "cond": "(NET_6LOWPAN || NET_IEEE802154) && WIRELESS_IEEE802154 && WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "(NET_6LOWPAN || NET_IEEE802154) && WIRELESS_IEEE802154 && WIRELESS"}], "selects": [{"symbol": "ARCH_HAVE_NETDEV_STATISTICS", "cond": "(NET_6LOWPAN || NET_IEEE802154) && WIRELESS_IEEE802154 && WIRELESS"}], "help": "Add support for the IEEE802.15.4 6LoWPAN network device built on\nthe common IEEE802.15.4 MAC.", "children": [{"type": 27, "name": "IEEE802154_NETDEV_RECVRPRIO", "value": "", "user_value": null, "dep": "n", "prompt": "Priority of frame receiver registerd with the MAC layer", "cond": "IEEE802154_NETDEV && WIRELESS_IEEE802154 && WIRELESS", "defaults": [{"name": "1", "default": "1", "cond": "IEEE802154_NETDEV && WIRELESS_IEEE802154 && WIRELESS"}], "help": "When the MAC layer receives an incoming data frame, it passes the frame\nto registered receivers, in order of receiver priority, until one of the\nreceivers claim the frame.\n\nAn example case would be when 6LoWPAN and the MAC character driver are\nenabled. Both have receivers registered with the MAC. The 6LoWPAN layer\nshould get assigned a higher priority than the character driver. In this\ncase, the 6LoWPAN receiver will receive the frame first. If the frame is\na 6LoWPAN frame, it will claim the frame and the MAC will not pass the\nframe to any additional receivers. If it does not claim the frame, the\nMAC layer will call the next highest priority receiver, in this case,\nthe MAC character driver (which should always be lowest priority since\nit is a \"catch-all\" type receiver)."}, {"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && IEEE802154_NETDEV && WIRELESS_IEEE802154 && WIRELESS", "defaults": [{"name": "IEEE802154_NETDEV_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && IEEE802154_NETDEV && WIRELESS_IEEE802154 && WIRELESS"}, {"name": "IEEE802154_NETDEV_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && IEEE802154_NETDEV && WIRELESS_IEEE802154 && WIRELESS"}], "help": "Work queue support is required to use the IEEE802.15.4 network\ndriver.  If the low priority work queue is available, then it should\nbe used by the loopback driver.\n\nWARNING!! The IEEE802.15.4 network device must never run on the same\nwork queue as does the IEEE 802.15.4 MAC.  That configuration will\ncause deadlocks:  The network logic may be blocked on the work queue\nwaiting on resources that can only be freed by the MAC logic but the\nMAC is unable to run because the work queue is blocked.  The\nrecommended configuration is:  Network on the LP work queue; MAC on HP\nwork queue.  Blocking on the HP work queue is a very bad thing in\nany case.", "children": [{"type": 3, "name": "IEEE802154_NETDEV_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "IEEE802154_NETDEV_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}]}, {"type": 3, "name": "IEEE802154_LOOPBACK", "value": "n", "user_value": null, "dep": "n", "prompt": "IEEE802154 6LoWPAN Loopback", "cond": "(NET_6LOWPAN || NET_IEEE802154) && WIRELESS_IEEE802154 && WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "(NET_6LOWPAN || NET_IEEE802154) && WIRELESS_IEEE802154 && WIRELESS"}], "selects": [{"symbol": "ARCH_HAVE_NETDEV_STATISTICS", "cond": "(NET_6LOWPAN || NET_IEEE802154) && WIRELESS_IEEE802154 && WIRELESS"}], "help": "Add support for the IEEE802.15.4 6LoWPAN Loopback test device.", "children": [{"type": 4, "user_value": null, "dep": "n", "prompt": "Work queue", "cond": "SCHED_WORKQUEUE && IEEE802154_LOOPBACK && WIRELESS_IEEE802154 && WIRELESS", "defaults": [{"name": "IEEE802154_LOOPBACK_LPWORK", "default": "n", "cond": "SCHED_LPWORK && SCHED_WORKQUEUE && IEEE802154_LOOPBACK && WIRELESS_IEEE802154 && WIRELESS"}, {"name": "IEEE802154_LOOPBACK_HPWORK", "default": "n", "cond": "!SCHED_LPWORK && SCHED_HPWORK && SCHED_WORKQUEUE && IEEE802154_LOOPBACK && WIRELESS_IEEE802154 && WIRELESS"}], "help": "Work queue support is required to use the loopback driver.  If the\nlow priority work queue is available, then it should be used by the\nloopback driver.", "children": [{"type": 3, "name": "IEEE802154_LOOPBACK_HPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "High priority", "cond": "SCHED_HPWORK && y"}, {"type": 3, "name": "IEEE802154_LOOPBACK_LPWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "Low priority", "cond": "SCHED_LPWORK && y"}]}]}]}, {"type": 3, "name": "WIRELESS_PKTRADIO", "value": "n", "user_value": null, "menuconfig": true, "dep": "n", "prompt": "Packet Radio Support", "cond": "WIRELESS && WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "WIRELESS && WIRELESS"}], "selects": [{"symbol": "MM_IOB", "cond": "WIRELESS && WIRELESS"}], "help": "Enables support for non-standard packet radios.  This option enables\nspecial hooks to support interoperability of these non-standard\nradios to support 6LoWPAN networking.  This option should not be\nselected for standard IEEE 802.15.4.", "children": [{"type": 27, "name": "PKTRADIO_ADDRLEN", "value": "", "user_value": null, "dep": "n", "prompt": "Maximum address size", "cond": "WIRELESS_PKTRADIO && WIRELESS", "defaults": [{"name": "1", "default": "1", "cond": "WIRELESS_PKTRADIO && WIRELESS"}], "help": "This value provides the size of the MAC address used by the packet\nradio.  If there are multiple packet radios in the configuration,\nthen this must be set to the a value greater than or equal to the\nmaximum of address lengths used by the radios."}, {"type": 27, "name": "PKTRADIO_NRXMETA", "value": "", "user_value": null, "dep": "n", "prompt": "Number of pre-allocated meta-data structures", "cond": "WIRELESS_PKTRADIO && WIRELESS", "defaults": [{"name": "20", "default": "20", "cond": "WIRELESS_PKTRADIO && WIRELESS"}], "help": "This specifies the total number of preallocated meta data structures\nmust be allocated with each incoming packet."}, {"type": 3, "name": "PKTRADIO_LOOPBACK", "value": "n", "user_value": null, "dep": "n", "prompt": "PktRadio 6LoWPAN Loopback", "cond": "NET_6LOWPAN && NET_IPv6 && WIRELESS_PKTRADIO && WIRELESS", "defaults": [{"name": "n", "default": "n", "cond": "NET_6LOWPAN && NET_IPv6 && WIRELESS_PKTRADIO && WIRELESS"}], "selects": [{"symbol": "ARCH_HAVE_NETDEV_STATISTICS", "cond": "NET_6LOWPAN && NET_IPv6 && WIRELESS_PKTRADIO && WIRELESS"}], "help": "Add support for the PktRadio 6LoWPAN Loopback test device."}]}]}]}, {"type": 31, "dep": "y", "prompt": "Binary Loader", "cond": "y", "children": [{"type": 3, "name": "BINFMT_DISABLE", "value": "n", "user_value": 0, "dep": "y", "prompt": "Disble BINFMT support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "By default, support for loadable binary formats is built.  This logic\nmay be suppressed be defining this setting."}, {"type": 3, "name": "BINFMT_EXEPATH", "value": "n", "user_value": 0, "dep": "y", "prompt": "Support PATH variable", "cond": "!DISABLE_ENVIRON && !BINFMT_DISABLE", "defaults": [{"name": "n", "default": "n", "cond": "!DISABLE_ENVIRON && !BINFMT_DISABLE"}], "help": "Use the contents of the PATH environment variable to locate executable\nfiles.  Default: n", "children": [{"type": 47, "name": "PATH_INITIAL", "value": "", "user_value": null, "dep": "n", "prompt": "Initial PATH Value", "cond": "BINFMT_EXEPATH && !BINFMT_DISABLE", "defaults": [{"name": "", "default": "", "cond": "BINFMT_EXEPATH && !BINFMT_DISABLE"}], "help": "The initial value of the PATH variable.  This is the colon-separated\nlist of absolute paths.  E.g., \"/bin:/usr/bin:/sbin\""}]}, {"type": 3, "name": "NXFLAT", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable the NXFLAT Binary Format", "cond": "!BINFMT_DISABLE", "defaults": [{"name": "n", "default": "n", "cond": "!BINFMT_DISABLE"}], "selects": [{"symbol": "PIC", "cond": "!BINFMT_DISABLE"}], "help": "Enable support for the NXFLAT binary format.  Default: n", "children": [{"type": 3, "name": "NXFLAT_DUMPBUFFER", "value": "n", "user_value": null, "dep": "n", "prompt": "Dump NXFLAT buffers", "cond": "DEBUG_INFO && NXFLAT && !BINFMT_DISABLE", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && NXFLAT && !BINFMT_DISABLE"}]}]}, {"type": 3, "name": "ELF", "value": "y", "user_value": 2, "dep": "y", "prompt": "Enable the ELF Binary Format", "cond": "!BINFMT_DISABLE", "defaults": [{"name": "n", "default": "n", "cond": "!BINFMT_DISABLE"}], "selects": [{"symbol": "LIBC_ARCH_ELF", "cond": "!BINFMT_DISABLE"}], "help": "Enable support for the ELF binary format.  Default: n", "children": [{"type": 27, "name": "ELF_ALIGN_LOG2", "value": "2", "user_value": "2", "dep": "y", "prompt": "Log2 Section Alignment", "cond": "ELF && !BINFMT_DISABLE", "defaults": [{"name": "2", "default": "2", "cond": "ELF && !BINFMT_DISABLE"}], "help": "Align all sections to this Log2 value:  0->1, 1->2, 2->4, etc."}, {"type": 27, "name": "ELF_STACKSIZE", "value": "2048", "user_value": "2048", "dep": "y", "prompt": "ELF Stack Size", "cond": "ELF && !BINFMT_DISABLE", "defaults": [{"name": "2048", "default": "2048", "cond": "ELF && !BINFMT_DISABLE"}], "help": "This is the default stack size that will be used when starting ELF binaries."}, {"type": 27, "name": "ELF_BUFFERSIZE", "value": "128", "user_value": "128", "dep": "y", "prompt": "ELF I/O Buffer Size", "cond": "ELF && !BINFMT_DISABLE", "defaults": [{"name": "128", "default": "128", "cond": "ELF && !BINFMT_DISABLE"}], "help": "This is an I/O buffer that is used to access the ELF file.  Variable length items\nwill need to be read (such as symbol names).  This is really just this initial\nsize of the buffer; it will be reallocated as necessary to hold large symbol\nnames).  Default: 128"}, {"type": 27, "name": "ELF_BUFFERINCR", "value": "32", "user_value": "32", "dep": "y", "prompt": "ELF I/O Buffer Realloc Increment", "cond": "ELF && !BINFMT_DISABLE", "defaults": [{"name": "32", "default": "32", "cond": "ELF && !BINFMT_DISABLE"}], "help": "This is an I/O buffer that is used to access the ELF file.  Variable length items\nwill need to be read (such as symbol names).  This value specifies the size\nincrement to use each time the buffer is reallocated.  Default: 32"}, {"type": 3, "name": "ELF_DUMPBUFFER", "value": "n", "user_value": null, "dep": "n", "prompt": "Dump ELF buffers", "cond": "DEBUG_INFO && ELF && !BINFMT_DISABLE", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && ELF && !BINFMT_DISABLE"}], "help": "Dump various ELF buffers for debug purposes"}, {"type": 47, "name": "ELF_EXIDX_SECTNAME", "value": "", "user_value": null, "dep": "n", "prompt": "ELF Section Name for Exception Index", "cond": "UCLIBCXX_EXCEPTION && ELF && !BINFMT_DISABLE", "defaults": [{"name": ".ARM.exidx", "default": ".ARM.exidx", "cond": "UCLIBCXX_EXCEPTION && ELF && !BINFMT_DISABLE"}], "help": "Set the name string for the exception index section on the ELF modules to\nbe loaded by the ELF binary loader.\n\nThis is needed to support exception handling on loadable ELF modules."}]}, {"type": 3, "name": "BUILTIN", "value": "y", "user_value": 2, "dep": "y", "prompt": "Support Builtin Applications", "cond": "((!BUILD_PROTECTED && !BUILD_KERNEL) || EXPERIMENTAL) && !BINFMT_DISABLE", "defaults": [{"name": "n", "default": "n", "cond": "((!BUILD_PROTECTED && !BUILD_KERNEL) || EXPERIMENTAL) && !BINFMT_DISABLE"}], "help": "Enable support for builtin applications.  This features assigns a string\nname to an application and in addition if FS_BINFS is defined, retaining\nthose names in a file system from which they can be executed.  This feature\nis also the underlying requirement to support built-in applications in the\nNuttShell (NSH).\n\nISSUES:  This feature is highly coupled with logic in the apps/\nsub-directory and, as a consequence, cannot be used in environments\nthat do not include the standard NuttX apps/ nor in build\nconfigurations using BUILD_PROTECTED or BUILD_KERNEL."}, {"type": 3, "name": "BINFMT_PCODE", "value": "n", "user_value": null, "dep": "n", "prompt": "Support P-Code Applications", "cond": "INTERPRETERS_PCODE && ((!BUILD_PROTECTED && !BUILD_KERNEL) || EXPERIMENTAL) && !BINFMT_DISABLE", "defaults": [{"name": "n", "default": "n", "cond": "INTERPRETERS_PCODE && ((!BUILD_PROTECTED && !BUILD_KERNEL) || EXPERIMENTAL) && !BINFMT_DISABLE"}], "help": "Enable support for interpreted P-Code binaries.  P-Code binaries are\ngenerated by the NuttX Pascal compiler.\n\nNOTE:  You must first install and select the Pascal P-Code\ninterpreter before you can select this binary format.  The P-Code\ninterpreter is in the Pascal download package and can also be found\nin the NuttX Pascal GIT repository.  Read the README.txt file in the\nPascal package directory for more details.  The correct installation\ndirectory is: apps/interpreters.\n\nISSUES:  This feature is highly coupled with logic in the apps/\ndirectory and, as a consequence, cannot be used in environments that\ndo not include the standard NuttX apps/ directory nor in build\nconfigurations using BUILD_PROTECTED or BUILD_KERNEL.", "children": [{"type": 27, "name": "BINFMT_PCODE_STACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "P-code interpreter stack size", "cond": "BINFMT_PCODE && !BINFMT_DISABLE", "defaults": [{"name": "2048", "default": "2048", "cond": "BINFMT_PCODE && !BINFMT_DISABLE"}], "help": "This is the stack size that will be used when starting P-code interpreter."}, {"type": 27, "name": "BINFMT_PCODE_PRIORITY", "value": "", "user_value": null, "dep": "n", "prompt": "P-code interpreter priority", "cond": "BINFMT_PCODE && !BINFMT_DISABLE", "defaults": [{"name": "100", "default": "100", "cond": "BINFMT_PCODE && !BINFMT_DISABLE"}], "help": "This is the task_priority that will be used when starting P-code interpreter."}, {"type": 27, "name": "BINFMT_PCODE_VARSTACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "P-code variable stack size", "cond": "BINFMT_PCODE && !BINFMT_DISABLE", "defaults": [{"name": "1024", "default": "1024", "cond": "BINFMT_PCODE && !BINFMT_DISABLE"}], "help": "This size of the P-Code variable storage area to be allocated by the\nP-Code runtime."}, {"type": 27, "name": "BINFMT_PCODE_STRSTACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "P-code string stack size", "cond": "BINFMT_PCODE && !BINFMT_DISABLE", "defaults": [{"name": "128", "default": "128", "cond": "BINFMT_PCODE && !BINFMT_DISABLE"}], "help": "This size of the P-Code string stack area to be allocated by the\nP-Code runtime."}, {"type": 3, "name": "BINFMT_PCODE_TEST_FS", "value": "n", "user_value": null, "dep": "n", "prompt": "Mount a test file system", "cond": "FS_ROMFS && !DISABLE_MOUNTPOINT && BINFMT_PCODE && !BINFMT_DISABLE", "help": "Mount a test file system.  This test file system was used to verify\nthe P-Code binary format.", "children": [{"type": 27, "name": "BINFMT_PCODE_TEST_DEVMINOR", "value": "", "user_value": null, "dep": "n", "prompt": "Test file system minor device number", "cond": "BINFMT_PCODE_TEST_FS && BINFMT_PCODE && !BINFMT_DISABLE", "defaults": [{"name": "0", "default": "0", "cond": "BINFMT_PCODE_TEST_FS && BINFMT_PCODE && !BINFMT_DISABLE"}], "help": "The minor device number of the ROMFS block. For example, the N in\n/dev/ramN.  Used for registering the RAM block driver that will hold\nthe ROMFS file system containing the P-code files to be tested.\nDefault: 0"}, {"type": 47, "name": "BINFMT_PCODE_TEST_DEVPATH", "value": "", "user_value": null, "dep": "n", "prompt": "Test file system device Path", "cond": "BINFMT_PCODE_TEST_FS && BINFMT_PCODE && !BINFMT_DISABLE", "defaults": [{"name": "/dev/ram0", "default": "/dev/ram0", "cond": "BINFMT_PCODE_TEST_FS && BINFMT_PCODE && !BINFMT_DISABLE"}], "help": "The path to the ROMFS block driver device.  This must match\nBINFMT_PCODE_TEST_DEVMINOR.  Used for registering the RAM block\ndriver that will hold the ROMFS file system containing the P-code\nfiles to be tested.  Default: \"/dev/ram0\""}, {"type": 47, "name": "BINFMT_PCODE_TEST_MOUNTPOINT", "value": "", "user_value": null, "dep": "n", "prompt": "Test file system mount point", "cond": "BINFMT_PCODE_TEST_FS && BINFMT_PCODE && !BINFMT_DISABLE", "defaults": [{"name": "/bin", "default": "/bin", "cond": "BINFMT_PCODE_TEST_FS && BINFMT_PCODE && !BINFMT_DISABLE"}], "help": "Location where the test file system will be mounted"}]}, {"type": 3, "name": "BINFMT_PCODE_DUMPBUFFER", "value": "n", "user_value": null, "dep": "n", "prompt": "Dump P-code buffers", "cond": "DEBUG_INFO && BINFMT_PCODE && !BINFMT_DISABLE", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && BINFMT_PCODE && !BINFMT_DISABLE"}], "help": "Dump various P-code buffers for debug purposes"}]}, {"type": 3, "name": "PIC", "value": "n", "user_value": 0, "rev_dep": "NXFLAT && !BINFMT_DISABLE", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "BINFMT_CONSTRUCTORS", "value": "n", "user_value": null, "dep": "n", "prompt": "C++ Static Constructor Support", "cond": "HAVE_CXX && SCHED_STARTHOOK && ELF", "defaults": [{"name": "n", "default": "n", "cond": "HAVE_CXX && SCHED_STARTHOOK && ELF"}], "help": "Build in support for C++ constructors in loaded modules.  Currently\nonly support for ELF binary formats."}, {"type": 3, "name": "SYMTAB_ORDEREDBYNAME", "value": "n", "user_value": 0, "dep": "y", "prompt": "Symbol Tables Ordered by Name", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}]}, {"type": 31, "dep": "y", "prompt": "Library Routines", "cond": "y", "children": [{"type": 6, "dep": "y", "prompt": "Standard C Library Options", "cond": "y"}, {"type": 31, "dep": "y", "prompt": "Standard C I/O", "cond": "y", "children": [{"type": 3, "name": "STDIO_DISABLE_BUFFERING", "value": "n", "user_value": 0, "dep": "y", "prompt": "Disable STDIO Buffering", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Tiny systems may need to disable all support for I/O buffering in\norder to minimize the memory footprint.\n\nNOTE that even if STDIO buffering is enabled, you can still disable\nbuffering by setting CONFIG_STDIO_BUFFER_SIZE=0 or dynamically\nthrough the setvbuf() interface.  In this case, however,  memory\nused for buffering will be eliminated, of course, but there will be\nno reduction in static code size.  Only setting\nCONFIG_STDIO_DISABLE_BUFFERING will reduce static code size.\n\nThe setvbuf() interface is not available if\nCONFIG_STDIO_DISABLE_BUFFERING is selected."}, {"type": 27, "name": "STDIO_BUFFER_SIZE", "value": "64", "user_value": "64", "dep": "y", "prompt": "STDIO buffer size", "cond": "!STDIO_DISABLE_BUFFERING", "defaults": [{"name": "64", "default": "64", "cond": "!STDIO_DISABLE_BUFFERING"}], "help": "Size of buffers using within the C buffered I/O interfaces (printf,\nputchar, fwrite, etc.).  This function sets the initial I/O buffer\nsize.  Zero disables I/O buffering initially.  Any buffer size may\nbe subsequently modified using setvbuf()."}, {"type": 3, "name": "STDIO_LINEBUFFER", "value": "y", "user_value": 2, "dep": "y", "prompt": "STDIO line buffering", "cond": "!STDIO_DISABLE_BUFFERING", "defaults": [{"name": "y", "default": "y", "cond": "!STDIO_DISABLE_BUFFERING"}], "help": "Sets the default behavior to flush buffered I/O whenever a newline\ncharacter is found in the output data stream.  This setting just\nsets the initial default behavior of all streams.  The behavior of\nan individual stream can be changed via setvbuf()."}, {"type": 27, "name": "NUNGET_CHARS", "value": "2", "user_value": "2", "dep": "y", "prompt": "Number unget() characters", "cond": "y", "defaults": [{"name": "2", "default": "2", "cond": "y"}], "help": "Number of characters that can be buffered by ungetc() (Only if NFILE_STREAMS > 0)"}, {"type": 3, "name": "NOPRINTF_FIELDWIDTH", "value": "n", "user_value": 0, "dep": "y", "prompt": "Disable sprintf support fieldwidth", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "sprintf-related logic is a little smaller if we do not support field\nwidths."}, {"type": 3, "name": "LIBC_FLOATINGPOINT", "value": "y", "user_value": 2, "dep": "y", "prompt": "Enable floating point in printf", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "By default, floating point\nsupport in printf, sscanf, etc. is disabled."}, {"type": 3, "name": "LIBC_LONG_LONG", "value": "y", "user_value": 2, "dep": "y", "prompt": "Enable long long support in printf", "cond": "y", "defaults": [{"name": "y", "default": "y", "cond": "!DEFAULT_SMALL"}, {"name": "n", "default": "n", "cond": "DEFAULT_SMALL"}], "help": "Enables support for long long formats in printf, sscanf, etc. is\nenabled.  This is enabled by default but if you are trying to\nreduce the FLASH footprint, then disabling this feature is one\noption.  The FLASH saves comes not from disabling the long long\nformats, but rather from omitting the large long long arithmetic\nlibraries that will be drawn into the build if long long support\nis enabled."}, {"type": 3, "name": "LIBC_SCANSET", "value": "n", "user_value": 0, "dep": "y", "prompt": "Scanset support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Add scanset support to sscanf()."}, {"type": 4, "user_value": 2, "dep": "y", "prompt": "Newline Options", "cond": "y", "defaults": [{"name": "EOL_IS_EITHER_CRLF", "default": "y", "cond": "y"}], "help": "This selection determines the line terminating character that is used.\nSome environments may return CR as end-of-line, others LF, and others\nboth.  If not specified, the default is either CR or LF (but not both)\nas the line terminating charactor.", "children": [{"type": 3, "name": "EOL_IS_CR", "value": "n", "user_value": 0, "dep": "y", "prompt": "EOL is CR", "cond": "y"}, {"type": 3, "name": "EOL_IS_LF", "value": "n", "user_value": 0, "dep": "y", "prompt": "EOL is LF", "cond": "y"}, {"type": 3, "name": "EOL_IS_BOTH_CRLF", "value": "n", "user_value": 0, "dep": "y", "prompt": "EOL is CR and LF", "cond": "y"}, {"type": 3, "name": "EOL_IS_EITHER_CRLF", "value": "y", "user_value": 2, "dep": "y", "prompt": "EOL is CR or LF", "cond": "y"}]}, {"type": 3, "name": "MEMCPY_VIK", "value": "n", "user_value": 0, "dep": "y", "prompt": "Vik memcpy()", "cond": "!LIBC_ARCH_MEMCPY", "defaults": [{"name": "n", "default": "n", "cond": "!LIBC_ARCH_MEMCPY"}], "help": "Select this option to use the optimized memcpy() function by Daniel Vik.\nSelect this option for improved performance at the expense of increased\nsize. See licensing information in the top-level COPYING file."}]}, {"type": 3, "name": "LIBM", "value": "n", "user_value": 0, "dep": "y", "prompt": "Standard Math library", "cond": "!ARCH_MATH_H", "defaults": [{"name": "n", "default": "n", "cond": "!ARCH_MATH_H"}], "help": "By default, no math library will be provided by NuttX.  In this this case, it\nis assumed that (1) no math library is required, or (2) you will be using the\nmath.h header file and the libm library provided by your toolchain.\n\nThis is may be a very good choice is possible because your toolchain may have\nhave a highly optimized version of libm.\n\nAnother possibility is that you have a custom, architecture-specific math\nlibary and that the corresponding math.h file resides at arch/<architecture>/include/math.h.\nThe option is selected via ARCH_MATH_H.  If ARCH_MATH_H is selected,then the\ninclude/nuttx/libmath.h header file will be copied to include/math.h where it can\nbe used by your applications.\n\nIf ARCH_MATH_H is not defined, then this option can be selected to build a generic,\nmath library built into NuttX.  This math library comes from the Rhombus OS and\nwas written by Nick Johnson.  The Rhombus OS math library port was contributed by\nDarcy Gong."}, {"type": 31, "dep": "y", "prompt": "Architecture-Specific Support", "cond": "y", "children": [{"type": 3, "name": "ARCH_LOWPUTC", "value": "y", "user_value": 2, "dep": "y", "prompt": "Low-level console output", "cond": "y", "defaults": [{"name": "y", "default": "y", "cond": "y"}], "help": "architecture supports low-level, boot time console output"}, {"type": 3, "name": "ARCH_ROMGETC", "value": "n", "user_value": 0, "dep": "y", "prompt": "Support for ROM string access", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "In Harvard architectures, data accesses and instruction accesses\noccur on different buses, perhaps concurrently.  All data accesses\nare performed on the data bus unless special machine instructions\nare used to read data from the instruction address space.  Also, in\nthe typical MCU, the available SRAM data memory is much smaller that\nthe non-volatile FLASH instruction memory.  So if the application\nrequires many constant strings, the only practical solution may be\nto store those constant strings in FLASH memory where they can only\nbe accessed using architecture-specific machine instructions.\n\nIf ARCH_ROMGETC is defined, then the architecture logic must export\nthe function up_romgetc().  up_romgetc() will simply read one byte\nof data from the instruction space.\n\nIf ARCH_ROMGETC is selected, certain C stdio functions are effected: (1)\nAll format strings in printf, fprintf, sprintf, etc. are assumed to lie\nin FLASH (string arguments for %s are still assumed to reside in SRAM).\nAnd (2), the string argument to puts and fputs is assumed to reside\nin FLASH.  Clearly, these assumptions may have to modified for the\nparticular needs of your environment.  There is no \"one-size-fits-all\"\nsolution for this problem."}, {"type": 3, "name": "LIBC_ARCH_MEMCPY", "value": "n", "user_value": 0, "rev_dep": "(ARMV7A_MEMCPY && ARCH_TOOLCHAIN_GNU && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM) || (ARMV7R_MEMCPY && ARCH_TOOLCHAIN_GNU && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEXR7 || ARCH_CORTEXR7F) && ARCH_ARM) || (ARMV7M_MEMCPY && ARCH_TOOLCHAIN_GNU && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "LIBC_ARCH_MEMCMP", "value": "n", "user_value": 0, "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "LIBC_ARCH_MEMMOVE", "value": "n", "user_value": 0, "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "LIBC_ARCH_MEMSET", "value": "n", "user_value": 0, "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "LIBC_ARCH_STRCHR", "value": "n", "user_value": 0, "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "LIBC_ARCH_STRCMP", "value": "n", "user_value": 0, "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "LIBC_ARCH_STRCPY", "value": "n", "user_value": 0, "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "LIBC_ARCH_STRNCPY", "value": "n", "user_value": 0, "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "LIBC_ARCH_STRLEN", "value": "n", "user_value": 0, "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "LIBC_ARCH_STRNLEN", "value": "n", "user_value": 0, "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "LIBC_ARCH_ELF", "value": "y", "user_value": 2, "rev_dep": "MODULE || (ELF && !BINFMT_DISABLE) || (LIBC_DLLFCN && (EXPERIMENTAL || !BUILD_KERNEL))", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 3, "name": "LIBM_ARCH_CEIL", "value": "n", "user_value": null, "rev_dep": "ARMV8_LIBM && CONFIG_ARCH_DPFPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "LIBM && ARCH_CORTEXM33"}]}, {"type": 3, "name": "LIBM_ARCH_FLOOR", "value": "n", "user_value": null, "rev_dep": "ARMV8_LIBM && CONFIG_ARCH_DPFPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "LIBM && ARCH_CORTEXM33"}]}, {"type": 3, "name": "LIBM_ARCH_NEARBYINT", "value": "n", "user_value": null, "rev_dep": "ARMV8_LIBM && CONFIG_ARCH_DPFPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "LIBM && ARCH_CORTEXM33"}]}, {"type": 3, "name": "LIBM_ARCH_RINT", "value": "n", "user_value": null, "rev_dep": "ARMV8_LIBM && CONFIG_ARCH_DPFPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "LIBM && ARCH_CORTEXM33"}]}, {"type": 3, "name": "LIBM_ARCH_ROUND", "value": "n", "user_value": null, "rev_dep": "ARMV8_LIBM && CONFIG_ARCH_DPFPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "LIBM && ARCH_CORTEXM33"}]}, {"type": 3, "name": "LIBM_ARCH_TRUNC", "value": "n", "user_value": null, "rev_dep": "ARMV8_LIBM && CONFIG_ARCH_DPFPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "LIBM && ARCH_CORTEXM33"}]}, {"type": 3, "name": "LIBM_ARCH_CEILF", "value": "n", "user_value": null, "rev_dep": "ARMV8_LIBM && CONFIG_ARCH_FPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "LIBM && ARCH_CORTEXM33"}]}, {"type": 3, "name": "LIBM_ARCH_FLOORF", "value": "n", "user_value": null, "rev_dep": "ARMV8_LIBM && CONFIG_ARCH_FPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "LIBM && ARCH_CORTEXM33"}]}, {"type": 3, "name": "LIBM_ARCH_NEARBYINTF", "value": "n", "user_value": null, "rev_dep": "ARMV8_LIBM && CONFIG_ARCH_FPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "LIBM && ARCH_CORTEXM33"}]}, {"type": 3, "name": "LIBM_ARCH_RINTF", "value": "n", "user_value": null, "rev_dep": "ARMV8_LIBM && CONFIG_ARCH_FPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "LIBM && ARCH_CORTEXM33"}]}, {"type": 3, "name": "LIBM_ARCH_ROUNDF", "value": "n", "user_value": null, "rev_dep": "ARMV8_LIBM && CONFIG_ARCH_FPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "LIBM && ARCH_CORTEXM33"}]}, {"type": 3, "name": "LIBM_ARCH_TRUNCF", "value": "n", "user_value": null, "rev_dep": "ARMV8_LIBM && CONFIG_ARCH_FPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM", "dep": "n", "defaults": [{"name": "n", "default": "n", "cond": "LIBM && ARCH_CORTEXM33"}]}, {"type": 3, "name": "ARMV7A_MEMCPY", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable optimized memcpy() for ARMv7-A", "cond": "ARCH_TOOLCHAIN_GNU && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM", "selects": [{"symbol": "LIBC_ARCH_MEMCPY", "cond": "ARCH_TOOLCHAIN_GNU && (ARCH_CORTEXA5 || ARCH_CORTEXA8 || ARCH_CORTEXA9) && ARCH_ARM"}], "help": "Enable optimized ARMv7-A specific memcpy() library function"}, {"type": 3, "name": "ARMV7R_MEMCPY", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable optimized memcpy() for ARMv7-R", "cond": "ARCH_TOOLCHAIN_GNU && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEXR7 || ARCH_CORTEXR7F) && ARCH_ARM", "selects": [{"symbol": "LIBC_ARCH_MEMCPY", "cond": "ARCH_TOOLCHAIN_GNU && (ARCH_CORTEXR4 || ARCH_CORTEXR4F || ARCH_CORTEXR5 || ARCH_CORTEXR5F || ARCH_CORTEXR7 || ARCH_CORTEXR7F) && ARCH_ARM"}], "help": "Enable optimized ARMv7-R specific memcpy() library function"}, {"type": 3, "name": "ARMV7M_MEMCPY", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable optimized memcpy() for ARMv7-M", "cond": "ARCH_TOOLCHAIN_GNU && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM", "selects": [{"symbol": "LIBC_ARCH_MEMCPY", "cond": "ARCH_TOOLCHAIN_GNU && (ARCH_CORTEXM3 || ARCH_CORTEXM4 || ARCH_CORTEXM7) && ARCH_ARM"}], "help": "Enable optimized ARMv7-M specific memcpy() library function"}, {"type": 3, "name": "ARMV8_LIBM", "value": "n", "user_value": null, "dep": "n", "prompt": "Architecture specific optimizations", "cond": "LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM", "defaults": [{"name": "n", "default": "n", "cond": "LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM"}], "selects": [{"symbol": "LIBM_ARCH_CEIL", "cond": "CONFIG_ARCH_DPFPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM"}, {"symbol": "LIBM_ARCH_FLOOR", "cond": "CONFIG_ARCH_DPFPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM"}, {"symbol": "LIBM_ARCH_NEARBYINT", "cond": "CONFIG_ARCH_DPFPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM"}, {"symbol": "LIBM_ARCH_RINT", "cond": "CONFIG_ARCH_DPFPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM"}, {"symbol": "LIBM_ARCH_ROUND", "cond": "CONFIG_ARCH_DPFPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM"}, {"symbol": "LIBM_ARCH_TRUNC", "cond": "CONFIG_ARCH_DPFPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM"}, {"symbol": "LIBM_ARCH_CEILF", "cond": "CONFIG_ARCH_FPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM"}, {"symbol": "LIBM_ARCH_FLOORF", "cond": "CONFIG_ARCH_FPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM"}, {"symbol": "LIBM_ARCH_NEARBYINTF", "cond": "CONFIG_ARCH_FPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM"}, {"symbol": "LIBM_ARCH_RINTF", "cond": "CONFIG_ARCH_FPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM"}, {"symbol": "LIBM_ARCH_ROUNDF", "cond": "CONFIG_ARCH_FPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM"}, {"symbol": "LIBM_ARCH_TRUNCF", "cond": "CONFIG_ARCH_FPU && LIBM && ARCH_CORTEXM33 && ARCH_CORTEXM33 && ARCH_ARM"}], "help": "Enable ARMv8 specific floating point optimizations."}]}, {"type": 31, "dep": "y", "prompt": "stdlib Options", "cond": "y", "children": [{"type": 27, "name": "LIB_RAND_ORDER", "value": "1", "user_value": "1", "dep": "y", "prompt": "Order of the random number generate", "cond": "y", "defaults": [{"name": "1", "default": "1", "cond": "y"}], "ranges": [{"min": "1", "max": "3", "cond": "y"}], "help": "The order of the random number generator. 1=fast but very bad random\nnumbers, 3=slow but very good random numbers."}, {"type": 47, "name": "LIB_HOMEDIR", "value": "/", "user_value": "/", "dep": "y", "prompt": "Home directory", "cond": "!DISABLE_ENVIRON", "defaults": [{"name": "/", "default": "/", "cond": "!DISABLE_ENVIRON"}], "help": "The home directory to use with operations like such as 'cd ~'"}, {"type": 47, "name": "LIBC_TMPDIR", "value": "/tmp", "user_value": "/tmp", "dep": "y", "prompt": "Temporary file directory", "cond": "FS_WRITABLE", "defaults": [{"name": "/tmp", "default": "/tmp", "cond": "FS_WRITABLE"}], "help": "If a write-able file system is selected, this string will be\nprovided to specify the full path to a directory where temporary\nfiles can be created.  This would be a good application of RAM disk:\nTo provide temporary storage for application data."}, {"type": 27, "name": "LIBC_MAX_TMPFILE", "value": "32", "user_value": "32", "dep": "y", "prompt": "Maximum size of a temporary file path", "cond": "FS_WRITABLE", "defaults": [{"name": "32", "default": "32", "cond": "FS_WRITABLE"}], "help": "If a write-able file system is selected, then temporary file may be\nsupported at the path provided by LIBC_TMPDIR.  The tmpnam() interface\nkeeps a static copy of this last filename produced; this value is the\nmaximum size of that last filename.  This size is the size of the full\nfile path."}]}, {"type": 31, "dep": "y", "prompt": "Program Execution Options", "cond": "y", "children": [{"type": 3, "name": "LIBC_EXECFUNCS", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable exec[l|v] / posix_spawn() Support", "cond": "!BINFMT_DISABLE", "defaults": [{"name": "n", "default": "n", "cond": "!BINFMT_DISABLE"}], "help": "Enable support for the exec[l|v] family of functions that can be\nused to start other programs, terminating the current program and\nthe posix_spawn() familty of functions that can be used start other\nprograms without terminating the current program.  The typical\nusage of the exec[l|v] functions is (1) first call vfork() to create\na new thread, then (2) call exec[l|v] to replace the new thread with\na program from the file system.\n\nNOTE 1: This two step process start is completely unnecessary in\nNuttX and is provided only for compatibily with Unix systems.  These\nfunctions are essentially just wrapper functions that (1) call the\nnon-standard binfmt function 'exec', and then (2) exit(0).  Since\nthe new thread will be terminated by the exec[l|v] call, it really\nserved no purpose other than to suport Unix compatility.\n\nThe posix_spawn() functions do not have this inefficiency.\n\nNOTE 2: Support for exec[l|v] and posix_spawn() is conditional\nbecause they require additional support for symbol tables that\nwill not be available in the typical system.", "children": [{"type": 3, "name": "EXECFUNCS_HAVE_SYMTAB", "value": "n", "user_value": null, "dep": "n", "prompt": "Have symbol table", "cond": "LIBC_EXECFUNCS", "defaults": [{"name": "n", "default": "n", "cond": "BUILD_KERNEL && LIBC_EXECFUNCS"}, {"name": "y", "default": "y", "cond": "!BUILD_KERNEL && LIBC_EXECFUNCS"}], "help": "If you have a system symbol table, then you must select this\noption in order to use it.  Symbol tables are required in most\ncases in order to like executable programs to the base code.", "children": [{"type": 47, "name": "EXECFUNCS_SYMTAB", "value": "", "user_value": null, "dep": "n", "prompt": "Symbol table used by exec[l|v]", "cond": "EXECFUNCS_HAVE_SYMTAB && LIBC_EXECFUNCS", "defaults": [{"name": "g_symtab", "default": "g_symtab", "cond": "EXECFUNCS_HAVE_SYMTAB && LIBC_EXECFUNCS"}], "help": "The exec[l|v] and posix_spawn() functions are wrapper functions that\ncall the non-standard binfmt function 'exec').  The binfmt\nfunction 'exec' needs to have (1) a symbol table that provides the\nlist of symbols exported by the base code, and (2) the number of\nsymbols in that table.  This selection provides the name of that\nsymbol table."}, {"type": 27, "name": "EXECFUNCS_NSYMBOLS", "value": "", "user_value": null, "dep": "n", "prompt": "Number of Symbols in the Table", "cond": "EXECFUNCS_HAVE_SYMTAB && LIBC_EXECFUNCS", "defaults": [{"name": "0", "default": "0", "cond": "EXECFUNCS_HAVE_SYMTAB && LIBC_EXECFUNCS"}], "help": "The exec[l|v] and posix_spawn() functions are wrapper functions that\ncall the non-standard binfmt function 'exec').  The binfmt\nfunction 'exec' needs to have (1) a symbol table that provides the\nlist of symbols exported by the base code, and (2) the number of\nsymbols in that table.  This selection provides the number of\nsymbols in the symbol table."}]}]}, {"type": 27, "name": "POSIX_SPAWN_PROXY_STACKSIZE", "value": "1024", "user_value": "1024", "dep": "y", "prompt": "Spawn Stack Size", "cond": "y", "defaults": [{"name": "1024", "default": "1024", "cond": "y"}], "help": "If posix_spawn[p]() and task_spawn() use I/O redirection options,\nthey will require an intermediary/proxy task to muck with the file\ndescriptors.  This configuration item specifies the stack size\nused for the proxy. Default: 1024 bytes."}, {"type": 27, "name": "TASK_SPAWN_DEFAULT_STACKSIZE", "value": "2048", "user_value": "2048", "dep": "y", "prompt": "Default task_spawn Stack Size", "cond": "!ARCH_ADDRENV", "defaults": [{"name": "2048", "default": "2048", "cond": "!ARCH_ADDRENV"}], "help": "The actual size to use for the child task's stack can be set with\ntask_spawnattr_setstacksize().  This value specifies the default\nstack size to use if task_spawnattr_setstacksize() is not used.\nDefault: 2048."}]}, {"type": 31, "dep": "y", "prompt": "errno Decode Support", "cond": "y", "children": [{"type": 3, "name": "LIBC_STRERROR", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable strerror", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "strerror() is useful because it decodes 'errno' values into a human readable\nstrings.  But it can also require a lot of memory.  If this option is selected,\nstrerror() will still exist in the build but it will not decode error values.\nThis option should be used by other logic to decide if it should use strerror()\nor not.  For example, the NSH application will not use strerror() if this\noption is not selected; perror() will not use strerror() is this option is not\nselected (see also NSH_STRERROR).", "children": [{"type": 3, "name": "LIBC_STRERROR_SHORT", "value": "n", "user_value": null, "dep": "n", "prompt": "Use short error descriptions in strerror()", "cond": "LIBC_STRERROR", "defaults": [{"name": "n", "default": "n", "cond": "LIBC_STRERROR"}], "help": "If this option is selected, then strerror() will use a shortened string when\nit decodes the error.  Specifically, strerror() is simply use the string that\nis the common name for the error.  For example, the 'errno' value of 2 will\nproduce the string \"No such file or directory\" is LIBC_STRERROR_SHORT\nis not defined but the string \"ENOENT\" is LIBC_STRERROR_SHORT is defined."}]}, {"type": 3, "name": "LIBC_PERROR_STDOUT", "value": "n", "user_value": 0, "dep": "y", "prompt": "perror() to stdout", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "POSIX requires that perror() provide its output on stderr.  This option may\nbe defined, however, to provide perror() output that is serialized with\nother stdout messages."}]}, {"type": 31, "dep": "y", "prompt": "memcpy/memset Options", "cond": "y", "children": [{"type": 3, "name": "MEMCPY_VIK", "value": "n", "user_value": 0, "dep": "y", "prompt": "Vik memcpy()", "cond": "!LIBC_ARCH_MEMCPY", "defaults": [{"name": "n", "default": "n", "cond": "!LIBC_ARCH_MEMCPY"}], "help": "Select this option to use the optimized memcpy() function by Daniel Vik.\nSelect this option for improved performance at the expense of increased\nsize. See licensing information in the top-level COPYING file.", "children": [{"type": 3, "name": "MEMCPY_PRE_INC_PTRS", "value": "n", "user_value": null, "dep": "n", "prompt": "Pre-increment pointers", "cond": "MEMCPY_VIK", "defaults": [{"name": "n", "default": "n", "cond": "MEMCPY_VIK"}], "help": "Use pre-increment of pointers. Default is post increment of pointers."}, {"type": 3, "name": "MEMCPY_INDEXED_COPY", "value": "n", "user_value": null, "dep": "n", "prompt": "Array indexing", "cond": "MEMCPY_VIK", "defaults": [{"name": "y", "default": "y", "cond": "MEMCPY_VIK"}], "help": "Copying data using array indexing. Using this option, disables the\nMEMCPY_PRE_INC_PTRS option."}, {"type": 3, "name": "MEMCPY_64BIT", "value": "n", "user_value": null, "dep": "n", "prompt": "64-bit memcpy()", "cond": "MEMCPY_VIK", "defaults": [{"name": "n", "default": "n", "cond": "MEMCPY_VIK"}], "help": "Compiles memcpy() for architectures that suppport 64-bit operations\nefficiently."}]}, {"type": 3, "name": "MEMSET_OPTSPEED", "value": "n", "user_value": 0, "dep": "y", "prompt": "Optimize memset() for speed", "cond": "!LIBC_ARCH_MEMSET", "defaults": [{"name": "n", "default": "n", "cond": "!LIBC_ARCH_MEMSET"}], "help": "Select this option to use a version of memcpy() optimized for speed.\nDefault: memcpy() is optimized for size.", "children": [{"type": 3, "name": "MEMSET_64BIT", "value": "n", "user_value": null, "dep": "n", "prompt": "64-bit memset()", "cond": "MEMSET_OPTSPEED", "defaults": [{"name": "n", "default": "n", "cond": "MEMSET_OPTSPEED"}], "help": "Compiles memset() for architectures that suppport 64-bit operations\nefficiently."}]}]}, {"type": 3, "name": "LIBC_DLLFCN", "value": "n", "user_value": 0, "dep": "y", "prompt": "Shared library support", "cond": "EXPERIMENTAL || !BUILD_KERNEL", "defaults": [{"name": "n", "default": "n", "cond": "EXPERIMENTAL || !BUILD_KERNEL"}], "selects": [{"symbol": "LIBC_ARCH_ELF", "cond": "EXPERIMENTAL || !BUILD_KERNEL"}, {"symbol": "LIBC_MODLIB", "cond": "!BUILD_KERNEL && (EXPERIMENTAL || !BUILD_KERNEL)"}, {"symbol": "MODULE", "cond": "BUILD_FLAT && (EXPERIMENTAL || !BUILD_KERNEL)"}], "help": "Enabled support for user-space shared libraries.\n\nA work in progress, hence, marked EXPERIMENTAL"}, {"type": 3, "name": "LIBC_MODLIB", "value": "n", "user_value": 0, "rev_dep": "MODULE || (LIBC_DLLFCN && !BUILD_KERNEL && (EXPERIMENTAL || !BUILD_KERNEL))", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 31, "dep": "n", "prompt": "Module library configuration", "cond": "LIBC_MODLIB", "children": [{"type": 27, "name": "MODLIB_MAXDEPEND", "value": "", "user_value": null, "dep": "n", "prompt": "Max dependencies", "cond": "LIBC_MODLIB", "defaults": [{"name": "2", "default": "2", "cond": "LIBC_MODLIB"}], "help": "This setting controls the number of other modules that a new module\nmay depend on.  That is, when a new module in inserted via 'insmod'\nit may depend on symbols exported by other, already installed\nmodules.  This is the maximum number of modules that export symbols\nto the new module.  This maximum is artificial; it is used in the\ncurrent design because it uses some very simple, pre-allocated data\nstructures.\n\nAll dependencies logic my be eliminated by sett CONFIG_MODLIB_MAXDEPEND\nto zero."}, {"type": 27, "name": "MODLIB_ALIGN_LOG2", "value": "", "user_value": null, "dep": "n", "prompt": "Log2 Section Alignment", "cond": "LIBC_MODLIB", "defaults": [{"name": "2", "default": "2", "cond": "LIBC_MODLIB"}], "help": "Align all sections to this Log2 value:  0->1, 1->2, 2->4, etc."}, {"type": 27, "name": "MODLIB_BUFFERSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Module I/O Buffer Size", "cond": "LIBC_MODLIB", "defaults": [{"name": "128", "default": "128", "cond": "LIBC_MODLIB"}], "help": "This is an I/O buffer that is used to access the module file.\nVariable length items will need to be read (such as symbol names).\nThis is really just this initial size of the buffer; it will be\nreallocated as necessary to hold large symbol names).  Default: 128"}, {"type": 27, "name": "MODLIB_BUFFERINCR", "value": "", "user_value": null, "dep": "n", "prompt": "Module I/O Buffer Realloc Increment", "cond": "LIBC_MODLIB", "defaults": [{"name": "32", "default": "32", "cond": "LIBC_MODLIB"}], "help": "This is an I/O buffer that is used to access the module file.\nVariable length items will need to be read (such as symbol names).\nThis value specifies the size increment to use each time the\nbuffer is reallocated.  Default: 32"}, {"type": 3, "name": "MODLIB_DUMPBUFFER", "value": "n", "user_value": null, "dep": "n", "prompt": "Dump module buffers", "cond": "DEBUG_INFO && LIBC_MODLIB", "defaults": [{"name": "n", "default": "n", "cond": "DEBUG_INFO && LIBC_MODLIB"}], "help": "Dump various module buffers for debug purposes"}]}, {"type": 3, "name": "LIBC_WCHAR", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable wide-characters (Unicode) support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "By default, wide-characters support is disabled."}, {"type": 3, "name": "LIBC_LOCALE", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable I18N (LOCALE) support", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "By default, i18n (locale) support is disabled."}, {"type": 31, "dep": "y", "prompt": "Time/Time Zone Support", "cond": "y", "children": [{"type": 3, "name": "LIBC_LOCALTIME", "value": "n", "user_value": 0, "dep": "y", "prompt": "localtime API call support", "cond": "!DISABLE_ENVIRON", "defaults": [{"name": "n", "default": "n", "cond": "!DISABLE_ENVIRON"}], "help": "localtime API call support\n\nLogic currently depends on file system support with, at a minimum, these\nfiles in the zoneinfo directory:  GMT and posixrules.  An additional\ntimezone file is required for any additional, local time zone(s) and the\nenvironment variable TZ must be set to the name of that timezone file\nwhen tzset() is called.\n\nSee https://www.iana.org/time-zones .  See also nuttx/zoneinfo\nwhich provides a framework for incorporating the TZ database into a\nNuttX build.", "children": [{"type": 27, "name": "LIBC_TZ_MAX_TIMES", "value": "", "user_value": null, "dep": "n", "prompt": "Maximum number of times in timezone", "cond": "LIBC_LOCALTIME", "defaults": [{"name": "370", "default": "370", "cond": "LIBC_LOCALTIME"}], "help": "Timezone files with more than this number of times will not be usedi\n(tmecnt).\n\nWarning: Some files in IANA TZ database include many times.  The current\nposixrules file, for example, has timecnt = 236.  The value of\nTX_MAX_ITMES in the tzfile.h header file on my Linux system is 370, the\ndefault used here.  You may want to reduce this value for a smaller\nfootprint."}, {"type": 27, "name": "LIBC_TZ_MAX_TYPES", "value": "", "user_value": null, "dep": "n", "prompt": "Maximum number of TZ types", "cond": "LIBC_LOCALTIME", "defaults": [{"name": "20", "default": "20", "cond": "LIBC_LOCALTIME"}], "help": "Maximum number of local time types.  You may want to reduce this value\nfor a smaller footprint."}, {"type": 47, "name": "LIBC_TZDIR", "value": "", "user_value": null, "dep": "n", "prompt": "zoneinfo directory path", "cond": "LIBC_LOCALTIME", "defaults": [{"name": "/etc/zoneinfo", "default": "/etc/zoneinfo", "cond": "LIBC_LOCALTIME"}], "help": "This is the full path to the location where the TZ database is expected\nto be found."}, {"type": 3, "name": "LIB_ZONEINFO", "value": "n", "user_value": null, "dep": "n", "prompt": "TZ database", "cond": "LIBC_LOCALTIME", "defaults": [{"name": "n", "default": "n", "cond": "LIBC_LOCALTIME"}], "help": "Download and build the TZ/Olson database.", "children": [{"type": 3, "name": "LIB_ZONEINFO_ROMFS", "value": "n", "user_value": null, "dep": "n", "prompt": "Build ROMFS filesystem", "cond": "FS_ROMFS && LIB_ZONEINFO && LIBC_LOCALTIME", "defaults": [{"name": "n", "default": "n", "cond": "FS_ROMFS && LIB_ZONEINFO && LIBC_LOCALTIME"}], "help": "Build a mountable ROMFS filesystem containing the TZ/Olson database"}]}]}, {"type": 3, "name": "TIME_EXTENDED", "value": "n", "user_value": 0, "dep": "y", "prompt": "Add day of week, year support", "cond": "!LIBC_LOCALTIME", "defaults": [{"name": "n", "default": "n", "cond": "!LIBC_LOCALTIME"}], "help": "Selecting TIME_EXTENDED adds tm_wday, tm_yday and tm_isdst\nto the tm struct. This allows integration with 3rd party libraries\nthat expect the tm struct to contain these members.\n\nNote: tm_isdst is always 0"}]}, {"type": 3, "name": "ARCH_HAVE_TLS", "value": "y", "user_value": 2, "rev_dep": "(ARCH_ARM && y) || (ARCH_SIM && y)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Selected by the configuration system if the current architecture\nsupports TLS."}, {"type": 31, "dep": "y", "prompt": "Thread Local Storage (TLS)", "cond": "ARCH_HAVE_TLS", "children": [{"type": 3, "name": "TLS", "value": "n", "user_value": 0, "dep": "y", "prompt": "Thread Local Storage (TLS)", "cond": "ARCH_HAVE_TLS", "defaults": [{"name": "n", "default": "n", "cond": "ARCH_HAVE_TLS"}], "help": "Build in support for stack based thread local storage (TLS).", "children": [{"type": 27, "name": "TLS_LOG2_MAXSTACK", "value": "", "user_value": null, "dep": "n", "prompt": "Maximum stack size (log2)", "cond": "TLS && ARCH_HAVE_TLS", "defaults": [{"name": "13", "default": "13", "cond": "TLS && ARCH_HAVE_TLS"}], "ranges": [{"min": "11", "max": "24", "cond": "TLS && ARCH_HAVE_TLS"}], "help": "Stack based TLS works by fetch thread information from the beginning\nof the stack memory allocation.  In order to do this, the memory\nmust be aligned in such a way that the executing logic can simply\nmasking the current stack pointer to get the beginning of the stack\nallocation.\n\nThis setting specifies the alignment of the stack as a power of 2:\n11=2KB, 12=4KB, 13=8KB, etc.  The exact alignment is not so critical\nexcept that (1) a very large value can cause you to run out of\nalignable memory (and fail memory allocations), and (2) smaller\nvalues will limit the maximum size of the stack (hence the naming\nof this configuration value)."}, {"type": 27, "name": "TLS_NELEM", "value": "", "user_value": null, "dep": "n", "prompt": "Number of TLS elements", "cond": "TLS && ARCH_HAVE_TLS", "defaults": [{"name": "1", "default": "1", "cond": "TLS && ARCH_HAVE_TLS"}], "help": "The number of unique TLS elements.  These can be accessed with\nthe user library functions tls_get_element() and tls_set_element()."}]}]}, {"type": 31, "dep": "y", "prompt": "Network-Related Options", "cond": "y", "children": [{"type": 3, "name": "LIBC_IPv4_ADDRCONV", "value": "y", "user_value": 2, "dep": "y", "prompt": "IPv4 address conversions", "cond": "!NET_IPv4", "defaults": [{"name": "n", "default": "n", "cond": "!NET_IPv4"}]}, {"type": 3, "name": "LIBC_IPv6_ADDRCONV", "value": "y", "user_value": 2, "dep": "y", "prompt": "IPv6 address conversions", "cond": "!NET_IPv6", "defaults": [{"name": "n", "default": "n", "cond": "!NET_IPv6"}]}]}, {"type": 3, "name": "LIBC_NETDB", "value": "n", "user_value": 0, "rev_dep": "(NETDB_HOSTFILE && FS_READABLE) || (NETDB_DNSCLIENT && NET && NET_UDP)", "dep": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}]}, {"type": 31, "dep": "y", "prompt": "NETDB Support", "cond": "y", "children": [{"type": 3, "name": "NETDB_HOSTFILE", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "Network host file support", "cond": "FS_READABLE", "defaults": [{"name": "n", "default": "n", "cond": "FS_READABLE"}], "selects": [{"symbol": "LIBC_NETDB", "cond": "FS_READABLE"}], "help": "Enable network host table look ups via gethostbyname() and\ngethostbyaddr().", "children": [{"type": 47, "name": "NETDB_HOSTCONF_PATH", "value": "", "user_value": null, "dep": "n", "prompt": "Path to host configuration file", "cond": "NETDB_HOSTFILE", "defaults": [{"name": "/etc/hosts", "default": "/etc/hosts", "cond": "NETDB_HOSTFILE"}]}, {"type": 27, "name": "NETDB_MAX_ALTNAMES", "value": "", "user_value": null, "dep": "n", "prompt": "Max number of alternate host names", "cond": "NETDB_HOSTFILE", "defaults": [{"name": "4", "default": "4", "cond": "NETDB_HOSTFILE"}]}, {"type": 27, "name": "NETDB_BUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "gethostname() buffer size", "cond": "NETDB_HOSTFILE", "defaults": [{"name": "128", "default": "128", "cond": "NETDB_HOSTFILE"}]}]}, {"type": 3, "name": "NETDB_DNSCLIENT", "value": "n", "user_value": 0, "menuconfig": true, "dep": "y", "prompt": "DNS Name resolution", "cond": "NET && NET_UDP", "defaults": [{"name": "n", "default": "n", "cond": "NET && NET_UDP"}], "selects": [{"symbol": "LIBC_NETDB", "cond": "NET && NET_UDP"}], "help": "Enable support for the name resolution; Enable network host\nresolution via gethostbyname().", "children": [{"type": 27, "name": "NETDB_DNSCLIENT_ENTRIES", "value": "", "user_value": null, "dep": "n", "prompt": "Number of DNS resolver entries", "cond": "NETDB_DNSCLIENT", "defaults": [{"name": "0", "default": "0", "cond": "DEFAULT_SMALL && NETDB_DNSCLIENT"}, {"name": "8", "default": "8", "cond": "!DEFAULT_SMALL && NETDB_DNSCLIENT"}], "ranges": [{"min": "0", "max": "255", "cond": "NETDB_DNSCLIENT"}], "help": "Number of cached DNS resolver entries.  Default: 8.  Zero disables\nall cached name resolutions.\n\nDisabling the DNS cache means that each access call to\ngethostbyname() will result in a new DNS network query.  If\nCONFIG_NETDB_DNSCLIENT_ENTRIES is non-zero, then entries will be\ncached and if the name mapping can be found in that cache, the\nnetwork query can be avoid.  Of course, this is only useful if you\nquery the same name often and if the IP address of the name is\nstable.  If the IP address can change, then cachin DNS address\nmight have undesirable side-effects (see help for\nCONFIG_NETDB_DNSCLIENT_LIFESEC)."}, {"type": 27, "name": "NETDB_DNSCLIENT_NAMESIZE", "value": "", "user_value": null, "dep": "n", "prompt": "Max size of a cached hostname", "cond": "NETDB_DNSCLIENT", "defaults": [{"name": "32", "default": "32", "cond": "NETDB_DNSCLIENT"}], "help": "The size of a hostname string in the DNS resolver cache is fixed.\nThis setting provides the maximum size of a hostname.  Names longer\nthan this will be aliased!  Default: 32"}, {"type": 27, "name": "NETDB_DNSCLIENT_LIFESEC", "value": "", "user_value": null, "dep": "n", "prompt": "Life of a DNS cache entry (seconds)", "cond": "NETDB_DNSCLIENT", "defaults": [{"name": "3600", "default": "3600", "cond": "NETDB_DNSCLIENT"}], "help": "Cached entries in the name resolution cache older than this will not\nbe used.  Default: 1 hour.  Zero means that entries will not expire.\n\nSmall values of CONFIG_NETDB_DNSCLIENT_LIFESEC may result in more\nnetwork DNS queries; larger values can make a host unreachable for\nthe entire duration of the timeout value.  This might happen, for\nexample, if the remote host was assigned a different IP address by\na DHCP server."}, {"type": 27, "name": "NETDB_DNSCLIENT_MAXRESPONSE", "value": "", "user_value": null, "dep": "n", "prompt": "Max response size", "cond": "NETDB_DNSCLIENT", "defaults": [{"name": "96", "default": "96", "cond": "NETDB_DNSCLIENT"}], "help": "This setting determines the maximum size of response message that\ncan be received by the DNS resolver.  The default is 96 but may\nneed to be larger on enterprise networks (perhaps 176)."}, {"type": 3, "name": "NETDB_RESOLVCONF", "value": "n", "user_value": null, "dep": "n", "prompt": "DNS resolver file support", "cond": "FS_READABLE && NETDB_DNSCLIENT", "defaults": [{"name": "n", "default": "n", "cond": "FS_READABLE && NETDB_DNSCLIENT"}], "help": "Enable DNS server look ups in resolver file like /etc/resolv.conf.", "children": [{"type": 47, "name": "NETDB_RESOLVCONF_PATH", "value": "", "user_value": null, "dep": "n", "prompt": "Path to host configuration file", "cond": "NETDB_RESOLVCONF && NETDB_DNSCLIENT", "defaults": [{"name": "/etc/resolv.conf", "default": "/etc/resolv.conf", "cond": "NETDB_RESOLVCONF && NETDB_DNSCLIENT"}]}, {"type": 3, "name": "NETDB_RESOLVCONF_NONSTDPORT", "value": "n", "user_value": null, "dep": "n", "prompt": "Non-standard port support", "cond": "NETDB_RESOLVCONF && NETDB_DNSCLIENT", "defaults": [{"name": "n", "default": "n", "cond": "NETDB_RESOLVCONF && NETDB_DNSCLIENT"}], "help": "By default, the resolv.conf file will hold only records like:\n\n        nameserver xx.xx.xx.xx\n        nameserver xxxx:::::::xxxx\n\nThe default port of 53 is always assumed.\n\nIf this option is selected, then OpenBSD style resolv.conf files\nwill be supported.  This adds logic for a bracket port notation\nlike:\n\n        nameserver [xx.xx.xx.xx]:ppppp\n        nameserver [xxxx:::::::xxxx]:ppppp"}]}, {"type": 4, "user_value": null, "dep": "n", "prompt": "DNS server address type", "cond": "!NETDB_RESOLVCONF && NETDB_DNSCLIENT", "defaults": [{"name": "NETDB_DNSSERVER_IPv4", "default": "n", "cond": "NET_IPv4 && !NETDB_RESOLVCONF && NETDB_DNSCLIENT"}, {"name": "NETDB_DNSSERVER_IPv6", "default": "n", "cond": "!NET_IPv4 && NET_IPv6 && !NETDB_RESOLVCONF && NETDB_DNSCLIENT"}, {"name": "NETDB_DNSSERVER_NOADDR", "default": "n", "cond": "!NET_IPv4 && !NET_IPv6 && !NETDB_RESOLVCONF && NETDB_DNSCLIENT"}], "children": [{"type": 3, "name": "NETDB_DNSSERVER_NOADDR", "value": "n", "user_value": null, "dep": "n", "prompt": "No default DNS server address", "cond": "y", "help": "There is not default DNS nameserver address.  Application must call\ndns_add_server() at runtime to add the DNS server address."}, {"type": 3, "name": "NETDB_DNSSERVER_IPv4", "value": "n", "user_value": null, "dep": "n", "prompt": "IPv4 DNS server address", "cond": "NET_IPv4 && y", "help": "An IPv4 default DNS nameserver address will be provided.  Application\nmay overwrite this start default server address by calling\ndns_add_server() at runtime."}, {"type": 3, "name": "NETDB_DNSSERVER_IPv6", "value": "n", "user_value": null, "dep": "n", "prompt": "IPv6 DNS server address", "cond": "NET_IPv6 && y", "help": "An IPv6 default DNS nameserver address will be provided.  Application\nmay overwrite this start default server address by calling\ndns_add_server() at runtime."}]}, {"type": 24, "name": "NETDB_DNSSERVER_IPv4ADDR", "value": "", "user_value": null, "dep": "n", "prompt": "Target IPv4 address", "cond": "NETDB_DNSSERVER_IPv4 && NETDB_DNSCLIENT", "defaults": [{"name": "0x0a000001", "default": "0x0a000001", "cond": "NETDB_DNSSERVER_IPv4 && NETDB_DNSCLIENT"}], "help": "Default DNS server IPv4 address in host byte order.  Default value\n10.0.0.0.1.  This may be changed via dns_add_nameserver()."}, {"type": 24, "name": "NETDB_DNSSERVER_IPv6ADDR_1", "value": "", "user_value": null, "dep": "n", "prompt": "[0]", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT", "defaults": [{"name": "0xfc00", "default": "0xfc00", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT"}], "ranges": [{"min": "0x0", "max": "0xffff", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT"}], "help": "This is the default IP address of the DNS server.  This is a 16-bit\ninteger value in host order.  Each of the eight values forming the\nfull IPv6 address must be specified individually.  This is the first\nof the 8-values.  The default for all eight values is fc00::1."}, {"type": 24, "name": "NETDB_DNSSERVER_IPv6ADDR_2", "value": "", "user_value": null, "dep": "n", "prompt": "[1]", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT", "defaults": [{"name": "0x0000", "default": "0x0000", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT"}], "ranges": [{"min": "0x0", "max": "0xffff", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT"}], "help": "This is the default IP address of the DNS server.  This is a 16-bit\ninteger value in host order.  Each of the eight values forming the\nfull IPv6 address must be specified individually.  This is the second\nof the 8-values.  The default for all eight values is fc00::1."}, {"type": 24, "name": "NETDB_DNSSERVER_IPv6ADDR_3", "value": "", "user_value": null, "dep": "n", "prompt": "[2]", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT", "defaults": [{"name": "0x0000", "default": "0x0000", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT"}], "ranges": [{"min": "0x0", "max": "0xffff", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT"}], "help": "This is the default IP address of the DNS server.  This is a 16-bit\ninteger value in host order.  Each of the eight values forming the\nfull IPv6 address must be specified individually.  This is the third\nof the 8-values.  The default for all eight values is fc00::1."}, {"type": 24, "name": "NETDB_DNSSERVER_IPv6ADDR_4", "value": "", "user_value": null, "dep": "n", "prompt": "[3]", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT", "defaults": [{"name": "0x0000", "default": "0x0000", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT"}], "ranges": [{"min": "0x0", "max": "0xffff", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT"}], "help": "This is the default IP address of the DNS server.  This is a 16-bit\ninteger value in host order.  Each of the eight values forming the\nfull IPv6 address must be specified individually.  This is the fourth\nof the 8-values.  The default for all eight values is fc00::1."}, {"type": 24, "name": "NETDB_DNSSERVER_IPv6ADDR_5", "value": "", "user_value": null, "dep": "n", "prompt": "[4]", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT", "defaults": [{"name": "0x0000", "default": "0x0000", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT"}], "ranges": [{"min": "0x0", "max": "0xffff", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT"}], "help": "This is the default IP address of the DNS server.  This is a 16-bit\ninteger value in host order.  Each of the eight values forming the\nfull IPv6 address must be specified individually.  This is the fifth\nof the 8-values.  The default for all eight values is fc00::1."}, {"type": 24, "name": "NETDB_DNSSERVER_IPv6ADDR_6", "value": "", "user_value": null, "dep": "n", "prompt": "[5]", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT", "defaults": [{"name": "0x0000", "default": "0x0000", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT"}], "ranges": [{"min": "0x0", "max": "0xffff", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT"}], "help": "This is the default IP address of the DNS server.  This is a 16-bit\ninteger value in host order.  Each of the eight values forming the\nfull IPv6 address must be specified individually.  This is the sixth\nof the 8-values.  The default for all eight values is fc00::1."}, {"type": 24, "name": "NETDB_DNSSERVER_IPv6ADDR_7", "value": "", "user_value": null, "dep": "n", "prompt": "[6]", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT", "defaults": [{"name": "0x0000", "default": "0x0000", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT"}], "ranges": [{"min": "0x0", "max": "0xffff", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT"}], "help": "This is the default IP address of the DNS server.  This is a 16-bit\ninteger value in host order.  Each of the eight values forming the\nfull IPv6 address must be specified individually.  This is the seventh\nof the 8-values.  The default for all eight values is fc00::1."}, {"type": 24, "name": "NETDB_DNSSERVER_IPv6ADDR_8", "value": "", "user_value": null, "dep": "n", "prompt": "[7]", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT", "defaults": [{"name": "0x0001", "default": "0x0001", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT"}], "ranges": [{"min": "0x0", "max": "0xffff", "cond": "NETDB_DNSSERVER_IPv6 && NETDB_DNSCLIENT"}], "help": "This is the default IP address of the DNS server.  This is a 16-bit\ninteger value in host order.  Each of the eight values forming the\nfull IPv6 address must be specified individually.  This is the last\nof the 8-values.  The default for all eight values is fc00::1."}]}]}, {"type": 3, "name": "LIBC_IOCTL_VARIADIC", "value": "n", "user_value": 0, "dep": "y", "prompt": "Enable variadic ioctl()", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "By default, NuttX implements the \"old style,\" three-parameter,\nioctl() interface with this function prototype:\n\n        int ioctl(int fd, int req, unsigned long arg);\n\nThat function is implemented as part of the VFS.  If\nLIBC_IOCTL_VARIADIC is selected, then an additional compatibility\nlayer will be provided in the C library.  The enabled, then function\nprototype will become:\n\n        int ioctl(int fd, int req, ...);\n\nThe ioctl() is not controlled by any standard so it is really\narbitrary which format you used.  You may select the variadic\nfunction prototype with this option.  That will slightly increase\ncode size and ioctl() processing time.  It will not support a\nvariable number of arguments and it still always expects to see a\nthird argument of type 'unsigned long'.  The only benefit of this\nalternative function signature is that it may provide greater\ncompatibility if you are porting code from other platforms that use\nthe variadic ioctl() function.\n\nWARNING:  Use of this option could cause subtle system errors is\nthe third argument is omitted or if the sizeof the thread argument\nis anything other than sizeof (unsigned long).  Most small integers\nwill be promoted to 'int'.  The following assertion appears in ioctl():\n\n        DEBUGASSERT(sizeof(int)        == sizeof(unsigned long) &&\n                    sizeof(FAR void *) == sizeof(unsigned long));\n\nDo not enable this option if the above is not true.  32-bit ARM\nshould pass this test with all three types having sizeof(type) == 4\nbytes.  'float' should also be tested.  But 'long long' and 'double'\nare out of the question!  Don't event try to pass them.\n\nAnd what will happen if no third argument is passed?  In most cases,\nthis should just result in a garbage value for arg.  But you may\ndiscover cases where something worse happens!"}, {"type": 27, "name": "LIB_SENDFILE_BUFSIZE", "value": "512", "user_value": "512", "dep": "y", "prompt": "sendfile() buffer size", "cond": "y", "defaults": [{"name": "512", "default": "512", "cond": "y"}], "help": "Size of the I/O buffer to allocate in sendfile().  Default: 512b"}, {"type": 6, "dep": "y", "prompt": "Non-standard Library Support", "cond": "y"}, {"type": 3, "name": "LIB_CRC64_FAST", "value": "n", "user_value": 0, "dep": "y", "prompt": "Fast CRC64", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Enable the CRC64 lookup table to compute the CRC64 faster."}, {"type": 3, "name": "LIB_KBDCODEC", "value": "y", "user_value": 2, "dep": "y", "prompt": "Keyboard CODEC", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "In NuttX, a keyboard/keypad driver is simply a character driver that\nmay have an (optional) encoding/decoding layer on the data returned\nby the character driver. A keyboard may return simple text data\n(alphabetic, numeric, and punctuaction) or control characters\n(enter, control-C, etc.).  However, in addition, most keyboards\nsupport actions that cannot be represented as text data. Such\nactions include things like cursor controls (home, up arrow,\npage down, etc.), editing functions (insert, delete, etc.), volume\ncontrols, (mute, volume up, etc.) and other special functions.\nSome special encoding may be required to multiplex these two classes\nof data.\n\nThis option enables the functions that implement the encoding and\ndecoding of keyboard data.  These are the interfaces prototyped in\ninclude/nuttx/input/kbd_codec.h.  While not correctly a part of\nthe C library, it is included here because the decoding side of this\ninterface must be accessible by end user programs."}, {"type": 3, "name": "LIB_SLCDCODEC", "value": "n", "user_value": 0, "rev_dep": "LCD_BACKPACK && I2C && SLCD", "dep": "y", "prompt": "Segment LCD CODEC", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "In NuttX, a character-oriented, segment LCD (SLCD) driver is simply\na character device that may have an (optional) encoding/decoding\nlayer on the data provided to the SLCD driver.  The application may\nprovide simple text data (alphabetic, numeric, and punctuaction) or\ncontrol characters (enter, control-C, etc.).  However, in addition,\nmost SLCDs support actions that cannot be represented as text data.\nSuch actions include things like cursor controls (home, up arrow,\npage down, etc.) and other special functions (e.g., blinking).  Some\nspecial encoding may be required to multiplex these two classes of\ndata.\n\nThis option enables the functions that implement the encoding and\ndecoding of SLCD data.  These are the interfaces prototyped in\ninclude/nuttx/lcd/slcd_codec.h.  While not correctly a part of the C\nlibrary, it is included here because the encoding side of this\ninterface must be accessible by end user programs."}, {"type": 31, "dep": "n", "prompt": "User Work Queue Support", "cond": "(BUILD_PROTECTED || BUILD_KERNEL) && !DISABLE_SIGNALS", "children": [{"type": 3, "name": "LIB_USRWORK", "value": "n", "user_value": null, "dep": "n", "prompt": "User mode worker thread", "cond": "(BUILD_PROTECTED || BUILD_KERNEL) && !DISABLE_SIGNALS", "defaults": [{"name": "n", "default": "n", "cond": "(BUILD_PROTECTED || BUILD_KERNEL) && !DISABLE_SIGNALS"}], "help": "User space work queues can also be made available for deferred\nprocessing in the NuttX kernel build.", "children": [{"type": 27, "name": "LIB_USRWORKPRIORITY", "value": "", "user_value": null, "dep": "n", "prompt": "User mode priority worker thread priority", "cond": "LIB_USRWORK && (BUILD_PROTECTED || BUILD_KERNEL) && !DISABLE_SIGNALS", "defaults": [{"name": "100", "default": "100", "cond": "LIB_USRWORK && (BUILD_PROTECTED || BUILD_KERNEL) && !DISABLE_SIGNALS"}], "help": "The execution priority of the user-mode priority worker thread.  Default: 100"}, {"type": 27, "name": "LIB_USRWORKPERIOD", "value": "", "user_value": null, "dep": "n", "prompt": "User mode worker thread period", "cond": "LIB_USRWORK && (BUILD_PROTECTED || BUILD_KERNEL) && !DISABLE_SIGNALS", "defaults": [{"name": "100000", "default": "100000", "cond": "LIB_USRWORK && (BUILD_PROTECTED || BUILD_KERNEL) && !DISABLE_SIGNALS"}], "help": "How often the lower priority worker thread checks for work in units\nof microseconds. Default: 100*1000 (100 MS)."}, {"type": 27, "name": "LIB_USRWORKSTACKSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "User mode worker thread stack size", "cond": "LIB_USRWORK && (BUILD_PROTECTED || BUILD_KERNEL) && !DISABLE_SIGNALS", "defaults": [{"name": "2048", "default": "2048", "cond": "LIB_USRWORK && (BUILD_PROTECTED || BUILD_KERNEL) && !DISABLE_SIGNALS"}], "help": "The stack size allocated for the lower priority worker thread.  Default: 2K."}]}]}, {"type": 3, "name": "LIB_HEX2BIN", "value": "n", "user_value": 0, "dep": "y", "prompt": "Intel HEX to binary conversion library", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Build in support for conversions from Intel Hex format to binary.\nThis selection enables the interfaces of include/hex2bin.h."}, {"type": 6, "dep": "y", "prompt": "Basic CXX Support", "cond": "y"}, {"type": 3, "name": "C99_BOOL8", "value": "n", "user_value": 0, "dep": "y", "prompt": "sizeof(_Bool) is 8-bits", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "This setting means (1) your C++ compiler has sizeof(_Bool) == 8, (2)\nyour C compiler supports the C99 _Bool intrinsic type, and (2) that\nthe C99 _Bool type also has size 1."}, {"type": 3, "name": "HAVE_CXX", "value": "y", "user_value": 2, "dep": "y", "prompt": "Have C++ compiler", "cond": "y", "defaults": [{"name": "n", "default": "n", "cond": "y"}], "help": "Toolchain supports C++ and CXX, CXXFLAGS, and COMPILEXX have been\ndefined in the configurations Make.defs file.", "children": [{"type": 3, "name": "CXX_NEWLONG", "value": "n", "user_value": 0, "dep": "y", "prompt": "size_t is type long", "cond": "HAVE_CXX", "defaults": [{"name": "n", "default": "n", "cond": "HAVE_CXX"}], "help": "size_t may be type long or type int.  This matters for some\nC++ library routines because the NuttX size_t might not have\nthe same underlying type as your toolchain's size_t."}, {"type": 6, "dep": "y", "prompt": "LLVM C++ Library (libcxx)", "cond": "HAVE_CXX"}, {"type": 3, "name": "LIBCXX", "value": "n", "user_value": 0, "dep": "y", "prompt": "Build LLVM libcxx (must be installed)", "cond": "HAVE_CXX", "defaults": [{"name": "n", "default": "n", "cond": "HAVE_CXX"}], "help": "If you have installed libcxx into the NuttX source try, then it can\nbe built by selecting this option.  See the README.txt file in the\nlibcxx packet for information on installing libcxx.", "children": [{"type": 3, "name": "LIBCXX_EXCEPTION", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Exception Suppport", "cond": "LIBCXX && HAVE_CXX", "defaults": [{"name": "y", "default": "y", "cond": "LIBCXX && HAVE_CXX"}]}, {"type": 27, "name": "LIBCXX_IOSTREAM_BUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "IO Stream Buffer Size", "cond": "LIBCXX && HAVE_CXX", "defaults": [{"name": "32", "default": "32", "cond": "LIBCXX && HAVE_CXX"}]}, {"type": 3, "name": "LIBCXX_HAVE_LIBSUPCXX", "value": "n", "user_value": null, "dep": "n", "prompt": "Have libsupc++ (required)", "cond": "LIBCXX && HAVE_CXX", "defaults": [{"name": "y", "default": "y", "cond": "LIBCXX && HAVE_CXX"}], "help": "Select if your toolchain provides libsupc++.  This option is required\nat present because the built-in libsupc++ support is incomplete."}]}, {"type": 6, "dep": "y", "prompt": "uClibc++ Standard C++ Library", "cond": "HAVE_CXX"}, {"type": 3, "name": "UCLIBCXX", "value": "n", "user_value": 0, "dep": "y", "prompt": "Build uClibc++ (must be installed)", "cond": "HAVE_CXX", "defaults": [{"name": "n", "default": "n", "cond": "HAVE_CXX"}], "help": "If you have installed uClibc++ into the NuttX source try, then it can\nbe built by selecting this option.  See the README.txt file in the\nuClibc++ packet for information on installing uClibc++.", "children": [{"type": 3, "name": "UCLIBCXX_EXCEPTION", "value": "n", "user_value": null, "dep": "n", "prompt": "Enable Exception Suppport", "cond": "UCLIBCXX && HAVE_CXX", "defaults": [{"name": "y", "default": "y", "cond": "UCLIBCXX && HAVE_CXX"}]}, {"type": 27, "name": "UCLIBCXX_IOSTREAM_BUFSIZE", "value": "", "user_value": null, "dep": "n", "prompt": "IO Stream Buffer Size", "cond": "UCLIBCXX && HAVE_CXX", "defaults": [{"name": "32", "default": "32", "cond": "UCLIBCXX && HAVE_CXX"}]}, {"type": 3, "name": "UCLIBCXX_HAVE_LIBSUPCXX", "value": "n", "user_value": null, "dep": "n", "prompt": "Have libsupc++ (required)", "cond": "UCLIBCXX && HAVE_CXX", "defaults": [{"name": "y", "default": "y", "cond": "UCLIBCXX && HAVE_CXX"}], "help": "Select if your toolchain provides libsupc++.  This option is required\nat present because the built-in libsupc++ support is incomplete."}]}]}]}, {"type": 31, "dep": "y", "prompt": "Application Configuration", "cond": "y"}]};
